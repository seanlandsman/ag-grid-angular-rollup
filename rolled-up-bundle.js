(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __values(o) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
	    if (m) return m.call(o);
	    return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isFunction(x) {
	    return typeof x === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var _enable_super_gross_mode_that_will_cause_bad_things = false;
	var config = {
	    Promise: undefined,
	    set useDeprecatedSynchronousErrorHandling(value) {
	        if (value) {
	            var error = /*@__PURE__*/ new Error();
	            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
	        }
	        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
	            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
	        }
	        _enable_super_gross_mode_that_will_cause_bad_things = value;
	    },
	    get useDeprecatedSynchronousErrorHandling() {
	        return _enable_super_gross_mode_that_will_cause_bad_things;
	    },
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function hostReportError(err) {
	    setTimeout(function () { throw err; });
	}

	/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
	var empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) {
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            throw err;
	        }
	        else {
	            hostReportError(err);
	        }
	    },
	    complete: function () { }
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var errorObject = { e: {} };

	/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject.e = e;
	        return errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}

	/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
	var UnsubscriptionError = /*@__PURE__*/ (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        var _this = _super.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
	        _this.errors = errors;
	        _this.name = 'UnsubscriptionError';
	        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
	        return _this;
	    }
	    return UnsubscriptionError;
	}(Error));

	/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
	var Subscription = /*@__PURE__*/ (function () {
	    function Subscription(unsubscribe) {
	        this.closed = false;
	        this._parent = null;
	        this._parents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parent = null;
	        this._parents = null;
	        this._subscriptions = null;
	        var index = -1;
	        var len = _parents ? _parents.length : 0;
	        while (_parent) {
	            _parent.remove(this);
	            _parent = ++index < len && _parents[index] || null;
	        }
	        if (isFunction(_unsubscribe)) {
	            var trial = tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject.e instanceof UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
	            }
	        }
	        if (isArray(_subscriptions)) {
	            index = -1;
	            len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject(sub)) {
	                    var trial = tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject.e;
	                        if (err instanceof UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError(errors);
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var subscription = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (typeof subscription._addParent !== 'function') {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var subscriptions = this._subscriptions || (this._subscriptions = []);
	        subscriptions.push(subscription);
	        subscription._addParent(this);
	        return subscription;
	    };
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        if (!_parent || _parent === parent) {
	            this._parent = parent;
	        }
	        else if (!_parents) {
	            this._parents = [parent];
	        }
	        else if (_parents.indexOf(parent) === -1) {
	            _parents.push(parent);
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
	    ? /*@__PURE__*/ Symbol.for('rxSubscriber')
	    : '@@rxSubscriber';

	/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
	var Subscriber = /*@__PURE__*/ (function (_super) {
	    __extends(Subscriber, _super);
	    function Subscriber(destinationOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this.syncErrorValue = null;
	        _this.syncErrorThrown = false;
	        _this.syncErrorThrowable = false;
	        _this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                _this.destination = empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    _this.destination = empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (isTrustedSubscriber(destinationOrNext)) {
	                        var trustedSubscriber = destinationOrNext[rxSubscriber]();
	                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
	                        _this.destination = trustedSubscriber;
	                        trustedSubscriber.add(_this);
	                    }
	                    else {
	                        _this.syncErrorThrowable = true;
	                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                _this.syncErrorThrowable = true;
	                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
	                break;
	        }
	        return _this;
	    }
	    Subscriber.prototype[rxSubscriber] = function () { return this; };
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _a = this, _parent = _a._parent, _parents = _a._parents;
	        this._parent = null;
	        this._parents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parent = _parent;
	        this._parents = _parents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = _this;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== empty) {
	                context = Object.create(observerOrNext);
	                if (isFunction(context.unsubscribe)) {
	                    _this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = _this.unsubscribe.bind(_this);
	            }
	        }
	        _this._context = context;
	        _this._next = next;
	        _this._error = error;
	        _this._complete = complete;
	        return _this;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
	            if (this._error) {
	                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                if (useDeprecatedSynchronousErrorHandling) {
	                    throw err;
	                }
	                hostReportError(err);
	            }
	            else {
	                if (useDeprecatedSynchronousErrorHandling) {
	                    _parentSubscriber.syncErrorValue = err;
	                    _parentSubscriber.syncErrorThrown = true;
	                }
	                else {
	                    hostReportError(err);
	                }
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                throw err;
	            }
	            else {
	                hostReportError(err);
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        if (!config.useDeprecatedSynchronousErrorHandling) {
	            throw new Error('bad call');
	        }
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                parent.syncErrorValue = err;
	                parent.syncErrorThrown = true;
	                return true;
	            }
	            else {
	                hostReportError(err);
	                return true;
	            }
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	function isTrustedSubscriber(obj) {
	    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber]);
	}

	/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber]) {
	            return nextOrObserver[rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber(empty);
	    }
	    return new Subscriber(nextOrObserver, error, complete);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function noop() { }

	/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
	function pipeFromArray(fns) {
	    if (!fns) {
	        return noop;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
	var Observable = /*@__PURE__*/ (function () {
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable$$1 = new Observable();
	        observable$$1.source = this;
	        observable$$1.operator = operator;
	        return observable$$1;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
	                this._subscribe(sink) :
	                this._trySubscribe(sink));
	        }
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            if (sink.syncErrorThrowable) {
	                sink.syncErrorThrowable = false;
	                if (sink.syncErrorThrown) {
	                    throw sink.syncErrorValue;
	                }
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                sink.syncErrorThrown = true;
	                sink.syncErrorValue = err;
	            }
	            sink.error(err);
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    if (subscription) {
	                        subscription.unsubscribe();
	                    }
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        return source && source.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        if (operations.length === 0) {
	            return this;
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    if (!promiseCtor) {
	        promiseCtor = config.Promise || Promise;
	    }
	    if (!promiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return promiseCtor;
	}

	/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
	var ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var _this = _super.call(this, 'object unsubscribed') || this;
	        _this.name = 'ObjectUnsubscribedError';
	        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
	        return _this;
	    }
	    return ObjectUnsubscribedError;
	}(Error));

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var SubjectSubscription = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        var _this = _super.call(this) || this;
	        _this.subject = subject;
	        _this.subscriber = subscriber;
	        _this.closed = false;
	        return _this;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
	var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        return _this;
	    }
	    return SubjectSubscriber;
	}(Subscriber));
	var Subject = /*@__PURE__*/ (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.observers = [];
	        _this.closed = false;
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype[rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable));
	var AnonymousSubject = /*@__PURE__*/ (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function refCount() {
	    return function refCountOperatorFunction(source) {
	        return source.lift(new RefCountOperator(source));
	    };
	}
	var RefCountOperator = /*@__PURE__*/ (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
	var ConnectableObservable = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._refCount = 0;
	        _this._isComplete = false;
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            this._isComplete = false;
	            connection = this._connection = new Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount()(this);
	    };
	    return ConnectableObservable;
	}(Observable));
	var connectableProto = ConnectableObservable.prototype;
	var connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subject: { value: null, writable: true },
	    _connection: { value: null, writable: true },
	    _subscribe: { value: connectableProto._subscribe },
	    _isComplete: { value: connectableProto._isComplete, writable: true },
	    getSubject: { value: connectableProto.getSubject },
	    connect: { value: connectableProto.connect },
	    refCount: { value: connectableProto.refCount }
	};
	var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this.connectable._isComplete = true;
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(SubjectSubscriber));
	var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount$$1 = connectable._refCount;
	        if (refCount$$1 <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount$$1 - 1;
	        if (refCount$$1 > 1) {
	            this.connection = null;
	            return;
	        }
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
	var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(GroupBySubscriber, _super);
	    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.elementSelector = elementSelector;
	        _this.durationSelector = durationSelector;
	        _this.subjectSelector = subjectSelector;
	        _this.groups = null;
	        _this.attemptedToUnsubscribe = false;
	        _this.count = 0;
	        return _this;
	    }
	    GroupBySubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            this.error(err);
	            return;
	        }
	        this._group(value, key);
	    };
	    GroupBySubscriber.prototype._group = function (value, key) {
	        var groups = this.groups;
	        if (!groups) {
	            groups = this.groups = new Map();
	        }
	        var group = groups.get(key);
	        var element;
	        if (this.elementSelector) {
	            try {
	                element = this.elementSelector(value);
	            }
	            catch (err) {
	                this.error(err);
	            }
	        }
	        else {
	            element = value;
	        }
	        if (!group) {
	            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
	            groups.set(key, group);
	            var groupedObservable = new GroupedObservable(key, group, this);
	            this.destination.next(groupedObservable);
	            if (this.durationSelector) {
	                var duration = void 0;
	                try {
	                    duration = this.durationSelector(new GroupedObservable(key, group));
	                }
	                catch (err) {
	                    this.error(err);
	                    return;
	                }
	                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
	            }
	        }
	        if (!group.closed) {
	            group.next(element);
	        }
	    };
	    GroupBySubscriber.prototype._error = function (err) {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	            });
	            groups.clear();
	        }
	        this.destination.error(err);
	    };
	    GroupBySubscriber.prototype._complete = function () {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	            });
	            groups.clear();
	        }
	        this.destination.complete();
	    };
	    GroupBySubscriber.prototype.removeGroup = function (key) {
	        this.groups.delete(key);
	    };
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.attemptedToUnsubscribe = true;
	            if (this.count === 0) {
	                _super.prototype.unsubscribe.call(this);
	            }
	        }
	    };
	    return GroupBySubscriber;
	}(Subscriber));
	var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(GroupDurationSubscriber, _super);
	    function GroupDurationSubscriber(key, group, parent) {
	        var _this = _super.call(this, group) || this;
	        _this.key = key;
	        _this.group = group;
	        _this.parent = parent;
	        return _this;
	    }
	    GroupDurationSubscriber.prototype._next = function (value) {
	        this.complete();
	    };
	    GroupDurationSubscriber.prototype._unsubscribe = function () {
	        var _a = this, parent = _a.parent, key = _a.key;
	        this.key = this.parent = null;
	        if (parent) {
	            parent.removeGroup(key);
	        }
	    };
	    return GroupDurationSubscriber;
	}(Subscriber));
	var GroupedObservable = /*@__PURE__*/ (function (_super) {
	    __extends(GroupedObservable, _super);
	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.groupSubject = groupSubject;
	        _this.refCountSubscription = refCountSubscription;
	        return _this;
	    }
	    GroupedObservable.prototype._subscribe = function (subscriber) {
	        var subscription = new Subscription();
	        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
	        if (refCountSubscription && !refCountSubscription.closed) {
	            subscription.add(new InnerRefCountSubscription(refCountSubscription));
	        }
	        subscription.add(groupSubject.subscribe(subscriber));
	        return subscription;
	    };
	    return GroupedObservable;
	}(Observable));
	var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
	    __extends(InnerRefCountSubscription, _super);
	    function InnerRefCountSubscription(parent) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        parent.count++;
	        return _this;
	    }
	    InnerRefCountSubscription.prototype.unsubscribe = function () {
	        var parent = this.parent;
	        if (!parent.closed && !this.closed) {
	            _super.prototype.unsubscribe.call(this);
	            parent.count -= 1;
	            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
	                parent.unsubscribe();
	            }
	        }
	    };
	    return InnerRefCountSubscription;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
	var BehaviorSubject = /*@__PURE__*/ (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.closed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasError) {
	            throw this.thrownError;
	        }
	        else if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return this._value;
	        }
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, this._value = value);
	    };
	    return BehaviorSubject;
	}(Subject));

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var Action = /*@__PURE__*/ (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return this;
	    };
	    return Action;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
	var AsyncAction = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        return clearInterval(id) && undefined || undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	        this.delay = null;
	    };
	    return AsyncAction;
	}(Action));

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var QueueAction = /*@__PURE__*/ (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction));

	var Scheduler = /*@__PURE__*/ (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = function () { return Date.now(); };
	    return Scheduler;
	}());

	/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
	var AsyncScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        var _this = _super.call(this, SchedulerAction, function () {
	            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
	                return AsyncScheduler.delegate.now();
	            }
	            else {
	                return now();
	            }
	        }) || this;
	        _this.actions = [];
	        _this.active = false;
	        _this.scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
	            return AsyncScheduler.delegate.schedule(work, delay, state);
	        }
	        else {
	            return _super.prototype.schedule.call(this, work, delay, state);
	        }
	    };
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift());
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var QueueScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
	var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
	function empty$1(scheduler) {
	    return scheduler ? emptyScheduled(scheduler) : EMPTY;
	}
	function emptyScheduled(scheduler) {
	    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var subscribeToArray = function (array) {
	    return function (subscriber) {
	        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        if (!subscriber.closed) {
	            subscriber.complete();
	        }
	    };
	};

	/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
	function fromArray(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToArray(input));
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var sub = new Subscription();
	            var i = 0;
	            sub.add(scheduler.schedule(function () {
	                if (i === input.length) {
	                    subscriber.complete();
	                    return;
	                }
	                subscriber.next(input[i++]);
	                if (!subscriber.closed) {
	                    sub.add(this.schedule());
	                }
	            }));
	            return sub;
	        });
	    }
	}

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function scalar(value) {
	    var result = new Observable(function (subscriber) {
	        subscriber.next(value);
	        subscriber.complete();
	    });
	    result._isScalar = true;
	    result.value = value;
	    return result;
	}

	/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */
	function of() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = args[args.length - 1];
	    if (isScheduler(scheduler)) {
	        args.pop();
	    }
	    else {
	        scheduler = undefined;
	    }
	    switch (args.length) {
	        case 0:
	            return empty$1(scheduler);
	        case 1:
	            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);
	        default:
	            return fromArray(args, scheduler);
	    }
	}

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function throwError(error, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) { return subscriber.error(error); });
	    }
	    else {
	        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
	    }
	}
	function dispatch(_a) {
	    var error = _a.error, subscriber = _a.subscriber;
	    subscriber.error(error);
	}

	/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
	var Notification = /*@__PURE__*/ (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.error);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.error);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return of(this.value);
	            case 'E':
	                return throwError(this.error);
	            case 'C':
	                return empty$1();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return Notification.undefinedValueNotification;
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.scheduler = scheduler;
	        _this.delay = delay;
	        return _this;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification.createError(err));
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification.createComplete());
	    };
	    return ObserveOnSubscriber;
	}(Subscriber));
	var ObserveOnMessage = /*@__PURE__*/ (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
	var ReplaySubject = /*@__PURE__*/ (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) {
	            bufferSize = Number.POSITIVE_INFINITY;
	        }
	        if (windowTime === void 0) {
	            windowTime = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this) || this;
	        _this.scheduler = scheduler;
	        _this._events = [];
	        _this._infiniteTimeWindow = false;
	        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        _this._windowTime = windowTime < 1 ? 1 : windowTime;
	        if (windowTime === Number.POSITIVE_INFINITY) {
	            _this._infiniteTimeWindow = true;
	            _this.next = _this.nextInfiniteTimeWindow;
	        }
	        else {
	            _this.next = _this.nextTimeWindow;
	        }
	        return _this;
	    }
	    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
	        var _events = this._events;
	        _events.push(value);
	        if (_events.length > this._bufferSize) {
	            _events.shift();
	        }
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype.nextTimeWindow = function (value) {
	        this._events.push(new ReplayEvent(this._getNow(), value));
	        this._trimBufferThenGetEvents();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var _infiniteTimeWindow = this._infiniteTimeWindow;
	        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
	        var scheduler = this.scheduler;
	        var len = _events.length;
	        var subscription;
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.isStopped || this.hasError) {
	            subscription = Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            subscription = new SubjectSubscription(this, subscriber);
	        }
	        if (scheduler) {
	            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
	        }
	        if (_infiniteTimeWindow) {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i]);
	            }
	        }
	        else {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i].value);
	            }
	        }
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	        }
	        return subscription;
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
	        var now = this._getNow();
	        var _bufferSize = this._bufferSize;
	        var _windowTime = this._windowTime;
	        var _events = this._events;
	        var eventsCount = _events.length;
	        var spliceCount = 0;
	        while (spliceCount < eventsCount) {
	            if ((now - _events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount++;
	        }
	        if (eventsCount > _bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
	        }
	        if (spliceCount > 0) {
	            _events.splice(0, spliceCount);
	        }
	        return _events;
	    };
	    return ReplaySubject;
	}(Subject));
	var ReplayEvent = /*@__PURE__*/ (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	}());

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
	var AsyncSubject = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.value = null;
	        _this.hasNext = false;
	        _this.hasCompleted = false;
	        return _this;
	    }
	    AsyncSubject.prototype._subscribe = function (subscriber) {
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.hasCompleted && this.hasNext) {
	            subscriber.next(this.value);
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.hasCompleted) {
	            this.value = value;
	            this.hasNext = true;
	        }
	    };
	    AsyncSubject.prototype.error = function (error) {
	        if (!this.hasCompleted) {
	            _super.prototype.error.call(this, error);
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        this.hasCompleted = true;
	        if (this.hasNext) {
	            _super.prototype.next.call(this, this.value);
	        }
	        _super.prototype.complete.call(this);
	    };
	    return AsyncSubject;
	}(Subject));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var nextHandle = 1;
	var tasksByHandle = {};
	function runIfPresent(handle) {
	    var cb = tasksByHandle[handle];
	    if (cb) {
	        cb();
	    }
	}
	var Immediate = {
	    setImmediate: function (cb) {
	        var handle = nextHandle++;
	        tasksByHandle[handle] = cb;
	        Promise.resolve().then(function () { return runIfPresent(handle); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        delete tasksByHandle[handle];
	    },
	};

	/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
	var AsapAction = /*@__PURE__*/ (function (_super) {
	    __extends(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            Immediate.clearImmediate(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AsapScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
	var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);

	/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
	    __extends(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            cancelAnimationFrame(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
	var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);

	/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
	        if (SchedulerAction === void 0) {
	            SchedulerAction = VirtualAction;
	        }
	        if (maxFrames === void 0) {
	            maxFrames = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error, action;
	        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        }
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler));
	var VirtualAction = /*@__PURE__*/ (function (_super) {
	    __extends(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) {
	            index = scheduler.index += 1;
	        }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (!this.id) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.active = false;
	        var action = new VirtualAction(this.scheduler, this.work);
	        this.add(action);
	        return action.schedule(state, delay);
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function identity(x) {
	    return x;
	}

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
	var ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {
	    __extends(ArgumentOutOfRangeError, _super);
	    function ArgumentOutOfRangeError() {
	        var _this = _super.call(this, 'argument out of range') || this;
	        _this.name = 'ArgumentOutOfRangeError';
	        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
	        return _this;
	    }
	    return ArgumentOutOfRangeError;
	}(Error));

	/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
	var EmptyError = /*@__PURE__*/ (function (_super) {
	    __extends(EmptyError, _super);
	    function EmptyError() {
	        var _this = _super.call(this, 'no elements in sequence') || this;
	        _this.name = 'EmptyError';
	        Object.setPrototypeOf(_this, EmptyError.prototype);
	        return _this;
	    }
	    return EmptyError;
	}(Error));

	/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
	var TimeoutError = /*@__PURE__*/ (function (_super) {
	    __extends(TimeoutError, _super);
	    function TimeoutError() {
	        var _this = _super.call(this, 'Timeout has occurred') || this;
	        _this.name = 'TimeoutError';
	        Object.setPrototypeOf(_this, TimeoutError.prototype);
	        return _this;
	    }
	    return TimeoutError;
	}(Error));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function map(project, thisArg) {
	    return function mapOperation(source) {
	        if (typeof project !== 'function') {
	            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	        }
	        return source.lift(new MapOperator(project, thisArg));
	    };
	}
	var MapOperator = /*@__PURE__*/ (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	var MapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.count = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var OuterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var InnerSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.outerValue = outerValue;
	        _this.outerIndex = outerIndex;
	        _this.index = 0;
	        return _this;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
	var subscribeToPromise = function (promise) {
	    return function (subscriber) {
	        promise.then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, hostReportError);
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function getSymbolIterator() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator = /*@__PURE__*/ getSymbolIterator();

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	var subscribeToIterable = function (iterable) {
	    return function (subscriber) {
	        var iterator$$1 = iterable[iterator]();
	        do {
	            var item = iterator$$1.next();
	            if (item.done) {
	                subscriber.complete();
	                break;
	            }
	            subscriber.next(item.value);
	            if (subscriber.closed) {
	                break;
	            }
	        } while (true);
	        if (typeof iterator$$1.return === 'function') {
	            subscriber.add(function () {
	                if (iterator$$1.return) {
	                    iterator$$1.return();
	                }
	            });
	        }
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	var subscribeToObservable = function (obj) {
	    return function (subscriber) {
	        var obs = obj[observable]();
	        if (typeof obs.subscribe !== 'function') {
	            throw new TypeError('Provided object does not correctly implement Symbol.observable');
	        }
	        else {
	            return obs.subscribe(subscriber);
	        }
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}

	/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
	var subscribeTo = function (result) {
	    if (result instanceof Observable) {
	        return function (subscriber) {
	            if (result._isScalar) {
	                subscriber.next(result.value);
	                subscriber.complete();
	                return undefined;
	            }
	            else {
	                return result.subscribe(subscriber);
	            }
	        };
	    }
	    else if (result && typeof result[observable] === 'function') {
	        return subscribeToObservable(result);
	    }
	    else if (isArrayLike(result)) {
	        return subscribeToArray(result);
	    }
	    else if (isPromise(result)) {
	        return subscribeToPromise(result);
	    }
	    else if (result && typeof result[iterator] === 'function') {
	        return subscribeToIterable(result);
	    }
	    else {
	        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = "You provided " + value + " where a stream was expected."
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        throw new TypeError(msg);
	    }
	};

	/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    return subscribeTo(result)(destination);
	}

	/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
	var NONE = {};
	var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CombineLatestSubscriber, _super);
	    function CombineLatestSubscriber(destination, resultSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.resultSelector = resultSelector;
	        _this.active = 0;
	        _this.values = [];
	        _this.observables = [];
	        return _this;
	    }
	    CombineLatestSubscriber.prototype._next = function (observable) {
	        this.values.push(NONE);
	        this.observables.push(observable);
	    };
	    CombineLatestSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            this.active = len;
	            this.toRespond = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(subscribeToResult(this, observable, observable, i));
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var values = this.values;
	        var oldVal = values[outerIndex];
	        var toRespond = !this.toRespond
	            ? 0
	            : oldVal === NONE ? --this.toRespond : this.toRespond;
	        values[outerIndex] = innerValue;
	        if (toRespond === 0) {
	            if (this.resultSelector) {
	                this._tryResultSelector(values);
	            }
	            else {
	                this.destination.next(values.slice());
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, values);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return CombineLatestSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	function isInteropObservable(input) {
	    return input && typeof input[observable] === 'function';
	}

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	function isIterable(input) {
	    return input && typeof input[iterator] === 'function';
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */
	function fromPromise(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToPromise(input));
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var sub = new Subscription();
	            sub.add(scheduler.schedule(function () {
	                return input.then(function (value) {
	                    sub.add(scheduler.schedule(function () {
	                        subscriber.next(value);
	                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
	                    }));
	                }, function (err) {
	                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
	                });
	            }));
	            return sub;
	        });
	    }
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */
	function fromIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    if (!scheduler) {
	        return new Observable(subscribeToIterable(input));
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var sub = new Subscription();
	            var iterator$$1;
	            sub.add(function () {
	                if (iterator$$1 && typeof iterator$$1.return === 'function') {
	                    iterator$$1.return();
	                }
	            });
	            sub.add(scheduler.schedule(function () {
	                iterator$$1 = input[iterator]();
	                sub.add(scheduler.schedule(function () {
	                    if (subscriber.closed) {
	                        return;
	                    }
	                    var value;
	                    var done;
	                    try {
	                        var result = iterator$$1.next();
	                        value = result.value;
	                        done = result.done;
	                    }
	                    catch (err) {
	                        subscriber.error(err);
	                        return;
	                    }
	                    if (done) {
	                        subscriber.complete();
	                    }
	                    else {
	                        subscriber.next(value);
	                        this.schedule();
	                    }
	                }));
	            }));
	            return sub;
	        });
	    }
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */
	function fromObservable(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToObservable(input));
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var sub = new Subscription();
	            sub.add(scheduler.schedule(function () {
	                var observable$$1 = input[observable]();
	                sub.add(observable$$1.subscribe({
	                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
	                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
	                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
	                }));
	            }));
	            return sub;
	        });
	    }
	}

	/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */
	function from(input, scheduler) {
	    if (!scheduler) {
	        if (input instanceof Observable) {
	            return input;
	        }
	        return new Observable(subscribeTo(input));
	    }
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return fromObservable(input, scheduler);
	        }
	        else if (isPromise(input)) {
	            return fromPromise(input, scheduler);
	        }
	        else if (isArrayLike(input)) {
	            return fromArray(input, scheduler);
	        }
	        else if (isIterable(input) || typeof input === 'string') {
	            return fromIterable(input, scheduler);
	        }
	    }
	    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
	}

	/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
	}
	var MergeMapOperator = /*@__PURE__*/ (function () {
	    function MergeMapOperator(project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        this.project = project;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result, value, index);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult(this, ish, value, index));
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return mergeMap(identity, concurrent);
	}

	/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */
	var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ForkJoinSubscriber, _super);
	    function ForkJoinSubscriber(destination, sources) {
	        var _this = _super.call(this, destination) || this;
	        _this.sources = sources;
	        _this.completed = 0;
	        _this.haveValues = 0;
	        var len = sources.length;
	        _this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            var source = sources[i];
	            var innerSubscription = subscribeToResult(_this, source, null, i);
	            if (innerSubscription) {
	                _this.add(innerSubscription);
	            }
	        }
	        return _this;
	    }
	    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        if (!innerSub._hasValue) {
	            innerSub._hasValue = true;
	            this.haveValues++;
	        }
	    };
	    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
	        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
	        var len = values.length;
	        if (!innerSub._hasValue) {
	            destination.complete();
	            return;
	        }
	        this.completed++;
	        if (this.completed !== len) {
	            return;
	        }
	        if (haveValues === len) {
	            destination.next(values);
	        }
	        destination.complete();
	    };
	    return ForkJoinSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
	function isNumeric(val) {
	    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
	}

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
	        return observables[0];
	    }
	    return mergeAll(concurrent)(fromArray(observables, scheduler));
	}

	/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
	var NEVER = /*@__PURE__*/ new Observable(noop);

	/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var RaceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RaceSubscriber, _super);
	    function RaceSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasFirst = false;
	        _this.observables = [];
	        _this.subscriptions = [];
	        return _this;
	    }
	    RaceSubscriber.prototype._next = function (observable) {
	        this.observables.push(observable);
	    };
	    RaceSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            for (var i = 0; i < len && !this.hasFirst; i++) {
	                var observable = observables[i];
	                var subscription = subscribeToResult(this, observable, observable, i);
	                if (this.subscriptions) {
	                    this.subscriptions.push(subscription);
	                }
	                this.add(subscription);
	            }
	            this.observables = null;
	        }
	    };
	    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (!this.hasFirst) {
	            this.hasFirst = true;
	            for (var i = 0; i < this.subscriptions.length; i++) {
	                if (i !== outerIndex) {
	                    var subscription = this.subscriptions[i];
	                    subscription.unsubscribe();
	                    this.remove(subscription);
	                }
	            }
	            this.subscriptions = null;
	        }
	        this.destination.next(innerValue);
	    };
	    return RaceSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
	var ZipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ZipSubscriber, _super);
	    function ZipSubscriber(destination, resultSelector, values) {
	        if (values === void 0) {
	            values = Object.create(null);
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.iterators = [];
	        _this.active = 0;
	        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
	        _this.values = values;
	        return _this;
	    }
	    ZipSubscriber.prototype._next = function (value) {
	        var iterators = this.iterators;
	        if (isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        }
	        else if (typeof value[iterator] === 'function') {
	            iterators.push(new StaticIterator(value[iterator]()));
	        }
	        else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value));
	        }
	    };
	    ZipSubscriber.prototype._complete = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        if (len === 0) {
	            this.destination.complete();
	            return;
	        }
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator$$1 = iterators[i];
	            if (iterator$$1.stillUnsubscribed) {
	                this.add(iterator$$1.subscribe(iterator$$1, i));
	            }
	            else {
	                this.active--;
	            }
	        }
	    };
	    ZipSubscriber.prototype.notifyInactive = function () {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ZipSubscriber.prototype.checkIterators = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        for (var i = 0; i < len; i++) {
	            var iterator$$1 = iterators[i];
	            if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator$$1 = iterators[i];
	            var result = iterator$$1.next();
	            if (iterator$$1.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        if (this.resultSelector) {
	            this._tryresultSelector(args);
	        }
	        else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };
	    ZipSubscriber.prototype._tryresultSelector = function (args) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return ZipSubscriber;
	}(Subscriber));
	var StaticIterator = /*@__PURE__*/ (function () {
	    function StaticIterator(iterator$$1) {
	        this.iterator = iterator$$1;
	        this.nextResult = iterator$$1.next();
	    }
	    StaticIterator.prototype.hasValue = function () {
	        return true;
	    };
	    StaticIterator.prototype.next = function () {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };
	    StaticIterator.prototype.hasCompleted = function () {
	        var nextResult = this.nextResult;
	        return nextResult && nextResult.done;
	    };
	    return StaticIterator;
	}());
	var StaticArrayIterator = /*@__PURE__*/ (function () {
	    function StaticArrayIterator(array) {
	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }
	    StaticArrayIterator.prototype[iterator] = function () {
	        return this;
	    };
	    StaticArrayIterator.prototype.next = function (value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
	    };
	    StaticArrayIterator.prototype.hasValue = function () {
	        return this.array.length > this.index;
	    };
	    StaticArrayIterator.prototype.hasCompleted = function () {
	        return this.array.length === this.index;
	    };
	    return StaticArrayIterator;
	}());
	var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
	    __extends(ZipBufferIterator, _super);
	    function ZipBufferIterator(destination, parent, observable) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        _this.observable = observable;
	        _this.stillUnsubscribed = true;
	        _this.buffer = [];
	        _this.isComplete = false;
	        return _this;
	    }
	    ZipBufferIterator.prototype[iterator] = function () {
	        return this;
	    };
	    ZipBufferIterator.prototype.next = function () {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { value: null, done: true };
	        }
	        else {
	            return { value: buffer.shift(), done: false };
	        }
	    };
	    ZipBufferIterator.prototype.hasValue = function () {
	        return this.buffer.length > 0;
	    };
	    ZipBufferIterator.prototype.hasCompleted = function () {
	        return this.buffer.length === 0 && this.isComplete;
	    };
	    ZipBufferIterator.prototype.notifyComplete = function () {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };
	    ZipBufferIterator.prototype.subscribe = function (value, index) {
	        return subscribeToResult(this, this.observable, this, index);
	    };
	    return ZipBufferIterator;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var AuditSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(AuditSubscriber, _super);
	    function AuditSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        return _this;
	    }
	    AuditSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	        if (!this.throttled) {
	            var duration = tryCatch(this.durationSelector)(value);
	            if (duration === errorObject) {
	                this.destination.error(errorObject.e);
	            }
	            else {
	                var innerSubscription = subscribeToResult(this, duration);
	                if (!innerSubscription || innerSubscription.closed) {
	                    this.clearThrottle();
	                }
	                else {
	                    this.add(this.throttled = innerSubscription);
	                }
	            }
	        }
	    };
	    AuditSubscriber.prototype.clearThrottle = function () {
	        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = null;
	            throttled.unsubscribe();
	        }
	        if (hasValue) {
	            this.value = null;
	            this.hasValue = false;
	            this.destination.next(value);
	        }
	    };
	    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this.clearThrottle();
	    };
	    AuditSubscriber.prototype.notifyComplete = function () {
	        this.clearThrottle();
	    };
	    return AuditSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var BufferSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferSubscriber, _super);
	    function BufferSubscriber(destination, closingNotifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.buffer = [];
	        _this.add(subscribeToResult(_this, closingNotifier));
	        return _this;
	    }
	    BufferSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	    };
	    return BufferSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferCountSubscriber, _super);
	    function BufferCountSubscriber(destination, bufferSize) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.buffer = [];
	        return _this;
	    }
	    BufferCountSubscriber.prototype._next = function (value) {
	        var buffer = this.buffer;
	        buffer.push(value);
	        if (buffer.length == this.bufferSize) {
	            this.destination.next(buffer);
	            this.buffer = [];
	        }
	    };
	    BufferCountSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer.length > 0) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferCountSubscriber;
	}(Subscriber));
	var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferSkipCountSubscriber, _super);
	    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.startBufferEvery = startBufferEvery;
	        _this.buffers = [];
	        _this.count = 0;
	        return _this;
	    }
	    BufferSkipCountSubscriber.prototype._next = function (value) {
	        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
	        this.count++;
	        if (count % startBufferEvery === 0) {
	            buffers.push([]);
	        }
	        for (var i = buffers.length; i--;) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                buffers.splice(i, 1);
	                this.destination.next(buffer);
	            }
	        }
	    };
	    BufferSkipCountSubscriber.prototype._complete = function () {
	        var _a = this, buffers = _a.buffers, destination = _a.destination;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferSkipCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
	var Context = /*@__PURE__*/ (function () {
	    function Context() {
	        this.buffer = [];
	    }
	    return Context;
	}());
	var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferTimeSubscriber, _super);
	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferTimeSpan = bufferTimeSpan;
	        _this.bufferCreationInterval = bufferCreationInterval;
	        _this.maxBufferSize = maxBufferSize;
	        _this.scheduler = scheduler;
	        _this.contexts = [];
	        var context = _this.openContext();
	        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
	        if (_this.timespanOnly) {
	            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	        else {
	            var closeState = { subscriber: _this, context: context };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        }
	        return _this;
	    }
	    BufferTimeSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        var filledBufferContext;
	        for (var i = 0; i < len; i++) {
	            var context_1 = contexts[i];
	            var buffer = context_1.buffer;
	            buffer.push(value);
	            if (buffer.length == this.maxBufferSize) {
	                filledBufferContext = context_1;
	            }
	        }
	        if (filledBufferContext) {
	            this.onBufferFull(filledBufferContext);
	        }
	    };
	    BufferTimeSubscriber.prototype._error = function (err) {
	        this.contexts.length = 0;
	        _super.prototype._error.call(this, err);
	    };
	    BufferTimeSubscriber.prototype._complete = function () {
	        var _a = this, contexts = _a.contexts, destination = _a.destination;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            destination.next(context_2.buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferTimeSubscriber.prototype._unsubscribe = function () {
	        this.contexts = null;
	    };
	    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
	        this.closeContext(context);
	        var closeAction = context.closeAction;
	        closeAction.unsubscribe();
	        this.remove(closeAction);
	        if (!this.closed && this.timespanOnly) {
	            context = this.openContext();
	            var bufferTimeSpan = this.bufferTimeSpan;
	            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
	            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    };
	    BufferTimeSubscriber.prototype.openContext = function () {
	        var context = new Context();
	        this.contexts.push(context);
	        return context;
	    };
	    BufferTimeSubscriber.prototype.closeContext = function (context) {
	        this.destination.next(context.buffer);
	        var contexts = this.contexts;
	        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
	        if (spliceIndex >= 0) {
	            contexts.splice(contexts.indexOf(context), 1);
	        }
	    };
	    return BufferTimeSubscriber;
	}(Subscriber));
	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevContext = state.context;
	    if (prevContext) {
	        subscriber.closeContext(prevContext);
	    }
	    if (!subscriber.closed) {
	        state.context = subscriber.openContext();
	        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
	    var context = subscriber.openContext();
	    var action = this;
	    if (!subscriber.closed) {
	        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(arg) {
	    var subscriber = arg.subscriber, context = arg.context;
	    subscriber.closeContext(context);
	}

	/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
	var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferToggleSubscriber, _super);
	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.openings = openings;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(subscribeToResult(_this, openings));
	        return _this;
	    }
	    BufferToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };
	    BufferToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_1 = contexts.shift();
	            context_1.subscription.unsubscribe();
	            context_1.buffer = null;
	            context_1.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._error.call(this, err);
	    };
	    BufferToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            this.destination.next(context_2.buffer);
	            context_2.subscription.unsubscribe();
	            context_2.buffer = null;
	            context_2.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._complete.call(this);
	    };
	    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
	    };
	    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.closeBuffer(innerSub.context);
	    };
	    BufferToggleSubscriber.prototype.openBuffer = function (value) {
	        try {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = closingSelector.call(this, value);
	            if (closingNotifier) {
	                this.trySubscribe(closingNotifier);
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
	        var contexts = this.contexts;
	        if (contexts && context) {
	            var buffer = context.buffer, subscription = context.subscription;
	            this.destination.next(buffer);
	            contexts.splice(contexts.indexOf(context), 1);
	            this.remove(subscription);
	            subscription.unsubscribe();
	        }
	    };
	    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
	        var contexts = this.contexts;
	        var buffer = [];
	        var subscription = new Subscription();
	        var context = { buffer: buffer, subscription: subscription };
	        contexts.push(context);
	        var innerSubscription = subscribeToResult(this, closingNotifier, context);
	        if (!innerSubscription || innerSubscription.closed) {
	            this.closeBuffer(context);
	        }
	        else {
	            innerSubscription.context = context;
	            this.add(innerSubscription);
	            subscription.add(innerSubscription);
	        }
	    };
	    return BufferToggleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(BufferWhenSubscriber, _super);
	    function BufferWhenSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.closingSelector = closingSelector;
	        _this.subscribing = false;
	        _this.openBuffer();
	        return _this;
	    }
	    BufferWhenSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferWhenSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferWhenSubscriber.prototype._unsubscribe = function () {
	        this.buffer = null;
	        this.subscribing = false;
	    };
	    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openBuffer();
	    };
	    BufferWhenSubscriber.prototype.notifyComplete = function () {
	        if (this.subscribing) {
	            this.complete();
	        }
	        else {
	            this.openBuffer();
	        }
	    };
	    BufferWhenSubscriber.prototype.openBuffer = function () {
	        var closingSubscription = this.closingSubscription;
	        if (closingSubscription) {
	            this.remove(closingSubscription);
	            closingSubscription.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (this.buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier = tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject) {
	            this.error(errorObject.e);
	        }
	        else {
	            closingSubscription = new Subscription();
	            this.closingSubscription = closingSubscription;
	            this.add(closingSubscription);
	            this.subscribing = true;
	            closingSubscription.add(subscribeToResult(this, closingNotifier));
	            this.subscribing = false;
	        }
	    };
	    return BufferWhenSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var CatchSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        var _this = _super.call(this, destination) || this;
	        _this.selector = selector;
	        _this.caught = caught;
	        return _this;
	    }
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err2) {
	                _super.prototype.error.call(this, err2);
	                return;
	            }
	            this._unsubscribeAndRecycle();
	            this.add(subscribeToResult(this, result));
	        }
	    };
	    return CatchSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var CountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CountSubscriber, _super);
	    function CountSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.count = 0;
	        _this.index = 0;
	        return _this;
	    }
	    CountSubscriber.prototype._next = function (value) {
	        if (this.predicate) {
	            this._tryPredicate(value);
	        }
	        else {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._tryPredicate = function (value) {
	        var result;
	        try {
	            result = this.predicate(value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._complete = function () {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };
	    return CountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DebounceSubscriber, _super);
	    function DebounceSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        _this.durationSubscription = null;
	        return _this;
	    }
	    DebounceSubscriber.prototype._next = function (value) {
	        try {
	            var result = this.durationSelector.call(this, value);
	            if (result) {
	                this._tryNext(value, result);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DebounceSubscriber.prototype._complete = function () {
	        this.emitValue();
	        this.destination.complete();
	    };
	    DebounceSubscriber.prototype._tryNext = function (value, duration) {
	        var subscription = this.durationSubscription;
	        this.value = value;
	        this.hasValue = true;
	        if (subscription) {
	            subscription.unsubscribe();
	            this.remove(subscription);
	        }
	        subscription = subscribeToResult(this, duration);
	        if (subscription && !subscription.closed) {
	            this.add(this.durationSubscription = subscription);
	        }
	    };
	    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            var value = this.value;
	            var subscription = this.durationSubscription;
	            if (subscription) {
	                this.durationSubscription = null;
	                subscription.unsubscribe();
	                this.remove(subscription);
	            }
	            this.value = null;
	            this.hasValue = false;
	            _super.prototype._next.call(this, value);
	        }
	    };
	    return DebounceSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.dueTime = dueTime;
	        _this.scheduler = scheduler;
	        _this.debouncedSubscription = null;
	        _this.lastValue = null;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            var lastValue = this.lastValue;
	            this.lastValue = null;
	            this.hasValue = false;
	            this.destination.next(lastValue);
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber));
	function dispatchNext$2(subscriber) {
	    subscriber.debouncedNext();
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DefaultIfEmptySubscriber, _super);
	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        var _this = _super.call(this, destination) || this;
	        _this.defaultValue = defaultValue;
	        _this.isEmpty = true;
	        return _this;
	    }
	    DefaultIfEmptySubscriber.prototype._next = function (value) {
	        this.isEmpty = false;
	        this.destination.next(value);
	    };
	    DefaultIfEmptySubscriber.prototype._complete = function () {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };
	    return DefaultIfEmptySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
	var DelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DelaySubscriber, _super);
	    function DelaySubscriber(destination, delay, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.delay = delay;
	        _this.scheduler = scheduler;
	        _this.queue = [];
	        _this.active = false;
	        _this.errored = false;
	        return _this;
	    }
	    DelaySubscriber.dispatch = function (state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, delay_1);
	        }
	        else {
	            this.unsubscribe();
	            source.active = false;
	        }
	    };
	    DelaySubscriber.prototype._schedule = function (scheduler) {
	        this.active = true;
	        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };
	    DelaySubscriber.prototype.scheduleNotification = function (notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };
	    DelaySubscriber.prototype._next = function (value) {
	        this.scheduleNotification(Notification.createNext(value));
	    };
	    DelaySubscriber.prototype._error = function (err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	    };
	    DelaySubscriber.prototype._complete = function () {
	        this.scheduleNotification(Notification.createComplete());
	    };
	    return DelaySubscriber;
	}(Subscriber));
	var DelayMessage = /*@__PURE__*/ (function () {
	    function DelayMessage(time, notification) {
	        this.time = time;
	        this.notification = notification;
	    }
	    return DelayMessage;
	}());

	/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DelayWhenSubscriber, _super);
	    function DelayWhenSubscriber(destination, delayDurationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.delayDurationSelector = delayDurationSelector;
	        _this.completed = false;
	        _this.delayNotifierSubscriptions = [];
	        return _this;
	    }
	    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(outerValue);
	        this.removeSubscription(innerSub);
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        var value = this.removeSubscription(innerSub);
	        if (value) {
	            this.destination.next(value);
	        }
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype._next = function (value) {
	        try {
	            var delayNotifier = this.delayDurationSelector(value);
	            if (delayNotifier) {
	                this.tryDelay(delayNotifier, value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DelayWhenSubscriber.prototype._complete = function () {
	        this.completed = true;
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
	        subscription.unsubscribe();
	        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
	        if (subscriptionIdx !== -1) {
	            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
	        }
	        return subscription.outerValue;
	    };
	    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
	        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
	        if (notifierSubscription && !notifierSubscription.closed) {
	            this.add(notifierSubscription);
	            this.delayNotifierSubscriptions.push(notifierSubscription);
	        }
	    };
	    DelayWhenSubscriber.prototype.tryComplete = function () {
	        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
	            this.destination.complete();
	        }
	    };
	    return DelayWhenSubscriber;
	}(OuterSubscriber));
	var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
	    __extends(SubscriptionDelayObservable, _super);
	    function SubscriptionDelayObservable(source, subscriptionDelay) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subscriptionDelay = subscriptionDelay;
	        return _this;
	    }
	    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
	        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
	    };
	    return SubscriptionDelayObservable;
	}(Observable));
	var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SubscriptionDelaySubscriber, _super);
	    function SubscriptionDelaySubscriber(parent, source) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.source = source;
	        _this.sourceSubscribed = false;
	        return _this;
	    }
	    SubscriptionDelaySubscriber.prototype._next = function (unused) {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype._error = function (err) {
	        this.unsubscribe();
	        this.parent.error(err);
	    };
	    SubscriptionDelaySubscriber.prototype._complete = function () {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
	        if (!this.sourceSubscribed) {
	            this.sourceSubscribed = true;
	            this.unsubscribe();
	            this.source.subscribe(this.parent);
	        }
	    };
	    return SubscriptionDelaySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DeMaterializeSubscriber, _super);
	    function DeMaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    DeMaterializeSubscriber.prototype._next = function (value) {
	        value.observe(this.destination);
	    };
	    return DeMaterializeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DistinctSubscriber, _super);
	    function DistinctSubscriber(destination, keySelector, flushes) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.values = new Set();
	        if (flushes) {
	            _this.add(subscribeToResult(_this, flushes));
	        }
	        return _this;
	    }
	    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values.clear();
	    };
	    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DistinctSubscriber.prototype._next = function (value) {
	        if (this.keySelector) {
	            this._useKeySelector(value);
	        }
	        else {
	            this._finalizeNext(value, value);
	        }
	    };
	    DistinctSubscriber.prototype._useKeySelector = function (value) {
	        var key;
	        var destination = this.destination;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this._finalizeNext(key, value);
	    };
	    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
	        var values = this.values;
	        if (!values.has(key)) {
	            values.add(key);
	            this.destination.next(value);
	        }
	    };
	    return DistinctSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
	var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.hasKey = false;
	        if (typeof compare === 'function') {
	            _this.compare = compare;
	        }
	        return _this;
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var keySelector = this.keySelector;
	        var key = value;
	        if (keySelector) {
	            key = tryCatch(this.keySelector)(value);
	            if (key === errorObject) {
	                return this.destination.error(errorObject.e);
	            }
	        }
	        var result = false;
	        if (this.hasKey) {
	            result = tryCatch(this.compare)(this.key, key);
	            if (result === errorObject) {
	                return this.destination.error(errorObject.e);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (Boolean(result) === false) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var FilterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.count = 0;
	        return _this;
	    }
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
	var TapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TapSubscriber, _super);
	    function TapSubscriber(destination, observerOrNext, error, complete) {
	        var _this = _super.call(this, destination) || this;
	        _this._tapNext = noop;
	        _this._tapError = noop;
	        _this._tapComplete = noop;
	        _this._tapError = error || noop;
	        _this._tapComplete = complete || noop;
	        if (isFunction(observerOrNext)) {
	            _this._context = _this;
	            _this._tapNext = observerOrNext;
	        }
	        else if (observerOrNext) {
	            _this._context = observerOrNext;
	            _this._tapNext = observerOrNext.next || noop;
	            _this._tapError = observerOrNext.error || noop;
	            _this._tapComplete = observerOrNext.complete || noop;
	        }
	        return _this;
	    }
	    TapSubscriber.prototype._next = function (value) {
	        try {
	            this._tapNext.call(this._context, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(value);
	    };
	    TapSubscriber.prototype._error = function (err) {
	        try {
	            this._tapError.call(this._context, err);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.error(err);
	    };
	    TapSubscriber.prototype._complete = function () {
	        try {
	            this._tapComplete.call(this._context);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        return this.destination.complete();
	    };
	    return TapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	var TakeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var EverySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.source = source;
	        _this.index = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SwitchFirstSubscriber, _super);
	    function SwitchFirstSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasCompleted = false;
	        _this.hasSubscription = false;
	        return _this;
	    }
	    SwitchFirstSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.hasSubscription = true;
	            this.add(subscribeToResult(this, value));
	        }
	    };
	    SwitchFirstSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return SwitchFirstSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
	var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ExhaustMapSubscriber, _super);
	    function ExhaustMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.hasSubscription = false;
	        _this.hasCompleted = false;
	        _this.index = 0;
	        return _this;
	    }
	    ExhaustMapSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.tryNext(value);
	        }
	    };
	    ExhaustMapSubscriber.prototype.tryNext = function (value) {
	        var index = this.index++;
	        var destination = this.destination;
	        try {
	            var result = this.project(value, index);
	            this.hasSubscription = true;
	            this.add(subscribeToResult(this, result, value, index));
	        }
	        catch (err) {
	            destination.error(err);
	        }
	    };
	    ExhaustMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    ExhaustMapSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return ExhaustMapSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ExpandSubscriber, _super);
	    function ExpandSubscriber(destination, project, concurrent, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.scheduler = scheduler;
	        _this.index = 0;
	        _this.active = 0;
	        _this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            _this.buffer = [];
	        }
	        return _this;
	    }
	    ExpandSubscriber.dispatch = function (arg) {
	        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
	        subscriber.subscribeToProjection(result, value, index);
	    };
	    ExpandSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.closed) {
	            this._complete();
	            return;
	        }
	        var index = this.index++;
	        if (this.active < this.concurrent) {
	            destination.next(value);
	            var result = tryCatch(this.project)(value, index);
	            if (result === errorObject) {
	                destination.error(errorObject.e);
	            }
	            else if (!this.scheduler) {
	                this.subscribeToProjection(result, value, index);
	            }
	            else {
	                var state = { subscriber: this, result: result, value: value, index: index };
	                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
	        this.active++;
	        this.add(subscribeToResult(this, result, value, index));
	    };
	    ExpandSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this._next(innerValue);
	    };
	    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return ExpandSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
	var FinallySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        var _this = _super.call(this, destination) || this;
	        _this.add(new Subscription(callback));
	        return _this;
	    }
	    return FinallySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FindValueSubscriber, _super);
	    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.yieldIndex = yieldIndex;
	        _this.thisArg = thisArg;
	        _this.index = 0;
	        return _this;
	    }
	    FindValueSubscriber.prototype.notifyComplete = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    FindValueSubscriber.prototype._next = function (value) {
	        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
	        var index = this.index++;
	        try {
	            var result = predicate.call(thisArg || this, value, index, this.source);
	            if (result) {
	                this.notifyComplete(this.yieldIndex ? index : value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    FindValueSubscriber.prototype._complete = function () {
	        this.notifyComplete(this.yieldIndex ? -1 : undefined);
	    };
	    return FindValueSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(IgnoreElementsSubscriber, _super);
	    function IgnoreElementsSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    IgnoreElementsSubscriber.prototype._next = function (unused) {
	    };
	    return IgnoreElementsSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(IsEmptySubscriber, _super);
	    function IsEmptySubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
	        var destination = this.destination;
	        destination.next(isEmpty);
	        destination.complete();
	    };
	    IsEmptySubscriber.prototype._next = function (value) {
	        this.notifyComplete(false);
	    };
	    IsEmptySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return IsEmptySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeLastSubscriber, _super);
	    function TakeLastSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.ring = new Array();
	        _this.count = 0;
	        return _this;
	    }
	    TakeLastSubscriber.prototype._next = function (value) {
	        var ring = this.ring;
	        var total = this.total;
	        var count = this.count++;
	        if (ring.length < total) {
	            ring.push(value);
	        }
	        else {
	            var index = count % total;
	            ring[index] = value;
	        }
	    };
	    TakeLastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var count = this.count;
	        if (count > 0) {
	            var total = this.count >= this.total ? this.total : this.count;
	            var ring = this.ring;
	            for (var i = 0; i < total; i++) {
	                var idx = (count++) % total;
	                destination.next(ring[idx]);
	            }
	        }
	        destination.complete();
	    };
	    return TakeLastSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var MapToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MapToSubscriber, _super);
	    function MapToSubscriber(destination, value) {
	        var _this = _super.call(this, destination) || this;
	        _this.value = value;
	        return _this;
	    }
	    MapToSubscriber.prototype._next = function (x) {
	        this.destination.next(this.value);
	    };
	    return MapToSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MaterializeSubscriber, _super);
	    function MaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    MaterializeSubscriber.prototype._next = function (value) {
	        this.destination.next(Notification.createNext(value));
	    };
	    MaterializeSubscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        destination.next(Notification.createError(err));
	        destination.complete();
	    };
	    MaterializeSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        destination.next(Notification.createComplete());
	        destination.complete();
	    };
	    return MaterializeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var ScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ScanSubscriber, _super);
	    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this._seed = _seed;
	        _this.hasSeed = hasSeed;
	        _this.index = 0;
	        return _this;
	    }
	    Object.defineProperty(ScanSubscriber.prototype, "seed", {
	        get: function () {
	            return this._seed;
	        },
	        set: function (value) {
	            this.hasSeed = true;
	            this._seed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScanSubscriber.prototype._next = function (value) {
	        if (!this.hasSeed) {
	            this.seed = value;
	            this.destination.next(value);
	        }
	        else {
	            return this._tryNext(value);
	        }
	    };
	    ScanSubscriber.prototype._tryNext = function (value) {
	        var index = this.index++;
	        var result;
	        try {
	            result = this.accumulator(this.seed, value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	        this.seed = result;
	        this.destination.next(result);
	    };
	    return ScanSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
	var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MergeScanSubscriber, _super);
	    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this.acc = acc;
	        _this.concurrent = concurrent;
	        _this.hasValue = false;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeScanSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var ish = tryCatch(this.accumulator)(this.acc, value);
	            var destination = this.destination;
	            if (ish === errorObject) {
	                destination.error(errorObject.e);
	            }
	            else {
	                this.active++;
	                this._innerSub(ish, value, index);
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult(this, ish, value, index));
	    };
	    MergeScanSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var destination = this.destination;
	        this.acc = innerValue;
	        this.hasValue = true;
	        destination.next(innerValue);
	    };
	    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    return MergeScanSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
	function multicast(subjectOrSubjectFactory, selector) {
	    return function multicastOperatorFunction(source) {
	        var subjectFactory;
	        if (typeof subjectOrSubjectFactory === 'function') {
	            subjectFactory = subjectOrSubjectFactory;
	        }
	        else {
	            subjectFactory = function subjectFactory() {
	                return subjectOrSubjectFactory;
	            };
	        }
	        if (typeof selector === 'function') {
	            return source.lift(new MulticastOperator(subjectFactory, selector));
	        }
	        var connectable = Object.create(source, connectableObservableDescriptor);
	        connectable.source = source;
	        connectable.subjectFactory = subjectFactory;
	        return connectable;
	    };
	}
	var MulticastOperator = /*@__PURE__*/ (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());

	/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(OnErrorResumeNextSubscriber, _super);
	    function OnErrorResumeNextSubscriber(destination, nextSources) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.nextSources = nextSources;
	        return _this;
	    }
	    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._error = function (err) {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._complete = function () {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
	        var next = this.nextSources.shift();
	        if (next) {
	            this.add(subscribeToResult(this, next));
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return OnErrorResumeNextSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(PairwiseSubscriber, _super);
	    function PairwiseSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasPrev = false;
	        return _this;
	    }
	    PairwiseSubscriber.prototype._next = function (value) {
	        if (this.hasPrev) {
	            this.destination.next([this.prev, value]);
	        }
	        else {
	            this.hasPrev = true;
	        }
	        this.prev = value;
	    };
	    return PairwiseSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _map PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
	var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RepeatSubscriber, _super);
	    function RepeatSubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RepeatSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.complete.call(this);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RepeatSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RepeatWhenSubscriber, _super);
	    function RepeatWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        _this.sourceIsBeingSubscribedTo = true;
	        return _this;
	    }
	    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.sourceIsBeingSubscribedTo = true;
	        this.source.subscribe(this);
	    };
	    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        if (this.sourceIsBeingSubscribedTo === false) {
	            return _super.prototype.complete.call(this);
	        }
	    };
	    RepeatWhenSubscriber.prototype.complete = function () {
	        this.sourceIsBeingSubscribedTo = false;
	        if (!this.isStopped) {
	            if (!this.retries) {
	                this.subscribeToRetries();
	            }
	            if (!this.retriesSubscription || this.retriesSubscription.closed) {
	                return _super.prototype.complete.call(this);
	            }
	            this._unsubscribeAndRecycle();
	            this.notifications.next();
	        }
	    };
	    RepeatWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
	        if (notifications) {
	            notifications.unsubscribe();
	            this.notifications = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        _super.prototype._unsubscribeAndRecycle.call(this);
	        this._unsubscribe = _unsubscribe;
	        return this;
	    };
	    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
	        this.notifications = new Subject();
	        var retries = tryCatch(this.notifier)(this.notifications);
	        if (retries === errorObject) {
	            return _super.prototype.complete.call(this);
	        }
	        this.retries = retries;
	        this.retriesSubscription = subscribeToResult(this, retries);
	    };
	    return RepeatWhenSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var RetrySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RetrySubscriber, _super);
	    function RetrySubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RetrySubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.error.call(this, err);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RetrySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RetryWhenSubscriber, _super);
	    function RetryWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        return _this;
	    }
	    RetryWhenSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var errors = this.errors;
	            var retries = this.retries;
	            var retriesSubscription = this.retriesSubscription;
	            if (!retries) {
	                errors = new Subject();
	                retries = tryCatch(this.notifier)(errors);
	                if (retries === errorObject) {
	                    return _super.prototype.error.call(this, errorObject.e);
	                }
	                retriesSubscription = subscribeToResult(this, retries);
	            }
	            else {
	                this.errors = null;
	                this.retriesSubscription = null;
	            }
	            this._unsubscribeAndRecycle();
	            this.errors = errors;
	            this.retries = retries;
	            this.retriesSubscription = retriesSubscription;
	            errors.next(err);
	        }
	    };
	    RetryWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
	        if (errors) {
	            errors.unsubscribe();
	            this.errors = null;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = null;
	        }
	        this.retries = null;
	    };
	    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        this._unsubscribeAndRecycle();
	        this._unsubscribe = _unsubscribe;
	        this.source.subscribe(this);
	    };
	    return RetryWhenSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var SampleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SampleSubscriber, _super);
	    function SampleSubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.hasValue = false;
	        return _this;
	    }
	    SampleSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	    };
	    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.value);
	        }
	    };
	    return SampleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, period, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.period = period;
	        _this.scheduler = scheduler;
	        _this.hasValue = false;
	        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
	        return _this;
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	}(Subscriber));
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, period = state.period;
	    subscriber.notifyNext();
	    this.schedule(state, period);
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
	var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SequenceEqualSubscriber, _super);
	    function SequenceEqualSubscriber(destination, compareTo, comparor) {
	        var _this = _super.call(this, destination) || this;
	        _this.compareTo = compareTo;
	        _this.comparor = comparor;
	        _this._a = [];
	        _this._b = [];
	        _this._oneComplete = false;
	        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
	        return _this;
	    }
	    SequenceEqualSubscriber.prototype._next = function (value) {
	        if (this._oneComplete && this._b.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._a.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype._complete = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	    };
	    SequenceEqualSubscriber.prototype.checkValues = function () {
	        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
	        while (_a.length > 0 && _b.length > 0) {
	            var a = _a.shift();
	            var b = _b.shift();
	            var areEqual = false;
	            if (comparor) {
	                areEqual = tryCatch(comparor)(a, b);
	                if (areEqual === errorObject) {
	                    this.destination.error(errorObject.e);
	                }
	            }
	            else {
	                areEqual = a === b;
	            }
	            if (!areEqual) {
	                this.emit(false);
	            }
	        }
	    };
	    SequenceEqualSubscriber.prototype.emit = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    SequenceEqualSubscriber.prototype.nextB = function (value) {
	        if (this._oneComplete && this._a.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._b.push(value);
	            this.checkValues();
	        }
	    };
	    return SequenceEqualSubscriber;
	}(Subscriber));
	var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SequenceEqualCompareToSubscriber, _super);
	    function SequenceEqualCompareToSubscriber(destination, parent) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        return _this;
	    }
	    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
	        this.parent.nextB(value);
	    };
	    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    SequenceEqualCompareToSubscriber.prototype._complete = function () {
	        this.parent._complete();
	    };
	    return SequenceEqualCompareToSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
	function shareSubjectFactory() {
	    return new Subject();
	}
	function share() {
	    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
	}

	/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
	var SingleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SingleSubscriber, _super);
	    function SingleSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.seenValue = false;
	        _this.index = 0;
	        return _this;
	    }
	    SingleSubscriber.prototype.applySingleValue = function (value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        }
	        else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };
	    SingleSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this.tryNext(value, index);
	        }
	        else {
	            this.applySingleValue(value);
	        }
	    };
	    SingleSubscriber.prototype.tryNext = function (value, index) {
	        try {
	            if (this.predicate(value, index, this.source)) {
	                this.applySingleValue(value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    SingleSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError);
	        }
	    };
	    return SingleSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var SkipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipSubscriber, _super);
	    function SkipSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    SkipSubscriber.prototype._next = function (x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };
	    return SkipSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
	var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipLastSubscriber, _super);
	    function SkipLastSubscriber(destination, _skipCount) {
	        var _this = _super.call(this, destination) || this;
	        _this._skipCount = _skipCount;
	        _this._count = 0;
	        _this._ring = new Array(_skipCount);
	        return _this;
	    }
	    SkipLastSubscriber.prototype._next = function (value) {
	        var skipCount = this._skipCount;
	        var count = this._count++;
	        if (count < skipCount) {
	            this._ring[count] = value;
	        }
	        else {
	            var currentIndex = count % skipCount;
	            var ring = this._ring;
	            var oldValue = ring[currentIndex];
	            ring[currentIndex] = value;
	            this.destination.next(oldValue);
	        }
	    };
	    return SkipLastSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipUntilSubscriber, _super);
	    function SkipUntilSubscriber(destination, notifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasValue = false;
	        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));
	        return _this;
	    }
	    SkipUntilSubscriber.prototype._next = function (value) {
	        if (this.hasValue) {
	            _super.prototype._next.call(this, value);
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.hasValue = true;
	        if (this.innerSubscription) {
	            this.innerSubscription.unsubscribe();
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return SkipUntilSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.skipping = true;
	        _this.index = 0;
	        return _this;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping) {
	            this.tryCallPredicate(value);
	        }
	        if (!this.skipping) {
	            destination.next(value);
	        }
	    };
	    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
	        try {
	            var result = this.predicate(value, this.index++);
	            this.skipping = Boolean(result);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    return SkipWhileSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
	var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
	    __extends(SubscribeOnObservable, _super);
	    function SubscribeOnObservable(source, delayTime, scheduler) {
	        if (delayTime === void 0) {
	            delayTime = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.delayTime = delayTime;
	        _this.scheduler = scheduler;
	        if (!isNumeric(delayTime) || delayTime < 0) {
	            _this.delayTime = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            _this.scheduler = asap;
	        }
	        return _this;
	    }
	    SubscribeOnObservable.create = function (source, delay, scheduler) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        return new SubscribeOnObservable(source, delay, scheduler);
	    };
	    SubscribeOnObservable.dispatch = function (arg) {
	        var source = arg.source, subscriber = arg.subscriber;
	        return this.add(source.subscribe(subscriber));
	    };
	    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        });
	    };
	    return SubscribeOnObservable;
	}(Observable));

	/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
	var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.index = 0;
	        return _this;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (error) {
	            this.destination.error(error);
	            return;
	        }
	        this._innerSub(result, value, index);
	    };
	    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = null;
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.innerSubscription = null;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    return SwitchMapSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.complete();
	    };
	    TakeUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return TakeUntilSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeWhileSubscriber, _super);
	    function TakeWhileSubscriber(destination, predicate) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.index = 0;
	        return _this;
	    }
	    TakeWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var result;
	        try {
	            result = this.predicate(value, this.index++);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this.nextOrComplete(value, result);
	    };
	    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
	        var destination = this.destination;
	        if (Boolean(predicateResult)) {
	            destination.next(value);
	        }
	        else {
	            destination.complete();
	        }
	    };
	    return TakeWhileSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ThrottleSubscriber, _super);
	    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.durationSelector = durationSelector;
	        _this._leading = _leading;
	        _this._trailing = _trailing;
	        _this._hasValue = false;
	        return _this;
	    }
	    ThrottleSubscriber.prototype._next = function (value) {
	        this._hasValue = true;
	        this._sendValue = value;
	        if (!this._throttled) {
	            if (this._leading) {
	                this.send();
	            }
	            else {
	                this.throttle(value);
	            }
	        }
	    };
	    ThrottleSubscriber.prototype.send = function () {
	        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
	        if (_hasValue) {
	            this.destination.next(_sendValue);
	            this.throttle(_sendValue);
	        }
	        this._hasValue = false;
	        this._sendValue = null;
	    };
	    ThrottleSubscriber.prototype.throttle = function (value) {
	        var duration = this.tryDurationSelector(value);
	        if (duration) {
	            this.add(this._throttled = subscribeToResult(this, duration));
	        }
	    };
	    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
	        try {
	            return this.durationSelector(value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return null;
	        }
	    };
	    ThrottleSubscriber.prototype.throttlingDone = function () {
	        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
	        if (_throttled) {
	            _throttled.unsubscribe();
	        }
	        this._throttled = null;
	        if (_trailing) {
	            this.send();
	        }
	    };
	    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.throttlingDone();
	    };
	    ThrottleSubscriber.prototype.notifyComplete = function () {
	        this.throttlingDone();
	    };
	    return ThrottleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
	var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ThrottleTimeSubscriber, _super);
	    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.duration = duration;
	        _this.scheduler = scheduler;
	        _this.leading = leading;
	        _this.trailing = trailing;
	        _this._hasTrailingValue = false;
	        _this._trailingValue = null;
	        return _this;
	    }
	    ThrottleTimeSubscriber.prototype._next = function (value) {
	        if (this.throttled) {
	            if (this.trailing) {
	                this._trailingValue = value;
	                this._hasTrailingValue = true;
	            }
	        }
	        else {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
	            if (this.leading) {
	                this.destination.next(value);
	            }
	        }
	    };
	    ThrottleTimeSubscriber.prototype._complete = function () {
	        if (this._hasTrailingValue) {
	            this.destination.next(this._trailingValue);
	            this.destination.complete();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            if (this.trailing && this._hasTrailingValue) {
	                this.destination.next(this._trailingValue);
	                this._trailingValue = null;
	                this._hasTrailingValue = false;
	            }
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleTimeSubscriber;
	}(Subscriber));
	function dispatchNext$3(arg) {
	    var subscriber = arg.subscriber;
	    subscriber.clearThrottle();
	}

	/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TimeoutWithSubscriber, _super);
	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.absoluteTimeout = absoluteTimeout;
	        _this.waitFor = waitFor;
	        _this.withObservable = withObservable;
	        _this.scheduler = scheduler;
	        _this.action = null;
	        _this.scheduleTimeout();
	        return _this;
	    }
	    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
	        var withObservable = subscriber.withObservable;
	        subscriber._unsubscribeAndRecycle();
	        subscriber.add(subscribeToResult(subscriber, withObservable));
	    };
	    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
	        var action = this.action;
	        if (action) {
	            this.action = action.schedule(this, this.waitFor);
	        }
	        else {
	            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
	        }
	    };
	    TimeoutWithSubscriber.prototype._next = function (value) {
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	        _super.prototype._next.call(this, value);
	    };
	    TimeoutWithSubscriber.prototype._unsubscribe = function () {
	        this.action = null;
	        this.scheduler = null;
	        this.withObservable = null;
	    };
	    return TimeoutWithSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var WindowSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.window = new Subject();
	        destination.next(_this.window);
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow();
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this._complete();
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	    };
	    WindowSubscriber.prototype._unsubscribe = function () {
	        this.window = null;
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var destination = this.destination;
	        var newWindow = this.window = new Subject();
	        destination.next(newWindow);
	    };
	    return WindowSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
	var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowCountSubscriber, _super);
	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowSize = windowSize;
	        _this.startWindowEvery = startWindowEvery;
	        _this.windows = [new Subject()];
	        _this.count = 0;
	        destination.next(_this.windows[0]);
	        return _this;
	    }
	    WindowCountSubscriber.prototype._next = function (value) {
	        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
	        var destination = this.destination;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len && !this.closed; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0 && !this.closed) {
	            var window_1 = new Subject();
	            windows.push(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowCountSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().error(err);
	            }
	        }
	        this.destination.error(err);
	    };
	    WindowCountSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowCountSubscriber.prototype._unsubscribe = function () {
	        this.count = 0;
	        this.windows = null;
	    };
	    return WindowCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
	var CountedSubject = /*@__PURE__*/ (function (_super) {
	    __extends(CountedSubject, _super);
	    function CountedSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._numberOfNextedValues = 0;
	        return _this;
	    }
	    CountedSubject.prototype.next = function (value) {
	        this._numberOfNextedValues++;
	        _super.prototype.next.call(this, value);
	    };
	    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
	        get: function () {
	            return this._numberOfNextedValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CountedSubject;
	}(Subject));
	var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowTimeSubscriber, _super);
	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowTimeSpan = windowTimeSpan;
	        _this.windowCreationInterval = windowCreationInterval;
	        _this.maxWindowSize = maxWindowSize;
	        _this.scheduler = scheduler;
	        _this.windows = [];
	        var window = _this.openWindow();
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var closeState = { subscriber: _this, window: window, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        }
	        else {
	            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
	            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	        return _this;
	    }
	    WindowTimeSubscriber.prototype._next = function (value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            var window_1 = windows[i];
	            if (!window_1.closed) {
	                window_1.next(value);
	                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
	                    this.closeWindow(window_1);
	                }
	            }
	        }
	    };
	    WindowTimeSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowTimeSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            var window_2 = windows.shift();
	            if (!window_2.closed) {
	                window_2.complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowTimeSubscriber.prototype.openWindow = function () {
	        var window = new CountedSubject();
	        this.windows.push(window);
	        var destination = this.destination;
	        destination.next(window);
	        return window;
	    };
	    WindowTimeSubscriber.prototype.closeWindow = function (window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };
	    return WindowTimeSubscriber;
	}(Subscriber));
	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
	    if (window) {
	        subscriber.closeWindow(window);
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(state) {
	    var subscriber = state.subscriber, window = state.window, context = state.context;
	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WindowToggleSubscriber, _super);
	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.openings = openings;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
	        return _this;
	    }
	    WindowToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        if (contexts) {
	            var len = contexts.length;
	            for (var i = 0; i < len; i++) {
	                contexts[i].window.next(value);
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_1 = contexts[index];
	                context_1.window.error(err);
	                context_1.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._error.call(this, err);
	    };
	    WindowToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_2 = contexts[index];
	                context_2.window.complete();
	                context_2.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    WindowToggleSubscriber.prototype._unsubscribe = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_3 = contexts[index];
	                context_3.window.unsubscribe();
	                context_3.subscription.unsubscribe();
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (outerValue === this.openings) {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = tryCatch(closingSelector)(innerValue);
	            if (closingNotifier === errorObject) {
	                return this.error(errorObject.e);
	            }
	            else {
	                var window_1 = new Subject();
	                var subscription = new Subscription();
	                var context_4 = { window: window_1, subscription: subscription };
	                this.contexts.push(context_4);
	                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
	                if (innerSubscription.closed) {
	                    this.closeWindow(this.contexts.length - 1);
	                }
	                else {
	                    innerSubscription.context = context_4;
	                    subscription.add(innerSubscription);
	                }
	                this.destination.next(window_1);
	            }
	        }
	        else {
	            this.closeWindow(this.contexts.indexOf(outerValue));
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyError = function (err) {
	        this.error(err);
	    };
	    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
	        if (inner !== this.openSubscription) {
	            this.closeWindow(this.contexts.indexOf(inner.context));
	        }
	    };
	    WindowToggleSubscriber.prototype.closeWindow = function (index) {
	        if (index === -1) {
	            return;
	        }
	        var contexts = this.contexts;
	        var context = contexts[index];
	        var window = context.window, subscription = context.subscription;
	        contexts.splice(index, 1);
	        window.complete();
	        subscription.unsubscribe();
	    };
	    return WindowToggleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.closingSelector = closingSelector;
	        _this.openWindow();
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
	        if (this.closingNotification) {
	            this.closingNotification.unsubscribe();
	        }
	    };
	    WindowSubscriber.prototype.openWindow = function (innerSub) {
	        if (innerSub === void 0) {
	            innerSub = null;
	        }
	        if (innerSub) {
	            this.remove(innerSub);
	            innerSub.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var window = this.window = new Subject();
	        this.destination.next(window);
	        var closingNotifier = tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject) {
	            var err = errorObject.e;
	            this.destination.error(err);
	            this.window.error(err);
	        }
	        else {
	            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
	        }
	    };
	    return WindowSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(WithLatestFromSubscriber, _super);
	    function WithLatestFromSubscriber(destination, observables, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.observables = observables;
	        _this.project = project;
	        _this.toRespond = [];
	        var len = observables.length;
	        _this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            _this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            _this.add(subscribeToResult(_this, observable, observable, i));
	        }
	        return _this;
	    }
	    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype.notifyComplete = function () {
	    };
	    WithLatestFromSubscriber.prototype._next = function (value) {
	        if (this.toRespond.length === 0) {
	            var args = [value].concat(this.values);
	            if (this.project) {
	                this._tryProject(args);
	            }
	            else {
	                this.destination.next(args);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype._tryProject = function (args) {
	        var result;
	        try {
	            result = this.project.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return WithLatestFromSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	/**
	 * @license Angular v6.0.9
	 * (c) 2010-2018 Google, Inc. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and
	 * in which injectors (if any) it will be available.
	 *
	 * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an
	 * `InjectableType`.
	 *
	 * Options:
	 * * `providedIn` determines which injectors will include the injectable, by either associating it
	 *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
	 *   provided in the `'root'` injector, which will be the application-level injector in most apps.
	 * * `factory` gives the zero argument function which will create an instance of the injectable.
	 *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
	 *
	 * @experimental
	 */
	function defineInjectable(opts) {
	    return {
	        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,
	    };
	}
	/**
	 * Construct an `InjectorDef` which configures an injector.
	 *
	 * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an
	 * `InjectorType`.
	 *
	 * Options:
	 *
	 * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to
	 *   create the type must be provided. If that factory function needs to inject arguments, it can
	 *   use the `inject` function.
	 * * `providers`: an optional array of providers to add to the injector. Each provider must
	 *   either have a factory or point to a type which has an `ngInjectableDef` static property (the
	 *   type must be an `InjectableType`).
	 * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
	 *   whose providers will also be added to the injector. Locally provided types will override
	 *   providers from imports.
	 *
	 * @experimental
	 */
	function defineInjector(options) {
	    return {
	        factory: options.factory, providers: options.providers || [], imports: options.imports || [],
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
	 * runtime representation) such as when injecting an interface, callable type, array or
	 * parametrized type.
	 *
	 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
	 * the `Injector`. This provides additional level of type safety.
	 *
	 * ```
	 * interface MyInterface {...}
	 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
	 * // myInterface is inferred to be MyInterface.
	 * ```
	 *
	 * When creating an `InjectionToken`, you can optionally specify a factory function which returns
	 * (possibly by creating) a default value of the parameterized type `T`. This sets up the
	 * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
	 * application's root injector. If the factory function, which takes zero arguments, needs to inject
	 * dependencies, it can do so using the `inject` function. See below for an example.
	 *
	 * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
	 * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
	 * mentioned above, `'root'` is the default value for `providedIn`.
	 *
	 * @usageNotes
	 * ### Basic Example
	 *
	 * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
	 *
	 * ### Tree-shakeable Example
	 *
	 * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}
	 *
	 */
	var InjectionToken = /** @class */ (function () {
	    function InjectionToken(_desc, options) {
	        this._desc = _desc;
	        /** @internal */
	        this.ngMetadataName = 'InjectionToken';
	        if (options !== undefined) {
	            this.ngInjectableDef = defineInjectable({
	                providedIn: options.providedIn || 'root',
	                factory: options.factory,
	            });
	        }
	        else {
	            this.ngInjectableDef = undefined;
	        }
	    }
	    InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
	    return InjectionToken;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ANNOTATIONS = '__annotations__';
	var PARAMETERS = '__parameters__';
	var PROP_METADATA = '__prop__metadata__';
	/**
	 * @suppress {globalThis}
	 */
	function makeDecorator(name, props, parentClass, chainFn, typeFn) {
	    var metaCtor = makeMetadataCtor(props);
	    function DecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof DecoratorFactory) {
	            metaCtor.call.apply(metaCtor, __spread([this], args));
	            return this;
	        }
	        var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	        var TypeDecorator = function TypeDecorator(cls) {
	            typeFn && typeFn.apply(void 0, __spread([cls], args));
	            // Use of Object.defineProperty is important since it creates non-enumerable property which
	            // prevents the property is copied during subclassing.
	            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?
	                cls[ANNOTATIONS] :
	                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
	            annotations.push(annotationInstance);
	            return cls;
	        };
	        if (chainFn)
	            chainFn(TypeDecorator);
	        return TypeDecorator;
	        var _a;
	    }
	    if (parentClass) {
	        DecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    DecoratorFactory.prototype.ngMetadataName = name;
	    DecoratorFactory.annotationCls = DecoratorFactory;
	    return DecoratorFactory;
	}
	function makeMetadataCtor(props) {
	    return function ctor() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (props) {
	            var values = props.apply(void 0, __spread(args));
	            for (var propName in values) {
	                this[propName] = values[propName];
	            }
	        }
	    };
	}
	function makeParamDecorator(name, props, parentClass) {
	    var metaCtor = makeMetadataCtor(props);
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof ParamDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	        ParamDecorator.annotation = annotationInstance;
	        return ParamDecorator;
	        function ParamDecorator(cls, unusedKey, index) {
	            // Use of Object.defineProperty is important since it creates non-enumerable property which
	            // prevents the property is copied during subclassing.
	            var parameters = cls.hasOwnProperty(PARAMETERS) ?
	                cls[PARAMETERS] :
	                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            (parameters[index] = parameters[index] || []).push(annotationInstance);
	            return cls;
	        }
	        var _a;
	    }
	    if (parentClass) {
	        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    ParamDecoratorFactory.prototype.ngMetadataName = name;
	    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
	    return ParamDecoratorFactory;
	}
	function makePropDecorator(name, props, parentClass) {
	    var metaCtor = makeMetadataCtor(props);
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (this instanceof PropDecoratorFactory) {
	            metaCtor.apply(this, args);
	            return this;
	        }
	        var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	        return function PropDecorator(target, name) {
	            var constructor = target.constructor;
	            // Use of Object.defineProperty is important since it creates non-enumerable property which
	            // prevents the property is copied during subclassing.
	            var meta = constructor.hasOwnProperty(PROP_METADATA) ?
	                constructor[PROP_METADATA] :
	                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
	            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	            meta[name].unshift(decoratorInstance);
	        };
	        var _a;
	    }
	    if (parentClass) {
	        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	    }
	    PropDecoratorFactory.prototype.ngMetadataName = name;
	    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
	    return PropDecoratorFactory;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This token can be used to create a virtual provider that will populate the
	 * `entryComponents` fields of components and ng modules based on its `useValue`.
	 * All components that are referenced in the `useValue` value (either directly
	 * or in a nested array or map) will be added to the `entryComponents` property.
	 *
	 * @usageNotes
	 * ### Example
	 * The following example shows how the router can populate the `entryComponents`
	 * field of an NgModule based on the router configuration which refers
	 * to components.
	 *
	 * ```typescript
	 * // helper function inside the router
	 * function provideRoutes(routes) {
	 *   return [
	 *     {provide: ROUTES, useValue: routes},
	 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	 *   ];
	 * }
	 *
	 * // user code
	 * let routes = [
	 *   {path: '/root', component: RootComp},
	 *   {path: '/teams', component: TeamsComp}
	 * ];
	 *
	 * @NgModule({
	 *   providers: [provideRoutes(routes)]
	 * })
	 * class ModuleWithRoutes {}
	 * ```
	 *
	 * @experimental
	 */
	var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
	/**
	 * Attribute decorator and metadata.
	 *
	 * @Annotation
	 */
	var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });
	/**
	 * Base class for query metadata.
	 *
	 * @see `ContentChildren`.
	 * @see `ContentChild`.
	 * @see `ViewChildren`.
	 * @see `ViewChild`.
	 */
	var Query = /** @class */ (function () {
	    function Query() {
	    }
	    return Query;
	}());
	/**
	 * ContentChildren decorator and metadata.
	 *
	 *
	 *  @Annotation
	 */
	var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
	}, Query);
	/**
	 * ContentChild decorator and metadata.
	 *
	 *
	 * @Annotation
	 */
	var ContentChild = makePropDecorator('ContentChild', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
	}, Query);
	/**
	 * ViewChildren decorator and metadata.
	 *
	 * @Annotation
	 */
	var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
	}, Query);
	/**
	 * ViewChild decorator and metadata.
	 *
	 * @Annotation
	 */
	var ViewChild = makePropDecorator('ViewChild', function (selector, data) {
	    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));
	}, Query);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Describes within the change detector which strategy will be used the next time change
	 * detection is triggered.
	 *
	 */
	var ChangeDetectionStrategy;
	(function (ChangeDetectionStrategy) {
	    /**
	     * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
	    /**
	     * `Default` means that the change detector's mode will be initially set to `CheckAlways`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
	})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
	/**
	 * Describes the status of the detector.
	 */
	var ChangeDetectorStatus;
	(function (ChangeDetectorStatus) {
	    /**
	     * `CheckOnce` means that after calling detectChanges the mode of the change detector
	     * will become `Checked`.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
	    /**
	     * `Checked` means that the change detector should be skipped until its mode changes to
	     * `CheckOnce`.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
	    /**
	     * `CheckAlways` means that after calling detectChanges the mode of the change detector
	     * will remain `CheckAlways`.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
	    /**
	     * `Detached` means that the change detector sub tree is not a part of the main tree and
	     * should be skipped.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
	    /**
	     * `Errored` means that the change detector encountered an error checking a binding
	     * or calling a directive lifecycle method and is now in an inconsistent state. Change
	     * detectors in this state will no longer detect changes.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
	    /**
	     * `Destroyed` means that the change detector is destroyed.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
	})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return changeDetectionStrategy == null ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Type of the Component metadata.
	 */
	var Directive = makeDecorator('Directive', function (dir) {
	    if (dir === void 0) { dir = {}; }
	    return dir;
	});
	/**
	 * Component decorator and metadata.
	 *
	 * @usageNotes
	 *
	 * ### Using animations
	 *
	 * The following snippet shows an animation trigger in a component's
	 * metadata. The trigger is attached to an element in the component's
	 * template, using "@_trigger_name_", and a state expression that is evaluated
	 * at run time to determine whether the animation should start.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'animation-cmp',
	 *   templateUrl: 'animation-cmp.html',
	 *   animations: [
	 *     trigger('myTriggerName', [
	 *       state('on', style({ opacity: 1 }),
	 *       state('off', style({ opacity: 0 }),
	 *       transition('on => off', [
	 *         animate("1s")
	 *       ])
	 *     ])
	 *   ]
	 * })
	 * ```
	 *
	 * ```html
	 * <!-- animation-cmp.html -->
	 * <div @myTriggerName="expression">...</div>
	 * ```
	 *
	 * ### Preserving whitespace
	 *
	 * Removing whitespace can greatly reduce AOT-generated code size, and speed up view creation.
	 * As of Angular 6, default for `preserveWhitespaces` is false (whitespace is removed).
	 * To change the default setting for all components in your application, set
	 * the `preserveWhitespaces` option of the AOT compiler.
	 *
	 * Current implementation removes whitespace characters as follows:
	 * - Trims all whitespaces at the beginning and the end of a template.
	 * - Removes whitespace-only text nodes. For example,
	 * `<button>Action 1</button>  <button>Action 2</button>` becomes
	 * `<button>Action 1</button><button>Action 2</button>`.
	 * - Replaces a series of whitespace characters in text nodes with a single space.
	 * For example, `<span>\n some text\n</span>` becomes `<span> some text </span>`.
	 * - Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,
	 * where whitespace characters are significant.
	 *
	 * Note that these transformations can influence DOM nodes layout, although impact
	 * should be minimal.
	 *
	 * You can override the default behavior to preserve whitespace characters
	 * in certain fragments of a template. For example, you can exclude an entire
	 * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:
	 *
	 * ```html
	 * <div ngPreserveWhitespaces>
	 *     whitespaces are preserved here
	 *     <span>    and here </span>
	 * </div>
	 * ```
	 *
	 * You can force a single space to be preserved in a text node by using `&ngsp;`,
	 * which is replaced with a space character by Angular's template
	 * compiler:
	 *
	 * ```html
	 * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>
	 * <!-->compiled to be equivalent to:</>
	 *  <a>Spaces</a> <a>between</a> <a>links.</a>
	 * ```
	 *
	 * Note that sequences of `&ngsp;` are still collapsed to just one space character when
	 * the `preserveWhitespaces` option is set to `false`.
	 *
	 * ```html
	 * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>
	 * <!-->compiled to be equivalent to:</>
	 *  <a>Spaces</a> <a>between</a> <a>links.</a>
	 * ```
	 *
	 * To preserve sequences of whitespace characters, use the
	 * `ngPreserveWhitespaces` attribute.
	 *
	 * @Annotation
	 */
	var Component = makeDecorator('Component', function (c) {
	    if (c === void 0) { c = {}; }
	    return (__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));
	}, Directive);
	/**
	 *
	 *
	 * @Annotation
	 */
	var Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); });
	/**
	 *
	 * @Annotation
	 */
	var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
	/**
	 *
	 * @Annotation
	 */
	var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
	/**
	 *
	 * @Annotation
	 */
	var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
	/**
	 * Binds a CSS event to a host listener and supplies configuration metadata.
	 * Angular invokes the supplied handler method when the host element emits the specified event,
	 * and updates the bound element with the result.
	 * If the handler method returns false, applies `preventDefault` on the bound element.
	 *
	 * @usageNotes
	 *
	 * The following example declares a directive
	 * that attaches a click listener to a button and counts clicks.
	 *
	 * ```
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
	 *  }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: '<button counting>Increment</button>',
	 * })
	 * class App {}
	 * ```
	 *
	 * @Annotation
	 */
	var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 *
	 * Represents a type that a Component or other object is instances of.
	 *
	 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	 * the `MyCustomComponent` constructor function.
	 *
	 *
	 */
	var Type = Function;
	function isType(v) {
	    return typeof v === 'function';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	var _global = __window || __global || __self;
	var promise = Promise.resolve(0);
	var _symbolIterator = null;
	function getSymbolIterator$1() {
	    if (!_symbolIterator) {
	        var Symbol_1 = _global['Symbol'];
	        if (Symbol_1 && Symbol_1.iterator) {
	            _symbolIterator = Symbol_1.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	function scheduleMicroTask(fn) {
	    if (typeof Zone === 'undefined') {
	        // use promise to schedule microTask instead of use Zone
	        promise.then(function () { fn && fn.apply(null, null); });
	    }
	    else {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	}
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token instanceof Array) {
	        return '[' + token.map(stringify).join(', ') + ']';
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    var res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Attention: These regex has to hold even if the code is minified!
	 */
	var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
	var INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[A-Za-z\d$_]+\s*{/;
	var INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[A-Za-z\d$_]+\s*{[\s\S]*constructor\s*\(/;
	var ReflectionCapabilities = /** @class */ (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = reflect || _global['Reflect'];
	    }
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    ReflectionCapabilities.prototype.factory = function (t) { return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return new (t.bind.apply(t, __spread([void 0], args)))();
	    }; };
	    /** @internal */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (paramAnnotations && paramAnnotations[i] != null) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	        var typeStr = type.toString();
	        // If we have no decorators, we only have function.length as metadata.
	        // In that case, to detect whether a child class declared an own constructor or not,
	        // we need to look inside of that constructor to check whether it is
	        // just calling the parent.
	        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	        // that sets 'design:paramtypes' to []
	        // if a class inherits from another class but has no ctor declared itself.
	        if (DELEGATE_CTOR.exec(typeStr) ||
	            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {
	            return null;
	        }
	        // Prefer the direct API.
	        if (type.parameters && type.parameters !== parentCtor.parameters) {
	            return type.parameters;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        var tsickleCtorParams = type.ctorParameters;
	        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	            // Newer tsickle uses a function closure
	            // Retain the non-function case for compatibility with older tsickle
	            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {
	                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	            });
	            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
	        }
	        // API for metadata created by invoking the decorators.
	        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
	        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&
	            this._reflect.getOwnMetadata('design:paramtypes', type);
	        if (paramTypes || paramAnnotations) {
	            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	        }
	        // If a class has no decorators, at least create metadata
	        // based on function.length.
	        // Note: We know that this is a real constructor as we checked
	        // the content of the constructor above.
	        return new Array(type.length).fill(undefined);
	    };
	    ReflectionCapabilities.prototype.parameters = function (type) {
	        // Note: only report metadata if we have at least one class decorator
	        // to stay in sync with the static reflector.
	        if (!isType(type)) {
	            return [];
	        }
	        var parentCtor = getParentCtor(type);
	        var parameters = this._ownParameters(type, parentCtor);
	        if (!parameters && parentCtor !== Object) {
	            parameters = this.parameters(parentCtor);
	        }
	        return parameters || [];
	    };
	    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
	            var annotations = typeOrFunc.annotations;
	            if (typeof annotations === 'function' && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
	            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
	        }
	        // API for metadata created by invoking the decorators.
	        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
	            return typeOrFunc[ANNOTATIONS];
	        }
	        return null;
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return [];
	        }
	        var parentCtor = getParentCtor(typeOrFunc);
	        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	        return parentAnnotations.concat(ownAnnotations);
	    };
	    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (typeOrFunc.propMetadata &&
	            typeOrFunc.propMetadata !== parentCtor.propMetadata) {
	            var propMetadata = typeOrFunc.propMetadata;
	            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (typeOrFunc.propDecorators &&
	            typeOrFunc.propDecorators !== parentCtor.propDecorators) {
	            var propDecorators_1 = typeOrFunc.propDecorators;
	            var propMetadata_1 = {};
	            Object.keys(propDecorators_1).forEach(function (prop) {
	                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	            });
	            return propMetadata_1;
	        }
	        // API for metadata created by invoking the decorators.
	        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
	            return typeOrFunc[PROP_METADATA];
	        }
	        return null;
	    };
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        var parentCtor = getParentCtor(typeOrFunc);
	        var propMetadata = {};
	        if (parentCtor !== Object) {
	            var parentPropMetadata_1 = this.propMetadata(parentCtor);
	            Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                propMetadata[propName] = parentPropMetadata_1[propName];
	            });
	        }
	        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	        if (ownPropMetadata) {
	            Object.keys(ownPropMetadata).forEach(function (propName) {
	                var decorators = [];
	                if (propMetadata.hasOwnProperty(propName)) {
	                    decorators.push.apply(decorators, __spread(propMetadata[propName]));
	                }
	                decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));
	                propMetadata[propName] = decorators;
	            });
	        }
	        return propMetadata;
	    };
	    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return type instanceof Type && lcProperty in type.prototype;
	    };
	    ReflectionCapabilities.prototype.guards = function (type) { return {}; };
	    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	    ReflectionCapabilities.prototype.importUri = function (type) {
	        // StaticSymbol
	        if (typeof type === 'object' && type['filePath']) {
	            return type['filePath'];
	        }
	        // Runtime type
	        return "./" + stringify(type);
	    };
	    ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
	    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return runtime;
	    };
	    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	    return ReflectionCapabilities;
	}());
	function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	    if (!decoratorInvocations) {
	        return [];
	    }
	    return decoratorInvocations.map(function (decoratorInvocation) {
	        var decoratorType = decoratorInvocation.type;
	        var annotationCls = decoratorType.annotationCls;
	        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	        return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();
	    });
	}
	function getParentCtor(ctor) {
	    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
	    var parentCtor = parentProto ? parentProto.constructor : null;
	    // Note: We always use `Object` as the null value
	    // to simplify checking later on.
	    return parentCtor || Object;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function getClosureSafeProperty(objWithPropertyToExtract, target) {
	    for (var key in objWithPropertyToExtract) {
	        if (objWithPropertyToExtract[key] === target) {
	            return key;
	        }
	    }
	    throw Error('Could not find renamed property on target object.');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
	 * a query is not yet defined.
	 *
	 * @usageNotes
	 * ### Example
	 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	 * @experimental
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    forwardRefFn.toString = function () { return stringify(this()); };
	    return forwardRefFn;
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	 *
	 * @see `forwardRef`
	 * @experimental
	 */
	function resolveForwardRef(type) {
	    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Inject decorator and metadata.
	 *
	 * @Annotation
	 */
	var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });
	/**
	 * Optional decorator and metadata.
	 *
	 * @Annotation
	 */
	var Optional = makeParamDecorator('Optional');
	/**
	 * Self decorator and metadata.
	 *
	 * @Annotation
	 */
	var Self = makeParamDecorator('Self');
	/**
	 * SkipSelf decorator and metadata.
	 *
	 * @Annotation
	 */
	var SkipSelf = makeParamDecorator('SkipSelf');
	/**
	 * Host decorator and metadata.
	 *
	 * @Annotation
	 */
	var Host = makeParamDecorator('Host');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SOURCE = '__source';
	var _THROW_IF_NOT_FOUND = new Object();
	var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	/**
	 * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
	 *
	 * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
	 * project.
	 *
	 * @experimental
	 */
	var INJECTOR = new InjectionToken('INJECTOR');
	var NullInjector = /** @class */ (function () {
	    function NullInjector() {
	    }
	    NullInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	        if (notFoundValue === _THROW_IF_NOT_FOUND) {
	            throw new Error("NullInjectorError: No provider for " + stringify(token) + "!");
	        }
	        return notFoundValue;
	    };
	    return NullInjector;
	}());
	/**
	 * Concrete injectors implement this interface.
	 *
	 * For more details, see the ["Dependency Injection Guide"](guide/dependency-injection).
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * {@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * `Injector` returns itself when given `Injector` as a token:
	 *
	 * {@example core/di/ts/injector_spec.ts region='injectInjector'}
	 *
	 *
	 */
	var Injector = /** @class */ (function () {
	    function Injector() {
	    }
	    /**
	     * Create a new Injector which is configure using `StaticProvider`s.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
	     */
	    Injector.create = function (options, parent) {
	        if (Array.isArray(options)) {
	            return new StaticInjector(options, parent);
	        }
	        else {
	            return new StaticInjector(options.providers, options.parent, options.name || null);
	        }
	    };
	    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    Injector.NULL = new NullInjector();
	    Injector.ngInjectableDef = defineInjectable({
	        providedIn: 'any',
	        factory: function () { return inject(INJECTOR); },
	    });
	    return Injector;
	}());
	var IDENT = function (value) {
	    return value;
	};
	var EMPTY$1 = [];
	var CIRCULAR = IDENT;
	var MULTI_PROVIDER_FN = function () {
	    return Array.prototype.slice.call(arguments);
	};
	var GET_PROPERTY_NAME = {};
	var USE_VALUE = getClosureSafeProperty$1({ provide: String, useValue: GET_PROPERTY_NAME });
	var NG_TOKEN_PATH = 'ngTokenPath';
	var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
	var NULL_INJECTOR = Injector.NULL;
	var NEW_LINE = /\n/gm;
	var NO_NEW_LINE = 'ɵ';
	var StaticInjector = /** @class */ (function () {
	    function StaticInjector(providers, parent, source) {
	        if (parent === void 0) { parent = NULL_INJECTOR; }
	        if (source === void 0) { source = null; }
	        this.parent = parent;
	        this.source = source;
	        var records = this._records = new Map();
	        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY$1, value: this, useNew: false });
	        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY$1, value: this, useNew: false });
	        recursivelyProcessProviders(records, providers);
	    }
	    StaticInjector.prototype.get = function (token, notFoundValue, flags) {
	        if (flags === void 0) { flags = 0 /* Default */; }
	        var record = this._records.get(token);
	        try {
	            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);
	        }
	        catch (e) {
	            var tokenPath = e[NG_TEMP_TOKEN_PATH];
	            if (token[SOURCE]) {
	                tokenPath.unshift(token[SOURCE]);
	            }
	            e.message = formatError('\n' + e.message, tokenPath, this.source);
	            e[NG_TOKEN_PATH] = tokenPath;
	            e[NG_TEMP_TOKEN_PATH] = null;
	            throw e;
	        }
	    };
	    StaticInjector.prototype.toString = function () {
	        var tokens = [], records = this._records;
	        records.forEach(function (v, token) { return tokens.push(stringify(token)); });
	        return "StaticInjector[" + tokens.join(', ') + "]";
	    };
	    return StaticInjector;
	}());
	function resolveProvider(provider) {
	    var deps = computeDeps(provider);
	    var fn = IDENT;
	    var value = EMPTY$1;
	    var useNew = false;
	    var provide = resolveForwardRef(provider.provide);
	    if (USE_VALUE in provider) {
	        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
	        value = provider.useValue;
	    }
	    else if (provider.useFactory) {
	        fn = provider.useFactory;
	    }
	    else if (provider.useExisting) ;
	    else if (provider.useClass) {
	        useNew = true;
	        fn = resolveForwardRef(provider.useClass);
	    }
	    else if (typeof provide == 'function') {
	        useNew = true;
	        fn = provide;
	    }
	    else {
	        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
	    }
	    return { deps: deps, fn: fn, useNew: useNew, value: value };
	}
	function multiProviderMixError(token) {
	    return staticError('Cannot mix multi providers and regular providers', token);
	}
	function recursivelyProcessProviders(records, provider) {
	    if (provider) {
	        provider = resolveForwardRef(provider);
	        if (provider instanceof Array) {
	            // if we have an array recurse into the array
	            for (var i = 0; i < provider.length; i++) {
	                recursivelyProcessProviders(records, provider[i]);
	            }
	        }
	        else if (typeof provider === 'function') {
	            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
	            // error messages
	            throw staticError('Function/Class not supported', provider);
	        }
	        else if (provider && typeof provider === 'object' && provider.provide) {
	            // At this point we have what looks like a provider: {provide: ?, ....}
	            var token = resolveForwardRef(provider.provide);
	            var resolvedProvider = resolveProvider(provider);
	            if (provider.multi === true) {
	                // This is a multi provider.
	                var multiProvider = records.get(token);
	                if (multiProvider) {
	                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {
	                        throw multiProviderMixError(token);
	                    }
	                }
	                else {
	                    // Create a placeholder factory which will look up the constituents of the multi provider.
	                    records.set(token, multiProvider = {
	                        token: provider.provide,
	                        deps: [],
	                        useNew: false,
	                        fn: MULTI_PROVIDER_FN,
	                        value: EMPTY$1
	                    });
	                }
	                // Treat the provider as the token.
	                token = provider;
	                multiProvider.deps.push({ token: token, options: 6 /* Default */ });
	            }
	            var record = records.get(token);
	            if (record && record.fn == MULTI_PROVIDER_FN) {
	                throw multiProviderMixError(token);
	            }
	            records.set(token, resolvedProvider);
	        }
	        else {
	            throw staticError('Unexpected provider', provider);
	        }
	    }
	}
	function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
	    try {
	        return resolveToken(token, record, records, parent, notFoundValue, flags);
	    }
	    catch (e) {
	        // ensure that 'e' is of type Error.
	        if (!(e instanceof Error)) {
	            e = new Error(e);
	        }
	        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
	        path.unshift(token);
	        if (record && record.value == CIRCULAR) {
	            // Reset the Circular flag.
	            record.value = EMPTY$1;
	        }
	        throw e;
	    }
	}
	function resolveToken(token, record, records, parent, notFoundValue, flags) {
	    var value;
	    if (record && !(flags & 4 /* SkipSelf */)) {
	        // If we don't have a record, this implies that we don't own the provider hence don't know how
	        // to resolve it.
	        value = record.value;
	        if (value == CIRCULAR) {
	            throw Error(NO_NEW_LINE + 'Circular dependency');
	        }
	        else if (value === EMPTY$1) {
	            record.value = CIRCULAR;
	            var obj = undefined;
	            var useNew = record.useNew;
	            var fn = record.fn;
	            var depRecords = record.deps;
	            var deps = EMPTY$1;
	            if (depRecords.length) {
	                deps = [];
	                for (var i = 0; i < depRecords.length; i++) {
	                    var depRecord = depRecords[i];
	                    var options = depRecord.options;
	                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;
	                    deps.push(tryResolveToken(
	                    // Current Token to resolve
	                    depRecord.token, 
	                    // A record which describes how to resolve the token.
	                    // If undefined, this means we don't have such a record
	                    childRecord, 
	                    // Other records we know about.
	                    records, 
	                    // If we don't know how to resolve dependency and we should not check parent for it,
	                    // than pass in Null injector.
	                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));
	                }
	            }
	            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(obj, deps);
	        }
	    }
	    else if (!(flags & 2 /* Self */)) {
	        value = parent.get(token, notFoundValue, 0 /* Default */);
	    }
	    return value;
	    var _a;
	}
	function computeDeps(provider) {
	    var deps = EMPTY$1;
	    var providerDeps = provider.deps;
	    if (providerDeps && providerDeps.length) {
	        deps = [];
	        for (var i = 0; i < providerDeps.length; i++) {
	            var options = 6 /* Default */;
	            var token = resolveForwardRef(providerDeps[i]);
	            if (token instanceof Array) {
	                for (var j = 0, annotations = token; j < annotations.length; j++) {
	                    var annotation = annotations[j];
	                    if (annotation instanceof Optional || annotation == Optional) {
	                        options = options | 1 /* Optional */;
	                    }
	                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
	                        options = options & ~2 /* CheckSelf */;
	                    }
	                    else if (annotation instanceof Self || annotation == Self) {
	                        options = options & ~4 /* CheckParent */;
	                    }
	                    else if (annotation instanceof Inject) {
	                        token = annotation.token;
	                    }
	                    else {
	                        token = resolveForwardRef(annotation);
	                    }
	                }
	            }
	            deps.push({ token: token, options: options });
	        }
	    }
	    else if (provider.useExisting) {
	        var token = resolveForwardRef(provider.useExisting);
	        deps = [{ token: token, options: 6 /* Default */ }];
	    }
	    else if (!providerDeps && !(USE_VALUE in provider)) {
	        // useValue & useExisting are the only ones which are exempt from deps all others need it.
	        throw staticError('\'deps\' required', provider);
	    }
	    return deps;
	}
	function formatError(text, obj, source) {
	    if (source === void 0) { source = null; }
	    text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
	    var context = stringify(obj);
	    if (obj instanceof Array) {
	        context = obj.map(stringify).join(' -> ');
	    }
	    else if (typeof obj === 'object') {
	        var parts = [];
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                var value = obj[key];
	                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
	            }
	        }
	        context = "{" + parts.join(', ') + "}";
	    }
	    return "StaticInjectorError" + (source ? '(' + source + ')' : '') + "[" + context + "]: " + text.replace(NEW_LINE, '\n  ');
	}
	function staticError(text, obj) {
	    return new Error(formatError(text, obj));
	}
	function getClosureSafeProperty$1(objWithPropertyToExtract) {
	    for (var key in objWithPropertyToExtract) {
	        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {
	            return key;
	        }
	    }
	    throw Error('!prop');
	}
	/**
	 * Current injector value used by `inject`.
	 * - `undefined`: it is an error to call `inject`
	 * - `null`: `inject` can be called but there is no injector (limp-mode).
	 * - Injector instance: Use the injector for resolution.
	 */
	var _currentInjector = undefined;
	function setCurrentInjector(injector) {
	    var former = _currentInjector;
	    _currentInjector = injector;
	    return former;
	}
	function inject(token, flags) {
	    if (flags === void 0) { flags = 0 /* Default */; }
	    if (_currentInjector === undefined) {
	        throw new Error("inject() must be called from an injection context");
	    }
	    else if (_currentInjector === null) {
	        var injectableDef = token.ngInjectableDef;
	        if (injectableDef && injectableDef.providedIn == 'root') {
	            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :
	                injectableDef.value;
	        }
	        throw new Error("Injector: NOT_FOUND [" + stringify(token) + "]");
	    }
	    else {
	        return _currentInjector.get(token, flags & 8 /* Optional */ ? null : undefined, flags);
	    }
	}
	function injectArgs(types) {
	    var args = [];
	    for (var i = 0; i < types.length; i++) {
	        var arg = types[i];
	        if (Array.isArray(arg)) {
	            if (arg.length === 0) {
	                throw new Error('Arguments array must have arguments.');
	            }
	            var type = undefined;
	            var flags = 0 /* Default */;
	            for (var j = 0; j < arg.length; j++) {
	                var meta = arg[j];
	                if (meta instanceof Optional || meta.__proto__.ngMetadataName === 'Optional') {
	                    flags |= 8 /* Optional */;
	                }
	                else if (meta instanceof SkipSelf || meta.__proto__.ngMetadataName === 'SkipSelf') {
	                    flags |= 4 /* SkipSelf */;
	                }
	                else if (meta instanceof Self || meta.__proto__.ngMetadataName === 'Self') {
	                    flags |= 2 /* Self */;
	                }
	                else if (meta instanceof Inject) {
	                    type = meta.token;
	                }
	                else {
	                    type = meta;
	                }
	            }
	            args.push(inject(type, flags));
	        }
	        else {
	            args.push(inject(arg));
	        }
	    }
	    return args;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var GET_PROPERTY_NAME$1 = {};
	var ɵ0$1 = GET_PROPERTY_NAME$1;
	var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: ɵ0$1 }, GET_PROPERTY_NAME$1);
	var EMPTY_ARRAY = [];
	function convertInjectableProviderToFactory(type, provider) {
	    if (!provider) {
	        var reflectionCapabilities = new ReflectionCapabilities();
	        var deps_1 = reflectionCapabilities.parameters(type);
	        // TODO - convert to flags.
	        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_1))))(); };
	    }
	    if (USE_VALUE$1 in provider) {
	        var valueProvider_1 = provider;
	        return function () { return valueProvider_1.useValue; };
	    }
	    else if (provider.useExisting) {
	        var existingProvider_1 = provider;
	        return function () { return inject(existingProvider_1.useExisting); };
	    }
	    else if (provider.useFactory) {
	        var factoryProvider_1 = provider;
	        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, __spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY))); };
	    }
	    else if (provider.useClass) {
	        var classProvider_1 = provider;
	        var deps_2 = provider.deps;
	        if (!deps_2) {
	            var reflectionCapabilities = new ReflectionCapabilities();
	            deps_2 = reflectionCapabilities.parameters(type);
	        }
	        return function () {
	            return new ((_a = classProvider_1.useClass).bind.apply(_a, __spread([void 0], injectArgs(deps_2))))();
	            var _a;
	        };
	    }
	    else {
	        var deps_3 = provider.deps;
	        if (!deps_3) {
	            var reflectionCapabilities = new ReflectionCapabilities();
	            deps_3 = reflectionCapabilities.parameters(type);
	        }
	        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_3))))(); };
	    }
	}
	/**
	* Injectable decorator and metadata.
	*
	* @Annotation
	*/
	var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (injectableType, options) {
	    if (options && options.providedIn !== undefined &&
	        injectableType.ngInjectableDef === undefined) {
	        injectableType.ngInjectableDef = defineInjectable({
	            providedIn: options.providedIn,
	            factory: convertInjectableProviderToFactory(injectableType, options)
	        });
	    }
	});

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines a schema that allows an NgModule to contain the following:
	 * - Non-Angular elements named with dash case (`-`).
	 * - Element properties named with dash case (`-`).
	 * Dash case is the naming convention for custom elements.
	 *
	 *
	 */
	var CUSTOM_ELEMENTS_SCHEMA = {
	    name: 'custom-elements'
	};
	/**
	 * Defines a schema that allows any property on any element.
	 *
	 * @experimental
	 */
	var NO_ERRORS_SCHEMA = {
	    name: 'no-errors-schema'
	};
	/**
	 * Decorator that marks the following class as an NgModule, and supplies
	 * configuration metadata for it.
	 *
	 * @Annotation
	 */
	var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, 
	/**
	 * Decorator that marks the following class as an NgModule, and supplies
	 * configuration metadata for it.
	 */
	function (moduleType, metadata) {
	    var imports = (metadata && metadata.imports) || [];
	    if (metadata && metadata.exports) {
	        imports = __spread(imports, [metadata.exports]);
	    }
	    moduleType.ngInjectorDef = defineInjector({
	        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
	        providers: metadata && metadata.providers,
	        imports: imports,
	    });
	});

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines template and style encapsulation options available for Component's {@link Component}.
	 *
	 * See {@link Component#encapsulation encapsulation}.
	 *
	 */
	var ViewEncapsulation;
	(function (ViewEncapsulation) {
	    /**
	     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	     * Element and pre-processing the style rules provided via {@link Component#styles styles} or
	     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
	     * selectors.
	     *
	     * This is the default option.
	     */
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    /**
	     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.
	     * Use the native encapsulation mechanism of the renderer.
	     *
	     * For the DOM this means using the deprecated [Shadow DOM
	     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    /**
	     * Don't provide any template or style encapsulation.
	     */
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    /**
	     * Use Shadow DOM to encapsulate styles.
	     *
	     * For the DOM this means using modern [Shadow
	     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     *
	     * ### Example
	     * {@example core/ts/metadata/encapsulation.ts region='longform'}
	     */
	    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
	})(ViewEncapsulation || (ViewEncapsulation = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description Represents the version of Angular
	 *
	 *
	 */
	var Version = /** @class */ (function () {
	    function Version(full) {
	        this.full = full;
	        this.major = full.split('.')[0];
	        this.minor = full.split('.')[1];
	        this.patch = full.split('.').slice(2).join('.');
	    }
	    return Version;
	}());
	var VERSION = new Version('6.0.9');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
	var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
	var ERROR_LOGGER = 'ngErrorLogger';
	function getDebugContext(error) {
	    return error[ERROR_DEBUG_CONTEXT];
	}
	function getOriginalError(error) {
	    return error[ERROR_ORIGINAL_ERROR];
	}
	function getErrorLogger(error) {
	    return error[ERROR_LOGGER] || defaultErrorLogger;
	}
	function defaultErrorLogger(console) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    console.error.apply(console, __spread(values));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * @NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 */
	var ErrorHandler = /** @class */ (function () {
	    function ErrorHandler() {
	        /**
	         * @internal
	         */
	        this._console = console;
	    }
	    ErrorHandler.prototype.handleError = function (error) {
	        var originalError = this._findOriginalError(error);
	        var context = this._findContext(error);
	        // Note: Browser consoles show the place from where console.error was called.
	        // We can use this to give users additional information about the error.
	        var errorLogger = getErrorLogger(error);
	        errorLogger(this._console, "ERROR", error);
	        if (originalError) {
	            errorLogger(this._console, "ORIGINAL ERROR", originalError);
	        }
	        if (context) {
	            errorLogger(this._console, 'ERROR CONTEXT', context);
	        }
	    };
	    /** @internal */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return getDebugContext(error) ? getDebugContext(error) :
	                this._findContext(getOriginalError(error));
	        }
	        return null;
	    };
	    /** @internal */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var e = getOriginalError(error);
	        while (e && getOriginalError(e)) {
	            e = getOriginalError(e);
	        }
	        return e;
	    };
	    return ErrorHandler;
	}());
	function wrappedError(message, originalError) {
	    var msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
	    var error = Error(msg);
	    error[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (res.indexOf(keys[i]) > -1) {
	            res.push(keys[i]);
	            return res;
	        }
	        res.push(keys[i]);
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(keys.slice().reverse());
	        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    }
	    return '';
	}
	function injectionError(injector, key, constructResolvingMessage, originalError) {
	    var keys = [key];
	    var errMsg = constructResolvingMessage(keys);
	    var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));
	    error.addKey = addKey;
	    error.keys = keys;
	    error.injectors = [injector];
	    error.constructResolvingMessage = constructResolvingMessage;
	    error[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	function addKey(injector, key) {
	    this.injectors.push(injector);
	    this.keys.push(key);
	    // Note: This updated message won't be reflected in the `.stack` property
	    this.message = this.constructResolvingMessage(this.keys);
	}
	/**
	 * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Provider} for the given key.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 */
	function noProviderError(injector, key) {
	    return injectionError(injector, key, function (keys) {
	        var first$$1 = stringify(keys[0].token);
	        return "No provider for " + first$$1 + "!" + constructResolvingPath(keys);
	    });
	}
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 */
	function cyclicDependencyError(injector, key) {
	    return injectionError(injector, key, function (keys) {
	        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	    });
	}
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);

	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 */
	function instantiationError(injector, originalException, originalStack, key) {
	    return injectionError(injector, key, function (keys) {
	        var first$$1 = stringify(keys[0].token);
	        return originalException.message + ": Error during instantiation of " + first$$1 + "!" + constructResolvingPath(keys) + ".";
	    }, originalException);
	}
	/**
	 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 */
	function invalidProviderError(provider) {
	    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	}
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 *
	 */
	function noAnnotationError(typeOrFunc, params) {
	    var signature = [];
	    for (var i = 0, ii = params.length; i < ii; i++) {
	        var parameter = params[i];
	        if (!parameter || parameter.length == 0) {
	            signature.push('?');
	        }
	        else {
	            signature.push(parameter.map(stringify).join(' '));
	        }
	    }
	    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	        signature.join(', ') + '). ' +
	        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	        stringify(typeOrFunc) + '\' is decorated with Injectable.');
	}
	/**
	 * Thrown when getting an object by index.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 *
	 */
	function outOfBoundsError(index) {
	    return Error("Index " + index + " is out-of-bounds.");
	}
	// TODO: add a working example after alpha38 is released
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   { provide: "Strings", useValue: "string1", multi: true},
	 *   { provide: "Strings", useValue: "string2", multi: false}
	 * ])).toThrowError();
	 * ```
	 */
	function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A unique object used for retrieving items from the {@link ReflectiveInjector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
	 * the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
	 * resolving
	 * providers.
	 * @deprecated No replacement
	 */
	var ReflectiveKey = /** @class */ (function () {
	    /**
	     * Private
	     */
	    function ReflectiveKey(token, id) {
	        this.token = token;
	        this.id = id;
	        if (!token) {
	            throw new Error('Token must be defined!');
	        }
	        this.displayName = stringify(this.token);
	    }
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    ReflectiveKey.get = function (token) {
	        return _globalKeyRegistry.get(resolveForwardRef(token));
	    };
	    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return ReflectiveKey;
	}());
	var KeyRegistry = /** @class */ (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof ReflectiveKey)
	            return token;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	}());
	var _globalKeyRegistry = new KeyRegistry();

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = /** @class */ (function () {
	    function Reflector(reflectionCapabilities) {
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
	    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
	    };
	    Reflector.prototype.resolveEnum = function (identifier, name) {
	        return this.reflectionCapabilities.resolveEnum(identifier, name);
	    };
	    return Reflector;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	var reflector = new Reflector(new ReflectionCapabilities());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var ReflectiveDependency = /** @class */ (function () {
	    function ReflectiveDependency(key, optional, visibility) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	    }
	    ReflectiveDependency.fromKey = function (key) {
	        return new ReflectiveDependency(key, false, null);
	    };
	    return ReflectiveDependency;
	}());
	var _EMPTY_LIST = [];
	var ResolvedReflectiveProvider_ = /** @class */ (function () {
	    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	        this.resolvedFactory = this.resolvedFactories[0];
	    }
	    return ResolvedReflectiveProvider_;
	}());
	/**
	 * An internal resolved representation of a factory function created by resolving `Provider`.
	 * @experimental
	 */
	var ResolvedReflectiveFactory = /** @class */ (function () {
	    function ResolvedReflectiveFactory(
	    /**
	     * Factory function which can return an instance of an object represented by a key.
	     */
	    factory, 
	    /**
	     * Arguments (dependencies) to the `factory` function.
	     */
	    dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedReflectiveFactory;
	}());
	/**
	 * Resolve a single provider.
	 */
	function resolveReflectiveFactory(provider) {
	    var factoryFn;
	    var resolvedDeps;
	    if (provider.useClass) {
	        var useClass = resolveForwardRef(provider.useClass);
	        factoryFn = reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (provider.useExisting) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	    }
	    else if (provider.useFactory) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	}
	/**
	 * Converts the `Provider` into `ResolvedProvider`.
	 *
	 * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
	 * syntax.
	 */
	function resolveReflectiveProvider(provider) {
	    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
	}
	/**
	 * Resolve a list of Providers.
	 */
	function resolveReflectiveProviders(providers) {
	    var normalized = _normalizeProviders(providers, []);
	    var resolved = normalized.map(resolveReflectiveProvider);
	    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	    return Array.from(resolvedProviderMap.values());
	}
	/**
	 * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
	 * multi providers have been merged.
	 */
	function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	    for (var i = 0; i < providers.length; i++) {
	        var provider = providers[i];
	        var existing = normalizedProvidersMap.get(provider.key.id);
	        if (existing) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var resolvedProvider = void 0;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof Type) {
	            res.push({ provide: b, useClass: b });
	        }
	        else if (b && typeof b == 'object' && b.provide !== undefined) {
	            res.push(b);
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else {
	            throw invalidProviderError(b);
	        }
	    });
	    return res;
	}
	function constructDependencies(typeOrFunc, dependencies) {
	    if (!dependencies) {
	        return _dependenciesFor(typeOrFunc);
	    }
	    else {
	        var params_1 = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	    }
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflector.parameters(typeOrFunc);
	    if (!params)
	        return [];
	    if (params.some(function (p) { return p == null; })) {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	function _extractToken(typeOrFunc, metadata, params) {
	    var token = null;
	    var optional = false;
	    if (!Array.isArray(metadata)) {
	        if (metadata instanceof Inject) {
	            return _createDependency(metadata.token, optional, null);
	        }
	        else {
	            return _createDependency(metadata, optional, null);
	        }
	    }
	    var visibility = null;
	    for (var i = 0; i < metadata.length; ++i) {
	        var paramMetadata = metadata[i];
	        if (paramMetadata instanceof Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof Inject) {
	            token = paramMetadata.token;
	        }
	        else if (paramMetadata instanceof Optional) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	            visibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof InjectionToken) {
	            token = paramMetadata;
	        }
	    }
	    token = resolveForwardRef(token);
	    if (token != null) {
	        return _createDependency(token, optional, visibility);
	    }
	    else {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	}
	function _createDependency(token, optional, visibility) {
	    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Threshold for the dynamic version
	var UNDEFINED = new Object();
	/**
	 * A ReflectiveDependency injection container used for instantiating objects and resolving
	 * dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * @Injectable()
	 * class Engine {
	 * }
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
	 */
	var ReflectiveInjector = /** @class */ (function () {
	    function ReflectiveInjector() {
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of `ResolvedReflectiveProvider`s.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     */
	    ReflectiveInjector.resolve = function (providers) {
	        return resolveReflectiveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, `Provider`,
	     * or a recursive array of more providers.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     */
	    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, Engine]);
	     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     * @experimental
	     */
	    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	        return new ReflectiveInjector_(providers, parent);
	    };
	    return ReflectiveInjector;
	}());
	var ReflectiveInjector_ = /** @class */ (function () {
	    /**
	     * Private
	     */
	    function ReflectiveInjector_(_providers, _parent) {
	        /** @internal */
	        this._constructionCounter = 0;
	        this._providers = _providers;
	        this.parent = _parent || null;
	        var len = _providers.length;
	        this.keyIds = new Array(len);
	        this.objs = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.keyIds[i] = _providers[i].key.id;
	            this.objs[i] = UNDEFINED;
	        }
	    }
	    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	    };
	    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return this.createChildFromResolved(ResolvedReflectiveProviders);
	    };
	    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	        var inj = new ReflectiveInjector_(providers);
	        inj.parent = this;
	        return inj;
	    };
	    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	    };
	    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider);
	    };
	    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this._providers.length) {
	            throw outOfBoundsError(index);
	        }
	        return this._providers[index];
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._new = function (provider) {
	        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	            throw cyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider);
	    };
	    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
	    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	        if (provider.multiProvider) {
	            var res = new Array(provider.resolvedFactories.length);
	            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0]);
	        }
	    };
	    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
	        var _this = this;
	        var factory = ResolvedReflectiveFactory$$1.factory;
	        var deps;
	        try {
	            deps =
	                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	        }
	        catch (e) {
	            if (e.addKey) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var obj;
	        try {
	            obj = factory.apply(void 0, __spread(deps));
	        }
	        catch (e) {
	            throw instantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	    };
	    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	        if (key === ReflectiveInjector_.INJECTOR_KEY) {
	            return this;
	        }
	        if (visibility instanceof Self) {
	            return this._getByKeySelf(key, notFoundValue);
	        }
	        else {
	            return this._getByKeyDefault(key, notFoundValue, visibility);
	        }
	    };
	    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	        for (var i = 0; i < this.keyIds.length; i++) {
	            if (this.keyIds[i] === keyId) {
	                if (this.objs[i] === UNDEFINED) {
	                    this.objs[i] = this._new(this._providers[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return UNDEFINED;
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	        if (notFoundValue !== THROW_IF_NOT_FOUND) {
	            return notFoundValue;
	        }
	        else {
	            throw noProviderError(this, key);
	        }
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	        var obj = this._getObjByKeyId(key.id);
	        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	        var inj;
	        if (visibility instanceof SkipSelf) {
	            inj = this.parent;
	        }
	        else {
	            inj = this;
	        }
	        while (inj instanceof ReflectiveInjector_) {
	            var inj_ = inj;
	            var obj = inj_._getObjByKeyId(key.id);
	            if (obj !== UNDEFINED)
	                return obj;
	            inj = inj_.parent;
	        }
	        if (inj !== null) {
	            return inj.get(key.token, notFoundValue);
	        }
	        else {
	            return this._throwOrNull(key, notFoundValue);
	        }
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	        get: function () {
	            var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                .join(', ');
	            return "ReflectiveInjector(providers: [" + providers + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);
	    return ReflectiveInjector_;
	}());
	function _mapProviders(injector, fn) {
	    var res = new Array(injector._providers.length);
	    for (var i = 0; i < injector._providers.length; ++i) {
	        res[i] = fn(injector.getProviderAtIndex(i));
	    }
	    return res;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An internal token whose presence in an injector indicates that the injector should treat itself
	 * as a root scoped injector when processing requests for unknown tokens which may indicate
	 * they are provided in the root scope.
	 */
	var APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Marker which indicates that a value has not yet been created from the factory function.
	 */
	var NOT_YET = {};
	/**
	 * Marker which indicates that the factory function for a token is in the process of being called.
	 *
	 * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
	 * injection of a dependency has recursively attempted to inject the original token, and there is
	 * a circular dependency among the providers.
	 */
	var CIRCULAR$1 = {};
	var EMPTY_ARRAY$1 = [];
	/**
	 * A lazily initialized NullInjector.
	 */
	var NULL_INJECTOR$1 = undefined;
	function getNullInjector() {
	    if (NULL_INJECTOR$1 === undefined) {
	        NULL_INJECTOR$1 = new NullInjector();
	    }
	    return NULL_INJECTOR$1;
	}
	/**
	 * Create a new `Injector` which is configured using `InjectorType`s.
	 *
	 * @experimental
	 */
	function createInjector(defType, parent) {
	    if (parent === void 0) { parent = null; }
	    parent = parent || getNullInjector();
	    return new R3Injector(defType, parent);
	}
	var R3Injector = /** @class */ (function () {
	    function R3Injector(def, parent) {
	        var _this = this;
	        this.parent = parent;
	        /**
	         * Map of tokens to records which contain the instances of those tokens.
	         */
	        this.records = new Map();
	        /**
	         * The transitive set of `InjectorType`s which define this injector.
	         */
	        this.injectorDefTypes = new Set();
	        /**
	         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
	         */
	        this.onDestroy = new Set();
	        /**
	         * Flag indicating that this injector was previously destroyed.
	         */
	        this.destroyed = false;
	        // Start off by creating Records for every provider declared in every InjectorType
	        // included transitively in `def`.
	        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });
	        // Make sure the INJECTOR token provides this injector.
	        this.records.set(INJECTOR, makeRecord(undefined, this));
	        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
	        // any injectable scoped to APP_ROOT_SCOPE.
	        this.isRootInjector = this.records.has(APP_ROOT);
	        // Eagerly instantiate the InjectorType classes themselves.
	        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });
	    }
	    /**
	     * Destroy the injector and release references to every instance or provider associated with it.
	     *
	     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
	     * hook was found.
	     */
	    R3Injector.prototype.destroy = function () {
	        this.assertNotDestroyed();
	        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().
	        this.destroyed = true;
	        try {
	            // Call all the lifecycle hooks.
	            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });
	        }
	        finally {
	            // Release all references.
	            this.records.clear();
	            this.onDestroy.clear();
	            this.injectorDefTypes.clear();
	        }
	    };
	    R3Injector.prototype.get = function (token, notFoundValue, flags) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (flags === void 0) { flags = 0 /* Default */; }
	        this.assertNotDestroyed();
	        // Set the injection context.
	        var previousInjector = setCurrentInjector(this);
	        try {
	            // Check for the SkipSelf flag.
	            if (!(flags & 4 /* SkipSelf */)) {
	                // SkipSelf isn't set, check if the record belongs to this injector.
	                var record = this.records.get(token);
	                if (record === undefined) {
	                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef
	                    // with a scope matching this injector.
	                    var def = couldBeInjectableType(token) &&
	                        token.ngInjectableDef ||
	                        undefined;
	                    if (def !== undefined && this.injectableDefInScope(def)) {
	                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here
	                        // all along.
	                        record = injectableDefRecord(token);
	                        this.records.set(token, record);
	                    }
	                }
	                // If a record was found, get the instance for it and return it.
	                if (record !== undefined) {
	                    return this.hydrate(token, record);
	                }
	            }
	            // Select the next injector based on the Self flag - if self is set, the next injector is
	            // the NullInjector, otherwise it's the parent.
	            var next = !(flags & 2 /* Self */) ? this.parent : getNullInjector();
	            return this.parent.get(token, notFoundValue);
	        }
	        finally {
	            // Lastly, clean up the state by restoring the previous injector.
	            setCurrentInjector(previousInjector);
	        }
	    };
	    R3Injector.prototype.assertNotDestroyed = function () {
	        if (this.destroyed) {
	            throw new Error('Injector has already been destroyed.');
	        }
	    };
	    /**
	     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers
	     * to this injector.
	     */
	    R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents) {
	        var _this = this;
	        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
	        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an
	        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
	        // read, so care is taken to only do the read once.
	        // First attempt to read the ngInjectorDef.
	        var def = defOrWrappedDef.ngInjectorDef;
	        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.
	        var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;
	        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
	        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
	        // is the `ngModule`.
	        var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;
	        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some
	        // extra providers.
	        var providers = (ngModule !== undefined) && defOrWrappedDef.providers ||
	            EMPTY_ARRAY$1;
	        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
	        // `InjectorDef` is on its `ngModule`.
	        if (ngModule !== undefined) {
	            def = ngModule.ngInjectorDef;
	        }
	        // If no definition was found, throw.
	        if (def == null) {
	            throw new Error("Type " + stringify(defType) + " is missing an ngInjectorDef definition.");
	        }
	        // Check for circular dependencies.
	        if (parents.has(defType)) {
	            throw new Error("Circular dependency: type " + stringify(defType) + " ends up importing itself.");
	        }
	        // Track the InjectorType and add a provider for it.
	        this.injectorDefTypes.add(defType);
	        this.records.set(defType, makeRecord(def.factory));
	        // Add providers in the same way that @NgModule resolution did:
	        // First, include providers from any imports.
	        if (def.imports != null) {
	            // Before processing defType's imports, add it to the set of parents. This way, if it ends
	            // up deeply importing itself, this can be detected.
	            parents.add(defType);
	            try {
	                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });
	            }
	            finally {
	                // Remove it from the parents set when finished.
	                parents.delete(defType);
	            }
	        }
	        // Next, include providers listed on the definition itself.
	        if (def.providers != null) {
	            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });
	        }
	        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.
	        deepForEach(providers, function (provider) { return _this.processProvider(provider); });
	    };
	    /**
	     * Process a `SingleProvider` and add it.
	     */
	    R3Injector.prototype.processProvider = function (provider) {
	        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
	        // property.
	        provider = resolveForwardRef(provider);
	        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
	        // Construct a `Record` for the provider.
	        var record = providerToRecord(provider);
	        if (!isTypeProvider(provider) && provider.multi === true) {
	            // If the provider indicates that it's a multi-provider, process it specially.
	            // First check whether it's been defined already.
	            var multiRecord_1 = this.records.get(token);
	            if (multiRecord_1) {
	                // It has. Throw a nice error if
	                if (multiRecord_1.multi === undefined) {
	                    throw new Error("Mixed multi-provider for " + token + ".");
	                }
	            }
	            else {
	                token = provider;
	                multiRecord_1 = makeRecord(undefined, NOT_YET, true);
	                multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };
	                this.records.set(token, multiRecord_1);
	            }
	            token = provider;
	            multiRecord_1.multi.push(provider);
	        }
	        var existing = this.records.get(token);
	        if (existing && existing.multi !== undefined) {
	            throw new Error("Mixed multi-provider for " + token);
	        }
	        this.records.set(token, record);
	    };
	    R3Injector.prototype.hydrate = function (token, record) {
	        if (record.value === CIRCULAR$1) {
	            throw new Error("Circular dep for " + stringify(token));
	        }
	        else if (record.value === NOT_YET) {
	            record.value = CIRCULAR$1;
	            record.value = record.factory();
	        }
	        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
	            this.onDestroy.add(record.value);
	        }
	        return record.value;
	    };
	    R3Injector.prototype.injectableDefInScope = function (def) {
	        if (!def.providedIn) {
	            return false;
	        }
	        else if (typeof def.providedIn === 'string') {
	            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);
	        }
	        else {
	            return this.injectorDefTypes.has(def.providedIn);
	        }
	    };
	    return R3Injector;
	}());
	function injectableDefRecord(token) {
	    var def = token.ngInjectableDef;
	    if (def === undefined) {
	        throw new Error("Type " + stringify(token) + " is missing an ngInjectableDef definition.");
	    }
	    return makeRecord(def.factory);
	}
	function providerToRecord(provider) {
	    var token = resolveForwardRef(provider);
	    var value = NOT_YET;
	    var factory = undefined;
	    if (isTypeProvider(provider)) {
	        return injectableDefRecord(provider);
	    }
	    else {
	        token = resolveForwardRef(provider.provide);
	        if (isValueProvider(provider)) {
	            value = provider.useValue;
	        }
	        else if (isExistingProvider(provider)) {
	            factory = function () { return inject(provider.useExisting); };
	        }
	        else if (isFactoryProvider(provider)) {
	            factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };
	        }
	        else {
	            var classRef_1 = provider.useClass || token;
	            if (hasDeps(provider)) {
	                factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };
	            }
	            else {
	                return injectableDefRecord(classRef_1);
	            }
	        }
	    }
	    return makeRecord(factory, value);
	}
	function makeRecord(factory, value, multi) {
	    if (value === void 0) { value = NOT_YET; }
	    if (multi === void 0) { multi = false; }
	    return {
	        factory: factory,
	        value: value,
	        multi: multi ? [] : undefined,
	    };
	}
	function deepForEach(input, fn) {
	    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });
	}
	function isValueProvider(value) {
	    return USE_VALUE in value;
	}
	function isExistingProvider(value) {
	    return !!value.useExisting;
	}
	function isFactoryProvider(value) {
	    return !!value.useFactory;
	}
	function isTypeProvider(value) {
	    return typeof value === 'function';
	}
	function hasDeps(value) {
	    return !!value.deps;
	}
	function hasOnDestroy(value) {
	    return typeof value === 'object' && value != null && value.ngOnDestroy &&
	        typeof value.ngOnDestroy === 'function';
	}
	function couldBeInjectableType(value) {
	    return (typeof value === 'function') ||
	        (typeof value === 'object' && value instanceof InjectionToken);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine if the argument is shaped like a Promise
	 */
	function isPromise$1(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	/**
	 * Determine if the argument is an Observable
	 */
	function isObservable$1(obj) {
	    // TODO: use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
	    return !!obj && typeof obj.subscribe === 'function';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A function that will be executed when an application is initialized.
	 * @experimental
	 */
	var APP_INITIALIZER = new InjectionToken('Application Initializer');
	/**
	 * A class that reflects the state of running {@link APP_INITIALIZER}s.
	 *
	 * @experimental
	 */
	var ApplicationInitStatus = /** @class */ (function () {
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this.appInits = appInits;
	        this.initialized = false;
	        this.done = false;
	        this.donePromise = new Promise(function (res, rej) {
	            _this.resolve = res;
	            _this.reject = rej;
	        });
	    }
	    /** @internal */
	    ApplicationInitStatus.prototype.runInitializers = function () {
	        var _this = this;
	        if (this.initialized) {
	            return;
	        }
	        var asyncInitPromises = [];
	        var complete = function () {
	            _this.done = true;
	            _this.resolve();
	        };
	        if (this.appInits) {
	            for (var i = 0; i < this.appInits.length; i++) {
	                var initResult = this.appInits[i]();
	                if (isPromise$1(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });
	        if (asyncInitPromises.length === 0) {
	            complete();
	        }
	        this.initialized = true;
	    };
	    ApplicationInitStatus.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    ApplicationInitStatus.ctorParameters = function () { return [
	        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }
	    ]; };
	    return ApplicationInitStatus;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	 * using this token.
	 * @experimental
	 */
	var APP_ID = new InjectionToken('AppId');
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * @experimental
	 */
	var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * @experimental
	 */
	var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
	/**
	 * A token that indicates an opaque platform id.
	 * @experimental
	 */
	var PLATFORM_ID = new InjectionToken('Platform ID');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * @experimental
	 */
	var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * @experimental
	 */
	var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Console = /** @class */ (function () {
	    function Console() {
	    }
	    Console.prototype.log = function (message) {
	        // tslint:disable-next-line:no-console
	        console.log(message);
	    };
	    // Note: for reporting errors use `DOM.logError()` as it is platform specific
	    Console.prototype.warn = function (message) {
	        // tslint:disable-next-line:no-console
	        console.warn(message);
	    };
	    Console.decorators = [
	        { type: Injectable }
	    ];
	    return Console;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Combination of NgModuleFactory and ComponentFactorys.
	 *
	 * @experimental
	 */
	var ModuleWithComponentFactories = /** @class */ (function () {
	    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	        this.ngModuleFactory = ngModuleFactory;
	        this.componentFactories = componentFactories;
	    }
	    return ModuleWithComponentFactories;
	}());
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 *
	 */
	var Compiler = /** @class */ (function () {
	    function Compiler() {
	    }
	    /**
	     * Compiles the given NgModule and all of its components. All templates of the components listed
	     * in `entryComponents` have to be inlined.
	     */
	    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	    /**
	     * Compiles the given NgModule and all of its components
	     */
	    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	    /**
	     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
	     */
	    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
	     */
	    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Clears all caches.
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    Compiler.decorators = [
	        { type: Injectable }
	    ];
	    return Compiler;
	}());
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * @experimental
	 */
	var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * @experimental
	 */
	var CompilerFactory = /** @class */ (function () {
	    function CompilerFactory() {
	    }
	    return CompilerFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of a Component created via a {@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	 * method.
	 *
	 */
	var ComponentRef = /** @class */ (function () {
	    function ComponentRef() {
	    }
	    return ComponentRef;
	}());
	var ComponentFactory = /** @class */ (function () {
	    function ComponentFactory() {
	    }
	    return ComponentFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function noComponentFactoryError(component) {
	    var error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	    error[ERROR_COMPONENT] = component;
	    return error;
	}
	var ERROR_COMPONENT = 'ngComponent';
	var _NullComponentFactoryResolver = /** @class */ (function () {
	    function _NullComponentFactoryResolver() {
	    }
	    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        throw noComponentFactoryError(component);
	    };
	    return _NullComponentFactoryResolver;
	}());
	var ComponentFactoryResolver = /** @class */ (function () {
	    function ComponentFactoryResolver() {
	    }
	    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	    return ComponentFactoryResolver;
	}());
	var CodegenComponentFactoryResolver = /** @class */ (function () {
	    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
	        this._parent = _parent;
	        this._ngModule = _ngModule;
	        this._factories = new Map();
	        for (var i = 0; i < factories.length; i++) {
	            var factory = factories[i];
	            this._factories.set(factory.componentType, factory);
	        }
	    }
	    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        var factory = this._factories.get(component);
	        if (!factory && this._parent) {
	            factory = this._parent.resolveComponentFactory(component);
	        }
	        if (!factory) {
	            throw noComponentFactoryError(component);
	        }
	        return new ComponentFactoryBoundToModule(factory, this._ngModule);
	    };
	    return CodegenComponentFactoryResolver;
	}());
	var ComponentFactoryBoundToModule = /** @class */ (function (_super) {
	    __extends(ComponentFactoryBoundToModule, _super);
	    function ComponentFactoryBoundToModule(factory, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.factory = factory;
	        _this.ngModule = ngModule;
	        _this.selector = factory.selector;
	        _this.componentType = factory.componentType;
	        _this.ngContentSelectors = factory.ngContentSelectors;
	        _this.inputs = factory.inputs;
	        _this.outputs = factory.outputs;
	        return _this;
	    }
	    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
	    };
	    return ComponentFactoryBoundToModule;
	}(ComponentFactory));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 *
	 */
	var NgModuleRef = /** @class */ (function () {
	    function NgModuleRef() {
	    }
	    return NgModuleRef;
	}());
	/**
	 * @experimental
	 */
	var NgModuleFactory = /** @class */ (function () {
	    function NgModuleFactory() {
	    }
	    return NgModuleFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var trace;
	var events;
	function detectWTF() {
	    var wtf = _global /** TODO #9100 */['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	function createScope(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	function endTimeRange(range$$1) {
	    trace.endTimeRange(range$$1);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * True if WTF is enabled.
	 */
	var wtfEnabled = detectWTF();
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 * @experimental
	 */
	var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 * @experimental
	 */
	var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 * @experimental
	 */
	var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 * @experimental
	 */
	var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * @usageNotes
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter<any> = new EventEmitter();
	 *   @Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * The events payload can be accessed by the parameter `$event` on the components output event
	 * handler:
	 *
	 * ```
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * ### Notes
	 *
	 * Uses Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 *
	 */
	var EventEmitter = /** @class */ (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,
	     * delivers events synchronously or asynchronously.
	     *
	     * @param isAsync By default, events are delivered synchronously (default value: `false`).
	     * Set to `true` for asynchronous event delivery.
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        var _this = _super.call(this) || this;
	        _this.__isAsync = isAsync;
	        return _this;
	    }
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var schedulerFn;
	        var errorFn = function (err) { return null; };
	        var completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        if (generatorOrNext instanceof Subscription) {
	            generatorOrNext.add(sink);
	        }
	        return sink;
	    };
	    return EventEmitter;
	}(Subject));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {@link #run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```
	 * import {Component, NgZone} from '@angular/core';
	 * import {NgIf} from '@angular/common';
	 *
	 * @Component({
	 *   selector: 'ng-zone-demo',
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *         // reenter the Angular zone and display done
	 *         this._ngZone.run(() => { console.log('Outside Done!'); });
	 *       });
	 *     });
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * @experimental
	 */
	var NgZone = /** @class */ (function () {
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	        this.hasPendingMicrotasks = false;
	        this.hasPendingMacrotasks = false;
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         */
	        this.isStable = true;
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         */
	        this.onUnstable = new EventEmitter(false);
	        /**
	         * Notifies when there is no more microtasks enqueued in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         */
	        this.onMicrotaskEmpty = new EventEmitter(false);
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         */
	        this.onStable = new EventEmitter(false);
	        /**
	         * Notifies that an error has been delivered.
	         */
	        this.onError = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error("In this configuration Angular requires Zone.js");
	        }
	        Zone.assertZonePatched();
	        var self = this;
	        self._nesting = 0;
	        self._outer = self._inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            self._inner = self._inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (Zone['TaskTrackingZoneSpec']) {
	            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        forkInnerZoneWithAngularBehavior(self);
	    }
	    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     */
	    NgZone.prototype.run = function (fn, applyThis, applyArgs) {
	        return this._inner.run(fn, applyThis, applyArgs);
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
	     * returned by the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     */
	    NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {
	        var zone = this._inner;
	        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);
	        try {
	            return zone.runTask(task, applyThis, applyArgs);
	        }
	        finally {
	            zone.cancelTask(task);
	        }
	    };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     */
	    NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {
	        return this._inner.runGuarded(fn, applyThis, applyArgs);
	    };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
	     * work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        return this._outer.run(fn);
	    };
	    return NgZone;
	}());
	function noop$1() { }
	var EMPTY_PAYLOAD = {};
	function checkStable(zone) {
	    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
	        try {
	            zone._nesting++;
	            zone.onMicrotaskEmpty.emit(null);
	        }
	        finally {
	            zone._nesting--;
	            if (!zone.hasPendingMicrotasks) {
	                try {
	                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });
	                }
	                finally {
	                    zone.isStable = true;
	                }
	            }
	        }
	    }
	}
	function forkInnerZoneWithAngularBehavior(zone) {
	    zone._inner = zone._inner.fork({
	        name: 'angular',
	        properties: { 'isAngularZone': true },
	        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	            try {
	                onEnter(zone);
	                return delegate.invokeTask(target, task, applyThis, applyArgs);
	            }
	            finally {
	                onLeave(zone);
	            }
	        },
	        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	            try {
	                onEnter(zone);
	                return delegate.invoke(target, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                onLeave(zone);
	            }
	        },
	        onHasTask: function (delegate, current, target, hasTaskState) {
	            delegate.hasTask(target, hasTaskState);
	            if (current === target) {
	                // We are only interested in hasTask events which originate from our zone
	                // (A child hasTask event is not interesting to us)
	                if (hasTaskState.change == 'microTask') {
	                    zone.hasPendingMicrotasks = hasTaskState.microTask;
	                    checkStable(zone);
	                }
	                else if (hasTaskState.change == 'macroTask') {
	                    zone.hasPendingMacrotasks = hasTaskState.macroTask;
	                }
	            }
	        },
	        onHandleError: function (delegate, current, target, error) {
	            delegate.handleError(target, error);
	            zone.runOutsideAngular(function () { return zone.onError.emit(error); });
	            return false;
	        }
	    });
	}
	function onEnter(zone) {
	    zone._nesting++;
	    if (zone.isStable) {
	        zone.isStable = false;
	        zone.onUnstable.emit(null);
	    }
	}
	function onLeave(zone) {
	    zone._nesting--;
	    checkStable(zone);
	}
	/**
	 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
	 * to framework to perform rendering.
	 */
	var NoopNgZone = /** @class */ (function () {
	    function NoopNgZone() {
	        this.hasPendingMicrotasks = false;
	        this.hasPendingMacrotasks = false;
	        this.isStable = true;
	        this.onUnstable = new EventEmitter();
	        this.onMicrotaskEmpty = new EventEmitter();
	        this.onStable = new EventEmitter();
	        this.onError = new EventEmitter();
	    }
	    NoopNgZone.prototype.run = function (fn) { return fn(); };
	    NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };
	    NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };
	    NoopNgZone.prototype.runTask = function (fn) { return fn(); };
	    return NoopNgZone;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * @experimental
	 */
	var Testability = /** @class */ (function () {
	    function Testability(_ngZone) {
	        var _this = this;
	        this._ngZone = _ngZone;
	        this._pendingCount = 0;
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * @internal
	         */
	        this._didWork = false;
	        this._callbacks = [];
	        this._watchAngularEvents();
	        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });
	    }
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    /**
	     * Increases the number of pending request
	     * @deprecated pending requests are now tracked with zones.
	     */
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    /**
	     * Decreases the number of pending request
	     * @deprecated pending requests are now tracked with zones
	     */
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    /**
	     * Whether an associated application is stable
	     */
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    var cb = _this._callbacks.pop();
	                    clearTimeout(cb.timeoutId);
	                    cb.doneCb(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Still not stable, send updates.
	            var pending_1 = this.getPendingTasks();
	            this._callbacks = this._callbacks.filter(function (cb) {
	                if (cb.updateCb && cb.updateCb(pending_1)) {
	                    clearTimeout(cb.timeoutId);
	                    return false;
	                }
	                return true;
	            });
	            this._didWork = true;
	        }
	    };
	    Testability.prototype.getPendingTasks = function () {
	        if (!this.taskTrackingZone) {
	            return [];
	        }
	        return this.taskTrackingZone.macroTasks.map(function (t) {
	            return {
	                source: t.source,
	                isPeriodic: t.data.isPeriodic,
	                delay: t.data.delay,
	                // From TaskTrackingZone:
	                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
	                creationLocation: t.creationLocation,
	                // Added by Zones for XHRs
	                // https://github.com/angular/zone.js/blob/master/lib/browser/browser.ts#L133
	                xhr: t.data.target
	            };
	        });
	    };
	    Testability.prototype.addCallback = function (cb, timeout$$1, updateCb) {
	        var _this = this;
	        var timeoutId = -1;
	        if (timeout$$1 && timeout$$1 > 0) {
	            timeoutId = setTimeout(function () {
	                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });
	                cb(_this._didWork, _this.getPendingTasks());
	            }, timeout$$1);
	        }
	        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });
	    };
	    /**
	     * Wait for the application to be stable with a timeout. If the timeout is reached before that
	     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
	     *
	     * @param doneCb The callback to invoke when Angular is stable or the timeout expires
	     *    whichever comes first.
	     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
	     *    specified, whenStable() will wait forever.
	     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
	     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
	     *    and no further updates will be issued.
	     */
	    Testability.prototype.whenStable = function (doneCb, timeout$$1, updateCb) {
	        if (updateCb && !this.taskTrackingZone) {
	            throw new Error('Task tracking zone is required when passing an update callback to ' +
	                'whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');
	        }
	        // These arguments are 'Function' above to keep the public API simple.
	        this.addCallback(doneCb, timeout$$1, updateCb);
	        this._runCallbacksIfReady();
	    };
	    /**
	     * Get the number of pending requests
	     * @deprecated pending requests are now tracked with zones
	     */
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    /**
	     * Find providers by name
	     * @param using The root element to search from
	     * @param provider The name of binding variable
	     * @param exactMatch Whether using exactMatch
	     */
	    Testability.prototype.findProviders = function (using$$1, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    Testability.ctorParameters = function () { return [
	        { type: NgZone }
	    ]; };
	    return Testability;
	}());
	/**
	 * A global registry of {@link Testability} instances for specific elements.
	 * @experimental
	 */
	var TestabilityRegistry = /** @class */ (function () {
	    function TestabilityRegistry() {
	        /** @internal */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    /**
	     * Registers an application with a testability hook so that it can be tracked
	     * @param token token of application, root element
	     * @param testability Testability hook
	     */
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    /**
	     * Unregisters an application.
	     * @param token token of application, root element
	     */
	    TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };
	    /**
	     * Unregisters all applications
	     */
	    TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };
	    /**
	     * Get a testability hook associated with the application
	     * @param elem root element
	     */
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };
	    /**
	     * Get all registered testabilities
	     */
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	    /**
	     * Get all registered applications(root elements)
	     */
	    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	    /**
	     * Find testability of a node in the Tree
	     * @param elem node
	     * @param findInAncestors whether finding testability in ancestors if testability was not found in
	     * current node
	     */
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    TestabilityRegistry.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    TestabilityRegistry.ctorParameters = function () { return []; };
	    return TestabilityRegistry;
	}());
	var _NoopGetTestability = /** @class */ (function () {
	    function _NoopGetTestability() {
	    }
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {@link GetTestability} implementation used by the Angular testing framework.
	 * @experimental
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _devMode = true;
	var _runModeLocked = false;
	var _platform;
	var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 *
	 */
	function enableProdMode() {
	    if (_runModeLocked) {
	        throw new Error('Cannot enable prod mode after platform setup.');
	    }
	    _devMode = false;
	}
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function isDevMode() {
	    _runModeLocked = true;
	    return _devMode;
	}
	/**
	 * A token for third-party components that can register themselves with NgProbe.
	 *
	 * @experimental
	 */
	var NgProbeToken = /** @class */ (function () {
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function createPlatform(injector) {
	    if (_platform && !_platform.destroyed &&
	        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function createPlatformFactory(parentPlatformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var desc = "Platform: " + name;
	    var marker = new InjectionToken(desc);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        var platform = getPlatform();
	        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	            if (parentPlatformFactory) {
	                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });
	                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform which contains the given token as a provider.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function assertPlatform(requiredToken) {
	    var platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Destroy the existing platform.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function destroyPlatform() {
	    if (_platform && !_platform.destroyed) {
	        _platform.destroy();
	    }
	}
	/**
	 * Returns the current platform.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when a platform is created via a platform factory
	 * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.
	 */
	var PlatformRef = /** @class */ (function () {
	    /** @internal */
	    function PlatformRef(_injector) {
	        this._injector = _injector;
	        this._modules = [];
	        this._destroyListeners = [];
	        this._destroyed = false;
	    }
	    /**
	     * Creates an instance of an `@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * @usageNotes
	     * ### Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        var ngZoneOption = options ? options.ngZone : undefined;
	        var ngZone = getNgZone(ngZoneOption);
	        var providers = [{ provide: NgZone, useValue: ngZone }];
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });
	            var moduleRef = moduleFactory.create(ngZoneInjector);
	            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });
	            ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });
	            return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
	                var initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                initStatus.runInitializers();
	                return initStatus.donePromise.then(function () {
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    /**
	     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	     *
	     * @usageNotes
	     * ### Simple Example
	     *
	     * ```typescript
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     *
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        var compilerFactory = this.injector.get(CompilerFactory);
	        var options = optionsReducer({}, compilerOptions);
	        var compiler = compilerFactory.createCompiler([options]);
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });
	    };
	    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {
	        var appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef._bootstrapComponents.length > 0) {
	            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
	                "Please define one of these.");
	        }
	        this._modules.push(moduleRef);
	    };
	    /**
	     * Register a listener to be called when the platform is disposed.
	     */
	    PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    Object.defineProperty(PlatformRef.prototype, "injector", {
	        /**
	         * Retrieve the platform {@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Destroy the Angular platform and all Angular applications on the page.
	     */
	    PlatformRef.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    Object.defineProperty(PlatformRef.prototype, "destroyed", {
	        get: function () { return this._destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    PlatformRef.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    PlatformRef.ctorParameters = function () { return [
	        { type: Injector }
	    ]; };
	    return PlatformRef;
	}());
	function getNgZone(ngZoneOption) {
	    var ngZone;
	    if (ngZoneOption === 'noop') {
	        ngZone = new NoopNgZone();
	    }
	    else {
	        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||
	            new NgZone({ enableLongStackTrace: isDevMode() });
	    }
	    return ngZone;
	}
	function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
	    try {
	        var result = callback();
	        if (isPromise$1(result)) {
	            return result.catch(function (e) {
	                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	function optionsReducer(dst, objs) {
	    if (Array.isArray(objs)) {
	        dst = objs.reduce(optionsReducer, dst);
	    }
	    else {
	        dst = __assign({}, dst, objs);
	    }
	    return dst;
	}
	/**
	 * A reference to an Angular application running on a page.
	 */
	var ApplicationRef = /** @class */ (function () {
	    /** @internal */
	    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
	        var _this = this;
	        this._zone = _zone;
	        this._console = _console;
	        this._injector = _injector;
	        this._exceptionHandler = _exceptionHandler;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._initStatus = _initStatus;
	        this._bootstrapListeners = [];
	        this._views = [];
	        this._runningTick = false;
	        this._enforceNoNewChanges = false;
	        this._stable = true;
	        /**
	         * Get a list of component types registered to this application.
	         * This list is populated even before the component is created.
	         */
	        this.componentTypes = [];
	        /**
	         * Get a list of components registered to this application.
	         */
	        this.components = [];
	        this._enforceNoNewChanges = isDevMode();
	        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        var isCurrentlyStable = new Observable(function (observer) {
	            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
	                !_this._zone.hasPendingMicrotasks;
	            _this._zone.runOutsideAngular(function () {
	                observer.next(_this._stable);
	                observer.complete();
	            });
	        });
	        var isStable = new Observable(function (observer) {
	            // Create the subscription to onStable outside the Angular Zone so that
	            // the callback is run outside the Angular Zone.
	            var stableSub;
	            _this._zone.runOutsideAngular(function () {
	                stableSub = _this._zone.onStable.subscribe(function () {
	                    NgZone.assertNotInAngularZone();
	                    // Check whether there are no pending macro/micro tasks in the next tick
	                    // to allow for NgZone to update the state.
	                    scheduleMicroTask(function () {
	                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
	                            !_this._zone.hasPendingMicrotasks) {
	                            _this._stable = true;
	                            observer.next(true);
	                        }
	                    });
	                });
	            });
	            var unstableSub = _this._zone.onUnstable.subscribe(function () {
	                NgZone.assertInAngularZone();
	                if (_this._stable) {
	                    _this._stable = false;
	                    _this._zone.runOutsideAngular(function () { observer.next(false); });
	                }
	            });
	            return function () {
	                stableSub.unsubscribe();
	                unstableSub.unsubscribe();
	            };
	        });
	        this.isStable =
	            merge(isCurrentlyStable, isStable.pipe(share()));
	    }
	    /**
	     * Bootstrap a new component at the root level of the application.
	     *
	     * @usageNotes
	     * ### Bootstrap process
	     *
	     * When bootstrapping a new root component into an application, Angular mounts the
	     * specified application component onto DOM elements identified by the componentType's
	     * selector and kicks off automatic change detection to finish initializing the component.
	     *
	     * Optionally, a component can be mounted onto a DOM element that does not match the
	     * componentType's selector.
	     *
	     * ### Example
	     * {@example core/ts/platform/platform.ts region='longform'}
	     */
	    ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory =
	                this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	        }
	        this.componentTypes.push(componentFactory.componentType);
	        // Create a factory associated with the current module if it's not bound to some other
	        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
	            null :
	            this._injector.get(NgModuleRef);
	        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
	        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
	        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	        var testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        if (isDevMode()) {
	            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /**
	     * Invoke this method to explicitly process change detection and its side-effects.
	     *
	     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further changes are detected. If additional changes are picked up during this second cycle,
	     * bindings in the app have side-effects that cannot be resolved in a single change detection
	     * pass.
	     * In this case, Angular throws an error, since an Angular application can only have one change
	     * detection pass during which all change detection must complete.
	     */
	    ApplicationRef.prototype.tick = function () {
	        var _this = this;
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        var scope = ApplicationRef._tickScope();
	        try {
	            this._runningTick = true;
	            this._views.forEach(function (view) { return view.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._views.forEach(function (view) { return view.checkNoChanges(); });
	            }
	        }
	        catch (e) {
	            // Attention: Don't rethrow as it could cancel subscriptions to Observables!
	            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });
	        }
	        finally {
	            this._runningTick = false;
	            wtfLeave(scope);
	        }
	    };
	    /**
	     * Attaches a view so that it will be dirty checked.
	     * The view will be automatically detached when it is destroyed.
	     * This will throw if the view is already attached to a ViewContainer.
	     */
	    ApplicationRef.prototype.attachView = function (viewRef) {
	        var view = viewRef;
	        this._views.push(view);
	        view.attachToAppRef(this);
	    };
	    /**
	     * Detaches a view from dirty checking again.
	     */
	    ApplicationRef.prototype.detachView = function (viewRef) {
	        var view = viewRef;
	        remove(this._views, view);
	        view.detachFromAppRef();
	    };
	    ApplicationRef.prototype._loadComponent = function (componentRef) {
	        this.attachView(componentRef.hostView);
	        this.tick();
	        this.components.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    ApplicationRef.prototype._unloadComponent = function (componentRef) {
	        this.detachView(componentRef.hostView);
	        remove(this.components, componentRef);
	    };
	    /** @internal */
	    ApplicationRef.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._views.slice().forEach(function (view) { return view.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef.prototype, "viewCount", {
	        /**
	         * Returns the number of attached views.
	         */
	        get: function () { return this._views.length; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');
	    ApplicationRef.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    ApplicationRef.ctorParameters = function () { return [
	        { type: NgZone },
	        { type: Console },
	        { type: Injector },
	        { type: ErrorHandler },
	        { type: ComponentFactoryResolver },
	        { type: ApplicationInitStatus }
	    ]; };
	    return ApplicationRef;
	}());
	function remove(list, el) {
	    var index = list.indexOf(el);
	    if (index > -1) {
	        list.splice(index, 1);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
	 */
	var RenderComponentType = /** @class */ (function () {
	    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	        this.id = id;
	        this.templateUrl = templateUrl;
	        this.slotCount = slotCount;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	        this.animations = animations;
	    }
	    return RenderComponentType;
	}());
	/**
	 * @deprecated Debug info is handeled internally in the view engine now.
	 */
	var RenderDebugInfo = /** @class */ (function () {
	    function RenderDebugInfo() {
	    }
	    return RenderDebugInfo;
	}());
	/**
	 * @deprecated Use the `Renderer2` instead.
	 */
	var Renderer = /** @class */ (function () {
	    function Renderer() {
	    }
	    return Renderer;
	}());
	var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {@link Renderer#setElementProperty setElementProperty} or
	 * {@link Renderer#setElementAttribute setElementAttribute} respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 *
	 * @deprecated Use `RendererFactory2` instead.
	 */
	var RootRenderer = /** @class */ (function () {
	    function RootRenderer() {
	    }
	    return RootRenderer;
	}());
	/**
	 * @experimental
	 */
	var RendererFactory2 = /** @class */ (function () {
	    function RendererFactory2() {
	    }
	    return RendererFactory2;
	}());
	/**
	 * @experimental
	 */
	var RendererStyleFlags2;
	(function (RendererStyleFlags2) {
	    RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
	    RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
	})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
	/**
	 * @experimental
	 */
	var Renderer2 = /** @class */ (function () {
	    function Renderer2() {
	    }
	    return Renderer2;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A wrapper around a native element inside of a View.
	 *
	 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	 * element.
	 *
	 * @security Permitting direct access to the DOM can make your application more vulnerable to
	 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
	 * [Security Guide](http://g.co/ng/security).
	 *
	 *
	 */
	// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
	// i.e. users have to ask for what they need. With that, we can build better analysis tools
	// and could do better codegen in the future.
	var ElementRef = /** @class */ (function () {
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    return ElementRef;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used to load ng module factories.
	 *
	 */
	var NgModuleFactoryLoader = /** @class */ (function () {
	    function NgModuleFactoryLoader() {
	    }
	    return NgModuleFactoryLoader;
	}());
	var moduleFactories = new Map();
	/**
	 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	 * @experimental
	 */
	function registerModuleFactory(id, factory) {
	    var existing = moduleFactories.get(id);
	    if (existing) {
	        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	    }
	    moduleFactories.set(id, factory);
	}
	/**
	 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	 * cannot be found.
	 * @experimental
	 */
	function getModuleFactory(id) {
	    var factory = moduleFactories.get(id);
	    if (!factory)
	        throw new Error("No module with ID " + id + " loaded");
	    return factory;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
	 * provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="let i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * @usageNotes
	 * ### Example
	 * ```typescript
	 * @Component({...})
	 * class Container {
	 *   @ViewChildren(Item) items:QueryList<Item>;
	 * }
	 * ```
	 */
	var QueryList = /** @class */ (function () {
	    function QueryList() {
	        this.dirty = true;
	        this._results = [];
	        this.changes = new EventEmitter();
	        this.length = 0;
	    }
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     */
	    QueryList.prototype.filter = function (fn) {
	        return this._results.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     */
	    QueryList.prototype.find = function (fn) {
	        return this._results.find(fn);
	    };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     */
	    QueryList.prototype.reduce = function (fn, init) {
	        return this._results.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     */
	    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     */
	    QueryList.prototype.some = function (fn) {
	        return this._results.some(fn);
	    };
	    QueryList.prototype.toArray = function () { return this._results.slice(); };
	    QueryList.prototype[getSymbolIterator$1()] = function () { return this._results[getSymbolIterator$1()](); };
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    QueryList.prototype.reset = function (res) {
	        this._results = flatten(res);
	        this.dirty = false;
	        this.length = this._results.length;
	        this.last = this._results[this.length - 1];
	        this.first = this._results[0];
	    };
	    QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };
	    /** internal */
	    QueryList.prototype.setDirty = function () { this.dirty = true; };
	    /** internal */
	    QueryList.prototype.destroy = function () {
	        this.changes.complete();
	        this.changes.unsubscribe();
	    };
	    return QueryList;
	}());
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var flatItem = Array.isArray(item) ? flatten(item) : item;
	        return flat.concat(flatItem);
	    }, []);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SEPARATOR = '#';
	var FACTORY_CLASS_SUFFIX = 'NgFactory';
	/**
	 * Configuration for SystemJsNgModuleLoader.
	 * token.
	 *
	 * @experimental
	 */
	var SystemJsNgModuleLoaderConfig = /** @class */ (function () {
	    function SystemJsNgModuleLoaderConfig() {
	    }
	    return SystemJsNgModuleLoaderConfig;
	}());
	var DEFAULT_CONFIG = {
	    factoryPathPrefix: '',
	    factoryPathSuffix: '.ngfactory',
	};
	/**
	 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	 * @experimental
	 */
	var SystemJsNgModuleLoader = /** @class */ (function () {
	    function SystemJsNgModuleLoader(_compiler, config$$1) {
	        this._compiler = _compiler;
	        this._config = config$$1 || DEFAULT_CONFIG;
	    }
	    SystemJsNgModuleLoader.prototype.load = function (path) {
	        var offlineMode = this._compiler instanceof Compiler;
	        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	    };
	    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	        var _this = this;
	        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];
	        if (exportName === undefined) {
	            exportName = 'default';
	        }
	        return System.import(module)
	            .then(function (module) { return module[exportName]; })
	            .then(function (type) { return checkNotEmpty(type, module, exportName); })
	            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	    };
	    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];
	        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	        if (exportName === undefined) {
	            exportName = 'default';
	            factoryClassSuffix = '';
	        }
	        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	            .then(function (module) { return module[exportName + factoryClassSuffix]; })
	            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	    };
	    SystemJsNgModuleLoader.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    SystemJsNgModuleLoader.ctorParameters = function () { return [
	        { type: Compiler },
	        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }
	    ]; };
	    return SystemJsNgModuleLoader;
	}());
	function checkNotEmpty(value, modulePath, exportName) {
	    if (!value) {
	        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	    }
	    return value;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
	 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
	 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
	 * the `TemplateRef` from a Component or a Directive via {@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use {@link ViewContainerRef#
	 * createEmbeddedView}, which will create the View and attach it to the View Container.
	 *
	 */
	var TemplateRef = /** @class */ (function () {
	    function TemplateRef() {
	    }
	    return TemplateRef;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
	 * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
	 *
	 */
	var ViewContainerRef = /** @class */ (function () {
	    function ViewContainerRef() {
	    }
	    return ViewContainerRef;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ChangeDetectorRef = /** @class */ (function () {
	    function ChangeDetectorRef() {
	    }
	    return ChangeDetectorRef;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ViewRef = /** @class */ (function (_super) {
	    __extends(ViewRef, _super);
	    function ViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return ViewRef;
	}(ChangeDetectorRef));
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a `ViewContainerRef`. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="let  item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * We have two `TemplateRef`s:
	 *
	 * Outer `TemplateRef`:
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
	 * </ul>
	 * ```
	 *
	 * Inner `TemplateRef`:
	 *
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate `TemplateRef`s.
	 *
	 * The outer/inner `TemplateRef`s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <ng-template view-container-ref></ng-template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 * @experimental
	 */
	var EmbeddedViewRef = /** @class */ (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return EmbeddedViewRef;
	}(ViewRef));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventListener = /** @class */ (function () {
	    function EventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    return EventListener;
	}());
	/**
	 * @experimental All debugging apis are currently experimental.
	 */
	var DebugNode = /** @class */ (function () {
	    function DebugNode(nativeNode, parent, _debugContext) {
	        this._debugContext = _debugContext;
	        this.nativeNode = nativeNode;
	        if (parent && parent instanceof DebugElement) {
	            parent.addChild(this);
	        }
	        else {
	            this.parent = null;
	        }
	        this.listeners = [];
	    }
	    Object.defineProperty(DebugNode.prototype, "injector", {
	        get: function () { return this._debugContext.injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "componentInstance", {
	        get: function () { return this._debugContext.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "context", {
	        get: function () { return this._debugContext.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "references", {
	        get: function () { return this._debugContext.references; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode.prototype, "providerTokens", {
	        get: function () { return this._debugContext.providerTokens; },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode;
	}());
	/**
	 * @experimental All debugging apis are currently experimental.
	 */
	var DebugElement = /** @class */ (function (_super) {
	    __extends(DebugElement, _super);
	    function DebugElement(nativeNode, parent, _debugContext) {
	        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
	        _this.properties = {};
	        _this.attributes = {};
	        _this.classes = {};
	        _this.styles = {};
	        _this.childNodes = [];
	        _this.nativeElement = nativeNode;
	        return _this;
	    }
	    DebugElement.prototype.addChild = function (child) {
	        if (child) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    DebugElement.prototype.removeChild = function (child) {
	        var childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	        var _this = this;
	        var siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));
	            newChildren.forEach(function (c) {
	                if (c.parent) {
	                    c.parent.removeChild(c);
	                }
	                c.parent = _this;
	            });
	        }
	        var _a;
	    };
	    DebugElement.prototype.insertBefore = function (refChild, newChild) {
	        var refIndex = this.childNodes.indexOf(refChild);
	        if (refIndex === -1) {
	            this.addChild(newChild);
	        }
	        else {
	            if (newChild.parent) {
	                newChild.parent.removeChild(newChild);
	            }
	            newChild.parent = this;
	            this.childNodes.splice(refIndex, 0, newChild);
	        }
	    };
	    DebugElement.prototype.query = function (predicate) {
	        var results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    DebugElement.prototype.queryAll = function (predicate) {
	        var matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    DebugElement.prototype.queryAllNodes = function (predicate) {
	        var matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement.prototype, "children", {
	        get: function () {
	            return this.childNodes.filter(function (node) { return node instanceof DebugElement; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement;
	}(DebugNode));
	/**
	 * @experimental
	 */
	function asNativeElements(debugEls) {
	    return debugEls.map(function (el) { return el.nativeElement; });
	}
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	/**
	 * @experimental
	 */
	function getDebugNode(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode) || null;
	}
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function devModeEqual(a, b) {
	    var isListLikeIterableA = isListLikeIterable(a);
	    var isListLikeIterableB = isListLikeIterable(b);
	    if (isListLikeIterableA && isListLikeIterableB) {
	        return areIterablesEqual(a, b, devModeEqual);
	    }
	    else {
	        var isAObject = a && (typeof a === 'object' || typeof a === 'function');
	        var isBObject = b && (typeof b === 'object' || typeof b === 'function');
	        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	}
	/**
	 * Indicates that the result of a {@link Pipe} transformation has changed even though the
	 * reference has not changed.
	 *
	 * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
	 * is stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 *
	 */
	var WrappedValue = /** @class */ (function () {
	    function WrappedValue(value) {
	        this.wrapped = value;
	    }
	    /** Creates a wrapped value. */
	    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	    /**
	     * Returns the underlying value of a wrapped value.
	     * Returns the given `value` when it is not wrapped.
	     **/
	    WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };
	    /** Returns true if `value` is a wrapped value. */
	    WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };
	    return WrappedValue;
	}());
	/**
	 * Represents a basic change from a previous to a new value.
	 *
	 */
	var SimpleChange = /** @class */ (function () {
	    function SimpleChange(previousValue, currentValue, firstChange) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	        this.firstChange = firstChange;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     */
	    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
	    return SimpleChange;
	}());
	function isListLikeIterable(obj) {
	    if (!isJsObject(obj))
	        return false;
	    return Array.isArray(obj) ||
	        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
	            getSymbolIterator$1() in obj); // JS Iterable have a Symbol.iterator prop
	}
	function areIterablesEqual(a, b, comparator) {
	    var iterator1 = a[getSymbolIterator$1()]();
	    var iterator2 = b[getSymbolIterator$1()]();
	    while (true) {
	        var item1 = iterator1.next();
	        var item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	function iterateListLike(obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[getSymbolIterator$1()]();
	        var item = void 0;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultIterableDifferFactory = /** @class */ (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {
	        return new DefaultIterableDiffer(trackByFn);
	    };
	    return DefaultIterableDifferFactory;
	}());
	var trackByIdentity = function (index, item) { return item; };
	/**
	 * @deprecated v4.0.0 - Should not be part of public API.
	 */
	var DefaultIterableDiffer = /** @class */ (function () {
	    function DefaultIterableDiffer(trackByFn) {
	        this.length = 0;
	        // Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        // Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        // Keeps track of records where custom track by is the same, but item identity has changed
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = trackByFn || trackByIdentity;
	    }
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	        var nextIt = this._itHead;
	        var nextRemove = this._removalsHead;
	        var addRemoveOffset = 0;
	        var moveOffsets = null;
	        while (nextIt || nextRemove) {
	            // Figure out which is the next record to process
	            // Order: remove, add, move
	            var record = !nextRemove ||
	                nextIt &&
	                    nextIt.currentIndex <
	                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                nextIt :
	                nextRemove;
	            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	            var currentIndex = record.currentIndex;
	            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	            if (record === nextRemove) {
	                addRemoveOffset--;
	                nextRemove = nextRemove._nextRemoved;
	            }
	            else {
	                nextIt = nextIt._next;
	                if (record.previousIndex == null) {
	                    addRemoveOffset++;
	                }
	                else {
	                    // INVARIANT:  currentIndex < previousIndex
	                    if (!moveOffsets)
	                        moveOffsets = [];
	                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                    var localCurrentIndex = currentIndex - addRemoveOffset;
	                    if (localMovePreviousIndex != localCurrentIndex) {
	                        for (var i = 0; i < localMovePreviousIndex; i++) {
	                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                            var index = offset + i;
	                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                moveOffsets[i] = offset + 1;
	                            }
	                        }
	                        var previousIndex = record.previousIndex;
	                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                    }
	                }
	            }
	            if (adjPreviousIndex !== currentIndex) {
	                fn(record, adjPreviousIndex, currentIndex);
	            }
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (collection == null)
	            collection = [];
	        if (!isListLikeIterable(collection)) {
	            throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        var itemTrackBy;
	        if (Array.isArray(collection)) {
	            this.length = collection.length;
	            for (var index_1 = 0; index_1 < this.length; index_1++) {
	                item = collection[index_1];
	                itemTrackBy = this._trackByFn(index_1, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index_1);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            iterateListLike(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this.length = index;
	        }
	        this._truncate(record);
	        this.collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
	         * changes.
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record = void 0;
	            var nextRecord = void 0;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	            // TODO(vicb): when assert gets supported
	            // assert(!this.isDirty);
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
	     *
	     * - `record` The first excess {@link IterableChangeRecord_}.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	        if (this._identityChangesTail !== null) {
	            this._identityChangesTail._nextIdentityChange = null;
	        }
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // TODO(vicb):
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // TODO(vicb):
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // TODO(vicb):
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // TODO(vicb):
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // TODO(vicb):
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // TODO(vicb):
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // TODO(vicb):
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    return DefaultIterableDiffer;
	}());
	var IterableChangeRecord_ = /** @class */ (function () {
	    function IterableChangeRecord_(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prevDup = null;
	        /** @internal */
	        this._nextDup = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextMoved = null;
	        /** @internal */
	        this._nextIdentityChange = null;
	    }
	    return IterableChangeRecord_;
	}());
	// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item
	var _DuplicateItemRecordList = /** @class */ (function () {
	    function _DuplicateItemRecordList() {
	        /** @internal */
	        this._head = null;
	        /** @internal */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // TODO(vicb):
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
	    // IterableChangeRecord_.currentIndex >= atOrAfterIndex
	    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&
	                looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // TODO(vicb):
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	}());
	var _DuplicateMap = /** @class */ (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        var key = record.trackById;
	        var duplicates = this.map.get(key);
	        if (!duplicates) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
	     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the second `a`.
	     */
	    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {
	        var key = trackById;
	        var recordList = this.map.get(key);
	        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
	    };
	    /**
	     * Removes a {@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = record.trackById;
	        var recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    return _DuplicateMap;
	}());
	function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	    var previousIndex = item.previousIndex;
	    if (previousIndex === null)
	        return previousIndex;
	    var moveOffset = 0;
	    if (moveOffsets && previousIndex < moveOffsets.length) {
	        moveOffset = moveOffsets[previousIndex];
	    }
	    return previousIndex + addRemoveOffset + moveOffset;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultKeyValueDifferFactory = /** @class */ (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	    DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };
	    return DefaultKeyValueDifferFactory;
	}());
	var DefaultKeyValueDiffer = /** @class */ (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        // _appendAfter is used in the check loop
	        this._appendAfter = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.diff = function (map$$1) {
	        if (!map$$1) {
	            map$$1 = new Map();
	        }
	        else if (!(map$$1 instanceof Map || isJsObject(map$$1))) {
	            throw new Error("Error trying to diff '" + stringify(map$$1) + "'. Only maps and objects are allowed");
	        }
	        return this.check(map$$1) ? this : null;
	    };
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    /**
	     * Check the current state of the map vs the previous.
	     * The algorithm is optimised for when the keys do no change.
	     */
	    DefaultKeyValueDiffer.prototype.check = function (map$$1) {
	        var _this = this;
	        this._reset();
	        var insertBefore = this._mapHead;
	        this._appendAfter = null;
	        this._forEach(map$$1, function (value, key) {
	            if (insertBefore && insertBefore.key === key) {
	                _this._maybeAddToChanges(insertBefore, value);
	                _this._appendAfter = insertBefore;
	                insertBefore = insertBefore._next;
	            }
	            else {
	                var record = _this._getOrCreateRecordForKey(key, value);
	                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
	            }
	        });
	        // Items remaining at the end of the list have been deleted
	        if (insertBefore) {
	            if (insertBefore._prev) {
	                insertBefore._prev._next = null;
	            }
	            this._removalsHead = insertBefore;
	            for (var record = insertBefore; record !== null; record = record._nextRemoved) {
	                if (record === this._mapHead) {
	                    this._mapHead = null;
	                }
	                this._records.delete(record.key);
	                record._nextRemoved = record._next;
	                record.previousValue = record.currentValue;
	                record.currentValue = null;
	                record._prev = null;
	                record._next = null;
	            }
	        }
	        // Make sure tails have no next records from previous runs
	        if (this._changesTail)
	            this._changesTail._nextChanged = null;
	        if (this._additionsTail)
	            this._additionsTail._nextAdded = null;
	        return this.isDirty;
	    };
	    /**
	     * Inserts a record before `before` or append at the end of the list when `before` is null.
	     *
	     * Notes:
	     * - This method appends at `this._appendAfter`,
	     * - This method updates `this._appendAfter`,
	     * - The return value is the new value for the insertion pointer.
	     */
	    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
	        if (before) {
	            var prev = before._prev;
	            record._next = before;
	            record._prev = prev;
	            before._prev = record;
	            if (prev) {
	                prev._next = record;
	            }
	            if (before === this._mapHead) {
	                this._mapHead = record;
	            }
	            this._appendAfter = before;
	            return before;
	        }
	        if (this._appendAfter) {
	            this._appendAfter._next = record;
	            record._prev = this._appendAfter;
	        }
	        else {
	            this._mapHead = record;
	        }
	        this._appendAfter = record;
	        return null;
	    };
	    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
	        if (this._records.has(key)) {
	            var record_1 = this._records.get(key);
	            this._maybeAddToChanges(record_1, value);
	            var prev = record_1._prev;
	            var next = record_1._next;
	            if (prev) {
	                prev._next = next;
	            }
	            if (next) {
	                next._prev = prev;
	            }
	            record_1._next = null;
	            record_1._prev = null;
	            return record_1;
	        }
	        var record = new KeyValueChangeRecord_(key);
	        this._records.set(key, record);
	        record.currentValue = value;
	        this._addToAdditions(record);
	        return record;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record = void 0;
	            // let `_previousMapHead` contain the state of the map before the changes
	            this._previousMapHead = this._mapHead;
	            for (record = this._previousMapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            // Update `record.previousValue` with the value of the item before the changes
	            // We need to update all changed items (that's those which have been added and changed)
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = null;
	        }
	    };
	    // Add the record or a given key to the list of changes only when the value has actually changed
	    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	        if (!looseIdentical(newValue, record.currentValue)) {
	            record.previousValue = record.currentValue;
	            record.currentValue = newValue;
	            this._addToChanges(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	        }
	    };
	    return DefaultKeyValueDiffer;
	}());
	var KeyValueChangeRecord_ = /** @class */ (function () {
	    function KeyValueChangeRecord_(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextChanged = null;
	    }
	    return KeyValueChangeRecord_;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 *
	 */
	var IterableDiffers = /** @class */ (function () {
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    IterableDiffers.create = function (factories, parent) {
	        if (parent != null) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new IterableDiffers(factories);
	    };
	    /**
	     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {@link IterableDiffers} instance with the provided factories and return a new
	     * {@link IterableDiffers} instance.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {@link IterableDiffer} available.
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    IterableDiffers.prototype.find = function (iterable) {
	        var factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (factory != null) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    IterableDiffers.ngInjectableDef = defineInjectable({
	        providedIn: 'root',
	        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }
	    });
	    return IterableDiffers;
	}());
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 *
	 */
	var KeyValueDiffers = /** @class */ (function () {
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    KeyValueDiffers.create = function (factories, parent) {
	        if (parent) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new KeyValueDiffers(factories);
	    };
	    /**
	     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	     * {@link KeyValueDiffers} instance.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {@link KeyValueDiffer} available.
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    KeyValueDiffers.prototype.find = function (kv) {
	        var factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (factory) {
	            return factory;
	        }
	        throw new Error("Cannot find a differ supporting object '" + kv + "'");
	    };
	    return KeyValueDiffers;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	var iterableDiff = [new DefaultIterableDifferFactory()];
	var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _CORE_PLATFORM_PROVIDERS = [
	    // Set a default platform name for platforms that don't set it explicitly.
	    { provide: PLATFORM_ID, useValue: 'unknown' },
	    { provide: PlatformRef, deps: [Injector] },
	    { provide: TestabilityRegistry, deps: [] },
	    { provide: Console, deps: [] },
	];
	/**
	 * This platform has to be included in any other platform
	 *
	 * @experimental
	 */
	var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provide this token to set the locale of your application.
	 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
	 * DecimalPipe and PercentPipe) and by ICU expressions.
	 *
	 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { LOCALE_ID } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
	 * });
	 * ```
	 *
	 * @experimental i18n support is experimental.
	 */
	var LOCALE_ID = new InjectionToken('LocaleId');
	/**
	 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
	 * `xlf` or `xlf2`) when you want to translate your application in another language.
	 *
	 * See the [i18n guide](guide/i18n#merge) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { TRANSLATIONS } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * // content of your translation file
	 * const translations = '....';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
	 * });
	 * ```
	 *
	 * @experimental i18n support is experimental.
	 */
	var TRANSLATIONS = new InjectionToken('Translations');
	/**
	 * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
	 * `xlf` or `xlf2`.
	 *
	 * See the [i18n guide](guide/i18n#merge) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { TRANSLATIONS_FORMAT } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
	 * });
	 * ```
	 *
	 * @experimental i18n support is experimental.
	 */
	var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
	/**
	 * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
	 * that the compiler should use in case of missing translations:
	 * - Error: throw if you have missing translations.
	 * - Warning (default): show a warning in the console and/or shell.
	 * - Ignore: do nothing.
	 *
	 * See the [i18n guide](guide/i18n#missing-translation) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 * ```typescript
	 * import { MissingTranslationStrategy } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   missingTranslation: MissingTranslationStrategy.Error
	 * });
	 * ```
	 *
	 * @experimental i18n support is experimental.
	 */
	var MissingTranslationStrategy;
	(function (MissingTranslationStrategy) {
	    MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
	    MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
	    MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
	})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	function _localeFactory(locale) {
	    return locale || 'en-US';
	}
	/**
	 * This module includes the providers of @angular/core that are needed
	 * to bootstrap components via `ApplicationRef`.
	 *
	 * @experimental
	 */
	var ApplicationModule = /** @class */ (function () {
	    // Inject ApplicationRef to make it eager...
	    function ApplicationModule(appRef) {
	    }
	    ApplicationModule.decorators = [
	        { type: NgModule, args: [{
	                    providers: [
	                        ApplicationRef,
	                        ApplicationInitStatus,
	                        Compiler,
	                        APP_ID_RANDOM_PROVIDER,
	                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                        {
	                            provide: LOCALE_ID,
	                            useFactory: _localeFactory,
	                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                        },
	                    ]
	                },] }
	    ];
	    /** @nocollapse */
	    ApplicationModule.ctorParameters = function () { return [
	        { type: ApplicationRef }
	    ]; };
	    return ApplicationModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML
	 * that needs sanitizing.
	 * Depending upon browser support we must use one of three strategies for doing this.
	 * Support: Safari 10.x -> XHR strategy
	 * Support: Firefox -> DomParser strategy
	 * Default: InertDocument strategy
	 */
	var InertBodyHelper = /** @class */ (function () {
	    function InertBodyHelper(defaultDoc) {
	        this.defaultDoc = defaultDoc;
	        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');
	        this.inertBodyElement = this.inertDocument.body;
	        if (this.inertBodyElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so
	            // we need to create one.
	            var inertHtml = this.inertDocument.createElement('html');
	            this.inertDocument.appendChild(inertHtml);
	            this.inertBodyElement = this.inertDocument.createElement('body');
	            inertHtml.appendChild(this.inertBodyElement);
	        }
	        this.inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';
	        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {
	            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element
	            // so use the XHR strategy.
	            this.getInertBodyElement = this.getInertBodyElement_XHR;
	            return;
	        }
	        this.inertBodyElement.innerHTML =
	            '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';
	        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {
	            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized
	            // so use the DOMParser strategy, if it is available.
	            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we
	            // fall through to the default strategy below.
	            if (isDOMParserAvailable()) {
	                this.getInertBodyElement = this.getInertBodyElement_DOMParser;
	                return;
	            }
	        }
	        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy
	        this.getInertBodyElement = this.getInertBodyElement_InertDocument;
	    }
	    /**
	     * Use XHR to create and fill an inert body element (on Safari 10.1)
	     * See
	     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
	     */
	    InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {
	        // We add these extra elements to ensure that the rest of the content is parsed as expected
	        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
	        // `<head>` tag.
	        html = '<body><remove></remove>' + html + '</body>';
	        try {
	            html = encodeURI(html);
	        }
	        catch (e) {
	            return null;
	        }
	        var xhr = new XMLHttpRequest();
	        xhr.responseType = 'document';
	        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
	        xhr.send(null);
	        var body = xhr.response.body;
	        body.removeChild(body.firstChild);
	        return body;
	    };
	    /**
	     * Use DOMParser to create and fill an inert body element (on Firefox)
	     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
	     *
	     */
	    InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {
	        // We add these extra elements to ensure that the rest of the content is parsed as expected
	        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
	        // `<head>` tag.
	        html = '<body><remove></remove>' + html + '</body>';
	        try {
	            var body = new window
	                .DOMParser()
	                .parseFromString(html, 'text/html')
	                .body;
	            body.removeChild(body.firstChild);
	            return body;
	        }
	        catch (e) {
	            return null;
	        }
	    };
	    /**
	     * Use an HTML5 `template` element, if supported, or an inert body element created via
	     * `createHtmlDocument` to create and fill an inert DOM element.
	     * This is the default sane strategy to use if the browser does not require one of the specialised
	     * strategies above.
	     */
	    InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {
	        // Prefer using <template> element if supported.
	        var templateEl = this.inertDocument.createElement('template');
	        if ('content' in templateEl) {
	            templateEl.innerHTML = html;
	            return templateEl;
	        }
	        this.inertBodyElement.innerHTML = html;
	        // Support: IE 9-11 only
	        // strip custom-namespaced attributes on IE<=11
	        if (this.defaultDoc.documentMode) {
	            this.stripCustomNsAttrs(this.inertBodyElement);
	        }
	        return this.inertBodyElement;
	    };
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
	     * 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     */
	    InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {
	        var elAttrs = el.attributes;
	        // loop backwards so that we can support removals.
	        for (var i = elAttrs.length - 1; 0 < i; i--) {
	            var attrib = elAttrs.item(i);
	            var attrName = attrib.name;
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                el.removeAttribute(attrName);
	            }
	        }
	        var childNode = el.firstChild;
	        while (childNode) {
	            if (childNode.nodeType === Node.ELEMENT_NODE)
	                this.stripCustomNsAttrs(childNode);
	            childNode = childNode.nextSibling;
	        }
	    };
	    return InertBodyHelper;
	}());
	/**
	 * We need to determine whether the DOMParser exists in the global context.
	 * The try-catch is because, on some browsers, trying to access this property
	 * on window can actually throw an error.
	 *
	 * @suppress {uselessCode}
	 */
	function isDOMParserAvailable() {
	    try {
	        return !!window.DOMParser;
	    }
	    catch (e) {
	        return false;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A pattern that recognizes a commonly useful subset of URLs that are safe.
	 *
	 * This regular expression matches a subset of URLs that will not cause script
	 * execution if used in URL context within a HTML document. Specifically, this
	 * regular expression matches if (comment from here on and regex copied from
	 * Soy's EscapingConventions):
	 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	 * (2) or no protocol.  A protocol must be followed by a colon. The below
	 *     allows that by allowing colons only after one of the characters [/?#].
	 *     A colon after a hash (#) must be in the fragment.
	 *     Otherwise, a colon after a (?) must be in a query.
	 *     Otherwise, a colon after a single solidus (/) must be in a path.
	 *     Otherwise, a colon after a double solidus (//) must be in the authority
	 *     (before port).
	 *
	 * The pattern disallows &, used in HTML entity declarations before
	 * one of the characters in [/?#]. This disallows HTML entities used in the
	 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	 * It also disallows HTML entities in the first path part of a relative path,
	 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	 * that. More importantly, it disallows masking of a colon,
	 * e.g. "javascript&#58;...".
	 *
	 * This regular expression was taken from the Closure sanitization library.
	 */
	var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	function _sanitizeUrl(url) {
	    url = String(url);
	    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	        return url;
	    if (isDevMode()) {
	        console.warn("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	    }
	    return 'unsafe:' + url;
	}
	function sanitizeSrcset(srcset) {
	    srcset = String(srcset);
	    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function tagSet(tags) {
	    var res = {};
	    try {
	        for (var _a = __values(tags.split(',')), _b = _a.next(); !_b.done; _b = _a.next()) {
	            var t = _b.value;
	            res[t] = true;
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    return res;
	    var e_1, _c;
	}
	function merge$1$1() {
	    var sets = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sets[_i] = arguments[_i];
	    }
	    var res = {};
	    try {
	        for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {
	            var s = sets_1_1.value;
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	    }
	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
	    finally {
	        try {
	            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);
	        }
	        finally { if (e_2) throw e_2.error; }
	    }
	    return res;
	    var e_2, _a;
	}
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	var OPTIONAL_END_TAG_ELEMENTS = merge$1$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	// Safe Block Elements - HTML5
	var BLOCK_ELEMENTS = merge$1$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	// Inline Elements - HTML5
	var INLINE_ELEMENTS = merge$1$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	var VALID_ELEMENTS = merge$1$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	// Attributes that have href and hence need to be sanitized
	var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	// Attributes that have special href set hence need to be sanitized
	var SRCSET_ATTRS = tagSet('srcset');
	var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	    'valign,value,vspace,width');
	// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
	// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	// innerHTML is required, SVG attributes should be added here.
	// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	// can be sanitized, but they increase security surface area without a legitimate use case, so they
	// are left out here.
	var VALID_ATTRS = merge$1$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	/**
	 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	 * attributes.
	 */
	var SanitizingHtmlSerializer = /** @class */ (function () {
	    function SanitizingHtmlSerializer() {
	        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
	        // because characters were re-encoded.
	        this.sanitizedSomething = false;
	        this.buf = [];
	    }
	    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	        // However this code never accesses properties off of `document` before deleting its contents
	        // again, so it shouldn't be vulnerable to DOM clobbering.
	        var current = el.firstChild;
	        while (current) {
	            if (current.nodeType === Node.ELEMENT_NODE) {
	                this.startElement(current);
	            }
	            else if (current.nodeType === Node.TEXT_NODE) {
	                this.chars(current.nodeValue);
	            }
	            else {
	                // Strip non-element, non-text nodes.
	                this.sanitizedSomething = true;
	            }
	            if (current.firstChild) {
	                current = current.firstChild;
	                continue;
	            }
	            while (current) {
	                // Leaving the element. Walk up and to the right, closing tags as we go.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    this.endElement(current);
	                }
	                var next = this.checkClobberedElement(current, current.nextSibling);
	                if (next) {
	                    current = next;
	                    break;
	                }
	                current = this.checkClobberedElement(current, current.parentNode);
	            }
	        }
	        return this.buf.join('');
	    };
	    SanitizingHtmlSerializer.prototype.startElement = function (element) {
	        var tagName = element.nodeName.toLowerCase();
	        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.sanitizedSomething = true;
	            return;
	        }
	        this.buf.push('<');
	        this.buf.push(tagName);
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var elAttr = elAttrs.item(i);
	            var attrName = elAttr.name;
	            var lower = attrName.toLowerCase();
	            if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                this.sanitizedSomething = true;
	                continue;
	            }
	            var value = elAttr.value;
	            // TODO(martinprobst): Special case image URIs for data:image/...
	            if (URI_ATTRS[lower])
	                value = _sanitizeUrl(value);
	            if (SRCSET_ATTRS[lower])
	                value = sanitizeSrcset(value);
	            this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
	        }
	        this.buf.push('>');
	    };
	    SanitizingHtmlSerializer.prototype.endElement = function (current) {
	        var tagName = current.nodeName.toLowerCase();
	        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.buf.push('</');
	            this.buf.push(tagName);
	            this.buf.push('>');
	        }
	    };
	    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
	    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {
	        if (nextNode &&
	            (node.compareDocumentPosition(nextNode) &
	                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
	            throw new Error("Failed to sanitize html because the element is clobbered: " + node.outerHTML);
	        }
	        return nextNode;
	    };
	    return SanitizingHtmlSerializer;
	}());
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// ! to ~ is the ASCII range.
	var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param value
	 */
	function encodeEntities(value) {
	    return value.replace(/&/g, '&amp;')
	        .replace(SURROGATE_PAIR_REGEXP, function (match) {
	        var hi = match.charCodeAt(0);
	        var low = match.charCodeAt(1);
	        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    })
	        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	}
	var inertBodyHelper;
	/**
	 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	 * the DOM in a browser environment.
	 */
	function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
	    var inertBodyElement = null;
	    try {
	        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);
	        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
	        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	        var mXSSAttempts = 5;
	        var parsedHtml = unsafeHtml;
	        do {
	            if (mXSSAttempts === 0) {
	                throw new Error('Failed to sanitize html because the input is unstable');
	            }
	            mXSSAttempts--;
	            unsafeHtml = parsedHtml;
	            parsedHtml = inertBodyElement.innerHTML;
	            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
	        } while (unsafeHtml !== parsedHtml);
	        var sanitizer = new SanitizingHtmlSerializer();
	        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
	        if (isDevMode() && sanitizer.sanitizedSomething) {
	            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	        }
	        return safeHtml;
	    }
	    finally {
	        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	        if (inertBodyElement) {
	            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;
	            while (parent_1.firstChild) {
	                parent_1.removeChild(parent_1.firstChild);
	            }
	        }
	    }
	}
	function getTemplateContent(el) {
	    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?
	        el.content :
	        null;
	}
	function isTemplateElement(el) {
	    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Regular expression for safe style values.
	 *
	 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	 *
	 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	 * of XSS.
	 *
	 * The function expression checks only for XSS safety, not for CSS validity.
	 *
	 * This regular expression was taken from the Closure sanitization library, and augmented for
	 * transformation values.
	 */
	var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	var COLOR_FNS = '(?:rgb|hsl)a?';
	var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	var CSS3_FNS = '(?:calc|attr)';
	var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
	    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	    (FN_ARGS + ")$"), 'g');
	/**
	 * Matches a `url(...)` value with an arbitrary argument as long as it does
	 * not contain parentheses.
	 *
	 * The URL value still needs to be sanitized separately.
	 *
	 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	 * by observing whether scroll bars are displayed, or character ranges used by a font face
	 * definition.
	 *
	 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	 * binding a URL value without further cooperation from the page will cause an information leak, and
	 * if so, it is just a leak, not a full blown XSS vulnerability.
	 *
	 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	 * code is permissive and allows URLs that sanitize otherwise.
	 */
	var URL_RE = /^url\(([^)]+)\)$/;
	/**
	 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	 * that neither escape (\) nor any other character that could result in
	 * breaking out of a string parsing context are allowed;
	 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	 *
	 * This code was taken from the Closure sanitization library.
	 */
	function hasBalancedQuotes(value) {
	    var outsideSingle = true;
	    var outsideDouble = true;
	    for (var i = 0; i < value.length; i++) {
	        var c = value.charAt(i);
	        if (c === '\'' && outsideDouble) {
	            outsideSingle = !outsideSingle;
	        }
	        else if (c === '"' && outsideSingle) {
	            outsideDouble = !outsideDouble;
	        }
	    }
	    return outsideSingle && outsideDouble;
	}
	/**
	 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	 * value) and returns a value that is safe to use in a browser environment.
	 */
	function _sanitizeStyle(value) {
	    value = String(value).trim(); // Make sure it's actually a string.
	    if (!value)
	        return '';
	    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	    // reasoning behind this.
	    var urlMatch = value.match(URL_RE);
	    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	        return value; // Safe style values.
	    }
	    if (isDevMode()) {
	        console.warn("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	    }
	    return 'unsafe';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
	 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
	 * handled.
	 *
	 * See DomSanitizer for more details on security in Angular applications.
	 *
	 *
	 */
	var SecurityContext;
	(function (SecurityContext) {
	    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	    SecurityContext[SecurityContext["URL"] = 4] = "URL";
	    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	})(SecurityContext || (SecurityContext = {}));
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 *
	 */
	var Sanitizer = /** @class */ (function () {
	    function Sanitizer() {
	    }
	    return Sanitizer;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Called before each cycle of a view's check to detect whether this is in the
	// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
	// lifecycle methods. Returns true if this check cycle should call lifecycle
	// methods.
	function shiftInitState(view, priorInitState, newInitState) {
	    // Only update the InitState if we are currently in the prior state.
	    // For example, only move into CallingInit if we are in BeforeInit. Only
	    // move into CallingContentInit if we are in CallingInit. Normally this will
	    // always be true because of how checkCycle is called in checkAndUpdateView.
	    // However, if checkAndUpdateView is called recursively or if an exception is
	    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
	    // from the beginning. This ensures the state is monotonically increasing,
	    // terminating in the AfterInit state, which ensures the Init methods are called
	    // at least once and only once.
	    var state = view.state;
	    var initState = state & 1792 /* InitState_Mask */;
	    if (initState === priorInitState) {
	        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;
	        view.initIndex = -1;
	        return true;
	    }
	    return initState === newInitState;
	}
	// Returns true if the lifecycle init method should be called for the node with
	// the given init index.
	function shouldCallLifecycleInitHook(view, initState, index) {
	    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {
	        view.initIndex = index + 1;
	        return true;
	    }
	    return false;
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asTextData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asElementData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asProviderData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asPureExpressionData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asQueryList(view, index) {
	    return view.nodes[index];
	}
	var DebugContext = /** @class */ (function () {
	    function DebugContext() {
	    }
	    return DebugContext;
	}());
	/**
	 * This object is used to prevent cycles in the source files and to have a place where
	 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
	 */
	var Services = {
	    setCurrentNode: undefined,
	    createRootView: undefined,
	    createEmbeddedView: undefined,
	    createComponentView: undefined,
	    createNgModuleRef: undefined,
	    overrideProvider: undefined,
	    overrideComponentView: undefined,
	    clearOverrides: undefined,
	    checkAndUpdateView: undefined,
	    checkNoChangesView: undefined,
	    destroyView: undefined,
	    resolveDep: undefined,
	    createDebugContext: undefined,
	    handleEvent: undefined,
	    updateDirectives: undefined,
	    updateRenderer: undefined,
	    dirtyParentQueries: undefined,
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
	    var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	    if (isFirstCheck) {
	        msg +=
	            " It seems like the view has been created after its parent and its children have been dirty checked." +
	                " Has it been created in a change detection hook ?";
	    }
	    return viewDebugError(msg, context);
	}
	function viewWrappedDebugError(err, context) {
	    if (!(err instanceof Error)) {
	        // errors that are not Error instances don't have a stack,
	        // so it is ok to wrap them into a new Error object...
	        err = new Error(err.toString());
	    }
	    _addDebugContext(err, context);
	    return err;
	}
	function viewDebugError(msg, context) {
	    var err = new Error(msg);
	    _addDebugContext(err, context);
	    return err;
	}
	function _addDebugContext(err, context) {
	    err[ERROR_DEBUG_CONTEXT] = context;
	    err[ERROR_LOGGER] = context.logError.bind(context);
	}
	function isViewDebugError(err) {
	    return !!getDebugContext(err);
	}
	function viewDestroyedError(action) {
	    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NOOP = function () { };
	var _tokenKeyCache = new Map();
	function tokenKey(token) {
	    var key = _tokenKeyCache.get(token);
	    if (!key) {
	        key = stringify(token) + '_' + _tokenKeyCache.size;
	        _tokenKeyCache.set(token, key);
	    }
	    return key;
	}
	function unwrapValue(view, nodeIdx, bindingIdx, value) {
	    if (WrappedValue.isWrapped(value)) {
	        value = WrappedValue.unwrap(value);
	        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
	        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
	        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
	    }
	    return value;
	}
	var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
	var EMPTY_RENDERER_TYPE_ID = '$$empty';
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createRendererType2(values) {
	    return {
	        id: UNDEFINED_RENDERER_TYPE_ID,
	        styles: values.styles,
	        encapsulation: values.encapsulation,
	        data: values.data
	    };
	}
	var _renderCompCount = 0;
	function resolveRendererType2(type) {
	    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
	        // first time we see this RendererType2. Initialize it...
	        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
	            type.styles.length || Object.keys(type.data).length);
	        if (isFilled) {
	            type.id = "c" + _renderCompCount++;
	        }
	        else {
	            type.id = EMPTY_RENDERER_TYPE_ID;
	        }
	    }
	    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
	        type = null;
	    }
	    return type || null;
	}
	function checkBinding(view, def, bindingIdx, value) {
	    var oldValues = view.oldValues;
	    if ((view.state & 2 /* FirstCheck */) ||
	        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
	        return true;
	    }
	    return false;
	}
	function checkAndUpdateBinding(view, def, bindingIdx, value) {
	    if (checkBinding(view, def, bindingIdx, value)) {
	        view.oldValues[def.bindingIndex + bindingIdx] = value;
	        return true;
	    }
	    return false;
	}
	function checkBindingNoChanges(view, def, bindingIdx, value) {
	    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {
	        var bindingName = def.bindings[bindingIdx].name;
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + ": " + oldValue, bindingName + ": " + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);
	    }
	}
	function markParentViewsForCheck(view) {
	    var currView = view;
	    while (currView) {
	        if (currView.def.flags & 2 /* OnPush */) {
	            currView.state |= 8 /* ChecksEnabled */;
	        }
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	function markParentViewsForCheckProjectedViews(view, endView) {
	    var currView = view;
	    while (currView && currView !== endView) {
	        currView.state |= 64 /* CheckProjectedViews */;
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	function dispatchEvent(view, nodeIndex, eventName, event) {
	    try {
	        var nodeDef = view.def.nodes[nodeIndex];
	        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?
	            asElementData(view, nodeIndex).componentView :
	            view;
	        markParentViewsForCheck(startView);
	        return Services.handleEvent(view, nodeIndex, eventName, event);
	    }
	    catch (e) {
	        // Attention: Don't rethrow, as it would cancel Observable subscriptions!
	        view.root.errorHandler.handleError(e);
	    }
	}
	function declaredViewContainer(view) {
	    if (view.parent) {
	        var parentView = view.parent;
	        return asElementData(parentView, view.parentNodeDef.nodeIndex);
	    }
	    return null;
	}
	/**
	 * for component views, this is the host element.
	 * for embedded views, this is the index of the parent node
	 * that contains the view container.
	 */
	function viewParentEl(view) {
	    var parentView = view.parent;
	    if (parentView) {
	        return view.parentNodeDef.parent;
	    }
	    else {
	        return null;
	    }
	}
	function renderNode(view, def) {
	    switch (def.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return asElementData(view, def.nodeIndex).renderElement;
	        case 2 /* TypeText */:
	            return asTextData(view, def.nodeIndex).renderText;
	    }
	}
	function elementEventFullName(target, name) {
	    return target ? target + ":" + name : name;
	}
	function isComponentView(view) {
	    return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);
	}
	function isEmbeddedView(view) {
	    return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);
	}
	function filterQueryId(queryId) {
	    return 1 << (queryId % 32);
	}
	function splitMatchedQueriesDsl(matchedQueriesDsl) {
	    var matchedQueries = {};
	    var matchedQueryIds = 0;
	    var references = {};
	    if (matchedQueriesDsl) {
	        matchedQueriesDsl.forEach(function (_a) {
	            var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];
	            if (typeof queryId === 'number') {
	                matchedQueries[queryId] = valueType;
	                matchedQueryIds |= filterQueryId(queryId);
	            }
	            else {
	                references[queryId] = valueType;
	            }
	        });
	    }
	    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
	}
	function splitDepsDsl(deps, sourceName) {
	    return deps.map(function (value) {
	        var token;
	        var flags;
	        if (Array.isArray(value)) {
	            _a = __read(value, 2), flags = _a[0], token = _a[1];
	        }
	        else {
	            flags = 0 /* None */;
	            token = value;
	        }
	        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
	            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });
	        }
	        return { flags: flags, token: token, tokenKey: tokenKey(token) };
	        var _a;
	    });
	}
	function getParentRenderElement(view, renderHost, def) {
	    var renderParent = def.renderParent;
	    if (renderParent) {
	        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
	            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
	            (renderParent.element.componentRendererType &&
	                renderParent.element.componentRendererType.encapsulation ===
	                    ViewEncapsulation.Native)) {
	            // only children of non components, or children of components with native encapsulation should
	            // be attached.
	            return asElementData(view, def.renderParent.nodeIndex).renderElement;
	        }
	    }
	    else {
	        return renderHost;
	    }
	}
	var DEFINITION_CACHE = new WeakMap();
	function resolveDefinition(factory) {
	    var value = DEFINITION_CACHE.get(factory);
	    if (!value) {
	        value = factory(function () { return NOOP; });
	        value.factory = factory;
	        DEFINITION_CACHE.set(factory, value);
	    }
	    return value;
	}
	function rootRenderNodes(view) {
	    var renderNodes = [];
	    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
	    return renderNodes;
	}
	function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
	    // We need to re-compute the parent node in case the nodes have been moved around manually
	    if (action === 3 /* RemoveChild */) {
	        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
	    }
	    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
	}
	function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
	            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	}
	function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
	    var compView = view;
	    while (compView && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    var hostView = compView.parent;
	    var hostElDef = viewParentEl(compView);
	    var startIndex = hostElDef.nodeIndex + 1;
	    var endIndex = hostElDef.nodeIndex + hostElDef.childCount;
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = hostView.def.nodes[i];
	        if (nodeDef.ngContentIndex === ngContentIndex) {
	            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	    if (!hostView.parent) {
	        // a root view
	        var projectedNodes = view.root.projectableNodes[ngContentIndex];
	        if (projectedNodes) {
	            for (var i = 0; i < projectedNodes.length; i++) {
	                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
	            }
	        }
	    }
	}
	function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
	    if (nodeDef.flags & 8 /* TypeNgContent */) {
	        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
	    }
	    else {
	        var rn = renderNode(view, nodeDef);
	        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
	            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
	            // Note: we might need to do both actions.
	            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
	                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	            }
	            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
	                var compView = asElementData(view, nodeDef.nodeIndex).componentView;
	                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
	            }
	        }
	        else {
	            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	        }
	        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;
	            for (var k = 0; k < embeddedViews.length; k++) {
	                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
	            }
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {
	            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
	        }
	    }
	}
	function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
	    var renderer = view.renderer;
	    switch (action) {
	        case 1 /* AppendChild */:
	            renderer.appendChild(parentNode, renderNode);
	            break;
	        case 2 /* InsertBefore */:
	            renderer.insertBefore(parentNode, renderNode, nextSibling);
	            break;
	        case 3 /* RemoveChild */:
	            renderer.removeChild(parentNode, renderNode);
	            break;
	        case 0 /* Collect */:
	            target.push(renderNode);
	            break;
	    }
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	function splitNamespace(name) {
	    if (name[0] === ':') {
	        var match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }
	    return ['', name];
	}
	function calcBindingFlags(bindings) {
	    var flags = 0;
	    for (var i = 0; i < bindings.length; i++) {
	        flags |= bindings[i].flags;
	    }
	    return flags;
	}
	function interpolate(valueCount, constAndInterp) {
	    var result = '';
	    for (var i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	var EMPTY_ARRAY$2 = [];
	var EMPTY_MAP = {};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
	    flags |= 1 /* TypeElement */;
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var template = templateFactory ? resolveDefinition(templateFactory) : null;
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        checkIndex: -1,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: {
	            ns: null,
	            name: null,
	            attrs: null, template: template,
	            componentProvider: null,
	            componentView: null,
	            componentRendererType: null,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
	    if (fixedAttrs === void 0) { fixedAttrs = []; }
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var ns = null;
	    var name = null;
	    if (namespaceAndName) {
	        _b = __read(splitNamespace(namespaceAndName), 2), ns = _b[0], name = _b[1];
	    }
	    bindings = bindings || [];
	    var bindingDefs = new Array(bindings.length);
	    for (var i = 0; i < bindings.length; i++) {
	        var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
	        var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];
	        var securityContext = undefined;
	        var suffix = undefined;
	        switch (bindingFlags & 15 /* Types */) {
	            case 4 /* TypeElementStyle */:
	                suffix = suffixOrSecurityContext;
	                break;
	            case 1 /* TypeElementAttribute */:
	            case 8 /* TypeProperty */:
	                securityContext = suffixOrSecurityContext;
	                break;
	        }
	        bindingDefs[i] =
	            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
	    }
	    outputs = outputs || [];
	    var outputDefs = new Array(outputs.length);
	    for (var i = 0; i < outputs.length; i++) {
	        var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];
	        outputDefs[i] = {
	            type: 0 /* ElementOutput */,
	            target: target, eventName: eventName,
	            propName: null
	        };
	    }
	    fixedAttrs = fixedAttrs || [];
	    var attrs = fixedAttrs.map(function (_a) {
	        var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];
	        var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];
	        return [ns, name, value];
	    });
	    componentRendererType = resolveRendererType2(componentRendererType);
	    if (componentView) {
	        flags |= 33554432 /* ComponentView */;
	    }
	    flags |= 1 /* TypeElement */;
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
	        bindings: bindingDefs,
	        bindingFlags: calcBindingFlags(bindingDefs),
	        outputs: outputDefs,
	        element: {
	            ns: ns,
	            name: name,
	            attrs: attrs,
	            template: null,
	            // will bet set by the view definition
	            componentProvider: null,
	            componentView: componentView || null,
	            componentRendererType: componentRendererType,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP,
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	    var _b;
	}
	function createElement(view, renderHost, def) {
	    var elDef = def.element;
	    var rootSelectorOrNode = view.root.selectorOrNode;
	    var renderer = view.renderer;
	    var el;
	    if (view.parent || !rootSelectorOrNode) {
	        if (elDef.name) {
	            el = renderer.createElement(elDef.name, elDef.ns);
	        }
	        else {
	            el = renderer.createComment('');
	        }
	        var parentEl = getParentRenderElement(view, renderHost, def);
	        if (parentEl) {
	            renderer.appendChild(parentEl, el);
	        }
	    }
	    else {
	        el = renderer.selectRootElement(rootSelectorOrNode);
	    }
	    if (elDef.attrs) {
	        for (var i = 0; i < elDef.attrs.length; i++) {
	            var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];
	            renderer.setAttribute(el, name_2, value, ns);
	        }
	    }
	    return el;
	}
	function listenToElementOutputs(view, compView, def, el) {
	    for (var i = 0; i < def.outputs.length; i++) {
	        var output = def.outputs[i];
	        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
	        var listenTarget = output.target;
	        var listenerView = view;
	        if (output.target === 'component') {
	            listenTarget = null;
	            listenerView = compView;
	        }
	        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
	        view.disposables[def.outputIndex + i] = disposable;
	    }
	}
	function renderEventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindLen = def.bindings.length;
	    var changed = false;
	    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
	        changed = true;
	    return changed;
	}
	function checkAndUpdateElementDynamic(view, def, values) {
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        if (checkAndUpdateElementValue(view, def, i, values[i]))
	            changed = true;
	    }
	    return changed;
	}
	function checkAndUpdateElementValue(view, def, bindingIdx, value) {
	    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
	        return false;
	    }
	    var binding = def.bindings[bindingIdx];
	    var elData = asElementData(view, def.nodeIndex);
	    var renderNode$$1 = elData.renderElement;
	    var name = binding.name;
	    switch (binding.flags & 15 /* Types */) {
	        case 1 /* TypeElementAttribute */:
	            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
	            break;
	        case 2 /* TypeElementClass */:
	            setElementClass(view, renderNode$$1, name, value);
	            break;
	        case 4 /* TypeElementStyle */:
	            setElementStyle(view, binding, renderNode$$1, name, value);
	            break;
	        case 8 /* TypeProperty */:
	            var bindView = (def.flags & 33554432 /* ComponentView */ &&
	                binding.flags & 32 /* SyntheticHostProperty */) ?
	                elData.componentView :
	                view;
	            setElementProperty(bindView, binding, renderNode$$1, name, value);
	            break;
	    }
	    return true;
	}
	function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
	    var securityContext = binding.securityContext;
	    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    renderValue = renderValue != null ? renderValue.toString() : null;
	    var renderer = view.renderer;
	    if (value != null) {
	        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
	    }
	    else {
	        renderer.removeAttribute(renderNode$$1, name, ns);
	    }
	}
	function setElementClass(view, renderNode$$1, name, value) {
	    var renderer = view.renderer;
	    if (value) {
	        renderer.addClass(renderNode$$1, name);
	    }
	    else {
	        renderer.removeClass(renderNode$$1, name);
	    }
	}
	function setElementStyle(view, binding, renderNode$$1, name, value) {
	    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
	    if (renderValue != null) {
	        renderValue = renderValue.toString();
	        var unit = binding.suffix;
	        if (unit != null) {
	            renderValue = renderValue + unit;
	        }
	    }
	    else {
	        renderValue = null;
	    }
	    var renderer = view.renderer;
	    if (renderValue != null) {
	        renderer.setStyle(renderNode$$1, name, renderValue);
	    }
	    else {
	        renderer.removeStyle(renderNode$$1, name);
	    }
	}
	function setElementProperty(view, binding, renderNode$$1, name, value) {
	    var securityContext = binding.securityContext;
	    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    view.renderer.setProperty(renderNode$$1, name, renderValue);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var UNDEFINED_VALUE = new Object();
	var InjectorRefTokenKey = tokenKey(Injector);
	var INJECTORRefTokenKey = tokenKey(INJECTOR);
	var NgModuleRefTokenKey = tokenKey(NgModuleRef);
	function moduleProvideDef(flags, token, value, deps) {
	    // Need to resolve forwardRefs as e.g. for `useValue` we
	    // lowered the expression and then stopped evaluating it,
	    // i.e. also didn't unwrap it.
	    value = resolveForwardRef(value);
	    var depDefs = splitDepsDsl(deps, stringify(token));
	    return {
	        // will bet set by the module definition
	        index: -1,
	        deps: depDefs, flags: flags, token: token, value: value
	    };
	}
	function moduleDef(providers) {
	    var providersByKey = {};
	    var modules = [];
	    var isRoot = false;
	    for (var i = 0; i < providers.length; i++) {
	        var provider = providers[i];
	        if (provider.token === APP_ROOT) {
	            isRoot = true;
	        }
	        if (provider.flags & 1073741824 /* TypeNgModule */) {
	            modules.push(provider.token);
	        }
	        provider.index = i;
	        providersByKey[tokenKey(provider.token)] = provider;
	    }
	    return {
	        // Will be filled later...
	        factory: null,
	        providersByKey: providersByKey,
	        providers: providers,
	        modules: modules,
	        isRoot: isRoot,
	    };
	}
	function initNgModule(data) {
	    var def = data._def;
	    var providers = data._providers = new Array(def.providers.length);
	    for (var i = 0; i < def.providers.length; i++) {
	        var provDef = def.providers[i];
	        if (!(provDef.flags & 4096 /* LazyProvider */)) {
	            // Make sure the provider has not been already initialized outside this loop.
	            if (providers[i] === undefined) {
	                providers[i] = _createProviderInstance(data, provDef);
	            }
	        }
	    }
	}
	function resolveNgModuleDep(data, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    var former = setCurrentInjector(data);
	    try {
	        if (depDef.flags & 8 /* Value */) {
	            return depDef.token;
	        }
	        if (depDef.flags & 2 /* Optional */) {
	            notFoundValue = null;
	        }
	        if (depDef.flags & 1 /* SkipSelf */) {
	            return data._parent.get(depDef.token, notFoundValue);
	        }
	        var tokenKey_1 = depDef.tokenKey;
	        switch (tokenKey_1) {
	            case InjectorRefTokenKey:
	            case INJECTORRefTokenKey:
	            case NgModuleRefTokenKey:
	                return data;
	        }
	        var providerDef = data._def.providersByKey[tokenKey_1];
	        if (providerDef) {
	            var providerInstance = data._providers[providerDef.index];
	            if (providerInstance === undefined) {
	                providerInstance = data._providers[providerDef.index] =
	                    _createProviderInstance(data, providerDef);
	            }
	            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
	        }
	        else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {
	            var injectableDef = depDef.token.ngInjectableDef;
	            var index = data._providers.length;
	            data._def.providersByKey[depDef.tokenKey] = {
	                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,
	                value: injectableDef.factory,
	                deps: [], index: index,
	                token: depDef.token,
	            };
	            data._providers[index] = UNDEFINED_VALUE;
	            return (data._providers[index] =
	                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));
	        }
	        else if (depDef.flags & 4 /* Self */) {
	            return notFoundValue;
	        }
	        return data._parent.get(depDef.token, notFoundValue);
	    }
	    finally {
	        setCurrentInjector(former);
	    }
	}
	function moduleTransitivelyPresent(ngModule, scope) {
	    return ngModule._def.modules.indexOf(scope) > -1;
	}
	function targetsModule(ngModule, def) {
	    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||
	        def.providedIn === 'root' && ngModule._def.isRoot);
	}
	function _createProviderInstance(ngModule, providerDef) {
	    var injectable;
	    switch (providerDef.flags & 201347067 /* Types */) {
	        case 512 /* TypeClassProvider */:
	            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
	            break;
	        case 1024 /* TypeFactoryProvider */:
	            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
	            break;
	        case 2048 /* TypeUseExistingProvider */:
	            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
	            break;
	        case 256 /* TypeValueProvider */:
	            injectable = providerDef.value;
	            break;
	    }
	    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
	    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
	    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
	    // set (ngOnDestroy was detected statically).
	    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&
	        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {
	        providerDef.flags |= 131072 /* OnDestroy */;
	    }
	    return injectable === undefined ? UNDEFINED_VALUE : injectable;
	}
	function _createClass(ngModule, ctor, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return new ctor();
	        case 1:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]));
	        case 2:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
	        case 3:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
	        default:
	            var depValues = new Array(len);
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
	            }
	            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();
	    }
	}
	function _callFactory(ngModule, factory, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return factory();
	        case 1:
	            return factory(resolveNgModuleDep(ngModule, deps[0]));
	        case 2:
	            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
	        case 3:
	            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
	        default:
	            var depValues = Array(len);
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
	            }
	            return factory.apply(void 0, __spread(depValues));
	    }
	}
	function callNgModuleLifecycle(ngModule, lifecycles) {
	    var def = ngModule._def;
	    var destroyed = new Set();
	    for (var i = 0; i < def.providers.length; i++) {
	        var provDef = def.providers[i];
	        if (provDef.flags & 131072 /* OnDestroy */) {
	            var instance = ngModule._providers[i];
	            if (instance && instance !== UNDEFINED_VALUE) {
	                var onDestroy = instance.ngOnDestroy;
	                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
	                    onDestroy.apply(instance);
	                    destroyed.add(instance);
	                }
	            }
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function attachEmbeddedView(parentView, elementData, viewIndex, view) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex === null || viewIndex === undefined) {
	        viewIndex = embeddedViews.length;
	    }
	    view.viewContainerParent = parentView;
	    addToArray(embeddedViews, viewIndex, view);
	    attachProjectedView(elementData, view);
	    Services.dirtyParentQueries(view);
	    var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	}
	function attachProjectedView(vcElementData, view) {
	    var dvcElementData = declaredViewContainer(view);
	    if (!dvcElementData || dvcElementData === vcElementData ||
	        view.state & 16 /* IsProjectedView */) {
	        return;
	    }
	    // Note: For performance reasons, we
	    // - add a view to template._projectedViews only 1x throughout its lifetime,
	    //   and remove it not until the view is destroyed.
	    //   (hard, as when a parent view is attached/detached we would need to attach/detach all
	    //    nested projected views as well, even across component boundaries).
	    // - don't track the insertion order of views in the projected views array
	    //   (hard, as when the views of the same template are inserted different view containers)
	    view.state |= 16 /* IsProjectedView */;
	    var projectedViews = dvcElementData.template._projectedViews;
	    if (!projectedViews) {
	        projectedViews = dvcElementData.template._projectedViews = [];
	    }
	    projectedViews.push(view);
	    // Note: we are changing the NodeDef here as we cannot calculate
	    // the fact whether a template is used for projection during compilation.
	    markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
	}
	function markNodeAsProjectedTemplate(viewDef, nodeDef) {
	    if (nodeDef.flags & 4 /* ProjectedTemplate */) {
	        return;
	    }
	    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
	    nodeDef.flags |= 4 /* ProjectedTemplate */;
	    var parentNodeDef = nodeDef.parent;
	    while (parentNodeDef) {
	        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
	        parentNodeDef = parentNodeDef.parent;
	    }
	}
	function detachEmbeddedView(elementData, viewIndex) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null || viewIndex >= embeddedViews.length) {
	        viewIndex = embeddedViews.length - 1;
	    }
	    if (viewIndex < 0) {
	        return null;
	    }
	    var view = embeddedViews[viewIndex];
	    view.viewContainerParent = null;
	    removeFromArray(embeddedViews, viewIndex);
	    // See attachProjectedView for why we don't update projectedViews here.
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    return view;
	}
	function detachProjectedView(view) {
	    if (!(view.state & 16 /* IsProjectedView */)) {
	        return;
	    }
	    var dvcElementData = declaredViewContainer(view);
	    if (dvcElementData) {
	        var projectedViews = dvcElementData.template._projectedViews;
	        if (projectedViews) {
	            removeFromArray(projectedViews, projectedViews.indexOf(view));
	            Services.dirtyParentQueries(view);
	        }
	    }
	}
	function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    var view = embeddedViews[oldViewIndex];
	    removeFromArray(embeddedViews, oldViewIndex);
	    if (newViewIndex == null) {
	        newViewIndex = embeddedViews.length;
	    }
	    addToArray(embeddedViews, newViewIndex, view);
	    // Note: Don't need to change projectedViews as the order in there
	    // as always invalid...
	    Services.dirtyParentQueries(view);
	    renderDetachView(view);
	    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	    return view;
	}
	function renderAttachEmbeddedView(elementData, prevView, view) {
	    var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :
	        elementData.renderElement;
	    var parentNode = view.renderer.parentNode(prevRenderNode);
	    var nextSibling = view.renderer.nextSibling(prevRenderNode);
	    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
	    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
	    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
	}
	function renderDetachView(view) {
	    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
	}
	function addToArray(arr, index, value) {
	    // perf: array.push is faster than array.splice!
	    if (index >= arr.length) {
	        arr.push(value);
	    }
	    else {
	        arr.splice(index, 0, value);
	    }
	}
	function removeFromArray(arr, index) {
	    // perf: array.pop is faster than array.splice!
	    if (index >= arr.length - 1) {
	        arr.pop();
	    }
	    else {
	        arr.splice(index, 1);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_CONTEXT = new Object();
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
	    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
	}
	function getComponentViewDefinitionFactory(componentFactory) {
	    return componentFactory.viewDefFactory;
	}
	var ComponentFactory_ = /** @class */ (function (_super) {
	    __extends(ComponentFactory_, _super);
	    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.selector = selector;
	        _this.componentType = componentType;
	        _this._inputs = _inputs;
	        _this._outputs = _outputs;
	        _this.ngContentSelectors = ngContentSelectors;
	        _this.viewDefFactory = viewDefFactory;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
	        get: function () {
	            var inputsArr = [];
	            var inputs = this._inputs;
	            for (var propName in inputs) {
	                var templateName = inputs[propName];
	                inputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return inputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
	        get: function () {
	            var outputsArr = [];
	            for (var propName in this._outputs) {
	                var templateName = this._outputs[propName];
	                outputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return outputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     */
	    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        if (!ngModule) {
	            throw new Error('ngModule should be provided');
	        }
	        var viewDef = resolveDefinition(this.viewDefFactory);
	        var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
	        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
	        var component = asProviderData(view, componentNodeIndex).instance;
	        if (rootSelectorOrNode) {
	            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
	        }
	        return new ComponentRef_(view, new ViewRef_(view), component);
	    };
	    return ComponentFactory_;
	}(ComponentFactory));
	var ComponentRef_ = /** @class */ (function (_super) {
	    __extends(ComponentRef_, _super);
	    function ComponentRef_(_view, _viewRef, _component) {
	        var _this = _super.call(this) || this;
	        _this._view = _view;
	        _this._viewRef = _viewRef;
	        _this._component = _component;
	        _this._elDef = _this._view.def.nodes[0];
	        _this.hostView = _viewRef;
	        _this.changeDetectorRef = _viewRef;
	        _this.instance = _component;
	        return _this;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        get: function () {
	            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        get: function () { return this._component.constructor; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
	    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
	    return ComponentRef_;
	}(ComponentRef));
	function createViewContainerData(view, elDef, elData) {
	    return new ViewContainerRef_(view, elDef, elData);
	}
	var ViewContainerRef_ = /** @class */ (function () {
	    function ViewContainerRef_(_view, _elDef, _data) {
	        this._view = _view;
	        this._elDef = _elDef;
	        this._data = _data;
	        /**
	         * @internal
	         */
	        this._embeddedViews = [];
	    }
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        get: function () { return new ElementRef(this._data.renderElement); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	        get: function () { return new Injector_(this._view, this._elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	        get: function () {
	            var view = this._view;
	            var elDef = this._elDef.parent;
	            while (!elDef && view) {
	                elDef = viewParentEl(view);
	                view = view.parent;
	            }
	            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewContainerRef_.prototype.clear = function () {
	        var len = this._embeddedViews.length;
	        for (var i = len - 1; i >= 0; i--) {
	            var view = detachEmbeddedView(this._data, i);
	            Services.destroyView(view);
	        }
	    };
	    ViewContainerRef_.prototype.get = function (index) {
	        var view = this._embeddedViews[index];
	        if (view) {
	            var ref = new ViewRef_(view);
	            ref.attachToViewContainerRef(this);
	            return ref;
	        }
	        return null;
	    };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        get: function () { return this._embeddedViews.length; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var viewRef = templateRef.createEmbeddedView(context || {});
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
	        var contextInjector = injector || this.parentInjector;
	        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
	            ngModuleRef = contextInjector.get(NgModuleRef);
	        }
	        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
	        this.insert(componentRef.hostView, index);
	        return componentRef;
	    };
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        if (viewRef.destroyed) {
	            throw new Error('Cannot insert a destroyed View in a ViewContainer!');
	        }
	        var viewRef_ = viewRef;
	        var viewData = viewRef_._view;
	        attachEmbeddedView(this._view, this._data, index, viewData);
	        viewRef_.attachToViewContainerRef(this);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	        if (viewRef.destroyed) {
	            throw new Error('Cannot move a destroyed View in a ViewContainer!');
	        }
	        var previousIndex = this._embeddedViews.indexOf(viewRef._view);
	        moveEmbeddedView(this._data, previousIndex, currentIndex);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return this._embeddedViews.indexOf(viewRef._view);
	    };
	    ViewContainerRef_.prototype.remove = function (index) {
	        var viewData = detachEmbeddedView(this._data, index);
	        if (viewData) {
	            Services.destroyView(viewData);
	        }
	    };
	    ViewContainerRef_.prototype.detach = function (index) {
	        var view = detachEmbeddedView(this._data, index);
	        return view ? new ViewRef_(view) : null;
	    };
	    return ViewContainerRef_;
	}());
	function createChangeDetectorRef(view) {
	    return new ViewRef_(view);
	}
	var ViewRef_ = /** @class */ (function () {
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._viewContainerRef = null;
	        this._appRef = null;
	    }
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        get: function () { return rootRenderNodes(this._view); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "context", {
	        get: function () { return this._view.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
	    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };
	    ViewRef_.prototype.detectChanges = function () {
	        var fs = this._view.root.rendererFactory;
	        if (fs.begin) {
	            fs.begin();
	        }
	        try {
	            Services.checkAndUpdateView(this._view);
	        }
	        finally {
	            if (fs.end) {
	                fs.end();
	            }
	        }
	    };
	    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
	    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };
	    ViewRef_.prototype.onDestroy = function (callback) {
	        if (!this._view.disposables) {
	            this._view.disposables = [];
	        }
	        this._view.disposables.push(callback);
	    };
	    ViewRef_.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
	        }
	        Services.destroyView(this._view);
	    };
	    ViewRef_.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView(this._view);
	        Services.dirtyParentQueries(this._view);
	    };
	    ViewRef_.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    return ViewRef_;
	}());
	function createTemplateData(view, def) {
	    return new TemplateRef_(view, def);
	}
	var TemplateRef_ = /** @class */ (function (_super) {
	    __extends(TemplateRef_, _super);
	    function TemplateRef_(_parentView, _def) {
	        var _this = _super.call(this) || this;
	        _this._parentView = _parentView;
	        _this._def = _def;
	        return _this;
	    }
	    TemplateRef_.prototype.createEmbeddedView = function (context) {
	        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
	    };
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        get: function () {
	            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	}(TemplateRef));
	function createInjector$1(view, elDef) {
	    return new Injector_(view, elDef);
	}
	var Injector_ = /** @class */ (function () {
	    function Injector_(view, elDef) {
	        this.view = view;
	        this.elDef = elDef;
	    }
	    Injector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
	        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
	    };
	    return Injector_;
	}());
	function nodeValue(view, index) {
	    var def = view.def.nodes[index];
	    if (def.flags & 1 /* TypeElement */) {
	        var elData = asElementData(view, def.nodeIndex);
	        return def.element.template ? elData.template : elData.renderElement;
	    }
	    else if (def.flags & 2 /* TypeText */) {
	        return asTextData(view, def.nodeIndex).renderText;
	    }
	    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
	        return asProviderData(view, def.nodeIndex).instance;
	    }
	    throw new Error("Illegal state: read nodeValue for node index " + index);
	}
	function createRendererV1(view) {
	    return new RendererAdapter(view.renderer);
	}
	var RendererAdapter = /** @class */ (function () {
	    function RendererAdapter(delegate) {
	        this.delegate = delegate;
	    }
	    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
	        return this.delegate.selectRootElement(selectorOrNode);
	    };
	    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
	        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];
	        var el = this.delegate.createElement(name, ns);
	        if (parent) {
	            this.delegate.appendChild(parent, el);
	        }
	        return el;
	    };
	    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
	    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
	        var comment = this.delegate.createComment('');
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    RendererAdapter.prototype.createText = function (parentElement, value) {
	        var node = this.delegate.createText(value);
	        if (parentElement) {
	            this.delegate.appendChild(parentElement, node);
	        }
	        return node;
	    };
	    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
	        for (var i = 0; i < nodes.length; i++) {
	            this.delegate.appendChild(parentElement, nodes[i]);
	        }
	    };
	    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
	        var parentElement = this.delegate.parentNode(node);
	        var nextSibling = this.delegate.nextSibling(node);
	        for (var i = 0; i < viewRootNodes.length; i++) {
	            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
	        }
	    };
	    RendererAdapter.prototype.detachView = function (viewRootNodes) {
	        for (var i = 0; i < viewRootNodes.length; i++) {
	            var node = viewRootNodes[i];
	            var parentElement = this.delegate.parentNode(node);
	            this.delegate.removeChild(parentElement, node);
	        }
	    };
	    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
	        for (var i = 0; i < viewAllNodes.length; i++) {
	            this.delegate.destroyNode(viewAllNodes[i]);
	        }
	    };
	    RendererAdapter.prototype.listen = function (renderElement, name, callback) {
	        return this.delegate.listen(renderElement, name, callback);
	    };
	    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
	        return this.delegate.listen(target, name, callback);
	    };
	    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        this.delegate.setProperty(renderElement, propertyName, propertyValue);
	    };
	    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
	        var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];
	        if (attributeValue != null) {
	            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
	        }
	        else {
	            this.delegate.removeAttribute(renderElement, name, ns);
	        }
	    };
	    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            this.delegate.addClass(renderElement, className);
	        }
	        else {
	            this.delegate.removeClass(renderElement, className);
	        }
	    };
	    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (styleValue != null) {
	            this.delegate.setStyle(renderElement, styleName, styleValue);
	        }
	        else {
	            this.delegate.removeStyle(renderElement, styleName);
	        }
	    };
	    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        renderElement[methodName].apply(renderElement, args);
	    };
	    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
	    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
	    return RendererAdapter;
	}());
	function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
	    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
	}
	var NgModuleRef_ = /** @class */ (function () {
	    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
	        this._moduleType = _moduleType;
	        this._parent = _parent;
	        this._bootstrapComponents = _bootstrapComponents;
	        this._def = _def;
	        this._destroyListeners = [];
	        this._destroyed = false;
	        this.injector = this;
	        initNgModule(this);
	    }
	    NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }
	        var flags = 0 /* None */;
	        if (injectFlags & 4 /* SkipSelf */) {
	            flags |= 1 /* SkipSelf */;
	        }
	        else if (injectFlags & 2 /* Self */) {
	            flags |= 4 /* Self */;
	        }
	        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);
	    };
	    Object.defineProperty(NgModuleRef_.prototype, "instance", {
	        get: function () { return this.get(this._moduleType); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleRef_.prototype, "componentFactoryResolver", {
	        get: function () { return this.get(ComponentFactoryResolver); },
	        enumerable: true,
	        configurable: true
	    });
	    NgModuleRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        callNgModuleLifecycle(this, 131072 /* OnDestroy */);
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    return NgModuleRef_;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RendererV1TokenKey = tokenKey(Renderer);
	var Renderer2TokenKey = tokenKey(Renderer2);
	var ElementRefTokenKey = tokenKey(ElementRef);
	var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
	var TemplateRefTokenKey = tokenKey(TemplateRef);
	var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
	var InjectorRefTokenKey$1 = tokenKey(Injector);
	var INJECTORRefTokenKey$1 = tokenKey(INJECTOR);
	function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
	    var bindings = [];
	    if (props) {
	        for (var prop in props) {
	            var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];
	            bindings[bindingIndex] = {
	                flags: 8 /* TypeProperty */,
	                name: prop, nonMinifiedName: nonMinifiedName,
	                ns: null,
	                securityContext: null,
	                suffix: null
	            };
	        }
	    }
	    var outputDefs = [];
	    if (outputs) {
	        for (var propName in outputs) {
	            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
	        }
	    }
	    flags |= 16384 /* TypeDirective */;
	    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
	}
	function pipeDef(flags, ctor, deps) {
	    flags |= 16 /* TypePipe */;
	    return _def(-1, flags, null, 0, ctor, ctor, deps);
	}
	function providerDef(flags, matchedQueries, token, value, deps) {
	    return _def(-1, flags, matchedQueries, 0, token, value, deps);
	}
	function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    if (!outputs) {
	        outputs = [];
	    }
	    if (!bindings) {
	        bindings = [];
	    }
	    // Need to resolve forwardRefs as e.g. for `useValue` we
	    // lowered the expression and then stopped evaluating it,
	    // i.e. also didn't unwrap it.
	    value = resolveForwardRef(value);
	    var depDefs = splitDepsDsl(deps, stringify(token));
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
	        ngContentIndex: -1, childCount: childCount, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
	        element: null,
	        provider: { token: token, value: value, deps: depDefs },
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function createProviderInstance(view, def) {
	    return _createProviderInstance$1(view, def);
	}
	function createPipeInstance(view, def) {
	    // deps are looked up from component.
	    var compView = view;
	    while (compView.parent && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    // pipes can see the private services of the component
	    var allowPrivateServices = true;
	    // pipes are always eager and classes!
	    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
	}
	function createDirectiveInstance(view, def) {
	    // components can see other private services, other directives can't.
	    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
	    // directives are always eager and classes!
	    var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
	    if (def.outputs.length) {
	        for (var i = 0; i < def.outputs.length; i++) {
	            var output = def.outputs[i];
	            var subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
	            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
	        }
	    }
	    return instance;
	}
	function eventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var providerData = asProviderData(view, def.nodeIndex);
	    var directive = providerData.instance;
	    var changed = false;
	    var changes = undefined;
	    var bindLen = def.bindings.length;
	    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 0, v0, changes);
	    }
	    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 1, v1, changes);
	    }
	    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 2, v2, changes);
	    }
	    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 3, v3, changes);
	    }
	    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 4, v4, changes);
	    }
	    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 5, v5, changes);
	    }
	    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 6, v6, changes);
	    }
	    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 7, v7, changes);
	    }
	    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 8, v8, changes);
	    }
	    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 9, v9, changes);
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((def.flags & 65536 /* OnInit */) &&
	        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 262144 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	function checkAndUpdateDirectiveDynamic(view, def, values) {
	    var providerData = asProviderData(view, def.nodeIndex);
	    var directive = providerData.instance;
	    var changed = false;
	    var changes = undefined;
	    for (var i = 0; i < values.length; i++) {
	        if (checkBinding(view, def, i, values[i])) {
	            changed = true;
	            changes = updateProp(view, providerData, def, i, values[i], changes);
	        }
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((def.flags & 65536 /* OnInit */) &&
	        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 262144 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	function _createProviderInstance$1(view, def) {
	    // private services can see other private services
	    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
	    var providerDef = def.provider;
	    switch (def.flags & 201347067 /* Types */) {
	        case 512 /* TypeClassProvider */:
	            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	        case 1024 /* TypeFactoryProvider */:
	            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	        case 2048 /* TypeUseExistingProvider */:
	            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
	        case 256 /* TypeValueProvider */:
	            return providerDef.value;
	    }
	}
	function createClass(view, elDef, allowPrivateServices, ctor, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return new ctor();
	        case 1:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	        case 2:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	        case 3:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	        default:
	            var depValues = new Array(len);
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();
	    }
	}
	function callFactory(view, elDef, allowPrivateServices, factory, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return factory();
	        case 1:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	        case 2:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	        case 3:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	        default:
	            var depValues = Array(len);
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
	            }
	            return factory.apply(void 0, __spread(depValues));
	    }
	}
	// This default value is when checking the hierarchy for a token.
	//
	// It means both:
	// - the token is not provided by the current injector,
	// - only the element injectors should be checked (ie do not check module injectors
	//
	//          mod1
	//         /
	//       el1   mod2
	//         \  /
	//         el2
	//
	// When requesting el2.injector.get(token), we should check in the following order and return the
	// first found value:
	// - el2.injector.get(token, default)
	// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
	// - mod2.injector.get(token, default)
	var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
	function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    if (depDef.flags & 8 /* Value */) {
	        return depDef.token;
	    }
	    var startView = view;
	    if (depDef.flags & 2 /* Optional */) {
	        notFoundValue = null;
	    }
	    var tokenKey$$1 = depDef.tokenKey;
	    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {
	        // directives on the same element as a component should be able to control the change detector
	        // of that component as well.
	        allowPrivateServices = !!(elDef && elDef.element.componentView);
	    }
	    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
	        allowPrivateServices = false;
	        elDef = elDef.parent;
	    }
	    var searchView = view;
	    while (searchView) {
	        if (elDef) {
	            switch (tokenKey$$1) {
	                case RendererV1TokenKey: {
	                    var compView = findCompView(searchView, elDef, allowPrivateServices);
	                    return createRendererV1(compView);
	                }
	                case Renderer2TokenKey: {
	                    var compView = findCompView(searchView, elDef, allowPrivateServices);
	                    return compView.renderer;
	                }
	                case ElementRefTokenKey:
	                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);
	                case ViewContainerRefTokenKey:
	                    return asElementData(searchView, elDef.nodeIndex).viewContainer;
	                case TemplateRefTokenKey: {
	                    if (elDef.element.template) {
	                        return asElementData(searchView, elDef.nodeIndex).template;
	                    }
	                    break;
	                }
	                case ChangeDetectorRefTokenKey: {
	                    var cdView = findCompView(searchView, elDef, allowPrivateServices);
	                    return createChangeDetectorRef(cdView);
	                }
	                case InjectorRefTokenKey$1:
	                case INJECTORRefTokenKey$1:
	                    return createInjector$1(searchView, elDef);
	                default:
	                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :
	                        elDef.element.publicProviders)[tokenKey$$1];
	                    if (providerDef_1) {
	                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);
	                        if (!providerData) {
	                            providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };
	                            searchView.nodes[providerDef_1.nodeIndex] = providerData;
	                        }
	                        return providerData.instance;
	                    }
	            }
	        }
	        allowPrivateServices = isComponentView(searchView);
	        elDef = viewParentEl(searchView);
	        searchView = searchView.parent;
	        if (depDef.flags & 4 /* Self */) {
	            searchView = null;
	        }
	    }
	    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
	    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	        // Return the value from the root element injector when
	        // - it provides it
	        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        // - the module injector should not be checked
	        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        return value;
	    }
	    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
	}
	function findCompView(view, elDef, allowPrivateServices) {
	    var compView;
	    if (allowPrivateServices) {
	        compView = asElementData(view, elDef.nodeIndex).componentView;
	    }
	    else {
	        compView = view;
	        while (compView.parent && !isComponentView(compView)) {
	            compView = compView.parent;
	        }
	    }
	    return compView;
	}
	function updateProp(view, providerData, def, bindingIdx, value, changes) {
	    if (def.flags & 32768 /* Component */) {
	        var compView = asElementData(view, def.parent.nodeIndex).componentView;
	        if (compView.def.flags & 2 /* OnPush */) {
	            compView.state |= 8 /* ChecksEnabled */;
	        }
	    }
	    var binding = def.bindings[bindingIdx];
	    var propName = binding.name;
	    // Note: This is still safe with Closure Compiler as
	    // the user passed in the property name as an object has to `providerDef`,
	    // so Closure Compiler will have renamed the property correctly already.
	    providerData.instance[propName] = value;
	    if (def.flags & 524288 /* OnChanges */) {
	        changes = changes || {};
	        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
	        var binding_1 = def.bindings[bindingIdx];
	        changes[binding_1.nonMinifiedName] =
	            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
	    }
	    view.oldValues[def.bindingIndex + bindingIdx] = value;
	    return changes;
	}
	// This function calls the ngAfterContentCheck, ngAfterContentInit,
	// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
	// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
	// called during a pre-order traversal of the view tree (that is calling the
	// parent hooks before the child hooks) these events are sent in using a
	// post-order traversal of the tree (children before parents). This changes the
	// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
	// expected nodeIndex which a ngOnInit should be called. When sending
	// ngAfterContentInit and ngAfterViewInit it is the expected count of
	// ngAfterContentInit or ngAfterViewInit methods that have been called. This
	// ensure that despite being called recursively or after picking up after an
	// exception, the ngAfterContentInit or ngAfterViewInit will be called on the
	// correct nodes. Consider for example, the following (where E is an element
	// and D is a directive)
	//  Tree:       pre-order index  post-order index
	//    E1        0                6
	//      E2      1                1
	//       D3     2                0
	//      E4      3                5
	//       E5     4                4
	//        E6    5                2
	//        E7    6                3
	// As can be seen, the post-order index has an unclear relationship to the
	// pre-order index (postOrderIndex === preOrderIndex - parentCount +
	// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
	// are stable (will be the same for the same view regardless of exceptions or
	// recursion) we just need to count them which will roughly correspond to the
	// post-order index (it skips elements and directives that do not have
	// lifecycle hooks).
	//
	// For example, if an exception is raised in the E6.onAfterViewInit() the
	// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
	// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
	// not have their ngAfterViewInit() called but, starting with E7, the rest of
	// the view will begin getting ngAfterViewInit() called until a check and
	// pass is complete.
	//
	// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
	// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
	// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
	// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
	// When the recursion returns the initIndex will be 7 so E1 is skipped as it
	// has already been called in the recursively called checkAnUpdateView().
	function callLifecycleHooksChildrenFirst(view, lifecycles) {
	    if (!(view.def.nodeFlags & lifecycles)) {
	        return;
	    }
	    var nodes = view.def.nodes;
	    var initIndex = 0;
	    for (var i = 0; i < nodes.length; i++) {
	        var nodeDef = nodes[i];
	        var parent_1 = nodeDef.parent;
	        if (!parent_1 && nodeDef.flags & lifecycles) {
	            // matching root node (e.g. a pipe)
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
	        }
	        if ((nodeDef.childFlags & lifecycles) === 0) {
	            // no child matches one of the lifecycles
	            i += nodeDef.childCount;
	        }
	        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&
	            i === parent_1.nodeIndex + parent_1.childCount) {
	            // last child of an element
	            if (parent_1.directChildFlags & lifecycles) {
	                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);
	            }
	            parent_1 = parent_1.parent;
	        }
	    }
	}
	function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
	    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & lifecycles) {
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
	        }
	        // only visit direct children
	        i += nodeDef.childCount;
	    }
	    return initIndex;
	}
	function callProviderLifecycles(view, index, lifecycles, initIndex) {
	    var providerData = asProviderData(view, index);
	    if (!providerData) {
	        return;
	    }
	    var provider = providerData.instance;
	    if (!provider) {
	        return;
	    }
	    Services.setCurrentNode(view, index);
	    if (lifecycles & 1048576 /* AfterContentInit */ &&
	        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {
	        provider.ngAfterContentInit();
	    }
	    if (lifecycles & 2097152 /* AfterContentChecked */) {
	        provider.ngAfterContentChecked();
	    }
	    if (lifecycles & 4194304 /* AfterViewInit */ &&
	        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {
	        provider.ngAfterViewInit();
	    }
	    if (lifecycles & 8388608 /* AfterViewChecked */) {
	        provider.ngAfterViewChecked();
	    }
	    if (lifecycles & 131072 /* OnDestroy */) {
	        provider.ngOnDestroy();
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function queryDef(flags, id, bindings) {
	    var bindingDefs = [];
	    for (var propName in bindings) {
	        var bindingType = bindings[propName];
	        bindingDefs.push({ propName: propName, bindingType: bindingType });
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        // TODO(vicb): check
	        checkIndex: -1, flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        ngContentIndex: -1,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
	        ngContent: null
	    };
	}
	function createQuery() {
	    return new QueryList();
	}
	function dirtyParentQueries(view) {
	    var queryIds = view.def.nodeMatchedQueries;
	    while (view.parent && isEmbeddedView(view)) {
	        var tplDef = view.parentNodeDef;
	        view = view.parent;
	        // content queries
	        var end = tplDef.nodeIndex + tplDef.childCount;
	        for (var i = 0; i <= end; i++) {
	            var nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
	                (nodeDef.flags & 536870912 /* DynamicQuery */) &&
	                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
	                asQueryList(view, i).setDirty();
	            }
	            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||
	                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
	                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
	                // skip elements that don't contain the template element or no query.
	                i += nodeDef.childCount;
	            }
	        }
	    }
	    // view queries
	    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
	        for (var i = 0; i < view.def.nodes.length; i++) {
	            var nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
	                asQueryList(view, i).setDirty();
	            }
	            // only visit the root nodes
	            i += nodeDef.childCount;
	        }
	    }
	}
	function checkAndUpdateQuery(view, nodeDef) {
	    var queryList = asQueryList(view, nodeDef.nodeIndex);
	    if (!queryList.dirty) {
	        return;
	    }
	    var directiveInstance;
	    var newValues = undefined;
	    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
	        var elementDef = nodeDef.parent.parent;
	        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);
	        directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
	    }
	    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
	        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
	        directiveInstance = view.component;
	    }
	    queryList.reset(newValues);
	    var bindings = nodeDef.query.bindings;
	    var notify = false;
	    for (var i = 0; i < bindings.length; i++) {
	        var binding = bindings[i];
	        var boundValue = void 0;
	        switch (binding.bindingType) {
	            case 0 /* First */:
	                boundValue = queryList.first;
	                break;
	            case 1 /* All */:
	                boundValue = queryList;
	                notify = true;
	                break;
	        }
	        directiveInstance[binding.propName] = boundValue;
	    }
	    if (notify) {
	        queryList.notifyOnChanges();
	    }
	}
	function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = view.def.nodes[i];
	        var valueType = nodeDef.matchedQueries[queryDef.id];
	        if (valueType != null) {
	            values.push(getQueryValue(view, nodeDef, valueType));
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&
	            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===
	                queryDef.filterId) {
	            var elementData = asElementData(view, i);
	            // check embedded views that were attached at the place of their template,
	            // but process child nodes first if some match the query (see issue #16568)
	            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
	                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
	                i += nodeDef.childCount;
	            }
	            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	                var embeddedViews = elementData.viewContainer._embeddedViews;
	                for (var k = 0; k < embeddedViews.length; k++) {
	                    var embeddedView = embeddedViews[k];
	                    var dvc = declaredViewContainer(embeddedView);
	                    if (dvc && dvc === elementData) {
	                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
	                    }
	                }
	            }
	            var projectedViews = elementData.template._projectedViews;
	            if (projectedViews) {
	                for (var k = 0; k < projectedViews.length; k++) {
	                    var projectedView = projectedViews[k];
	                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
	                }
	            }
	        }
	        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
	            // if no child matches the query, skip the children.
	            i += nodeDef.childCount;
	        }
	    }
	    return values;
	}
	function getQueryValue(view, nodeDef, queryValueType) {
	    if (queryValueType != null) {
	        // a match
	        switch (queryValueType) {
	            case 1 /* RenderElement */:
	                return asElementData(view, nodeDef.nodeIndex).renderElement;
	            case 0 /* ElementRef */:
	                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);
	            case 2 /* TemplateRef */:
	                return asElementData(view, nodeDef.nodeIndex).template;
	            case 3 /* ViewContainerRef */:
	                return asElementData(view, nodeDef.nodeIndex).viewContainer;
	            case 4 /* Provider */:
	                return asProviderData(view, nodeDef.nodeIndex).instance;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function ngContentDef(ngContentIndex, index) {
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: -1,
	        flags: 8 /* TypeNgContent */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: { index: index }
	    };
	}
	function appendNgContent(view, renderHost, def) {
	    var parentEl = getParentRenderElement(view, renderHost, def);
	    if (!parentEl) {
	        // Nothing to do if there is no parent element.
	        return;
	    }
	    var ngContentIndex = def.ngContent.index;
	    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function purePipeDef(checkIndex, argCount) {
	    // argCount + 1 to include the pipe as first arg
	    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));
	}
	function pureArrayDef(checkIndex, argCount) {
	    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));
	}
	function pureObjectDef(checkIndex, propToIndex) {
	    var keys = Object.keys(propToIndex);
	    var nbKeys = keys.length;
	    var propertyNames = new Array(nbKeys);
	    for (var i = 0; i < nbKeys; i++) {
	        var key = keys[i];
	        var index = propToIndex[key];
	        propertyNames[index] = key;
	    }
	    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);
	}
	function _pureExpressionDef(flags, checkIndex, propertyNames) {
	    var bindings = new Array(propertyNames.length);
	    for (var i = 0; i < propertyNames.length; i++) {
	        var prop = propertyNames[i];
	        bindings[i] = {
	            flags: 8 /* TypeProperty */,
	            name: prop,
	            ns: null,
	            nonMinifiedName: prop,
	            securityContext: null,
	            suffix: null
	        };
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: -1,
	        childCount: 0, bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function createPureExpression(view, def) {
	    return { value: undefined };
	}
	function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindings = def.bindings;
	    var changed = false;
	    var bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var data = asPureExpressionData(view, def.nodeIndex);
	        var value = void 0;
	        switch (def.flags & 201347067 /* Types */) {
	            case 32 /* TypePureArray */:
	                value = new Array(bindings.length);
	                if (bindLen > 0)
	                    value[0] = v0;
	                if (bindLen > 1)
	                    value[1] = v1;
	                if (bindLen > 2)
	                    value[2] = v2;
	                if (bindLen > 3)
	                    value[3] = v3;
	                if (bindLen > 4)
	                    value[4] = v4;
	                if (bindLen > 5)
	                    value[5] = v5;
	                if (bindLen > 6)
	                    value[6] = v6;
	                if (bindLen > 7)
	                    value[7] = v7;
	                if (bindLen > 8)
	                    value[8] = v8;
	                if (bindLen > 9)
	                    value[9] = v9;
	                break;
	            case 64 /* TypePureObject */:
	                value = {};
	                if (bindLen > 0)
	                    value[bindings[0].name] = v0;
	                if (bindLen > 1)
	                    value[bindings[1].name] = v1;
	                if (bindLen > 2)
	                    value[bindings[2].name] = v2;
	                if (bindLen > 3)
	                    value[bindings[3].name] = v3;
	                if (bindLen > 4)
	                    value[bindings[4].name] = v4;
	                if (bindLen > 5)
	                    value[bindings[5].name] = v5;
	                if (bindLen > 6)
	                    value[bindings[6].name] = v6;
	                if (bindLen > 7)
	                    value[bindings[7].name] = v7;
	                if (bindLen > 8)
	                    value[bindings[8].name] = v8;
	                if (bindLen > 9)
	                    value[bindings[9].name] = v9;
	                break;
	            case 128 /* TypePurePipe */:
	                var pipe$$1 = v0;
	                switch (bindLen) {
	                    case 1:
	                        value = pipe$$1.transform(v0);
	                        break;
	                    case 2:
	                        value = pipe$$1.transform(v1);
	                        break;
	                    case 3:
	                        value = pipe$$1.transform(v1, v2);
	                        break;
	                    case 4:
	                        value = pipe$$1.transform(v1, v2, v3);
	                        break;
	                    case 5:
	                        value = pipe$$1.transform(v1, v2, v3, v4);
	                        break;
	                    case 6:
	                        value = pipe$$1.transform(v1, v2, v3, v4, v5);
	                        break;
	                    case 7:
	                        value = pipe$$1.transform(v1, v2, v3, v4, v5, v6);
	                        break;
	                    case 8:
	                        value = pipe$$1.transform(v1, v2, v3, v4, v5, v6, v7);
	                        break;
	                    case 9:
	                        value = pipe$$1.transform(v1, v2, v3, v4, v5, v6, v7, v8);
	                        break;
	                    case 10:
	                        value = pipe$$1.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	                        break;
	                }
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	function checkAndUpdatePureExpressionDynamic(view, def, values) {
	    var bindings = def.bindings;
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var data = asPureExpressionData(view, def.nodeIndex);
	        var value = void 0;
	        switch (def.flags & 201347067 /* Types */) {
	            case 32 /* TypePureArray */:
	                value = values;
	                break;
	            case 64 /* TypePureObject */:
	                value = {};
	                for (var i = 0; i < values.length; i++) {
	                    value[bindings[i].name] = values[i];
	                }
	                break;
	            case 128 /* TypePurePipe */:
	                var pipe$$1 = values[0];
	                var params = values.slice(1);
	                value = pipe$$1.transform.apply(pipe$$1, __spread(params));
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function textDef(checkIndex, ngContentIndex, staticText) {
	    var bindings = new Array(staticText.length - 1);
	    for (var i = 1; i < staticText.length; i++) {
	        bindings[i - 1] = {
	            flags: 8 /* TypeProperty */,
	            name: null,
	            ns: null,
	            nonMinifiedName: null,
	            securityContext: null,
	            suffix: staticText[i],
	        };
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: 2 /* TypeText */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {}, ngContentIndex: ngContentIndex,
	        childCount: 0, bindings: bindings,
	        bindingFlags: 8 /* TypeProperty */,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: { prefix: staticText[0] },
	        query: null,
	        ngContent: null,
	    };
	}
	function createText(view, renderHost, def) {
	    var renderNode$$1;
	    var renderer = view.renderer;
	    renderNode$$1 = renderer.createText(def.text.prefix);
	    var parentEl = getParentRenderElement(view, renderHost, def);
	    if (parentEl) {
	        renderer.appendChild(parentEl, renderNode$$1);
	    }
	    return { renderText: renderNode$$1 };
	}
	function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var changed = false;
	    var bindings = def.bindings;
	    var bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var value = def.text.prefix;
	        if (bindLen > 0)
	            value += _addInterpolationPart(v0, bindings[0]);
	        if (bindLen > 1)
	            value += _addInterpolationPart(v1, bindings[1]);
	        if (bindLen > 2)
	            value += _addInterpolationPart(v2, bindings[2]);
	        if (bindLen > 3)
	            value += _addInterpolationPart(v3, bindings[3]);
	        if (bindLen > 4)
	            value += _addInterpolationPart(v4, bindings[4]);
	        if (bindLen > 5)
	            value += _addInterpolationPart(v5, bindings[5]);
	        if (bindLen > 6)
	            value += _addInterpolationPart(v6, bindings[6]);
	        if (bindLen > 7)
	            value += _addInterpolationPart(v7, bindings[7]);
	        if (bindLen > 8)
	            value += _addInterpolationPart(v8, bindings[8]);
	        if (bindLen > 9)
	            value += _addInterpolationPart(v9, bindings[9]);
	        var renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	function checkAndUpdateTextDynamic(view, def, values) {
	    var bindings = def.bindings;
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var value = '';
	        for (var i = 0; i < values.length; i++) {
	            value = value + _addInterpolationPart(values[i], bindings[i]);
	        }
	        value = def.text.prefix + value;
	        var renderNode$$1 = asTextData(view, def.nodeIndex).renderText;
	        view.renderer.setValue(renderNode$$1, value);
	    }
	    return changed;
	}
	function _addInterpolationPart(value, binding) {
	    var valueStr = value != null ? value.toString() : '';
	    return valueStr + binding.suffix;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function viewDef(flags, nodes, updateDirectives, updateRenderer) {
	    // clone nodes and set auto calculated values
	    var viewBindingCount = 0;
	    var viewDisposableCount = 0;
	    var viewNodeFlags = 0;
	    var viewRootNodeFlags = 0;
	    var viewMatchedQueries = 0;
	    var currentParent = null;
	    var currentRenderParent = null;
	    var currentElementHasPublicProviders = false;
	    var currentElementHasPrivateProviders = false;
	    var lastRenderRootNode = null;
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        node.nodeIndex = i;
	        node.parent = currentParent;
	        node.bindingIndex = viewBindingCount;
	        node.outputIndex = viewDisposableCount;
	        node.renderParent = currentRenderParent;
	        viewNodeFlags |= node.flags;
	        viewMatchedQueries |= node.matchedQueryIds;
	        if (node.element) {
	            var elDef = node.element;
	            elDef.publicProviders =
	                currentParent ? currentParent.element.publicProviders : Object.create(null);
	            elDef.allProviders = elDef.publicProviders;
	            // Note: We assume that all providers of an element are before any child element!
	            currentElementHasPublicProviders = false;
	            currentElementHasPrivateProviders = false;
	            if (node.element.template) {
	                viewMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        validateNode(currentParent, node, nodes.length);
	        viewBindingCount += node.bindings.length;
	        viewDisposableCount += node.outputs.length;
	        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
	            lastRenderRootNode = node;
	        }
	        if (node.flags & 20224 /* CatProvider */) {
	            if (!currentElementHasPublicProviders) {
	                currentElementHasPublicProviders = true;
	                // Use prototypical inheritance to not get O(n^2) complexity...
	                currentParent.element.publicProviders =
	                    Object.create(currentParent.element.publicProviders);
	                currentParent.element.allProviders = currentParent.element.publicProviders;
	            }
	            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
	            var isComponent = (node.flags & 32768 /* Component */) !== 0;
	            if (!isPrivateService || isComponent) {
	                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
	            }
	            else {
	                if (!currentElementHasPrivateProviders) {
	                    currentElementHasPrivateProviders = true;
	                    // Use prototypical inheritance to not get O(n^2) complexity...
	                    currentParent.element.allProviders =
	                        Object.create(currentParent.element.publicProviders);
	                }
	                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
	            }
	            if (isComponent) {
	                currentParent.element.componentProvider = node;
	            }
	        }
	        if (currentParent) {
	            currentParent.childFlags |= node.flags;
	            currentParent.directChildFlags |= node.flags;
	            currentParent.childMatchedQueries |= node.matchedQueryIds;
	            if (node.element && node.element.template) {
	                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        else {
	            viewRootNodeFlags |= node.flags;
	        }
	        if (node.childCount > 0) {
	            currentParent = node;
	            if (!isNgContainer(node)) {
	                currentRenderParent = node;
	            }
	        }
	        else {
	            // When the current node has no children, check if it is the last children of its parent.
	            // When it is, propagate the flags up.
	            // The loop is required because an element could be the last transitive children of several
	            // elements. We loop to either the root or the highest opened element (= with remaining
	            // children)
	            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
	                var newParent = currentParent.parent;
	                if (newParent) {
	                    newParent.childFlags |= currentParent.childFlags;
	                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	                }
	                currentParent = newParent;
	                // We also need to update the render parent & account for ng-container
	                if (currentParent && isNgContainer(currentParent)) {
	                    currentRenderParent = currentParent.renderParent;
	                }
	                else {
	                    currentRenderParent = currentParent;
	                }
	            }
	        }
	    }
	    var handleEvent = function (view, nodeIndex, eventName, event) {
	        return nodes[nodeIndex].element.handleEvent(view, eventName, event);
	    };
	    return {
	        // Will be filled later...
	        factory: null,
	        nodeFlags: viewNodeFlags,
	        rootNodeFlags: viewRootNodeFlags,
	        nodeMatchedQueries: viewMatchedQueries, flags: flags,
	        nodes: nodes,
	        updateDirectives: updateDirectives || NOOP,
	        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,
	        bindingCount: viewBindingCount,
	        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
	    };
	}
	function isNgContainer(node) {
	    return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;
	}
	function validateNode(parent, node, nodeCount) {
	    var template = node.element && node.element.template;
	    if (template) {
	        if (!template.lastRenderRootNode) {
	            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
	        }
	        if (template.lastRenderRootNode &&
	            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
	            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.flags & 20224 /* CatProvider */) {
	        var parentFlags = parent ? parent.flags : 0;
	        if ((parentFlags & 1 /* TypeElement */) === 0) {
	            throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.query) {
	        if (node.flags & 67108864 /* TypeContentQuery */ &&
	            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
	            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.nodeIndex + "!");
	        }
	        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
	            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.childCount) {
	        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;
	        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
	            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.nodeIndex + "!");
	        }
	    }
	}
	function createEmbeddedView(parent, anchorDef$$1, viewDef, context) {
	    // embedded views are seen as siblings to the anchor, so we need
	    // to get the parent of the anchor and use it as parentIndex.
	    var view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);
	    initView(view, parent.component, context);
	    createViewNodes(view);
	    return view;
	}
	function createRootView(root, def, context) {
	    var view = createView(root, root.renderer, null, null, def);
	    initView(view, context, context);
	    createViewNodes(view);
	    return view;
	}
	function createComponentView(parentView, nodeDef, viewDef, hostElement) {
	    var rendererType = nodeDef.element.componentRendererType;
	    var compRenderer;
	    if (!rendererType) {
	        compRenderer = parentView.root.renderer;
	    }
	    else {
	        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
	    }
	    return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
	}
	function createView(root, renderer, parent, parentNodeDef, def) {
	    var nodes = new Array(def.nodes.length);
	    var disposables = def.outputCount ? new Array(def.outputCount) : null;
	    var view = {
	        def: def,
	        parent: parent,
	        viewContainerParent: null, parentNodeDef: parentNodeDef,
	        context: null,
	        component: null, nodes: nodes,
	        state: 13 /* CatInit */, root: root, renderer: renderer,
	        oldValues: new Array(def.bindingCount), disposables: disposables,
	        initIndex: -1
	    };
	    return view;
	}
	function initView(view, component, context) {
	    view.component = component;
	    view.context = context;
	}
	function createViewNodes(view) {
	    var renderHost;
	    if (isComponentView(view)) {
	        var hostDef = view.parentNodeDef;
	        renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
	    }
	    var def = view.def;
	    var nodes = view.nodes;
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        Services.setCurrentNode(view, i);
	        var nodeData = void 0;
	        switch (nodeDef.flags & 201347067 /* Types */) {
	            case 1 /* TypeElement */:
	                var el = createElement(view, renderHost, nodeDef);
	                var componentView = undefined;
	                if (nodeDef.flags & 33554432 /* ComponentView */) {
	                    var compViewDef = resolveDefinition(nodeDef.element.componentView);
	                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
	                }
	                listenToElementOutputs(view, componentView, nodeDef, el);
	                nodeData = {
	                    renderElement: el,
	                    componentView: componentView,
	                    viewContainer: null,
	                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
	                };
	                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
	                }
	                break;
	            case 2 /* TypeText */:
	                nodeData = createText(view, renderHost, nodeDef);
	                break;
	            case 512 /* TypeClassProvider */:
	            case 1024 /* TypeFactoryProvider */:
	            case 2048 /* TypeUseExistingProvider */:
	            case 256 /* TypeValueProvider */: {
	                nodeData = nodes[i];
	                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {
	                    var instance = createProviderInstance(view, nodeDef);
	                    nodeData = { instance: instance };
	                }
	                break;
	            }
	            case 16 /* TypePipe */: {
	                var instance = createPipeInstance(view, nodeDef);
	                nodeData = { instance: instance };
	                break;
	            }
	            case 16384 /* TypeDirective */: {
	                nodeData = nodes[i];
	                if (!nodeData) {
	                    var instance = createDirectiveInstance(view, nodeDef);
	                    nodeData = { instance: instance };
	                }
	                if (nodeDef.flags & 32768 /* Component */) {
	                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
	                    initView(compView, nodeData.instance, nodeData.instance);
	                }
	                break;
	            }
	            case 32 /* TypePureArray */:
	            case 64 /* TypePureObject */:
	            case 128 /* TypePurePipe */:
	                nodeData = createPureExpression(view, nodeDef);
	                break;
	            case 67108864 /* TypeContentQuery */:
	            case 134217728 /* TypeViewQuery */:
	                nodeData = createQuery();
	                break;
	            case 8 /* TypeNgContent */:
	                appendNgContent(view, renderHost, nodeDef);
	                // no runtime data needed for NgContent...
	                nodeData = undefined;
	                break;
	        }
	        nodes[i] = nodeData;
	    }
	    // Create the ViewData.nodes of component views after we created everything else,
	    // so that e.g. ng-content works
	    execComponentViewsAction(view, ViewAction.CreateViewNodes);
	    // fill static content and view queries
	    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
	}
	function checkNoChangesView(view) {
	    markProjectedViewsForCheck(view);
	    Services.updateDirectives(view, 1 /* CheckNoChanges */);
	    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
	    Services.updateRenderer(view, 1 /* CheckNoChanges */);
	    execComponentViewsAction(view, ViewAction.CheckNoChanges);
	    // Note: We don't check queries for changes as we didn't do this in v2.x.
	    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
	    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
	}
	function checkAndUpdateView(view) {
	    if (view.state & 1 /* BeforeFirstCheck */) {
	        view.state &= ~1 /* BeforeFirstCheck */;
	        view.state |= 2 /* FirstCheck */;
	    }
	    else {
	        view.state &= ~2 /* FirstCheck */;
	    }
	    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);
	    markProjectedViewsForCheck(view);
	    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
	    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);
	    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));
	    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
	    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);
	    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));
	    if (view.def.flags & 2 /* OnPush */) {
	        view.state &= ~8 /* ChecksEnabled */;
	    }
	    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
	    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);
	}
	function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
	    }
	}
	function markProjectedViewsForCheck(view) {
	    var def = view.def;
	    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
	            var projectedViews = asElementData(view, i).template._projectedViews;
	            if (projectedViews) {
	                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {
	                    var projectedView = projectedViews[i_1];
	                    projectedView.state |= 32 /* CheckProjectedView */;
	                    markParentViewsForCheckProjectedViews(projectedView, view);
	                }
	            }
	        }
	        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    switch (nodeDef.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 2 /* TypeText */:
	            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 16384 /* TypeDirective */:
	            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 32 /* TypePureArray */:
	        case 64 /* TypePureObject */:
	        case 128 /* TypePurePipe */:
	            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        default:
	            throw 'unreachable';
	    }
	}
	function checkAndUpdateNodeDynamic(view, nodeDef, values) {
	    switch (nodeDef.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return checkAndUpdateElementDynamic(view, nodeDef, values);
	        case 2 /* TypeText */:
	            return checkAndUpdateTextDynamic(view, nodeDef, values);
	        case 16384 /* TypeDirective */:
	            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);
	        case 32 /* TypePureArray */:
	        case 64 /* TypePureObject */:
	        case 128 /* TypePurePipe */:
	            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
	        default:
	            throw 'unreachable';
	    }
	}
	function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        checkNoChangesNodeDynamic(view, nodeDef, v0);
	    }
	    // Returning false is ok here as we would have thrown in case of a change.
	    return false;
	}
	function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindLen = nodeDef.bindings.length;
	    if (bindLen > 0)
	        checkBindingNoChanges(view, nodeDef, 0, v0);
	    if (bindLen > 1)
	        checkBindingNoChanges(view, nodeDef, 1, v1);
	    if (bindLen > 2)
	        checkBindingNoChanges(view, nodeDef, 2, v2);
	    if (bindLen > 3)
	        checkBindingNoChanges(view, nodeDef, 3, v3);
	    if (bindLen > 4)
	        checkBindingNoChanges(view, nodeDef, 4, v4);
	    if (bindLen > 5)
	        checkBindingNoChanges(view, nodeDef, 5, v5);
	    if (bindLen > 6)
	        checkBindingNoChanges(view, nodeDef, 6, v6);
	    if (bindLen > 7)
	        checkBindingNoChanges(view, nodeDef, 7, v7);
	    if (bindLen > 8)
	        checkBindingNoChanges(view, nodeDef, 8, v8);
	    if (bindLen > 9)
	        checkBindingNoChanges(view, nodeDef, 9, v9);
	}
	function checkNoChangesNodeDynamic(view, nodeDef, values) {
	    for (var i = 0; i < values.length; i++) {
	        checkBindingNoChanges(view, nodeDef, i, values[i]);
	    }
	}
	/**
	 * Workaround https://github.com/angular/tsickle/issues/497
	 * @suppress {misplacedTypeAnnotation}
	 */
	function checkNoChangesQuery(view, nodeDef) {
	    var queryList = asQueryList(view, nodeDef.nodeIndex);
	    if (queryList.dirty) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", (view.state & 1 /* BeforeFirstCheck */) !== 0);
	    }
	}
	function destroyView(view) {
	    if (view.state & 128 /* Destroyed */) {
	        return;
	    }
	    execEmbeddedViewsAction(view, ViewAction.Destroy);
	    execComponentViewsAction(view, ViewAction.Destroy);
	    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
	    if (view.disposables) {
	        for (var i = 0; i < view.disposables.length; i++) {
	            view.disposables[i]();
	        }
	    }
	    detachProjectedView(view);
	    if (view.renderer.destroyNode) {
	        destroyViewNodes(view);
	    }
	    if (isComponentView(view)) {
	        view.renderer.destroy();
	    }
	    view.state |= 128 /* Destroyed */;
	}
	function destroyViewNodes(view) {
	    var len = view.def.nodes.length;
	    for (var i = 0; i < len; i++) {
	        var def = view.def.nodes[i];
	        if (def.flags & 1 /* TypeElement */) {
	            view.renderer.destroyNode(asElementData(view, i).renderElement);
	        }
	        else if (def.flags & 2 /* TypeText */) {
	            view.renderer.destroyNode(asTextData(view, i).renderText);
	        }
	        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {
	            asQueryList(view, i).destroy();
	        }
	    }
	}
	var ViewAction;
	(function (ViewAction) {
	    ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
	    ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
	    ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
	    ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
	    ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
	    ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
	})(ViewAction || (ViewAction = {}));
	function execComponentViewsAction(view, action) {
	    var def = view.def;
	    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 33554432 /* ComponentView */) {
	            // a leaf
	            callViewAction(asElementData(view, i).componentView, action);
	        }
	        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function execEmbeddedViewsAction(view, action) {
	    var def = view.def;
	    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	            // a leaf
	            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;
	            for (var k = 0; k < embeddedViews.length; k++) {
	                callViewAction(embeddedViews[k], action);
	            }
	        }
	        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function callViewAction(view, action) {
	    var viewState = view.state;
	    switch (action) {
	        case ViewAction.CheckNoChanges:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
	                    checkNoChangesView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
	                }
	            }
	            break;
	        case ViewAction.CheckNoChangesProjectedViews:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if (viewState & 32 /* CheckProjectedView */) {
	                    checkNoChangesView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, action);
	                }
	            }
	            break;
	        case ViewAction.CheckAndUpdate:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
	                    checkAndUpdateView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
	                }
	            }
	            break;
	        case ViewAction.CheckAndUpdateProjectedViews:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if (viewState & 32 /* CheckProjectedView */) {
	                    checkAndUpdateView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, action);
	                }
	            }
	            break;
	        case ViewAction.Destroy:
	            // Note: destroyView recurses over all views,
	            // so we don't need to special case projected views here.
	            destroyView(view);
	            break;
	        case ViewAction.CreateViewNodes:
	            createViewNodes(view);
	            break;
	    }
	}
	function execProjectedViewsAction(view, action) {
	    execEmbeddedViewsAction(view, action);
	    execComponentViewsAction(view, action);
	}
	function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
	    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
	        return;
	    }
	    var nodeCount = view.def.nodes.length;
	    for (var i = 0; i < nodeCount; i++) {
	        var nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
	            Services.setCurrentNode(view, nodeDef.nodeIndex);
	            switch (checkType) {
	                case 0 /* CheckAndUpdate */:
	                    checkAndUpdateQuery(view, nodeDef);
	                    break;
	                case 1 /* CheckNoChanges */:
	                    checkNoChangesQuery(view, nodeDef);
	                    break;
	            }
	        }
	        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
	            // no child has a matching query
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var initialized = false;
	function initServicesIfNeeded() {
	    if (initialized) {
	        return;
	    }
	    initialized = true;
	    var services = isDevMode() ? createDebugServices() : createProdServices();
	    Services.setCurrentNode = services.setCurrentNode;
	    Services.createRootView = services.createRootView;
	    Services.createEmbeddedView = services.createEmbeddedView;
	    Services.createComponentView = services.createComponentView;
	    Services.createNgModuleRef = services.createNgModuleRef;
	    Services.overrideProvider = services.overrideProvider;
	    Services.overrideComponentView = services.overrideComponentView;
	    Services.clearOverrides = services.clearOverrides;
	    Services.checkAndUpdateView = services.checkAndUpdateView;
	    Services.checkNoChangesView = services.checkNoChangesView;
	    Services.destroyView = services.destroyView;
	    Services.resolveDep = resolveDep;
	    Services.createDebugContext = services.createDebugContext;
	    Services.handleEvent = services.handleEvent;
	    Services.updateDirectives = services.updateDirectives;
	    Services.updateRenderer = services.updateRenderer;
	    Services.dirtyParentQueries = dirtyParentQueries;
	}
	function createProdServices() {
	    return {
	        setCurrentNode: function () { },
	        createRootView: createProdRootView,
	        createEmbeddedView: createEmbeddedView,
	        createComponentView: createComponentView,
	        createNgModuleRef: createNgModuleRef,
	        overrideProvider: NOOP,
	        overrideComponentView: NOOP,
	        clearOverrides: NOOP,
	        checkAndUpdateView: checkAndUpdateView,
	        checkNoChangesView: checkNoChangesView,
	        destroyView: destroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: function (view, nodeIndex, eventName, event) {
	            return view.def.handleEvent(view, nodeIndex, eventName, event);
	        },
	        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
	            prodCheckNoChangesNode, view); },
	    };
	}
	function createDebugServices() {
	    return {
	        setCurrentNode: debugSetCurrentNode,
	        createRootView: debugCreateRootView,
	        createEmbeddedView: debugCreateEmbeddedView,
	        createComponentView: debugCreateComponentView,
	        createNgModuleRef: debugCreateNgModuleRef,
	        overrideProvider: debugOverrideProvider,
	        overrideComponentView: debugOverrideComponentView,
	        clearOverrides: debugClearOverrides,
	        checkAndUpdateView: debugCheckAndUpdateView,
	        checkNoChangesView: debugCheckNoChangesView,
	        destroyView: debugDestroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: debugHandleEvent,
	        updateDirectives: debugUpdateDirectives,
	        updateRenderer: debugUpdateRenderer,
	    };
	}
	function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var rendererFactory = ngModule.injector.get(RendererFactory2);
	    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
	}
	function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var rendererFactory = ngModule.injector.get(RendererFactory2);
	    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
	    var defWithOverride = applyProviderOverridesToView(def);
	    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
	}
	function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
	    var sanitizer = ngModule.injector.get(Sanitizer);
	    var errorHandler = ngModule.injector.get(ErrorHandler);
	    var renderer = rendererFactory.createRenderer(null, null);
	    return {
	        ngModule: ngModule,
	        injector: elInjector, projectableNodes: projectableNodes,
	        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler
	    };
	}
	function debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {
	    var defWithOverride = applyProviderOverridesToView(viewDef$$1);
	    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
	}
	function debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {
	    var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);
	    if (overrideComponentView) {
	        viewDef$$1 = overrideComponentView;
	    }
	    else {
	        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);
	    }
	    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);
	}
	function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
	    var defWithOverride = applyProviderOverridesToNgModule(def);
	    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
	}
	var providerOverrides = new Map();
	var providerOverridesWithScope = new Map();
	var viewDefOverrides = new Map();
	function debugOverrideProvider(override) {
	    providerOverrides.set(override.token, override);
	    if (typeof override.token === 'function' && override.token.ngInjectableDef &&
	        typeof override.token.ngInjectableDef.providedIn === 'function') {
	        providerOverridesWithScope.set(override.token, override);
	    }
	}
	function debugOverrideComponentView(comp, compFactory) {
	    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
	    var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
	    viewDefOverrides.set(comp, compViewDef);
	}
	function debugClearOverrides() {
	    providerOverrides.clear();
	    providerOverridesWithScope.clear();
	    viewDefOverrides.clear();
	}
	// Notes about the algorithm:
	// 1) Locate the providers of an element and check if one of them was overwritten
	// 2) Change the providers of that element
	//
	// We only create new datastructures if we need to, to keep perf impact
	// reasonable.
	function applyProviderOverridesToView(def) {
	    if (providerOverrides.size === 0) {
	        return def;
	    }
	    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
	    if (elementIndicesWithOverwrittenProviders.length === 0) {
	        return def;
	    }
	    // clone the whole view definition,
	    // as it maintains references between the nodes that are hard to update.
	    def = def.factory(function () { return NOOP; });
	    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
	        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
	    }
	    return def;
	    function findElementIndicesWithOverwrittenProviders(def) {
	        var elIndicesWithOverwrittenProviders = [];
	        var lastElementDef = null;
	        for (var i = 0; i < def.nodes.length; i++) {
	            var nodeDef = def.nodes[i];
	            if (nodeDef.flags & 1 /* TypeElement */) {
	                lastElementDef = nodeDef;
	            }
	            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
	                providerOverrides.has(nodeDef.provider.token)) {
	                elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
	                lastElementDef = null;
	            }
	        }
	        return elIndicesWithOverwrittenProviders;
	    }
	    function applyProviderOverridesToElement(viewDef$$1, elIndex) {
	        for (var i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {
	            var nodeDef = viewDef$$1.nodes[i];
	            if (nodeDef.flags & 1 /* TypeElement */) {
	                // stop at the next element
	                return;
	            }
	            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
	                var provider = nodeDef.provider;
	                var override = providerOverrides.get(provider.token);
	                if (override) {
	                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
	                    provider.deps = splitDepsDsl(override.deps);
	                    provider.value = override.value;
	                }
	            }
	        }
	    }
	}
	// Notes about the algorithm:
	// We only create new datastructures if we need to, to keep perf impact
	// reasonable.
	function applyProviderOverridesToNgModule(def) {
	    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;
	    if (!hasOverrides) {
	        return def;
	    }
	    // clone the whole view definition,
	    // as it maintains references between the nodes that are hard to update.
	    def = def.factory(function () { return NOOP; });
	    applyProviderOverrides(def);
	    return def;
	    function calcHasOverrides(def) {
	        var hasOverrides = false;
	        var hasDeprecatedOverrides = false;
	        if (providerOverrides.size === 0) {
	            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
	        }
	        def.providers.forEach(function (node) {
	            var override = providerOverrides.get(node.token);
	            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {
	                hasOverrides = true;
	                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
	            }
	        });
	        def.modules.forEach(function (module) {
	            providerOverridesWithScope.forEach(function (override, token) {
	                if (token.ngInjectableDef.providedIn === module) {
	                    hasOverrides = true;
	                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
	                }
	            });
	        });
	        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
	    }
	    function applyProviderOverrides(def) {
	        for (var i = 0; i < def.providers.length; i++) {
	            var provider = def.providers[i];
	            if (hasDeprecatedOverrides) {
	                // We had a bug where me made
	                // all providers lazy. Keep this logic behind a flag
	                // for migrating existing users.
	                provider.flags |= 4096 /* LazyProvider */;
	            }
	            var override = providerOverrides.get(provider.token);
	            if (override) {
	                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
	                provider.deps = splitDepsDsl(override.deps);
	                provider.value = override.value;
	            }
	        }
	        if (providerOverridesWithScope.size > 0) {
	            var moduleSet_1 = new Set(def.modules);
	            providerOverridesWithScope.forEach(function (override, token) {
	                if (moduleSet_1.has(token.ngInjectableDef.providedIn)) {
	                    var provider = {
	                        token: token,
	                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),
	                        deps: splitDepsDsl(override.deps),
	                        value: override.value,
	                        index: def.providers.length,
	                    };
	                    def.providers.push(provider);
	                    def.providersByKey[tokenKey(token)] = provider;
	                }
	            });
	        }
	    }
	}
	function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var nodeDef = view.def.nodes[checkIndex];
	    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 224 /* CatPureExpression */) ?
	        asPureExpressionData(view, checkIndex).value :
	        undefined;
	}
	function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var nodeDef = view.def.nodes[checkIndex];
	    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    return (nodeDef.flags & 224 /* CatPureExpression */) ?
	        asPureExpressionData(view, checkIndex).value :
	        undefined;
	}
	function debugCheckAndUpdateView(view) {
	    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
	}
	function debugCheckNoChangesView(view) {
	    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
	}
	function debugDestroyView(view) {
	    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
	}
	var DebugAction;
	(function (DebugAction) {
	    DebugAction[DebugAction["create"] = 0] = "create";
	    DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
	    DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
	    DebugAction[DebugAction["destroy"] = 3] = "destroy";
	    DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
	})(DebugAction || (DebugAction = {}));
	var _currentAction;
	var _currentView;
	var _currentNodeIndex;
	function debugSetCurrentNode(view, nodeIndex) {
	    _currentView = view;
	    _currentNodeIndex = nodeIndex;
	}
	function debugHandleEvent(view, nodeIndex, eventName, event) {
	    debugSetCurrentNode(view, nodeIndex);
	    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
	}
	function debugUpdateDirectives(view, checkType) {
	    if (view.state & 128 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
	    return view.def.updateDirectives(debugCheckDirectivesFn, view);
	    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 16384 /* TypeDirective */) {
	            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 224 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.nodeIndex).value :
	            undefined;
	    }
	}
	function debugUpdateRenderer(view, checkType) {
	    if (view.state & 128 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
	    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
	    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 224 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.nodeIndex).value :
	            undefined;
	    }
	}
	function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
	    var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));
	    if (changed) {
	        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
	        if (nodeDef.flags & 16384 /* TypeDirective */) {
	            var bindingValues = {};
	            for (var i = 0; i < nodeDef.bindings.length; i++) {
	                var binding = nodeDef.bindings[i];
	                var value = values[i];
	                if (binding.flags & 8 /* TypeProperty */) {
	                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =
	                        normalizeDebugBindingValue(value);
	                }
	            }
	            var elDef = nodeDef.parent;
	            var el = asElementData(view, elDef.nodeIndex).renderElement;
	            if (!elDef.element.name) {
	                // a comment.
	                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
	            }
	            else {
	                // a regular element.
	                for (var attr in bindingValues) {
	                    var value = bindingValues[attr];
	                    if (value != null) {
	                        view.renderer.setAttribute(el, attr, value);
	                    }
	                    else {
	                        view.renderer.removeAttribute(el, attr);
	                    }
	                }
	            }
	        }
	    }
	}
	function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
	    checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));
	}
	function normalizeDebugBindingName(name) {
	    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
	    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
	    return "ng-reflect-" + name;
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	function normalizeDebugBindingValue(value) {
	    try {
	        // Limit the size of the value as otherwise the DOM just gets polluted.
	        return value != null ? value.toString().slice(0, 30) : value;
	    }
	    catch (e) {
	        return '[ERROR] Exception while trying to serialize the value';
	    }
	}
	function nextDirectiveWithBinding(view, nodeIndex) {
	    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	function nextRenderNodeWithBinding(view, nodeIndex) {
	    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
	        var nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	var DebugContext_ = /** @class */ (function () {
	    function DebugContext_(view, nodeIndex) {
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        if (nodeIndex == null) {
	            this.nodeIndex = nodeIndex = 0;
	        }
	        this.nodeDef = view.def.nodes[nodeIndex];
	        var elDef = this.nodeDef;
	        var elView = view;
	        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
	            elDef = elDef.parent;
	        }
	        if (!elDef) {
	            while (!elDef && elView) {
	                elDef = viewParentEl(elView);
	                elView = elView.parent;
	            }
	        }
	        this.elDef = elDef;
	        this.elView = elView;
	    }
	    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
	        get: function () {
	            // Has to be done lazily as we use the DebugContext also during creation of elements...
	            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "injector", {
	        get: function () { return createInjector$1(this.elView, this.elDef); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "component", {
	        get: function () { return this.elOrCompView.component; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "context", {
	        get: function () { return this.elOrCompView.context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
	        get: function () {
	            var tokens = [];
	            if (this.elDef) {
	                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
	                    var childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 20224 /* CatProvider */) {
	                        tokens.push(childDef.provider.token);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return tokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "references", {
	        get: function () {
	            var references = {};
	            if (this.elDef) {
	                collectReferences(this.elView, this.elDef, references);
	                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
	                    var childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 20224 /* CatProvider */) {
	                        collectReferences(this.elView, childDef, references);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
	        get: function () {
	            var elData = findHostElement(this.elOrCompView);
	            return elData ? elData.renderElement : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "renderNode", {
	        get: function () {
	            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
	                renderNode(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugContext_.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var logViewDef;
	        var logNodeIndex;
	        if (this.nodeDef.flags & 2 /* TypeText */) {
	            logViewDef = this.view.def;
	            logNodeIndex = this.nodeDef.nodeIndex;
	        }
	        else {
	            logViewDef = this.elView.def;
	            logNodeIndex = this.elDef.nodeIndex;
	        }
	        // Note: we only generate a log function for text and element nodes
	        // to make the generated code as small as possible.
	        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
	        var currRenderNodeIndex = -1;
	        var nodeLogger = function () {
	            currRenderNodeIndex++;
	            if (currRenderNodeIndex === renderNodeIndex) {
	                return (_a = console.error).bind.apply(_a, __spread([console], values));
	            }
	            else {
	                return NOOP;
	            }
	            var _a;
	        };
	        logViewDef.factory(nodeLogger);
	        if (currRenderNodeIndex < renderNodeIndex) {
	            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
	            console.error.apply(console, __spread(values));
	        }
	    };
	    return DebugContext_;
	}());
	function getRenderNodeIndex(viewDef$$1, nodeIndex) {
	    var renderNodeIndex = -1;
	    for (var i = 0; i <= nodeIndex; i++) {
	        var nodeDef = viewDef$$1.nodes[i];
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            renderNodeIndex++;
	        }
	    }
	    return renderNodeIndex;
	}
	function findHostElement(view) {
	    while (view && !isComponentView(view)) {
	        view = view.parent;
	    }
	    if (view.parent) {
	        return asElementData(view.parent, viewParentEl(view).nodeIndex);
	    }
	    return null;
	}
	function collectReferences(view, nodeDef, references) {
	    for (var refName in nodeDef.references) {
	        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
	    }
	}
	function callWithDebugContext(action, fn, self, args) {
	    var oldAction = _currentAction;
	    var oldView = _currentView;
	    var oldNodeIndex = _currentNodeIndex;
	    try {
	        _currentAction = action;
	        var result = fn.apply(self, args);
	        _currentView = oldView;
	        _currentNodeIndex = oldNodeIndex;
	        _currentAction = oldAction;
	        return result;
	    }
	    catch (e) {
	        if (isViewDebugError(e) || !_currentView) {
	            throw e;
	        }
	        throw viewWrappedDebugError(e, getCurrentDebugContext());
	    }
	}
	function getCurrentDebugContext() {
	    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
	}
	var DebugRendererFactory2 = /** @class */ (function () {
	    function DebugRendererFactory2(delegate) {
	        this.delegate = delegate;
	    }
	    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
	        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
	    };
	    DebugRendererFactory2.prototype.begin = function () {
	        if (this.delegate.begin) {
	            this.delegate.begin();
	        }
	    };
	    DebugRendererFactory2.prototype.end = function () {
	        if (this.delegate.end) {
	            this.delegate.end();
	        }
	    };
	    DebugRendererFactory2.prototype.whenRenderingDone = function () {
	        if (this.delegate.whenRenderingDone) {
	            return this.delegate.whenRenderingDone();
	        }
	        return Promise.resolve(null);
	    };
	    return DebugRendererFactory2;
	}());
	var DebugRenderer2 = /** @class */ (function () {
	    function DebugRenderer2(delegate) {
	        this.delegate = delegate;
	        this.data = this.delegate.data;
	    }
	    DebugRenderer2.prototype.destroyNode = function (node) {
	        removeDebugNodeFromIndex(getDebugNode(node));
	        if (this.delegate.destroyNode) {
	            this.delegate.destroyNode(node);
	        }
	    };
	    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
	    DebugRenderer2.prototype.createElement = function (name, namespace) {
	        var el = this.delegate.createElement(name, namespace);
	        var debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            var debugEl = new DebugElement(el, null, debugCtx);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	        }
	        return el;
	    };
	    DebugRenderer2.prototype.createComment = function (value) {
	        var comment = this.delegate.createComment(value);
	        var debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(comment, null, debugCtx));
	        }
	        return comment;
	    };
	    DebugRenderer2.prototype.createText = function (value) {
	        var text = this.delegate.createText(value);
	        var debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugNode(text, null, debugCtx));
	        }
	        return text;
	    };
	    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
	        var debugEl = getDebugNode(parent);
	        var debugChildEl = getDebugNode(newChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.addChild(debugChildEl);
	        }
	        this.delegate.appendChild(parent, newChild);
	    };
	    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        var debugEl = getDebugNode(parent);
	        var debugChildEl = getDebugNode(newChild);
	        var debugRefEl = getDebugNode(refChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.insertBefore(debugRefEl, debugChildEl);
	        }
	        this.delegate.insertBefore(parent, newChild, refChild);
	    };
	    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
	        var debugEl = getDebugNode(parent);
	        var debugChildEl = getDebugNode(oldChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
	            debugEl.removeChild(debugChildEl);
	        }
	        this.delegate.removeChild(parent, oldChild);
	    };
	    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
	        var el = this.delegate.selectRootElement(selectorOrNode);
	        var debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugElement(el, null, debugCtx));
	        }
	        return el;
	    };
	    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = value;
	        }
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            var fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = null;
	        }
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    DebugRenderer2.prototype.addClass = function (el, name) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = true;
	        }
	        this.delegate.addClass(el, name);
	    };
	    DebugRenderer2.prototype.removeClass = function (el, name) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.classes[name] = false;
	        }
	        this.delegate.removeClass(el, name);
	    };
	    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = value;
	        }
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.styles[style] = null;
	        }
	        this.delegate.removeStyle(el, style, flags);
	    };
	    DebugRenderer2.prototype.setProperty = function (el, name, value) {
	        var debugEl = getDebugNode(el);
	        if (debugEl && debugEl instanceof DebugElement) {
	            debugEl.properties[name] = value;
	        }
	        this.delegate.setProperty(el, name, value);
	    };
	    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
	        if (typeof target !== 'string') {
	            var debugEl = getDebugNode(target);
	            if (debugEl) {
	                debugEl.listeners.push(new EventListener(eventName, callback));
	            }
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
	    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
	    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
	    return DebugRenderer2;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function overrideProvider(override) {
	    initServicesIfNeeded();
	    return Services.overrideProvider(override);
	}
	function overrideComponentView(comp, componentFactory) {
	    initServicesIfNeeded();
	    return Services.overrideComponentView(comp, componentFactory);
	}
	function clearOverrides() {
	    initServicesIfNeeded();
	    return Services.clearOverrides();
	}
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
	    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
	}
	var NgModuleFactory_ = /** @class */ (function (_super) {
	    __extends(NgModuleFactory_, _super);
	    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.moduleType = moduleType;
	        _this._bootstrapComponents = _bootstrapComponents;
	        _this._ngModuleDefFactory = _ngModuleDefFactory;
	        return _this;
	    }
	    NgModuleFactory_.prototype.create = function (parentInjector) {
	        initServicesIfNeeded();
	        var def = resolveDefinition(this._ngModuleDefFactory);
	        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
	    };
	    return NgModuleFactory_;
	}(NgModuleFactory));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function assertEqual(actual, expected, msg) {
	    if (actual != expected) {
	        throwError$1(msg);
	    }
	}
	function assertNotEqual(actual, expected, msg) {
	    if (actual == expected) {
	        throwError$1(msg);
	    }
	}
	function assertSame(actual, expected, msg) {
	    if (actual !== expected) {
	        throwError$1(msg);
	    }
	}
	function assertLessThan(actual, expected, msg) {
	    if (actual >= expected) {
	        throwError$1(msg);
	    }
	}
	function assertGreaterThan(actual, expected, msg) {
	    if (actual <= expected) {
	        throwError$1(msg);
	    }
	}
	function assertNull(actual, msg) {
	    if (actual != null) {
	        throwError$1(msg);
	    }
	}
	function assertNotNull(actual, msg) {
	    if (actual == null) {
	        throwError$1(msg);
	    }
	}
	function assertComponentType(actual, msg) {
	    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \'ngComponentDef\' property.'; }
	    if (!actual.ngComponentDef) {
	        throwError$1(msg);
	    }
	}
	function throwError$1(msg) {
	    debugger; // Left intentionally for better debugger experience.
	    throw new Error("ASSERTION ERROR: " + msg);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into
	 * TView.initHooks during directiveCreate.
	 *
	 * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:
	 * directive index), then saved in the even indices of the initHooks array. The odd indices
	 * hold the hook functions themselves.
	 *
	 * @param index The index of the directive in LView.data
	 * @param hooks The static hooks map on the directive def
	 * @param tView The current TView
	 */
	function queueInitHooks(index, onInit, doCheck, tView) {
	    ngDevMode &&
	        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');
	    if (onInit) {
	        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);
	    }
	    if (doCheck) {
	        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);
	        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);
	    }
	}
	/**
	 * Loops through the directives on a node and queues all their hooks except ngOnInit
	 * and ngDoCheck, which are queued separately in directiveCreate.
	 */
	function queueLifecycleHooks(flags, currentView) {
	    var tView = currentView.tView;
	    if (tView.firstTemplatePass === true) {
	        var start = flags >> 13 /* DirectiveStartingIndexShift */;
	        var count$$1 = flags & 4095 /* DirectiveCountMask */;
	        var end = start + count$$1;
	        // It's necessary to loop through the directives at elementEnd() (rather than processing in
	        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
	        // hooks for projected components and directives must be called *before* their hosts.
	        for (var i = start; i < end; i++) {
	            var def = tView.directives[i];
	            queueContentHooks(def, tView, i);
	            queueViewHooks(def, tView, i);
	            queueDestroyHooks(def, tView, i);
	        }
	    }
	}
	/** Queues afterContentInit and afterContentChecked hooks on TView */
	function queueContentHooks(def, tView, i) {
	    if (def.afterContentInit) {
	        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);
	    }
	    if (def.afterContentChecked) {
	        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);
	        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);
	    }
	}
	/** Queues afterViewInit and afterViewChecked hooks on TView */
	function queueViewHooks(def, tView, i) {
	    if (def.afterViewInit) {
	        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);
	    }
	    if (def.afterViewChecked) {
	        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);
	        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);
	    }
	}
	/** Queues onDestroy hooks on TView */
	function queueDestroyHooks(def, tView, i) {
	    if (def.onDestroy != null) {
	        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);
	    }
	}
	/**
	 * Calls onInit and doCheck calls if they haven't already been called.
	 *
	 * @param currentView The current view
	 */
	function executeInitHooks(currentView, tView, creationMode) {
	    if (currentView.lifecycleStage === 1 /* Init */) {
	        executeHooks(currentView.directives, tView.initHooks, tView.checkHooks, creationMode);
	        currentView.lifecycleStage = 2 /* AfterInit */;
	    }
	}
	/**
	 * Iterates over afterViewInit and afterViewChecked functions and calls them.
	 *
	 * @param currentView The current view
	 */
	function executeHooks(data, allHooks, checkHooks, creationMode) {
	    var hooksToCall = creationMode ? allHooks : checkHooks;
	    if (hooksToCall) {
	        callHooks(data, hooksToCall);
	    }
	}
	/**
	 * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
	 * creation mode.
	 *
	 * @param currentView The current view
	 * @param arr The array in which the hooks are found
	 */
	function callHooks(data, arr) {
	    for (var i = 0; i < arr.length; i += 2) {
	        arr[i + 1].call(data[arr[i]]);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	if (typeof ngDevMode == 'undefined') {
	    if (typeof window != 'undefined')
	        window.ngDevMode = true;
	    if (typeof self != 'undefined')
	        self.ngDevMode = true;
	    if (typeof global != 'undefined')
	        global.ngDevMode = true;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function assertNodeType(node, type) {
	    assertNotNull(node, 'should be called with a node');
	    assertEqual(node.type, type, "should be a " + typeName(type));
	}
	function assertNodeOfPossibleTypes(node) {
	    var types = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        types[_i - 1] = arguments[_i];
	    }
	    assertNotNull(node, 'should be called with a node');
	    var found = types.some(function (type) { return node.type === type; });
	    assertEqual(found, true, "Should be one of " + types.map(typeName).join(', '));
	}
	function typeName(type) {
	    if (type == 1 /* Projection */)
	        return 'Projection';
	    if (type == 0 /* Container */)
	        return 'Container';
	    if (type == 2 /* View */)
	        return 'View';
	    if (type == 3 /* Element */)
	        return 'Element';
	    return '<unknown>';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// TODO: cleanup once the code is merged in angular/angular
	var RendererStyleFlags3;
	(function (RendererStyleFlags3) {
	    RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
	    RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
	})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
	/** Returns whether the `renderer` is a `ProceduralRenderer3` */
	function isProceduralRenderer(renderer) {
	    return !!(renderer.listen);
	}
	var domRendererFactory3 = {
	    createRenderer: function (hostElement, rendererType) { return document; }
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	* Must use this method for CD (instead of === ) since NaN !== NaN
	*/
	function isDifferent(a, b) {
	    // NaN is the only value that is not equal to itself so the first
	    // test checks if both a and b are not NaN
	    return !(a !== a && b !== b) && a !== b;
	}
	function stringify$1(value) {
	    if (typeof value == 'function')
	        return value.name || value;
	    if (typeof value == 'string')
	        return value;
	    if (value == null)
	        return '';
	    return '' + value;
	}
	/**
	 *  Function that throws a "not implemented" error so it's clear certain
	 *  behaviors/methods aren't yet ready.
	 *
	 * @returns Not implemented error
	 */
	function notImplemented() {
	    return new Error('NotImplemented');
	}
	/**
	 * Flattens an array in non-recursive way. Input arrays are not modified.
	 */
	function flatten$1(list) {
	    var result = [];
	    var i = 0;
	    while (i < list.length) {
	        var item = list[i];
	        if (Array.isArray(item)) {
	            if (item.length > 0) {
	                list = item.concat(list.slice(i + 1));
	                i = 0;
	            }
	            else {
	                i++;
	            }
	        }
	        else {
	            result.push(item);
	            i++;
	        }
	    }
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Returns the first RNode following the given LNode in the same parent DOM element.
	 *
	 * This is needed in order to insert the given node with insertBefore.
	 *
	 * @param node The node whose following DOM node must be found.
	 * @param stopNode A parent node at which the lookup in the tree should be stopped, or null if the
	 * lookup should not be stopped until the result is found.
	 * @returns RNode before which the provided node should be inserted or null if the lookup was
	 * stopped
	 * or if there is no native node after the given logical node in the same native parent.
	 */
	function findNextRNodeSibling(node, stopNode) {
	    var currentNode = node;
	    while (currentNode && currentNode !== stopNode) {
	        var pNextOrParent = currentNode.pNextOrParent;
	        if (pNextOrParent) {
	            while (pNextOrParent.type !== 1 /* Projection */) {
	                var nativeNode = findFirstRNode(pNextOrParent);
	                if (nativeNode) {
	                    return nativeNode;
	                }
	                pNextOrParent = pNextOrParent.pNextOrParent;
	            }
	            currentNode = pNextOrParent;
	        }
	        else {
	            var currentSibling = currentNode.next;
	            while (currentSibling) {
	                var nativeNode = findFirstRNode(currentSibling);
	                if (nativeNode) {
	                    return nativeNode;
	                }
	                currentSibling = currentSibling.next;
	            }
	            var parentNode = currentNode.parent;
	            currentNode = null;
	            if (parentNode) {
	                var parentType = parentNode.type;
	                if (parentType === 0 /* Container */ || parentType === 2 /* View */) {
	                    currentNode = parentNode;
	                }
	            }
	        }
	    }
	    return null;
	}
	/**
	 * Get the next node in the LNode tree, taking into account the place where a node is
	 * projected (in the shadow DOM) rather than where it comes from (in the light DOM).
	 *
	 * @param node The node whose next node in the LNode tree must be found.
	 * @return LNode|null The next sibling in the LNode tree.
	 */
	function getNextLNodeWithProjection(node) {
	    var pNextOrParent = node.pNextOrParent;
	    if (pNextOrParent) {
	        // The node is projected
	        var isLastProjectedNode = pNextOrParent.type === 1 /* Projection */;
	        // returns pNextOrParent if we are not at the end of the list, null otherwise
	        return isLastProjectedNode ? null : pNextOrParent;
	    }
	    // returns node.next because the the node is not projected
	    return node.next;
	}
	/**
	 * Find the next node in the LNode tree, taking into account the place where a node is
	 * projected (in the shadow DOM) rather than where it comes from (in the light DOM).
	 *
	 * If there is no sibling node, this function goes to the next sibling of the parent node...
	 * until it reaches rootNode (at which point null is returned).
	 *
	 * @param initialNode The node whose following node in the LNode tree must be found.
	 * @param rootNode The root node at which the lookup should stop.
	 * @return LNode|null The following node in the LNode tree.
	 */
	function getNextOrParentSiblingNode(initialNode, rootNode) {
	    var node = initialNode;
	    var nextNode = getNextLNodeWithProjection(node);
	    while (node && !nextNode) {
	        // if node.pNextOrParent is not null here, it is not the next node
	        // (because, at this point, nextNode is null, so it is the parent)
	        node = node.pNextOrParent || node.parent;
	        if (node === rootNode) {
	            return null;
	        }
	        nextNode = node && getNextLNodeWithProjection(node);
	    }
	    return nextNode;
	}
	/**
	 * Returns the first RNode inside the given LNode.
	 *
	 * @param node The node whose first DOM node must be found
	 * @returns RNode The first RNode of the given LNode or null if there is none.
	 */
	function findFirstRNode(rootNode) {
	    var node = rootNode;
	    while (node) {
	        var nextNode = null;
	        if (node.type === 3 /* Element */) {
	            // A LElementNode has a matching RNode in LElementNode.native
	            return node.native;
	        }
	        else if (node.type === 0 /* Container */) {
	            var lContainerNode = node;
	            var childContainerData = lContainerNode.dynamicLContainerNode ?
	                lContainerNode.dynamicLContainerNode.data :
	                lContainerNode.data;
	            nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;
	        }
	        else if (node.type === 1 /* Projection */) {
	            // For Projection look at the first projected node
	            nextNode = node.data.head;
	        }
	        else {
	            // Otherwise look at the first child
	            nextNode = node.child;
	        }
	        node = nextNode === null ? getNextOrParentSiblingNode(node, rootNode) : nextNode;
	    }
	    return null;
	}
	function createTextNode(value, renderer) {
	    return isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) :
	        renderer.createTextNode(stringify$1(value));
	}
	function addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {
	    ngDevMode && assertNodeType(container, 0 /* Container */);
	    ngDevMode && assertNodeType(rootNode, 2 /* View */);
	    var parentNode = container.data.renderParent;
	    var parent = parentNode ? parentNode.native : null;
	    var node = rootNode.child;
	    if (parent) {
	        while (node) {
	            var nextNode = null;
	            var renderer = container.view.renderer;
	            if (node.type === 3 /* Element */) {
	                if (insertMode) {
	                    if (!node.native) {
	                        // If the native element doesn't exist, this is a bound text node that hasn't yet been
	                        // created because update mode has not run (occurs when a bound text node is a root
	                        // node of a dynamically created view). See textBinding() in instructions for ctx.
	                        node.native = createTextNode('', renderer);
	                    }
	                    isProceduralRenderer(renderer) ?
	                        renderer.insertBefore(parent, node.native, beforeNode) :
	                        parent.insertBefore(node.native, beforeNode, true);
	                }
	                else {
	                    isProceduralRenderer(renderer) ? renderer.removeChild(parent, node.native) :
	                        parent.removeChild(node.native);
	                }
	                nextNode = node.next;
	            }
	            else if (node.type === 0 /* Container */) {
	                // if we get to a container, it must be a root node of a view because we are only
	                // propagating down into child views / containers and not child elements
	                var childContainerData = node.data;
	                childContainerData.renderParent = parentNode;
	                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;
	            }
	            else if (node.type === 1 /* Projection */) {
	                nextNode = node.data.head;
	            }
	            else {
	                nextNode = node.child;
	            }
	            if (nextNode === null) {
	                node = getNextOrParentSiblingNode(node, rootNode);
	            }
	            else {
	                node = nextNode;
	            }
	        }
	    }
	}
	/**
	 * Traverses the tree of component views and containers to remove listeners and
	 * call onDestroy callbacks.
	 *
	 * Notes:
	 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
	 *  - Must process containers instead of their views to avoid splicing
	 *  when views are destroyed and re-added.
	 *  - Using a while loop because it's faster than recursion
	 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
	 *
	 *  @param rootView The view to destroy
	 */
	function destroyViewTree(rootView) {
	    var viewOrContainer = rootView;
	    while (viewOrContainer) {
	        var next = null;
	        if (viewOrContainer.views && viewOrContainer.views.length) {
	            next = viewOrContainer.views[0].data;
	        }
	        else if (viewOrContainer.child) {
	            next = viewOrContainer.child;
	        }
	        else if (viewOrContainer.next) {
	            cleanUpView(viewOrContainer);
	            next = viewOrContainer.next;
	        }
	        if (next == null) {
	            // If the viewOrContainer is the rootView, then the cleanup is done twice.
	            // Without this check, ngOnDestroy would be called twice for a directive on an element.
	            while (viewOrContainer && !viewOrContainer.next && viewOrContainer !== rootView) {
	                cleanUpView(viewOrContainer);
	                viewOrContainer = getParentState(viewOrContainer, rootView);
	            }
	            cleanUpView(viewOrContainer || rootView);
	            next = viewOrContainer && viewOrContainer.next;
	        }
	        viewOrContainer = next;
	    }
	}
	/**
	 * Inserts a view into a container.
	 *
	 * This adds the view to the container's array of active views in the correct
	 * position. It also adds the view's elements to the DOM if the container isn't a
	 * root node of another view (in that case, the view's elements will be added when
	 * the container's parent view is added later).
	 *
	 * @param container The container into which the view should be inserted
	 * @param newView The view to insert
	 * @param index The index at which to insert the view
	 * @returns The inserted view
	 */
	function insertView(container, newView, index) {
	    var state = container.data;
	    var views = state.views;
	    if (index > 0) {
	        // This is a new view, we need to add it to the children.
	        setViewNext(views[index - 1], newView);
	    }
	    if (index < views.length) {
	        setViewNext(newView, views[index]);
	        views.splice(index, 0, newView);
	    }
	    else {
	        views.push(newView);
	    }
	    // If the container's renderParent is null, we know that it is a root node of its own parent view
	    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's
	    // nodes twice - once now and once when its parent inserts its views).
	    if (container.data.renderParent !== null) {
	        var beforeNode = findNextRNodeSibling(newView, container);
	        if (!beforeNode) {
	            var containerNextNativeNode = container.native;
	            if (containerNextNativeNode === undefined) {
	                containerNextNativeNode = container.native = findNextRNodeSibling(container, null);
	            }
	            beforeNode = containerNextNativeNode;
	        }
	        addRemoveViewFromContainer(container, newView, true, beforeNode);
	    }
	    return newView;
	}
	/**
	 * Removes a view from a container.
	 *
	 * This method splices the view from the container's array of active views. It also
	 * removes the view's elements from the DOM and conducts cleanup (e.g. removing
	 * listeners, calling onDestroys).
	 *
	 * @param container The container from which to remove a view
	 * @param removeIndex The index of the view to remove
	 * @returns The removed view
	 */
	function removeView(container, removeIndex) {
	    var views = container.data.views;
	    var viewNode = views[removeIndex];
	    if (removeIndex > 0) {
	        setViewNext(views[removeIndex - 1], viewNode.next);
	    }
	    views.splice(removeIndex, 1);
	    viewNode.next = null;
	    destroyViewTree(viewNode.data);
	    addRemoveViewFromContainer(container, viewNode, false);
	    // Notify query that view has been removed
	    container.data.queries && container.data.queries.removeView(removeIndex);
	    return viewNode;
	}
	/**
	 * Sets a next on the view node, so views in for loops can easily jump from
	 * one view to the next to add/remove elements. Also adds the LView (view.data)
	 * to the view tree for easy traversal when cleaning up the view.
	 *
	 * @param view The view to set up
	 * @param next The view's new next
	 */
	function setViewNext(view, next) {
	    view.next = next;
	    view.data.next = next ? next.data : null;
	}
	/**
	 * Determines which LViewOrLContainer to jump to when traversing back up the
	 * tree in destroyViewTree.
	 *
	 * Normally, the view's parent LView should be checked, but in the case of
	 * embedded views, the container (which is the view node's parent, but not the
	 * LView's parent) needs to be checked for a possible next property.
	 *
	 * @param state The LViewOrLContainer for which we need a parent state
	 * @param rootView The rootView, so we don't propagate too far up the view tree
	 * @returns The correct parent LViewOrLContainer
	 */
	function getParentState(state, rootView) {
	    var node;
	    if ((node = state.node) && node.type === 2 /* View */) {
	        // if it's an embedded view, the state needs to go up to the container, in case the
	        // container has a next
	        return node.parent.data;
	    }
	    else {
	        // otherwise, use parent view for containers or component views
	        return state.parent === rootView ? null : state.parent;
	    }
	}
	/**
	 * Removes all listeners and call all onDestroys in a given view.
	 *
	 * @param view The LView to clean up
	 */
	function cleanUpView(view) {
	    removeListeners(view);
	    executeOnDestroys(view);
	    executePipeOnDestroys(view);
	}
	/** Removes listeners and unsubscribes from output subscriptions */
	function removeListeners(view) {
	    var cleanup = view.cleanup;
	    if (cleanup != null) {
	        for (var i = 0; i < cleanup.length - 1; i += 2) {
	            if (typeof cleanup[i] === 'string') {
	                cleanup[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);
	                i += 2;
	            }
	            else {
	                cleanup[i].call(cleanup[i + 1]);
	            }
	        }
	        view.cleanup = null;
	    }
	}
	/** Calls onDestroy hooks for this view */
	function executeOnDestroys(view) {
	    var tView = view.tView;
	    var destroyHooks;
	    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
	        callHooks(view.directives, destroyHooks);
	    }
	}
	/** Calls pipe destroy hooks for this view */
	function executePipeOnDestroys(view) {
	    var pipeDestroyHooks = view.tView && view.tView.pipeDestroyHooks;
	    if (pipeDestroyHooks) {
	        callHooks(view.data, pipeDestroyHooks);
	    }
	}
	/**
	 * Returns whether a native element should be inserted in the given parent.
	 *
	 * The native node can be inserted when its parent is:
	 * - A regular element => Yes
	 * - A component host element =>
	 *    - if the `currentView` === the parent `view`: The element is in the content (vs the
	 *      template)
	 *      => don't add as the parent component will project if needed.
	 *    - `currentView` !== the parent `view` => The element is in the template (vs the content),
	 *      add it
	 * - View element => delay insertion, will be done on `viewEnd()`
	 *
	 * @param parent The parent in which to insert the child
	 * @param currentView The LView being processed
	 * @return boolean Whether the child element should be inserted.
	 */
	function canInsertNativeNode(parent, currentView) {
	    var parentIsElement = parent.type === 3 /* Element */;
	    return parentIsElement &&
	        (parent.view !== currentView || parent.data === null /* Regular Element. */);
	}
	/**
	 * Appends the `child` element to the `parent`.
	 *
	 * The element insertion might be delayed {@link canInsertNativeNode}
	 *
	 * @param parent The parent to which to append the child
	 * @param child The child that should be appended
	 * @param currentView The current LView
	 * @returns Whether or not the child was appended
	 */
	function appendChild(parent, child, currentView) {
	    if (child !== null && canInsertNativeNode(parent, currentView)) {
	        // We only add element if not in View or not projected.
	        var renderer = currentView.renderer;
	        isProceduralRenderer(renderer) ? renderer.appendChild(parent.native, child) :
	            parent.native.appendChild(child);
	        return true;
	    }
	    return false;
	}
	/**
	 * Inserts the provided node before the correct element in the DOM.
	 *
	 * The element insertion might be delayed {@link canInsertNativeNode}
	 *
	 * @param node Node to insert
	 * @param currentView Current LView
	 */
	function insertChild(node, currentView) {
	    var parent = node.parent;
	    if (canInsertNativeNode(parent, currentView)) {
	        var nativeSibling = findNextRNodeSibling(node, null);
	        var renderer = currentView.renderer;
	        isProceduralRenderer(renderer) ?
	            renderer.insertBefore(parent.native, node.native, nativeSibling) :
	            parent.native.insertBefore(node.native, nativeSibling, false);
	    }
	}
	/**
	 * Appends a projected node to the DOM, or in the case of a projected container,
	 * appends the nodes from all of the container's active views to the DOM.
	 *
	 * @param node The node to process
	 * @param currentParent The last parent element to be processed
	 * @param currentView Current LView
	 */
	function appendProjectedNode(node, currentParent, currentView) {
	    if (node.type !== 0 /* Container */) {
	        appendChild(currentParent, node.native, currentView);
	    }
	    else {
	        // The node we are adding is a Container and we are adding it to Element which
	        // is not a component (no more re-projection).
	        // Alternatively a container is projected at the root of a component's template
	        // and can't be re-projected (as not content of any component).
	        // Assignee the final projection location in those cases.
	        var lContainer = node.data;
	        lContainer.renderParent = currentParent;
	        var views = lContainer.views;
	        for (var i = 0; i < views.length; i++) {
	            addRemoveViewFromContainer(node, views[i], true, null);
	        }
	    }
	    if (node.dynamicLContainerNode) {
	        node.dynamicLContainerNode.data.renderParent = currentParent;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {
	    var nodeClassesLen = nodeClassAttrVal.length;
	    var matchIndex = nodeClassAttrVal.indexOf(cssClassToMatch);
	    var matchEndIdx = matchIndex + cssClassToMatch.length;
	    if (matchIndex === -1 // no match
	        || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before
	        ||
	            (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) {
	        return false;
	    }
	    return true;
	}
	/**
	 * A utility function to match an Ivy node static data against a simple CSS selector
	 *
	 * @param node static data to match
	 * @param selector
	 * @returns true if node matches the selector.
	 */
	function isNodeMatchingSelector(tNode, selector) {
	    ngDevMode && assertNotNull(selector[0], 'Selector should have a tag name');
	    var mode = 4 /* ELEMENT */;
	    var nodeAttrs = tNode.attrs;
	    // When processing ":not" selectors, we skip to the next ":not" if the
	    // current one doesn't match
	    var skipToNextSelector = false;
	    for (var i = 0; i < selector.length; i++) {
	        var current = selector[i];
	        if (typeof current === 'number') {
	            // If we finish processing a :not selector and it hasn't failed, return false
	            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
	                return false;
	            }
	            // If we are skipping to the next :not() and this mode flag is positive,
	            // it's a part of the current :not() selector, and we should keep skipping
	            if (skipToNextSelector && isPositive(current))
	                continue;
	            skipToNextSelector = false;
	            mode = current | (mode & 1 /* NOT */);
	            continue;
	        }
	        if (skipToNextSelector)
	            continue;
	        if (mode & 4 /* ELEMENT */) {
	            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;
	            if (current !== '' && current !== tNode.tagName) {
	                if (isPositive(mode))
	                    return false;
	                skipToNextSelector = true;
	            }
	        }
	        else {
	            var attrName = mode & 8 /* CLASS */ ? 'class' : current;
	            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);
	            if (attrIndexInNode === -1) {
	                if (isPositive(mode))
	                    return false;
	                skipToNextSelector = true;
	                continue;
	            }
	            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];
	            if (selectorAttrValue !== '') {
	                var nodeAttrValue = nodeAttrs[attrIndexInNode + 1];
	                if (mode & 8 /* CLASS */ &&
	                    !isCssClassMatching(nodeAttrValue, selectorAttrValue) ||
	                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {
	                    if (isPositive(mode))
	                        return false;
	                    skipToNextSelector = true;
	                }
	            }
	        }
	    }
	    return isPositive(mode) || skipToNextSelector;
	}
	function isPositive(mode) {
	    return (mode & 1 /* NOT */) === 0;
	}
	function findAttrIndexInNode(name, attrs) {
	    if (attrs === null)
	        return -1;
	    for (var i = 0; i < attrs.length; i += 2) {
	        if (attrs[i] === name)
	            return i;
	    }
	    return -1;
	}
	function isNodeMatchingSelectorList(tNode, selector) {
	    for (var i = 0; i < selector.length; i++) {
	        if (isNodeMatchingSelector(tNode, selector[i])) {
	            return true;
	        }
	    }
	    return false;
	}
	function getProjectAsAttrValue(tNode) {
	    var nodeAttrs = tNode.attrs;
	    if (nodeAttrs != null) {
	        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);
	        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
	        // (attribute names are stored at even indexes)
	        if ((ngProjectAsAttrIdx & 1) === 0) {
	            return nodeAttrs[ngProjectAsAttrIdx + 1];
	        }
	    }
	    return null;
	}
	/**
	 * Checks a given node against matching selectors and returns
	 * selector index (or 0 if none matched).
	 *
	 * This function takes into account the ngProjectAs attribute: if present its value will be compared
	 * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.
	 */
	function matchingSelectorIndex(tNode, selectors, textSelectors) {
	    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
	    for (var i = 0; i < selectors.length; i++) {
	        // if a node has the ngProjectAs attribute match it against unparsed selector
	        // match a node against a parsed selector only if ngProjectAs attribute is not present
	        if (ngProjectAsAttrVal === textSelectors[i] ||
	            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {
	            return i + 1; // first matching selector "captures" a given node
	        }
	    }
	    return 0;
	}

	/** Called when directives inject each other (creating a circular dependency) */
	function throwCyclicDependencyError(token) {
	    throw new Error("Cannot instantiate cyclic dependency! " + token);
	}
	/** Called when there are multiple component selectors that match a given node */
	function throwMultipleComponentError(tNode) {
	    throw new Error("Multiple components match node with tagname " + tNode.tagName);
	}
	/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */
	function throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, oldValue, currValue) {
	    if (checkNoChangesMode) {
	        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	        if (creationMode) {
	            msg +=
	                " It seems like the view has been created after its parent and its children have been dirty checked." +
	                    " Has it been created in a change detection hook ?";
	        }
	        // TODO: include debug context
	        throw new Error(msg);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive (D) sets a property on all component instances using this constant as a key and the
	 * component's host node (LElement) as the value. This is used in methods like detectChanges to
	 * facilitate jumping from an instance to the host node.
	 */
	var NG_HOST_SYMBOL = '__ngHostLNode__';
	/**
	 * A permanent marker promise which signifies that the current CD tree is
	 * clean.
	 */
	var _CLEAN_PROMISE = Promise.resolve(null);
	/**
	 * Directive and element indices for top-level directive.
	 *
	 * Saved here to avoid re-instantiating an array on every change detection run.
	 */
	var _ROOT_DIRECTIVE_INDICES = [0, 0];
	/**
	 * Token set in currentMatches while dependencies are being resolved.
	 *
	 * If we visit a directive that has a value set to CIRCULAR, we know we've
	 * already seen it, and thus have a circular dependency.
	 */
	var CIRCULAR$2 = '__CIRCULAR__';
	/**
	 * This property gets set before entering a template.
	 *
	 * This renderer can be one of two varieties of Renderer3:
	 *
	 * - ObjectedOrientedRenderer3
	 *
	 * This is the native browser API style, e.g. operations are methods on individual objects
	 * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload
	 * size).
	 *
	 * - ProceduralRenderer3
	 *
	 * In non-native browser environments (e.g. platforms such as web-workers), this is the facade
	 * that enables element manipulation. This also facilitates backwards compatibility with
	 * Renderer2.
	 */
	var renderer;
	var rendererFactory;
	function getRenderer() {
	    // top level variables should not be exported for performance reason (PERF_NOTES.md)
	    return renderer;
	}
	/** Used to set the parent property when nodes are created. */
	var previousOrParentNode;
	function getPreviousOrParentNode() {
	    // top level variables should not be exported for performance reason (PERF_NOTES.md)
	    return previousOrParentNode;
	}
	/**
	 * If `isParent` is:
	 *  - `true`: then `previousOrParentNode` points to a parent node.
	 *  - `false`: then `previousOrParentNode` points to previous node (sibling).
	 */
	var isParent;
	/**
	 * Static data that corresponds to the instance-specific data array on an LView.
	 *
	 * Each node's static data is stored in tData at the same index that it's stored
	 * in the data array. Any nodes that do not have static data store a null value in
	 * tData to avoid a sparse array.
	 */
	var tData;
	/**
	 * State of the current view being processed.
	 *
	 * NOTE: we cheat here and initialize it to `null` even thought the type does not
	 * contain `null`. This is because we expect this value to be not `null` as soon
	 * as we enter the view. Declaring the type as `null` would require us to place `!`
	 * in most instructions since they all assume that `currentView` is defined.
	 */
	var currentView = null;
	var currentQueries;
	function getCurrentQueries(QueryType) {
	    // top level variables should not be exported for performance reason (PERF_NOTES.md)
	    return currentQueries || (currentQueries = new QueryType());
	}
	/**
	 * This property gets set before entering a template.
	 */
	var creationMode;
	function getCreationMode() {
	    // top level variables should not be exported for performance reason (PERF_NOTES.md)
	    return creationMode;
	}
	/**
	 * An array of nodes (text, element, container, etc), pipes, their bindings, and
	 * any local variables that need to be stored between invocations.
	 */
	var data;
	/**
	 * An array of directive instances in the current view.
	 *
	 * These must be stored separately from LNodes because their presence is
	 * unknown at compile-time and thus space cannot be reserved in data[].
	 */
	var directives;
	/**
	 * When a view is destroyed, listeners need to be released and outputs need to be
	 * unsubscribed. This cleanup array stores both listener data (in chunks of 4)
	 * and output data (in chunks of 2) for a particular view. Combining the arrays
	 * saves on memory (70 bytes per array) and on a few bytes of code size (for two
	 * separate for loops).
	 *
	 * If it's a listener being stored:
	 * 1st index is: event name to remove
	 * 2nd index is: native element
	 * 3rd index is: listener function
	 * 4th index is: useCapture boolean
	 *
	 * If it's an output subscription:
	 * 1st index is: unsubscribe function
	 * 2nd index is: context for function
	 */
	var cleanup;
	/**
	 * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.
	 *
	 * Necessary to support ChangeDetectorRef.checkNoChanges().
	 */
	var checkNoChangesMode = false;
	/** Whether or not this is the first time the current view has been processed. */
	var firstTemplatePass = true;
	/**
	 * Swap the current state with a new state.
	 *
	 * For performance reasons we store the state in the top level of the module.
	 * This way we minimize the number of properties to read. Whenever a new view
	 * is entered we have to store the state for later, and when the view is
	 * exited the state has to be restored
	 *
	 * @param newView New state to become active
	 * @param host Element to which the View is a child of
	 * @returns the previous state;
	 */
	function enterView(newView, host) {
	    var oldView = currentView;
	    data = newView && newView.data;
	    directives = newView && newView.directives;
	    tData = newView && newView.tView.data;
	    creationMode = newView && (newView.flags & 1 /* CreationMode */) === 1 /* CreationMode */;
	    firstTemplatePass = newView && newView.tView.firstTemplatePass;
	    cleanup = newView && newView.cleanup;
	    renderer = newView && newView.renderer;
	    if (newView && newView.bindingIndex < 0) {
	        newView.bindingIndex = newView.bindingStartIndex;
	    }
	    if (host != null) {
	        previousOrParentNode = host;
	        isParent = true;
	    }
	    currentView = newView;
	    currentQueries = newView && newView.queries;
	    return oldView;
	}
	/**
	 * Used in lieu of enterView to make it clear when we are exiting a child view. This makes
	 * the direction of traversal (up or down the view tree) a bit clearer.
	 */
	function leaveView(newView) {
	    if (!checkNoChangesMode) {
	        executeHooks(directives, currentView.tView.viewHooks, currentView.tView.viewCheckHooks, creationMode);
	    }
	    // Views should be clean and in update mode after being checked, so these bits are cleared
	    currentView.flags &= ~(1 /* CreationMode */ | 4 /* Dirty */);
	    currentView.lifecycleStage = 1 /* Init */;
	    currentView.bindingIndex = -1;
	    enterView(newView, null);
	}
	/**  Refreshes directives in this view and triggers any init/content hooks.  */
	function refreshDirectives() {
	    executeInitAndContentHooks();
	    var tView = currentView.tView;
	    // This needs to be set before children are processed to support recursive components
	    tView.firstTemplatePass = firstTemplatePass = false;
	    setHostBindings(tView.hostBindings);
	    refreshChildComponents(tView.components);
	}
	/** Sets the host bindings for the current view. */
	function setHostBindings(bindings) {
	    if (bindings != null) {
	        var defs = currentView.tView.directives;
	        for (var i = 0; i < bindings.length; i += 2) {
	            var dirIndex = bindings[i];
	            var def = defs[dirIndex];
	            def.hostBindings && def.hostBindings(dirIndex, bindings[i + 1]);
	        }
	    }
	}
	/** Refreshes child components in the current view. */
	function refreshChildComponents(components) {
	    if (components != null) {
	        for (var i = 0; i < components.length; i += 2) {
	            componentRefresh(components[i], components[i + 1]);
	        }
	    }
	}
	function executeInitAndContentHooks() {
	    if (!checkNoChangesMode) {
	        var tView = currentView.tView;
	        executeInitHooks(currentView, tView, creationMode);
	        executeHooks(directives, tView.contentHooks, tView.contentCheckHooks, creationMode);
	    }
	}
	function createLView(viewId, renderer, tView, template, context, flags) {
	    var newView = {
	        parent: currentView,
	        id: viewId,
	        flags: flags | 1 /* CreationMode */ | 8 /* Attached */,
	        node: null,
	        data: [],
	        directives: null,
	        tView: tView,
	        cleanup: null,
	        renderer: renderer,
	        child: null,
	        tail: null,
	        next: null,
	        bindingStartIndex: -1,
	        bindingIndex: -1,
	        template: template,
	        context: context,
	        dynamicViewCount: 0,
	        lifecycleStage: 1 /* Init */,
	        queries: null,
	        injector: currentView && currentView.injector,
	    };
	    return newView;
	}
	/**
	 * Creation of LNode object is extracted to a separate function so we always create LNode object
	 * with the same shape
	 * (same properties assigned in the same order).
	 */
	function createLNodeObject(type, currentView, parent, native, state, queries) {
	    return {
	        type: type,
	        native: native,
	        view: currentView,
	        parent: parent,
	        child: null,
	        next: null,
	        nodeInjector: parent ? parent.nodeInjector : null,
	        data: state,
	        queries: queries,
	        tNode: null,
	        pNextOrParent: null,
	        dynamicLContainerNode: null
	    };
	}
	function createLNode(index, type, native, state) {
	    var parent = isParent ? previousOrParentNode :
	        previousOrParentNode && previousOrParentNode.parent;
	    var queries = (isParent ? currentQueries : previousOrParentNode && previousOrParentNode.queries) ||
	        parent && parent.queries && parent.queries.child();
	    var isState = state != null;
	    var node = createLNodeObject(type, currentView, parent, native, isState ? state : null, queries);
	    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {
	        // Bit of a hack to bust through the readonly because there is a circular dep between
	        // LView and LNode.
	        ngDevMode && assertNull(state.node, 'LView.node should not have been initialized');
	        state.node = node;
	    }
	    if (index != null) {
	        // We are Element or Container
	        ngDevMode && assertDataNext(index);
	        data[index] = node;
	        // Every node adds a value to the static data array to avoid a sparse array
	        if (index >= tData.length) {
	            tData[index] = null;
	        }
	        else {
	            node.tNode = tData[index];
	        }
	        // Now link ourselves into the tree.
	        if (isParent) {
	            currentQueries = null;
	            if (previousOrParentNode.view === currentView ||
	                previousOrParentNode.type === 2 /* View */) {
	                // We are in the same view, which means we are adding content node to the parent View.
	                ngDevMode && assertNull(previousOrParentNode.child, "previousOrParentNode's child should not have been set.");
	                previousOrParentNode.child = node;
	            }
	        }
	        else if (previousOrParentNode) {
	            ngDevMode && assertNull(previousOrParentNode.next, "previousOrParentNode's next property should not have been set " + index + ".");
	            previousOrParentNode.next = node;
	            if (previousOrParentNode.dynamicLContainerNode) {
	                previousOrParentNode.dynamicLContainerNode.next = node;
	            }
	        }
	    }
	    previousOrParentNode = node;
	    isParent = true;
	    return node;
	}
	//////////////////////////
	//// Render
	//////////////////////////
	/**
	 * Resets the application state.
	 */
	function resetApplicationState() {
	    isParent = false;
	    previousOrParentNode = null;
	}
	function renderEmbeddedTemplate(viewNode, template, context, renderer, directives, pipes) {
	    var _isParent = isParent;
	    var _previousOrParentNode = previousOrParentNode;
	    var oldView;
	    try {
	        isParent = true;
	        previousOrParentNode = null;
	        var rf = 2 /* Update */;
	        if (viewNode == null) {
	            var tView = getOrCreateTView(template, directives || null, pipes || null);
	            var lView = createLView(-1, renderer, tView, template, context, 2 /* CheckAlways */);
	            viewNode = createLNode(null, 2 /* View */, null, lView);
	            rf = 1 /* Create */;
	        }
	        oldView = enterView(viewNode.data, viewNode);
	        template(rf, context);
	        refreshDirectives();
	        refreshDynamicChildren();
	    }
	    finally {
	        leaveView(oldView);
	        isParent = _isParent;
	        previousOrParentNode = _previousOrParentNode;
	    }
	    return viewNode;
	}
	function renderComponentOrTemplate(node, hostView, componentOrContext, template) {
	    var oldView = enterView(hostView, node);
	    try {
	        if (rendererFactory.begin) {
	            rendererFactory.begin();
	        }
	        if (template) {
	            template(getRenderFlags(hostView), componentOrContext);
	            refreshDynamicChildren();
	            refreshDirectives();
	        }
	        else {
	            executeInitAndContentHooks();
	            // Element was stored at 0 in data and directive was stored at 0 in directives
	            // in renderComponent()
	            setHostBindings(_ROOT_DIRECTIVE_INDICES);
	            componentRefresh(0, 0);
	        }
	    }
	    finally {
	        if (rendererFactory.end) {
	            rendererFactory.end();
	        }
	        leaveView(oldView);
	    }
	}
	/**
	 * This function returns the default configuration of rendering flags depending on when the
	 * template is in creation mode or update mode. By default, the update block is run with the
	 * creation block when the view is in creation mode. Otherwise, the update block is run
	 * alone.
	 *
	 * Dynamically created views do NOT use this configuration (update block and create block are
	 * always run separately).
	 */
	function getRenderFlags(view) {
	    return view.flags & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :
	        2 /* Update */;
	}
	//////////////////////////
	//// Element
	//////////////////////////
	/**
	 * Create DOM element. The instruction must later be followed by `elementEnd()` call.
	 *
	 * @param index Index of the element in the data array
	 * @param name Name of the DOM Node
	 * @param attrs Statically bound set of attributes to be written into the DOM element on creation.
	 * @param localRefs A set of local reference bindings on the element.
	 *
	 * Attributes and localRefs are passed as an array of strings where elements with an even index
	 * hold an attribute name and elements with an odd index hold an attribute value, ex.:
	 * ['id', 'warning5', 'class', 'alert']
	 */
	function elementStart(index, name, attrs, localRefs) {
	    ngDevMode &&
	        assertEqual(currentView.bindingStartIndex, -1, 'elements should be created before any bindings');
	    var native = renderer.createElement(name);
	    var node = createLNode(index, 3 /* Element */, native, null);
	    if (attrs)
	        setUpAttributes(native, attrs);
	    appendChild(node.parent, native, currentView);
	    createDirectivesAndLocals(index, name, attrs, localRefs, null);
	    return native;
	}
	function createDirectivesAndLocals(index, name, attrs, localRefs, containerData) {
	    var node = previousOrParentNode;
	    if (firstTemplatePass) {
	        ngDevMode && assertDataInRange(index - 1);
	        node.tNode = tData[index] = createTNode(name, attrs || null, containerData);
	        cacheMatchingDirectivesForNode(node.tNode, currentView.tView, localRefs || null);
	    }
	    else {
	        instantiateDirectivesDirectly();
	    }
	    saveResolvedLocalsInData();
	}
	/**
	 * On first template pass, we match each node against available directive selectors and save
	 * the resulting defs in the correct instantiation order for subsequent change detection runs
	 * (so dependencies are always created before the directives that inject them).
	 */
	function cacheMatchingDirectivesForNode(tNode, tView, localRefs) {
	    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.
	    var exportsMap = localRefs ? { '': -1 } : null;
	    var matches = tView.currentMatches = findDirectiveMatches(tNode);
	    if (matches) {
	        for (var i = 0; i < matches.length; i += 2) {
	            var def = matches[i];
	            var valueIndex = i + 1;
	            resolveDirective(def, valueIndex, matches, tView);
	            saveNameToExportMap(matches[valueIndex], def, exportsMap);
	        }
	    }
	    if (exportsMap)
	        cacheMatchingLocalNames(tNode, localRefs, exportsMap);
	}
	/** Matches the current node against all available selectors. */
	function findDirectiveMatches(tNode) {
	    var registry = currentView.tView.directiveRegistry;
	    var matches = null;
	    if (registry) {
	        for (var i = 0; i < registry.length; i++) {
	            var def = registry[i];
	            if (isNodeMatchingSelectorList(tNode, def.selectors)) {
	                if (def.template) {
	                    if (tNode.flags & 4096 /* isComponent */)
	                        throwMultipleComponentError(tNode);
	                    tNode.flags = 4096 /* isComponent */;
	                }
	                if (def.diPublic)
	                    def.diPublic(def);
	                (matches || (matches = [])).push(def, null);
	            }
	        }
	    }
	    return matches;
	}
	function resolveDirective(def, valueIndex, matches, tView) {
	    if (matches[valueIndex] === null) {
	        matches[valueIndex] = CIRCULAR$2;
	        var instance = def.factory();
	        (tView.directives || (tView.directives = [])).push(def);
	        return directiveCreate(matches[valueIndex] = tView.directives.length - 1, instance, def);
	    }
	    else if (matches[valueIndex] === CIRCULAR$2) {
	        // If we revisit this directive before it's resolved, we know it's circular
	        throwCyclicDependencyError(def.type);
	    }
	    return null;
	}
	/** Stores index of component's host element so it will be queued for view refresh during CD. */
	function queueComponentIndexForCheck(dirIndex) {
	    if (firstTemplatePass) {
	        (currentView.tView.components || (currentView.tView.components = [])).push(dirIndex, data.length - 1);
	    }
	}
	/** Stores index of directive and host element so it will be queued for binding refresh during CD.
	 */
	function queueHostBindingForCheck(dirIndex) {
	    ngDevMode &&
	        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.');
	    (currentView.tView.hostBindings || (currentView.tView.hostBindings = [])).push(dirIndex, data.length - 1);
	}
	/** Sets the context for a ChangeDetectorRef to the given instance. */
	function initChangeDetectorIfExisting(injector, instance, view) {
	    if (injector && injector.changeDetectorRef != null) {
	        injector.changeDetectorRef._setComponentContext(view, instance);
	    }
	}
	function isComponent(tNode) {
	    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;
	}
	/**
	 * This function instantiates the given directives.
	 */
	function instantiateDirectivesDirectly() {
	    var tNode = previousOrParentNode.tNode;
	    var count$$1 = tNode.flags & 4095 /* DirectiveCountMask */;
	    if (count$$1 > 0) {
	        var start = tNode.flags >> 13 /* DirectiveStartingIndexShift */;
	        var end = start + count$$1;
	        var tDirectives = currentView.tView.directives;
	        for (var i = start; i < end; i++) {
	            var def = tDirectives[i];
	            directiveCreate(i, def.factory(), def);
	        }
	    }
	}
	/** Caches local names and their matching directive indices for query and template lookups. */
	function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
	    if (localRefs) {
	        var localNames = tNode.localNames = [];
	        // Local names must be stored in tNode in the same order that localRefs are defined
	        // in the template to ensure the data is loaded in the same slots as their refs
	        // in the template (for template queries).
	        for (var i = 0; i < localRefs.length; i += 2) {
	            var index = exportsMap[localRefs[i + 1]];
	            if (index == null)
	                throw new Error("Export of name '" + localRefs[i + 1] + "' not found!");
	            localNames.push(localRefs[i], index);
	        }
	    }
	}
	/**
	 * Builds up an export map as directives are created, so local refs can be quickly mapped
	 * to their directive instances.
	 */
	function saveNameToExportMap(index, def, exportsMap) {
	    if (exportsMap) {
	        if (def.exportAs)
	            exportsMap[def.exportAs] = index;
	        if (def.template)
	            exportsMap[''] = index;
	    }
	}
	/**
	 * Takes a list of local names and indices and pushes the resolved local variable values
	 * to data[] in the same order as they are loaded in the template with load().
	 */
	function saveResolvedLocalsInData() {
	    var localNames = previousOrParentNode.tNode.localNames;
	    if (localNames) {
	        for (var i = 0; i < localNames.length; i += 2) {
	            var index = localNames[i + 1];
	            var value = index === -1 ? previousOrParentNode.native : directives[index];
	            data.push(value);
	        }
	    }
	}
	/**
	 * Gets TView from a template function or creates a new TView
	 * if it doesn't already exist.
	 *
	 * @param template The template from which to get static data
	 * @param directives Directive defs that should be saved on TView
	 * @param pipes Pipe defs that should be saved on TView
	 * @returns TView
	 */
	function getOrCreateTView(template, directives, pipes) {
	    return template.ngPrivateData ||
	        (template.ngPrivateData = createTView(directives, pipes));
	}
	/** Creates a TView instance */
	function createTView(defs, pipes) {
	    return {
	        data: [],
	        directives: null,
	        firstTemplatePass: true,
	        initHooks: null,
	        checkHooks: null,
	        contentHooks: null,
	        contentCheckHooks: null,
	        viewHooks: null,
	        viewCheckHooks: null,
	        destroyHooks: null,
	        pipeDestroyHooks: null,
	        hostBindings: null,
	        components: null,
	        directiveRegistry: typeof defs === 'function' ? defs() : defs,
	        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
	        currentMatches: null
	    };
	}
	function setUpAttributes(native, attrs) {
	    ngDevMode && assertEqual(attrs.length % 2, 0, 'each attribute should have a key and a value');
	    var isProc = isProceduralRenderer(renderer);
	    for (var i = 0; i < attrs.length; i += 2) {
	        var attrName = attrs[i];
	        if (attrName !== NG_PROJECT_AS_ATTR_NAME) {
	            var attrVal = attrs[i + 1];
	            isProc ? renderer.setAttribute(native, attrName, attrVal) :
	                native.setAttribute(attrName, attrVal);
	        }
	    }
	}
	function createError(text, token) {
	    return new Error("Renderer: " + text + " [" + stringify$1(token) + "]");
	}
	/**
	 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
	 *
	 * @param elementOrSelector Render element or CSS selector to locate the element.
	 */
	function locateHostElement(factory, elementOrSelector) {
	    ngDevMode && assertDataInRange(-1);
	    rendererFactory = factory;
	    var defaultRenderer = factory.createRenderer(null, null);
	    var rNode = typeof elementOrSelector === 'string' ?
	        (isProceduralRenderer(defaultRenderer) ?
	            defaultRenderer.selectRootElement(elementOrSelector) :
	            defaultRenderer.querySelector(elementOrSelector)) :
	        elementOrSelector;
	    if (ngDevMode && !rNode) {
	        if (typeof elementOrSelector === 'string') {
	            throw createError('Host node with selector not found:', elementOrSelector);
	        }
	        else {
	            throw createError('Host node is required:', elementOrSelector);
	        }
	    }
	    return rNode;
	}
	/**
	 * Creates the host LNode.
	 *
	 * @param rNode Render host element.
	 * @param def ComponentDef
	 *
	 * @returns LElementNode created
	 */
	function hostElement(tag, rNode, def) {
	    resetApplicationState();
	    var node = createLNode(0, 3 /* Element */, rNode, createLView(-1, renderer, getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs), null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));
	    if (firstTemplatePass) {
	        node.tNode = createTNode(tag, null, null);
	        node.tNode.flags = 4096 /* isComponent */;
	        if (def.diPublic)
	            def.diPublic(def);
	        currentView.tView.directives = [def];
	    }
	    return node;
	}
	/**
	 * Adds an event listener to the current node.
	 *
	 * If an output exists on one of the node's directives, it also subscribes to the output
	 * and saves the subscription for later cleanup.
	 *
	 * @param eventName Name of the event
	 * @param listenerFn The function to be called when event emits
	 * @param useCapture Whether or not to use capture in event listener.
	 */
	function listener(eventName, listenerFn, useCapture) {
	    if (useCapture === void 0) { useCapture = false; }
	    ngDevMode && assertPreviousIsParent();
	    var node = previousOrParentNode;
	    var native = node.native;
	    // In order to match current behavior, native DOM event listeners must be added for all
	    // events (including outputs).
	    var cleanupFns = cleanup || (cleanup = currentView.cleanup = []);
	    if (isProceduralRenderer(renderer)) {
	        var wrappedListener = wrapListenerWithDirtyLogic(currentView, listenerFn);
	        var cleanupFn = renderer.listen(native, eventName, wrappedListener);
	        cleanupFns.push(cleanupFn, null);
	    }
	    else {
	        var wrappedListener = wrapListenerWithDirtyAndDefault(currentView, listenerFn);
	        native.addEventListener(eventName, wrappedListener, useCapture);
	        cleanupFns.push(eventName, native, wrappedListener, useCapture);
	    }
	    var tNode = node.tNode;
	    if (tNode.outputs === undefined) {
	        // if we create TNode here, inputs must be undefined so we know they still need to be
	        // checked
	        tNode.outputs = generatePropertyAliases(node.tNode.flags, 1 /* Output */);
	    }
	    var outputs = tNode.outputs;
	    var outputData;
	    if (outputs && (outputData = outputs[eventName])) {
	        createOutput(outputData, listenerFn);
	    }
	}
	/**
	 * Iterates through the outputs associated with a particular event name and subscribes to
	 * each output.
	 */
	function createOutput(outputs, listener) {
	    for (var i = 0; i < outputs.length; i += 2) {
	        ngDevMode && assertDataInRange(outputs[i], directives);
	        var subscription = directives[outputs[i]][outputs[i + 1]].subscribe(listener);
	        cleanup.push(subscription.unsubscribe, subscription);
	    }
	}
	/** Mark the end of the element. */
	function elementEnd() {
	    if (isParent) {
	        isParent = false;
	    }
	    else {
	        ngDevMode && assertHasParent();
	        previousOrParentNode = previousOrParentNode.parent;
	    }
	    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);
	    var queries = previousOrParentNode.queries;
	    queries && queries.addNode(previousOrParentNode);
	    queueLifecycleHooks(previousOrParentNode.tNode.flags, currentView);
	}
	/**
	 * Updates the value of removes an attribute on an Element.
	 *
	 * @param number index The index of the element in the data array
	 * @param name name The name of the attribute.
	 * @param value value The attribute is removed when value is `null` or `undefined`.
	 *                  Otherwise the attribute value is set to the stringified value.
	 * @param sanitizer An optional function used to sanitize the value.
	 */
	function elementAttribute(index, name, value, sanitizer) {
	    if (value !== NO_CHANGE) {
	        var element = data[index];
	        if (value == null) {
	            isProceduralRenderer(renderer) ? renderer.removeAttribute(element.native, name) :
	                element.native.removeAttribute(name);
	        }
	        else {
	            var strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);
	            isProceduralRenderer(renderer) ? renderer.setAttribute(element.native, name, strValue) :
	                element.native.setAttribute(name, strValue);
	        }
	    }
	}
	/**
	 * Update a property on an Element.
	 *
	 * If the property name also exists as an input property on one of the element's directives,
	 * the component property will be set instead of the element property. This check must
	 * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.
	 *
	 * @param index The index of the element to update in the data array
	 * @param propName Name of property. Because it is going to DOM, this is not subject to
	 *        renaming as part of minification.
	 * @param value New value to write.
	 * @param sanitizer An optional function used to sanitize the value.
	 */
	function elementProperty(index, propName, value, sanitizer) {
	    if (value === NO_CHANGE)
	        return;
	    var node = data[index];
	    var tNode = node.tNode;
	    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't
	    // yet been checked
	    if (tNode && tNode.inputs === undefined) {
	        // mark inputs as checked
	        tNode.inputs = generatePropertyAliases(node.tNode.flags, 0 /* Input */);
	    }
	    var inputData = tNode && tNode.inputs;
	    var dataValue;
	    if (inputData && (dataValue = inputData[propName])) {
	        setInputsForProperty(dataValue, value);
	        markDirtyIfOnPush(node);
	    }
	    else {
	        // It is assumed that the sanitizer is only added when the compiler determines that the property
	        // is risky, so sanitization can be done without further checks.
	        value = sanitizer != null ? sanitizer(value) : value;
	        var native = node.native;
	        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :
	            (native.setProperty ? native.setProperty(propName, value) :
	                native[propName] = value);
	    }
	}
	/**
	 * Constructs a TNode object from the arguments.
	 *
	 * @param tagName
	 * @param attrs
	 * @param data
	 * @param localNames A list of local names and their matching indices
	 * @returns the TNode object
	 */
	function createTNode(tagName, attrs, data) {
	    return {
	        flags: 0,
	        tagName: tagName,
	        attrs: attrs,
	        localNames: null,
	        initialInputs: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        data: data
	    };
	}
	/**
	 * Given a list of directive indices and minified input names, sets the
	 * input properties on the corresponding directives.
	 */
	function setInputsForProperty(inputs, value) {
	    for (var i = 0; i < inputs.length; i += 2) {
	        ngDevMode && assertDataInRange(inputs[i], directives);
	        directives[inputs[i]][inputs[i + 1]] = value;
	    }
	}
	/**
	 * Consolidates all inputs or outputs of all directives on this logical node.
	 *
	 * @param number lNodeFlags logical node flags
	 * @param Direction direction whether to consider inputs or outputs
	 * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise
	 */
	function generatePropertyAliases(tNodeFlags, direction) {
	    var count$$1 = tNodeFlags & 4095 /* DirectiveCountMask */;
	    var propStore = null;
	    if (count$$1 > 0) {
	        var start = tNodeFlags >> 13 /* DirectiveStartingIndexShift */;
	        var end = start + count$$1;
	        var isInput = direction === 0 /* Input */;
	        var defs = currentView.tView.directives;
	        for (var i = start; i < end; i++) {
	            var directiveDef = defs[i];
	            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;
	            for (var publicName in propertyAliasMap) {
	                if (propertyAliasMap.hasOwnProperty(publicName)) {
	                    propStore = propStore || {};
	                    var internalName = propertyAliasMap[publicName];
	                    var hasProperty = propStore.hasOwnProperty(publicName);
	                    hasProperty ? propStore[publicName].push(i, internalName) :
	                        (propStore[publicName] = [i, internalName]);
	                }
	            }
	        }
	    }
	    return propStore;
	}
	/**
	 * Add or remove a class in a `classList` on a DOM element.
	 *
	 * This instruction is meant to handle the [class.foo]="exp" case
	 *
	 * @param index The index of the element to update in the data array
	 * @param className Name of class to toggle. Because it is going to DOM, this is not subject to
	 *        renaming as part of minification.
	 * @param value A value indicating if a given class should be added or removed.
	 */
	function elementClassNamed(index, className, value) {
	    if (value !== NO_CHANGE) {
	        var lElement = data[index];
	        if (value) {
	            isProceduralRenderer(renderer) ? renderer.addClass(lElement.native, className) :
	                lElement.native.classList.add(className);
	        }
	        else {
	            isProceduralRenderer(renderer) ? renderer.removeClass(lElement.native, className) :
	                lElement.native.classList.remove(className);
	        }
	    }
	}
	/**
	 * Set the `className` property on a DOM element.
	 *
	 * This instruction is meant to handle the `[class]="exp"` usage.
	 *
	 * `elementClass` instruction writes the value to the "element's" `className` property.
	 *
	 * @param index The index of the element to update in the data array
	 * @param value A value indicating a set of classes which should be applied. The method overrides
	 *   any existing classes. The value is stringified (`toString`) before it is applied to the
	 *   element.
	 */
	function elementClass(index, value) {
	    if (value !== NO_CHANGE) {
	        // TODO: This is a naive implementation which simply writes value to the `className`. In the
	        // future
	        // we will add logic here which would work with the animation code.
	        var lElement = data[index];
	        isProceduralRenderer(renderer) ? renderer.setProperty(lElement.native, 'className', value) :
	            lElement.native['className'] = stringify$1(value);
	    }
	}
	function elementStyleNamed(index, styleName, value, suffixOrSanitizer) {
	    if (value !== NO_CHANGE) {
	        var lElement = data[index];
	        if (value == null) {
	            isProceduralRenderer(renderer) ?
	                renderer.removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :
	                lElement.native['style'].removeProperty(styleName);
	        }
	        else {
	            var strValue = typeof suffixOrSanitizer == 'function' ? suffixOrSanitizer(value) : stringify$1(value);
	            if (typeof suffixOrSanitizer == 'string')
	                strValue = strValue + suffixOrSanitizer;
	            isProceduralRenderer(renderer) ?
	                renderer.setStyle(lElement.native, styleName, strValue, RendererStyleFlags3.DashCase) :
	                lElement.native['style'].setProperty(styleName, strValue);
	        }
	    }
	}
	/**
	 * Set the `style` property on a DOM element.
	 *
	 * This instruction is meant to handle the `[style]="exp"` usage.
	 *
	 *
	 * @param index The index of the element to update in the data array
	 * @param value A value indicating if a given style should be added or removed.
	 *   The expected shape of `value` is an object where keys are style names and the values
	 *   are their corresponding values to set. If value is falsy than the style is remove. An absence
	 *   of style does not cause that style to be removed. `NO_CHANGE` implies that no update should be
	 *   performed.
	 */
	function elementStyle(index, value) {
	    if (value !== NO_CHANGE) {
	        // TODO: This is a naive implementation which simply writes value to the `style`. In the future
	        // we will add logic here which would work with the animation code.
	        var lElement = data[index];
	        if (isProceduralRenderer(renderer)) {
	            renderer.setProperty(lElement.native, 'style', value);
	        }
	        else {
	            var style = lElement.native['style'];
	            for (var i = 0, keys = Object.keys(value); i < keys.length; i++) {
	                var styleName = keys[i];
	                var styleValue = value[styleName];
	                styleValue == null ? style.removeProperty(styleName) :
	                    style.setProperty(styleName, styleValue);
	            }
	        }
	    }
	}
	//////////////////////////
	//// Text
	//////////////////////////
	/**
	 * Create static text node
	 *
	 * @param index Index of the node in the data array.
	 * @param value Value to write. This value will be stringified.
	 *   If value is not provided than the actual creation of the text node is delayed.
	 */
	function text(index, value) {
	    ngDevMode &&
	        assertEqual(currentView.bindingStartIndex, -1, 'text nodes should be created before bindings');
	    var textNode = value != null ? createTextNode(value, renderer) : null;
	    var node = createLNode(index, 3 /* Element */, textNode);
	    // Text nodes are self closing.
	    isParent = false;
	    appendChild(node.parent, textNode, currentView);
	}
	/**
	 * Create text node with binding
	 * Bindings should be handled externally with the proper bind(1-8) method
	 *
	 * @param index Index of the node in the data array.
	 * @param value Stringified value to write.
	 */
	function textBinding(index, value) {
	    ngDevMode && assertDataInRange(index);
	    var existingNode = data[index];
	    ngDevMode && assertNotNull(existingNode, 'existing node');
	    if (existingNode.native) {
	        // If DOM node exists and value changed, update textContent
	        value !== NO_CHANGE &&
	            (isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify$1(value)) :
	                existingNode.native.textContent = stringify$1(value));
	    }
	    else {
	        // Node was created but DOM node creation was delayed. Create and append now.
	        existingNode.native = createTextNode(value, renderer);
	        insertChild(existingNode, currentView);
	    }
	}
	//////////////////////////
	//// Directive
	//////////////////////////
	/**
	 * Create a directive.
	 *
	 * NOTE: directives can be created in order other than the index order. They can also
	 *       be retrieved before they are created in which case the value will be null.
	 *
	 * @param directive The directive instance.
	 * @param directiveDef DirectiveDef object which contains information about the template.
	 */
	function directiveCreate(index, directive, directiveDef) {
	    var instance = baseDirectiveCreate(index, directive, directiveDef);
	    ngDevMode && assertNotNull(previousOrParentNode.tNode, 'previousOrParentNode.tNode');
	    var tNode = previousOrParentNode.tNode;
	    var isComponent = directiveDef.template;
	    if (isComponent) {
	        addComponentLogic(index, directive, directiveDef);
	    }
	    if (firstTemplatePass) {
	        // Init hooks are queued now so ngOnInit is called in host components before
	        // any projected components.
	        queueInitHooks(index, directiveDef.onInit, directiveDef.doCheck, currentView.tView);
	        if (directiveDef.hostBindings)
	            queueHostBindingForCheck(index);
	    }
	    if (tNode && tNode.attrs) {
	        setInputsFromAttrs(index, instance, directiveDef.inputs, tNode);
	    }
	    return instance;
	}
	function addComponentLogic(index, instance, def) {
	    var tView = getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs);
	    // Only component views should be added to the view tree directly. Embedded views are
	    // accessed through their containers because they may be removed / re-added later.
	    var hostView = addToViewTree(currentView, createLView(-1, rendererFactory.createRenderer(previousOrParentNode.native, def.rendererType), tView, null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));
	    previousOrParentNode.data = hostView;
	    hostView.node = previousOrParentNode;
	    initChangeDetectorIfExisting(previousOrParentNode.nodeInjector, instance, hostView);
	    if (firstTemplatePass)
	        queueComponentIndexForCheck(index);
	}
	/**
	 * A lighter version of directiveCreate() that is used for the root component
	 *
	 * This version does not contain features that we don't already support at root in
	 * current Angular. Example: local refs and inputs on root component.
	 */
	function baseDirectiveCreate(index, directive, directiveDef) {
	    ngDevMode &&
	        assertEqual(currentView.bindingStartIndex, -1, 'directives should be created before any bindings');
	    ngDevMode && assertPreviousIsParent();
	    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });
	    if (directives == null)
	        currentView.directives = directives = [];
	    ngDevMode && assertDataNext(index, directives);
	    directives[index] = directive;
	    if (firstTemplatePass) {
	        var flags = previousOrParentNode.tNode.flags;
	        if ((flags & 4095 /* DirectiveCountMask */) === 0) {
	            // When the first directive is created:
	            // - save the index,
	            // - set the number of directives to 1
	            previousOrParentNode.tNode.flags =
	                index << 13 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ | 1;
	        }
	        else {
	            // Only need to bump the size when subsequent directives are created
	            ngDevMode && assertNotEqual(flags & 4095 /* DirectiveCountMask */, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');
	            previousOrParentNode.tNode.flags++;
	        }
	    }
	    else {
	        var diPublic = directiveDef.diPublic;
	        if (diPublic)
	            diPublic(directiveDef);
	    }
	    if (directiveDef.attributes != null && previousOrParentNode.type == 3 /* Element */) {
	        setUpAttributes(previousOrParentNode.native, directiveDef.attributes);
	    }
	    return directive;
	}
	/**
	 * Sets initial input properties on directive instances from attribute data
	 *
	 * @param directiveIndex Index of the directive in directives array
	 * @param instance Instance of the directive on which to set the initial inputs
	 * @param inputs The list of inputs from the directive def
	 * @param tNode The static data for this node
	 */
	function setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {
	    var initialInputData = tNode.initialInputs;
	    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {
	        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);
	    }
	    var initialInputs = initialInputData[directiveIndex];
	    if (initialInputs) {
	        for (var i = 0; i < initialInputs.length; i += 2) {
	            instance[initialInputs[i]] = initialInputs[i + 1];
	        }
	    }
	}
	/**
	 * Generates initialInputData for a node and stores it in the template's static storage
	 * so subsequent template invocations don't have to recalculate it.
	 *
	 * initialInputData is an array containing values that need to be set as input properties
	 * for directives on this node, but only once on creation. We need this array to support
	 * the case where you set an @Input property of a directive using attribute-like syntax.
	 * e.g. if you have a `name` @Input, you can set it once like this:
	 *
	 * <my-component name="Bess"></my-component>
	 *
	 * @param directiveIndex Index to store the initial input data
	 * @param inputs The list of inputs from the directive def
	 * @param tNode The static data on this node
	 */
	function generateInitialInputs(directiveIndex, inputs, tNode) {
	    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);
	    initialInputData[directiveIndex] = null;
	    var attrs = tNode.attrs;
	    for (var i = 0; i < attrs.length; i += 2) {
	        var attrName = attrs[i];
	        var minifiedInputName = inputs[attrName];
	        if (minifiedInputName !== undefined) {
	            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);
	            inputsToStore.push(minifiedInputName, attrs[i + 1]);
	        }
	    }
	    return initialInputData;
	}
	//////////////////////////
	//// ViewContainer & View
	//////////////////////////
	function createLContainer(parentLNode, currentView, template) {
	    ngDevMode && assertNotNull(parentLNode, 'containers should have a parent');
	    return {
	        views: [],
	        nextIndex: 0,
	        // If the direct parent of the container is a view, its views will need to be added
	        // through insertView() when its parent view is being inserted:
	        renderParent: canInsertNativeNode(parentLNode, currentView) ? parentLNode : null,
	        template: template == null ? null : template,
	        next: null,
	        parent: currentView,
	        dynamicViewCount: 0,
	        queries: null
	    };
	}
	/**
	 * Creates an LContainerNode.
	 *
	 * Only `LViewNodes` can go into `LContainerNodes`.
	 *
	 * @param index The index of the container in the data array
	 * @param template Optional inline template
	 * @param tagName The name of the container element, if applicable
	 * @param attrs The attrs attached to the container, if applicable
	 * @param localRefs A set of local reference bindings on the element.
	 */
	function container(index, template, tagName, attrs, localRefs) {
	    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'container nodes should be created before any bindings');
	    var currentParent = isParent ? previousOrParentNode : previousOrParentNode.parent;
	    var lContainer = createLContainer(currentParent, currentView, template);
	    var node = createLNode(index, 0 /* Container */, undefined, lContainer);
	    // Containers are added to the current view tree instead of their embedded views
	    // because views can be removed and re-inserted.
	    addToViewTree(currentView, node.data);
	    createDirectivesAndLocals(index, tagName || null, attrs, localRefs, []);
	    isParent = false;
	    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
	    var queries = node.queries;
	    if (queries) {
	        // check if a given container node matches
	        queries.addNode(node);
	        // prepare place for matching nodes from views inserted into a given container
	        lContainer.queries = queries.container();
	    }
	}
	/**
	 * Sets a container up to receive views.
	 *
	 * @param index The index of the container in the data array
	 */
	function containerRefreshStart(index) {
	    ngDevMode && assertDataInRange(index);
	    previousOrParentNode = data[index];
	    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
	    isParent = true;
	    previousOrParentNode.data.nextIndex = 0;
	    ngDevMode && assertSame(previousOrParentNode.native, undefined, "the container's native element should not have been set yet.");
	    if (!checkNoChangesMode) {
	        // We need to execute init hooks here so ngOnInit hooks are called in top level views
	        // before they are called in embedded views (for backwards compatibility).
	        executeInitHooks(currentView, currentView.tView, creationMode);
	    }
	}
	/**
	 * Marks the end of the LContainerNode.
	 *
	 * Marking the end of LContainerNode is the time when to child Views get inserted or removed.
	 */
	function containerRefreshEnd() {
	    if (isParent) {
	        isParent = false;
	    }
	    else {
	        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
	        ngDevMode && assertHasParent();
	        previousOrParentNode = previousOrParentNode.parent;
	    }
	    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);
	    var container = previousOrParentNode;
	    container.native = undefined;
	    ngDevMode && assertNodeType(container, 0 /* Container */);
	    var nextIndex = container.data.nextIndex;
	    // remove extra views at the end of the container
	    while (nextIndex < container.data.views.length) {
	        removeView(container, nextIndex);
	    }
	}
	function refreshDynamicChildren() {
	    for (var current = currentView.child; current !== null; current = current.next) {
	        if (current.dynamicViewCount !== 0 && current.views) {
	            var container_1 = current;
	            for (var i = 0; i < container_1.views.length; i++) {
	                var view = container_1.views[i];
	                // The directives and pipes are not needed here as an existing view is only being refreshed.
	                renderEmbeddedTemplate(view, view.data.template, view.data.context, renderer);
	            }
	        }
	    }
	}
	/**
	 * Looks for a view with a given view block id inside a provided LContainer.
	 * Removes views that need to be deleted in the process.
	 *
	 * @param containerNode where to search for views
	 * @param startIdx starting index in the views array to search from
	 * @param viewBlockId exact view block id to look for
	 * @returns index of a found view or -1 if not found
	 */
	function scanForView(containerNode, startIdx, viewBlockId) {
	    var views = containerNode.data.views;
	    for (var i = startIdx; i < views.length; i++) {
	        var viewAtPositionId = views[i].data.id;
	        if (viewAtPositionId === viewBlockId) {
	            return views[i];
	        }
	        else if (viewAtPositionId < viewBlockId) {
	            // found a view that should not be at this position - remove
	            removeView(containerNode, i);
	        }
	        else {
	            // found a view with id grater than the one we are searching for
	            // which means that required view doesn't exist and can't be found at
	            // later positions in the views array - stop the search here
	            break;
	        }
	    }
	    return null;
	}
	/**
	 * Marks the start of an embedded view.
	 *
	 * @param viewBlockId The ID of this view
	 * @return boolean Whether or not this view is in creation mode
	 */
	function embeddedViewStart(viewBlockId) {
	    var container = (isParent ? previousOrParentNode : previousOrParentNode.parent);
	    ngDevMode && assertNodeType(container, 0 /* Container */);
	    var lContainer = container.data;
	    var viewNode = scanForView(container, lContainer.nextIndex, viewBlockId);
	    if (viewNode) {
	        previousOrParentNode = viewNode;
	        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
	        isParent = true;
	        enterView(viewNode.data, viewNode);
	    }
	    else {
	        // When we create a new LView, we always reset the state of the instructions.
	        var newView = createLView(viewBlockId, renderer, getOrCreateEmbeddedTView(viewBlockId, container), null, null, 2 /* CheckAlways */);
	        if (lContainer.queries) {
	            newView.queries = lContainer.queries.enterView(lContainer.nextIndex);
	        }
	        enterView(newView, viewNode = createLNode(null, 2 /* View */, null, newView));
	    }
	    return getRenderFlags(viewNode.data);
	}
	/**
	 * Initialize the TView (e.g. static data) for the active embedded view.
	 *
	 * Each embedded view needs to set the global tData variable to the static data for
	 * that view. Otherwise, the view's static data for a particular node would overwrite
	 * the static data for a node in the view above it with the same index (since it's in the
	 * same template).
	 *
	 * @param viewIndex The index of the TView in TContainer
	 * @param parent The parent container in which to look for the view's static data
	 * @returns TView
	 */
	function getOrCreateEmbeddedTView(viewIndex, parent) {
	    ngDevMode && assertNodeType(parent, 0 /* Container */);
	    var tContainer = parent.tNode.data;
	    if (viewIndex >= tContainer.length || tContainer[viewIndex] == null) {
	        var tView = currentView.tView;
	        tContainer[viewIndex] = createTView(tView.directiveRegistry, tView.pipeRegistry);
	    }
	    return tContainer[viewIndex];
	}
	/** Marks the end of an embedded view. */
	function embeddedViewEnd() {
	    refreshDirectives();
	    isParent = false;
	    var viewNode = previousOrParentNode = currentView.node;
	    var containerNode = previousOrParentNode.parent;
	    if (containerNode) {
	        ngDevMode && assertNodeType(viewNode, 2 /* View */);
	        ngDevMode && assertNodeType(containerNode, 0 /* Container */);
	        var lContainer = containerNode.data;
	        if (creationMode) {
	            // When projected nodes are going to be inserted, the renderParent of the dynamic container
	            // used by the ViewContainerRef must be set.
	            setRenderParentInProjectedNodes(lContainer.renderParent, viewNode);
	            // it is a new view, insert it into collection of views for a given container
	            insertView(containerNode, viewNode, lContainer.nextIndex);
	        }
	        lContainer.nextIndex++;
	    }
	    leaveView(currentView.parent);
	    ngDevMode && assertEqual(isParent, false, 'isParent');
	    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);
	}
	/**
	 * For nodes which are projected inside an embedded view, this function sets the renderParent
	 * of their dynamic LContainerNode.
	 * @param renderParent the renderParent of the LContainer which contains the embedded view.
	 * @param viewNode the embedded view.
	 */
	function setRenderParentInProjectedNodes(renderParent, viewNode) {
	    if (renderParent != null) {
	        var node = viewNode.child;
	        while (node) {
	            if (node.type === 1 /* Projection */) {
	                var nodeToProject = node.data.head;
	                var lastNodeToProject = node.data.tail;
	                while (nodeToProject) {
	                    if (nodeToProject.dynamicLContainerNode) {
	                        nodeToProject.dynamicLContainerNode.data.renderParent = renderParent;
	                    }
	                    nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;
	                }
	            }
	            node = node.next;
	        }
	    }
	}
	/////////////
	/**
	 * Refreshes components by entering the component view and processing its bindings, queries, etc.
	 *
	 * @param directiveIndex
	 * @param elementIndex
	 */
	function componentRefresh(directiveIndex, elementIndex) {
	    ngDevMode && assertDataInRange(elementIndex);
	    var element = data[elementIndex];
	    ngDevMode && assertNodeType(element, 3 /* Element */);
	    ngDevMode && assertNotNull(element.data, "Component's host node should have an LView attached.");
	    var hostView = element.data;
	    // Only attached CheckAlways components or attached, dirty OnPush components should be checked
	    if (viewAttached(hostView) && hostView.flags & (2 /* CheckAlways */ | 4 /* Dirty */)) {
	        ngDevMode && assertDataInRange(directiveIndex, directives);
	        var def = currentView.tView.directives[directiveIndex];
	        detectChangesInternal(hostView, element, def, getDirectiveInstance(directives[directiveIndex]));
	    }
	}
	/** Returns a boolean for whether the view is attached */
	function viewAttached(view) {
	    return (view.flags & 8 /* Attached */) === 8 /* Attached */;
	}
	/**
	 * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
	 * It takes all the selectors from the entire component's template and decides where
	 * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
	 * backed by a selector).
	 *
	 * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
	 * un-parsed form.
	 *
	 * The parsed form is needed for efficient matching of a node against a given CSS selector.
	 * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
	 *
	 * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
	 * drawbacks:
	 * - having only a textual form would require runtime parsing of CSS selectors;
	 * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
	 * template author).
	 *
	 * @param selectors A collection of parsed CSS selectors
	 * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form
	 */
	function projectionDef(index, selectors, textSelectors) {
	    var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;
	    var distributedNodes = new Array(noOfNodeBuckets);
	    for (var i = 0; i < noOfNodeBuckets; i++) {
	        distributedNodes[i] = [];
	    }
	    var componentNode = findComponentHost(currentView);
	    var componentChild = componentNode.child;
	    while (componentChild !== null) {
	        // execute selector matching logic if and only if:
	        // - there are selectors defined
	        // - a node has a tag name / attributes that can be matched
	        if (selectors && componentChild.tNode) {
	            var matchedIdx = matchingSelectorIndex(componentChild.tNode, selectors, textSelectors);
	            distributedNodes[matchedIdx].push(componentChild);
	        }
	        else {
	            distributedNodes[0].push(componentChild);
	        }
	        componentChild = componentChild.next;
	    }
	    ngDevMode && assertDataNext(index);
	    data[index] = distributedNodes;
	}
	/**
	 * Updates the linked list of a projection node, by appending another linked list.
	 *
	 * @param projectionNode Projection node whose projected nodes linked list has to be updated
	 * @param appendedFirst First node of the linked list to append.
	 * @param appendedLast Last node of the linked list to append.
	 */
	function appendToProjectionNode(projectionNode, appendedFirst, appendedLast) {
	    ngDevMode && assertEqual(!!appendedFirst, !!appendedLast, 'appendedFirst can be null if and only if appendedLast is also null');
	    if (!appendedLast) {
	        // nothing to append
	        return;
	    }
	    var projectionNodeData = projectionNode.data;
	    if (projectionNodeData.tail) {
	        projectionNodeData.tail.pNextOrParent = appendedFirst;
	    }
	    else {
	        projectionNodeData.head = appendedFirst;
	    }
	    projectionNodeData.tail = appendedLast;
	    appendedLast.pNextOrParent = projectionNode;
	}
	/**
	 * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
	 * to the projectionDef instruction.
	 *
	 * @param nodeIndex
	 * @param localIndex - index under which distribution of projected nodes was memorized
	 * @param selectorIndex - 0 means <ng-content> without any selector
	 * @param attrs - attributes attached to the ng-content node, if present
	 */
	function projection(nodeIndex, localIndex, selectorIndex, attrs) {
	    if (selectorIndex === void 0) { selectorIndex = 0; }
	    var node = createLNode(nodeIndex, 1 /* Projection */, null, { head: null, tail: null });
	    if (node.tNode == null) {
	        node.tNode = createTNode(null, attrs || null, null);
	    }
	    isParent = false; // self closing
	    var currentParent = node.parent;
	    // re-distribution of projectable nodes is memorized on a component's view level
	    var componentNode = findComponentHost(currentView);
	    // make sure that nodes to project were memorized
	    var nodesForSelector = componentNode.data.data[localIndex][selectorIndex];
	    // build the linked list of projected nodes:
	    for (var i = 0; i < nodesForSelector.length; i++) {
	        var nodeToProject = nodesForSelector[i];
	        if (nodeToProject.type === 1 /* Projection */) {
	            var previouslyProjected = nodeToProject.data;
	            appendToProjectionNode(node, previouslyProjected.head, previouslyProjected.tail);
	        }
	        else {
	            appendToProjectionNode(node, nodeToProject, nodeToProject);
	        }
	    }
	    if (canInsertNativeNode(currentParent, currentView)) {
	        ngDevMode && assertNodeType(currentParent, 3 /* Element */);
	        // process each node in the list of projected nodes:
	        var nodeToProject = node.data.head;
	        var lastNodeToProject = node.data.tail;
	        while (nodeToProject) {
	            appendProjectedNode(nodeToProject, currentParent, currentView);
	            nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;
	        }
	    }
	}
	/**
	 * Given a current view, finds the nearest component's host (LElement).
	 *
	 * @param lView LView for which we want a host element node
	 * @returns The host node
	 */
	function findComponentHost(lView) {
	    var viewRootLNode = lView.node;
	    while (viewRootLNode.type === 2 /* View */) {
	        ngDevMode && assertNotNull(lView.parent, 'lView.parent');
	        lView = lView.parent;
	        viewRootLNode = lView.node;
	    }
	    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);
	    ngDevMode && assertNotNull(viewRootLNode.data, 'node.data');
	    return viewRootLNode;
	}
	/**
	 * Adds a LView or a LContainer to the end of the current view tree.
	 *
	 * This structure will be used to traverse through nested views to remove listeners
	 * and call onDestroy callbacks.
	 *
	 * @param currentView The view where LView or LContainer should be added
	 * @param state The LView or LContainer to add to the view tree
	 * @returns The state passed in
	 */
	function addToViewTree(currentView, state) {
	    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);
	    currentView.tail = state;
	    return state;
	}
	///////////////////////////////
	//// Change detection
	///////////////////////////////
	/** If node is an OnPush component, marks its LView dirty. */
	function markDirtyIfOnPush(node) {
	    // Because data flows down the component tree, ancestors do not need to be marked dirty
	    if (node.data && !(node.data.flags & 2 /* CheckAlways */)) {
	        node.data.flags |= 4 /* Dirty */;
	    }
	}
	/**
	 * Wraps an event listener so its host view and its ancestor views will be marked dirty
	 * whenever the event fires. Necessary to support OnPush components.
	 */
	function wrapListenerWithDirtyLogic(view, listenerFn) {
	    return function (e) {
	        markViewDirty(view);
	        return listenerFn(e);
	    };
	}
	/**
	 * Wraps an event listener so its host view and its ancestor views will be marked dirty
	 * whenever the event fires. Also wraps with preventDefault behavior.
	 */
	function wrapListenerWithDirtyAndDefault(view, listenerFn) {
	    return function wrapListenerIn_markViewDirty(e) {
	        markViewDirty(view);
	        if (listenerFn(e) === false) {
	            e.preventDefault();
	            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)
	            e.returnValue = false;
	        }
	    };
	}
	/** Marks current view and all ancestors dirty */
	function markViewDirty(view) {
	    var currentView = view;
	    while (currentView.parent != null) {
	        currentView.flags |= 4 /* Dirty */;
	        currentView = currentView.parent;
	    }
	    currentView.flags |= 4 /* Dirty */;
	    ngDevMode && assertNotNull(currentView.context, 'rootContext');
	    scheduleTick(currentView.context);
	}
	/**
	 * Used to schedule change detection on the whole application.
	 *
	 * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
	 * It is usually called indirectly by calling `markDirty` when the view needs to be
	 * re-rendered.
	 *
	 * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
	 * `scheduleTick` requests. The scheduling function can be overridden in
	 * `renderComponent`'s `scheduler` option.
	 */
	function scheduleTick(rootContext) {
	    if (rootContext.clean == _CLEAN_PROMISE) {
	        var res_1;
	        rootContext.clean = new Promise(function (r) { return res_1 = r; });
	        rootContext.scheduler(function () {
	            tick(rootContext.component);
	            res_1(null);
	            rootContext.clean = _CLEAN_PROMISE;
	        });
	    }
	}
	/**
	 * Used to perform change detection on the whole application.
	 *
	 * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
	 * executes lifecycle hooks and conditionally checks components based on their
	 * `ChangeDetectionStrategy` and dirtiness.
	 *
	 * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
	 * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
	 * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
	 * be changed when calling `renderComponent` and providing the `scheduler` option.
	 */
	function tick(component) {
	    var rootView = getRootView(component);
	    var rootComponent = rootView.context.component;
	    var hostNode = _getComponentHostLElementNode(rootComponent);
	    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');
	    renderComponentOrTemplate(hostNode, rootView, rootComponent);
	}
	/**
	 * Retrieve the root view from any component by walking the parent `LView` until
	 * reaching the root `LView`.
	 *
	 * @param component any component
	 */
	function getRootView(component) {
	    ngDevMode && assertNotNull(component, 'component');
	    var lElementNode = _getComponentHostLElementNode(component);
	    var lView = lElementNode.view;
	    while (lView.parent) {
	        lView = lView.parent;
	    }
	    return lView;
	}
	/**
	 * Synchronously perform change detection on a component (and possibly its sub-components).
	 *
	 * This function triggers change detection in a synchronous way on a component. There should
	 * be very little reason to call this function directly since a preferred way to do change
	 * detection is to {@link markDirty} the component and wait for the scheduler to call this method
	 * at some future point in time. This is because a single user action often results in many
	 * components being invalidated and calling change detection on each component synchronously
	 * would be inefficient. It is better to wait until all components are marked as dirty and
	 * then perform single change detection across all of the components
	 *
	 * @param component The component which the change detection should be performed on.
	 */
	function detectChanges(component) {
	    var hostNode = _getComponentHostLElementNode(component);
	    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');
	    var componentIndex = hostNode.tNode.flags >> 13 /* DirectiveStartingIndexShift */;
	    var def = hostNode.view.tView.directives[componentIndex];
	    detectChangesInternal(hostNode.data, hostNode, def, component);
	}
	/**
	 * Checks the change detector and its children, and throws if any changes are detected.
	 *
	 * This is used in development mode to verify that running change detection doesn't
	 * introduce other changes.
	 */
	function checkNoChanges(component) {
	    checkNoChangesMode = true;
	    try {
	        detectChanges(component);
	    }
	    finally {
	        checkNoChangesMode = false;
	    }
	}
	/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */
	function detectChangesInternal(hostView, hostNode, def, component) {
	    var oldView = enterView(hostView, hostNode);
	    var template = def.template;
	    try {
	        template(getRenderFlags(hostView), component);
	        refreshDirectives();
	        refreshDynamicChildren();
	    }
	    finally {
	        leaveView(oldView);
	    }
	}
	/**
	 * Mark the component as dirty (needing change detection).
	 *
	 * Marking a component dirty will schedule a change detection on this
	 * component at some point in the future. Marking an already dirty
	 * component as dirty is a noop. Only one outstanding change detection
	 * can be scheduled per component tree. (Two components bootstrapped with
	 * separate `renderComponent` will have separate schedulers)
	 *
	 * When the root component is bootstrapped with `renderComponent`, a scheduler
	 * can be provided.
	 *
	 * @param component Component to mark as dirty.
	 */
	function markDirty(component) {
	    ngDevMode && assertNotNull(component, 'component');
	    var lElementNode = _getComponentHostLElementNode(component);
	    markViewDirty(lElementNode.view);
	}
	/** A special value which designates that a value has not changed. */
	var NO_CHANGE = {};
	/**
	 *  Initializes the binding start index. Will get inlined.
	 *
	 *  This function must be called before any binding related function is called
	 *  (ie `bind()`, `interpolationX()`, `pureFunctionX()`)
	 */
	function initBindings() {
	    ngDevMode && assertEqual(currentView.bindingStartIndex, -1, 'Binding start index should only be set once, when null');
	    ngDevMode && assertEqual(currentView.bindingIndex, -1, 'Binding index should not yet be set ' + currentView.bindingIndex);
	    currentView.bindingIndex = currentView.bindingStartIndex = data.length;
	}
	/**
	 * Creates a single value binding.
	 *
	 * @param value Value to diff
	 */
	function bind(value) {
	    if (currentView.bindingStartIndex < 0) {
	        initBindings();
	        return data[currentView.bindingIndex++] = value;
	    }
	    var changed = value !== NO_CHANGE && isDifferent(data[currentView.bindingIndex], value);
	    if (changed) {
	        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);
	        data[currentView.bindingIndex] = value;
	    }
	    currentView.bindingIndex++;
	    return changed ? value : NO_CHANGE;
	}
	/**
	 * Create interpolation bindings with a variable number of expressions.
	 *
	 * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
	 * Those are faster because there is no need to create an array of expressions and iterate over it.
	 *
	 * `values`:
	 * - has static text at even indexes,
	 * - has evaluated expressions at odd indexes.
	 *
	 * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
	 */
	function interpolationV(values) {
	    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
	    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
	    var different = false;
	    for (var i = 1; i < values.length; i += 2) {
	        // Check if bindings (odd indexes) have changed
	        bindingUpdated(values[i]) && (different = true);
	    }
	    if (!different) {
	        return NO_CHANGE;
	    }
	    // Build the updated content
	    var content = values[0];
	    for (var i = 1; i < values.length; i += 2) {
	        content += stringify$1(values[i]) + values[i + 1];
	    }
	    return content;
	}
	/**
	 * Creates an interpolation binding with 1 expression.
	 *
	 * @param prefix static value used for concatenation only.
	 * @param v0 value checked for change.
	 * @param suffix static value used for concatenation only.
	 */
	function interpolation1(prefix, v0, suffix) {
	    var different = bindingUpdated(v0);
	    return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;
	}
	/** Creates an interpolation binding with 2 expressions. */
	function interpolation2(prefix, v0, i0, v1, suffix) {
	    var different = bindingUpdated2(v0, v1);
	    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;
	}
	/** Creates an interpolation bindings with 3 expressions. */
	function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {
	    var different = bindingUpdated2(v0, v1);
	    different = bindingUpdated(v2) || different;
	    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix :
	        NO_CHANGE;
	}
	/** Create an interpolation binding with 4 expressions. */
	function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
	    var different = bindingUpdated4(v0, v1, v2, v3);
	    return different ?
	        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +
	            suffix :
	        NO_CHANGE;
	}
	/** Creates an interpolation binding with 5 expressions. */
	function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
	    var different = bindingUpdated4(v0, v1, v2, v3);
	    different = bindingUpdated(v4) || different;
	    return different ?
	        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +
	            stringify$1(v4) + suffix :
	        NO_CHANGE;
	}
	/** Creates an interpolation binding with 6 expressions. */
	function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
	    var different = bindingUpdated4(v0, v1, v2, v3);
	    different = bindingUpdated2(v4, v5) || different;
	    return different ?
	        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +
	            stringify$1(v4) + i4 + stringify$1(v5) + suffix :
	        NO_CHANGE;
	}
	/** Creates an interpolation binding with 7 expressions. */
	function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
	    var different = bindingUpdated4(v0, v1, v2, v3);
	    different = bindingUpdated2(v4, v5) || different;
	    different = bindingUpdated(v6) || different;
	    return different ?
	        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +
	            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :
	        NO_CHANGE;
	}
	/** Creates an interpolation binding with 8 expressions. */
	function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
	    var different = bindingUpdated4(v0, v1, v2, v3);
	    different = bindingUpdated4(v4, v5, v6, v7) || different;
	    return different ?
	        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +
	            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix :
	        NO_CHANGE;
	}
	/** Store a value in the `data` at a given `index`. */
	function store(index, value) {
	    // We don't store any static data for local variables, so the first time
	    // we see the template, we should store as null to avoid a sparse array
	    if (index >= tData.length) {
	        tData[index] = null;
	    }
	    data[index] = value;
	}
	/** Retrieves a value from the `data`. */
	function load(index) {
	    ngDevMode && assertDataInRange(index);
	    return data[index];
	}
	/** Retrieves a value from the `directives` array. */
	function loadDirective(index) {
	    ngDevMode && assertNotNull(directives, 'Directives array should be defined if reading a dir.');
	    ngDevMode && assertDataInRange(index, directives);
	    return directives[index];
	}
	/** Gets the current binding value and increments the binding index. */
	function consumeBinding() {
	    ngDevMode && assertDataInRange(currentView.bindingIndex);
	    ngDevMode &&
	        assertNotEqual(data[currentView.bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
	    return data[currentView.bindingIndex++];
	}
	/** Updates binding if changed, then returns whether it was updated. */
	function bindingUpdated(value) {
	    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
	    if (currentView.bindingStartIndex < 0) {
	        initBindings();
	    }
	    else if (isDifferent(data[currentView.bindingIndex], value)) {
	        throwErrorIfNoChangesMode(creationMode, checkNoChangesMode, data[currentView.bindingIndex], value);
	    }
	    else {
	        currentView.bindingIndex++;
	        return false;
	    }
	    data[currentView.bindingIndex++] = value;
	    return true;
	}
	/** Updates binding if changed, then returns the latest value. */
	function checkAndUpdateBinding$1(value) {
	    bindingUpdated(value);
	    return value;
	}
	/** Updates 2 bindings if changed, then returns whether either was updated. */
	function bindingUpdated2(exp1, exp2) {
	    var different = bindingUpdated(exp1);
	    return bindingUpdated(exp2) || different;
	}
	/** Updates 4 bindings if changed, then returns whether any was updated. */
	function bindingUpdated4(exp1, exp2, exp3, exp4) {
	    var different = bindingUpdated2(exp1, exp2);
	    return bindingUpdated2(exp3, exp4) || different;
	}
	function getTView() {
	    return currentView.tView;
	}
	function getDirectiveInstance(instanceOrArray) {
	    // Directives with content queries store an array in directives[directiveIndex]
	    // with the instance as the first index
	    return Array.isArray(instanceOrArray) ? instanceOrArray[0] : instanceOrArray;
	}
	function assertPreviousIsParent() {
	    assertEqual(isParent, true, 'previousOrParentNode should be a parent');
	}
	function assertHasParent() {
	    assertNotNull(previousOrParentNode.parent, 'previousOrParentNode should have a parent');
	}
	function assertDataInRange(index, arr) {
	    if (arr == null)
	        arr = data;
	    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');
	}
	function assertDataNext(index, arr) {
	    if (arr == null)
	        arr = data;
	    assertEqual(arr.length, index, "index " + index + " expected to be at the end of arr (length " + arr.length + ")");
	}
	function _getComponentHostLElementNode(component) {
	    ngDevMode && assertNotNull(component, 'expecting component got null');
	    var lElementNode = component[NG_HOST_SYMBOL];
	    ngDevMode && assertNotNull(component, 'object is not a component');
	    return lElementNode;
	}
	var CLEAN_PROMISE = _CLEAN_PROMISE;
	var ROOT_DIRECTIVE_INDICES = _ROOT_DIRECTIVE_INDICES;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ViewRef$1 = /** @class */ (function () {
	    function ViewRef(_view, context) {
	        this._view = _view;
	        this.context = context;
	    }
	    /** @internal */
	    ViewRef.prototype._setComponentContext = function (view, context) {
	        this._view = view;
	        this.context = context;
	    };
	    ViewRef.prototype.destroy = function () { };
	    ViewRef.prototype.onDestroy = function (callback) { };
	    /**
	     * Marks a view and all of its ancestors dirty.
	     *
	     * It also triggers change detection by calling `scheduleTick` internally, which coalesces
	     * multiple `markForCheck` calls to into one change detection run.
	     *
	     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
	     * checked when it needs to be re-rendered but the two normal triggers haven't marked it
	     * dirty (i.e. inputs haven't changed and events haven't fired in the view).
	     *
	     * <!-- TODO: Add a link to a chapter on OnPush components -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'my-app',
	     *   template: `Number of ticks: {{numberOfTicks}}`
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     * })
	     * class AppComponent {
	     *   numberOfTicks = 0;
	     *
	     *   constructor(private ref: ChangeDetectorRef) {
	     *     setInterval(() => {
	     *       this.numberOfTicks++;
	     *       // the following is required, otherwise the view will not be updated
	     *       this.ref.markForCheck();
	     *     }, 1000);
	     *   }
	     * }
	     * ```
	     */
	    ViewRef.prototype.markForCheck = function () { markViewDirty(this._view); };
	    /**
	     * Detaches the view from the change detection tree.
	     *
	     * Detached views will not be checked during change detection runs until they are
	     * re-attached, even if they are dirty. `detach` can be used in combination with
	     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
	     * detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds. We can do that by detaching
	     * the component's change detector and doing a local check every five seconds.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   // in a real application the returned data will be different every time
	     *   get data() {
	     *     return [1,2,3,4,5];
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'giant-list',
	     *   template: `
	     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
	     *   `,
	     * })
	     * class GiantList {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
	     *     ref.detach();
	     *     setInterval(() => {
	     *       this.ref.detectChanges();
	     *     }, 5000);
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     <giant-list><giant-list>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     */
	    ViewRef.prototype.detach = function () { this._view.flags &= ~8 /* Attached */; };
	    /**
	     * Re-attaches a view to the change detection tree.
	     *
	     * This can be used to re-attach views that were previously detached from the tree
	     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example creates a component displaying `live` data. The component will detach
	     * its change detector from the main change detector tree when the component's live property
	     * is set to false.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   data = 1;
	     *
	     *   constructor() {
	     *     setInterval(() => {
	     *       this.data = this.data * 2;
	     *     }, 500);
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'live-data',
	     *   inputs: ['live'],
	     *   template: 'Data: {{dataProvider.data}}'
	     * })
	     * class LiveData {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
	     *
	     *   set live(value) {
	     *     if (value) {
	     *       this.ref.reattach();
	     *     } else {
	     *       this.ref.detach();
	     *     }
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'my-app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     Live Update: <input type="checkbox" [(ngModel)]="live">
	     *     <live-data [live]="live"><live-data>
	     *   `,
	     * })
	     * class AppComponent {
	     *   live = true;
	     * }
	     * ```
	     */
	    ViewRef.prototype.reattach = function () { this._view.flags |= 8 /* Attached */; };
	    /**
	     * Checks the view and its children.
	     *
	     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
	     * local change detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine, the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds.
	     *
	     * We can do that by detaching the component's change detector and doing a local change detection
	     * check every five seconds.
	     *
	     * See {@link ChangeDetectorRef#detach detach} for more information.
	     */
	    ViewRef.prototype.detectChanges = function () { detectChanges(this.context); };
	    /**
	     * Checks the change detector and its children, and throws if any changes are detected.
	     *
	     * This is used in development mode to verify that running change detection doesn't
	     * introduce other changes.
	     */
	    ViewRef.prototype.checkNoChanges = function () { checkNoChanges(this.context); };
	    return ViewRef;
	}());
	var EmbeddedViewRef$1 = /** @class */ (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef(viewNode, template, context) {
	        var _this = _super.call(this, viewNode.data, context) || this;
	        _this._lViewNode = viewNode;
	        return _this;
	    }
	    return EmbeddedViewRef;
	}(ViewRef$1));
	/**
	 * Creates a ViewRef bundled with destroy functionality.
	 *
	 * @param context The context for this view
	 * @returns The ViewRef
	 */
	function createViewRef(view, context) {
	    // TODO: add detectChanges back in when implementing ChangeDetectorRef.detectChanges
	    return addDestroyable(new ViewRef$1(view, context));
	}
	/**
	 * Decorates an object with destroy logic (implementing the DestroyRef interface)
	 * and returns the enhanced object.
	 *
	 * @param obj The object to decorate
	 * @returns The object with destroy logic
	 */
	function addDestroyable(obj) {
	    var destroyFn = null;
	    obj.destroyed = false;
	    obj.destroy = function () {
	        destroyFn && destroyFn.forEach(function (fn) { return fn(); });
	        this.destroyed = true;
	    };
	    obj.onDestroy = function (fn) { return (destroyFn || (destroyFn = [])).push(fn); };
	    return obj;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Bootstraps a Component into an existing host element and returns an instance
	 * of the component.
	 *
	 * Use this function to bootstrap a component into the DOM tree. Each invocation
	 * of this function will create a separate tree of components, injectors and
	 * change detection cycles and lifetimes. To dynamically insert a new component
	 * into an existing tree such that it shares the same injection, change detection
	 * and object lifetime, use {@link ViewContainer#createComponent}.
	 *
	 * @param componentType Component to bootstrap
	 * @param options Optional parameters which control bootstrapping
	 */
	function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {
	    if (opts === void 0) { opts = {}; }
	    ngDevMode && assertComponentType(componentType);
	    var rendererFactory = opts.rendererFactory || domRendererFactory3;
	    var componentDef = componentType.ngComponentDef;
	    if (componentDef.type != componentType)
	        componentDef.type = componentType;
	    var component;
	    // The first index of the first selector is the tag name.
	    var componentTag = componentDef.selectors[0][0];
	    var hostNode = locateHostElement(rendererFactory, opts.host || componentTag);
	    var rootContext = {
	        // Incomplete initialization due to circular reference.
	        component: null,
	        scheduler: opts.scheduler || requestAnimationFrame.bind(window),
	        clean: CLEAN_PROMISE,
	    };
	    var rootView = createLView(-1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), createTView(null, null), null, rootContext, componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);
	    rootView.injector = opts.injector || null;
	    var oldView = enterView(rootView, null);
	    var elementNode;
	    try {
	        if (rendererFactory.begin)
	            rendererFactory.begin();
	        // Create element node at index 0 in data array
	        elementNode = hostElement(componentTag, hostNode, componentDef);
	        // Create directive instance with factory() and store at index 0 in directives array
	        component = rootContext.component =
	            baseDirectiveCreate(0, componentDef.factory(), componentDef);
	        initChangeDetectorIfExisting(elementNode.nodeInjector, component, elementNode.data);
	        opts.hostFeatures && opts.hostFeatures.forEach(function (feature) { return feature(component, componentDef); });
	        executeInitAndContentHooks();
	        setHostBindings(ROOT_DIRECTIVE_INDICES);
	        detectChangesInternal(elementNode.data, elementNode, componentDef, component);
	    }
	    finally {
	        leaveView(oldView);
	        if (rendererFactory.end)
	            rendererFactory.end();
	    }
	    return component;
	}
	/**
	 * Retrieve the root context for any component by walking the parent `LView` until
	 * reaching the root `LView`.
	 *
	 * @param component any component
	 */
	function getRootContext(component) {
	    var rootContext = getRootView(component).context;
	    ngDevMode && assertNotNull(rootContext, 'rootContext');
	    return rootContext;
	}
	/**
	 * Wait on component until it is rendered.
	 *
	 * This function returns a `Promise` which is resolved when the component's
	 * change detection is executed. This is determined by finding the scheduler
	 * associated with the `component`'s render tree and waiting until the scheduler
	 * flushes. If nothing is scheduled, the function returns a resolved promise.
	 *
	 * Example:
	 * ```
	 * await whenRendered(myComponent);
	 * ```
	 *
	 * @param component Component to wait upon
	 * @returns Promise which resolves when the component is rendered.
	 */
	function whenRendered(component) {
	    return getRootContext(component).clean;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as
	 * the key and the directive's unique ID as the value. This allows us to map directives to their
	 * bloom filter bit for DI.
	 */
	var NG_ELEMENT_ID = '__NG_ELEMENT_ID__';
	/**
	 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
	 * directives that will share slots, and thus, the fewer false positives when checking for
	 * the existence of a directive.
	 */
	var BLOOM_SIZE = 256;
	/** Counter used to generate unique IDs for directives. */
	var nextNgElementId = 0;
	/**
	 * Registers this directive as present in its node's injector by flipping the directive's
	 * corresponding bit in the injector's bloom filter.
	 *
	 * @param injector The node injector in which the directive should be registered
	 * @param type The directive to register
	 */
	function bloomAdd(injector, type) {
	    var id = type[NG_ELEMENT_ID];
	    // Set a unique ID on the directive type, so if something tries to inject the directive,
	    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.
	    if (id == null) {
	        id = type[NG_ELEMENT_ID] = nextNgElementId++;
	    }
	    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
	    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.
	    // This means that after 255, some directives will share slots, leading to some false positives
	    // when checking for a directive's presence.
	    var bloomBit = id % BLOOM_SIZE;
	    // Create a mask that targets the specific bit associated with the directive.
	    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
	    // to bit positions 0 - 31 in a 32 bit integer.
	    var mask = 1 << bloomBit;
	    // Use the raw bloomBit number to determine which bloom filter bucket we should check
	    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc
	    if (bloomBit < 128) {
	        // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket
	        bloomBit < 64 ? (bloomBit < 32 ? (injector.bf0 |= mask) : (injector.bf1 |= mask)) :
	            (bloomBit < 96 ? (injector.bf2 |= mask) : (injector.bf3 |= mask));
	    }
	    else {
	        bloomBit < 192 ? (bloomBit < 160 ? (injector.bf4 |= mask) : (injector.bf5 |= mask)) :
	            (bloomBit < 224 ? (injector.bf6 |= mask) : (injector.bf7 |= mask));
	    }
	}
	function getOrCreateNodeInjector() {
	    ngDevMode && assertPreviousIsParent();
	    return getOrCreateNodeInjectorForNode(getPreviousOrParentNode());
	}
	/**
	 * Creates (or gets an existing) injector for a given element or container.
	 *
	 * @param node for which an injector should be retrieved / created.
	 * @returns Node injector
	 */
	function getOrCreateNodeInjectorForNode(node) {
	    var nodeInjector = node.nodeInjector;
	    var parentInjector = node.parent && node.parent.nodeInjector;
	    if (nodeInjector != parentInjector) {
	        return nodeInjector;
	    }
	    return node.nodeInjector = {
	        parent: parentInjector,
	        node: node,
	        bf0: 0,
	        bf1: 0,
	        bf2: 0,
	        bf3: 0,
	        bf4: 0,
	        bf5: 0,
	        bf6: 0,
	        bf7: 0,
	        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,
	        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,
	        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,
	        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,
	        cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,
	        cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,
	        cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,
	        cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,
	        templateRef: null,
	        viewContainerRef: null,
	        elementRef: null,
	        changeDetectorRef: null
	    };
	}
	/**
	 * Makes a directive public to the DI system by adding it to an injector's bloom filter.
	 *
	 * @param di The node injector in which a directive will be added
	 * @param def The definition of the directive to be made public
	 */
	function diPublicInInjector(di, def) {
	    bloomAdd(di, def.type);
	}
	/**
	 * Makes a directive public to the DI system by adding it to an injector's bloom filter.
	 *
	 * @param def The definition of the directive to be made public
	 */
	function diPublic(def) {
	    diPublicInInjector(getOrCreateNodeInjector(), def);
	}
	function directiveInject(token, flags) {
	    if (flags === void 0) { flags = 0 /* Default */; }
	    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags);
	}
	/**
	 * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
	 * exists, retrieves the existing TemplateRef.
	 *
	 * @returns The TemplateRef instance to use
	 */
	function injectTemplateRef() {
	    return getOrCreateTemplateRef(getOrCreateNodeInjector());
	}
	/**
	 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
	 * already exists, retrieves the existing ViewContainerRef.
	 *
	 * @returns The ViewContainerRef instance to use
	 */
	function injectViewContainerRef() {
	    return getOrCreateContainerRef(getOrCreateNodeInjector());
	}
	/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */
	function injectChangeDetectorRef() {
	    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);
	}
	/**
	 * Inject static attribute value into directive constructor.
	 *
	 * This method is used with `factory` functions which are generated as part of
	 * `defineDirective` or `defineComponent`. The method retrieves the static value
	 * of an attribute. (Dynamic attributes are not supported since they are not resolved
	 *  at the time of injection and can change over time.)
	 *
	 * # Example
	 * Given:
	 * ```
	 * @Component(...)
	 * class MyComponent {
	 *   constructor(@Attribute('title') title: string) { ... }
	 * }
	 * ```
	 * When instantiated with
	 * ```
	 * <my-component title="Hello"></my-component>
	 * ```
	 *
	 * Then factory method generated is:
	 * ```
	 * MyComponent.ngComponentDef = defineComponent({
	 *   factory: () => new MyComponent(injectAttribute('title'))
	 *   ...
	 * })
	 * ```
	 *
	 * @experimental
	 */
	function injectAttribute(attrName) {
	    ngDevMode && assertPreviousIsParent();
	    var lElement = getPreviousOrParentNode();
	    ngDevMode && assertNodeType(lElement, 3 /* Element */);
	    var tElement = lElement.tNode;
	    ngDevMode && assertNotNull(tElement, 'expecting tNode');
	    var attrs = tElement.attrs;
	    if (attrs) {
	        for (var i = 0; i < attrs.length; i = i + 2) {
	            if (attrs[i] == attrName) {
	                return attrs[i + 1];
	            }
	        }
	    }
	    return undefined;
	}
	/**
	 * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
	 * Or, if it already exists, retrieves the existing instance.
	 *
	 * @returns The ChangeDetectorRef to use
	 */
	function getOrCreateChangeDetectorRef(di, context) {
	    if (di.changeDetectorRef)
	        return di.changeDetectorRef;
	    var currentNode = di.node;
	    if (isComponent(currentNode.tNode)) {
	        return di.changeDetectorRef = createViewRef(currentNode.data, context);
	    }
	    else if (currentNode.type === 3 /* Element */) {
	        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view.node);
	    }
	    return null;
	}
	/** Gets or creates ChangeDetectorRef for the closest host component */
	function getOrCreateHostChangeDetector(currentNode) {
	    var hostNode = getClosestComponentAncestor(currentNode);
	    var hostInjector = hostNode.nodeInjector;
	    var existingRef = hostInjector && hostInjector.changeDetectorRef;
	    return existingRef ?
	        existingRef :
	        createViewRef(hostNode.data, hostNode.view
	            .directives[hostNode.tNode.flags >> 13 /* DirectiveStartingIndexShift */]);
	}
	/**
	 * If the node is an embedded view, traverses up the view tree to return the closest
	 * ancestor view that is attached to a component. If it's already a component node,
	 * returns itself.
	 */
	function getClosestComponentAncestor(node) {
	    while (node.type === 2 /* View */) {
	        node = node.view.node;
	    }
	    return node;
	}
	/**
	 * Searches for an instance of the given directive type up the injector tree and returns
	 * that instance if found.
	 *
	 * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),
	 * checks that bit against the bloom filter structure to identify an injector that might have
	 * the directive (see bloomFindPossibleInjector), then searches the directives on that injector
	 * for a match.
	 *
	 * If not found, it will propagate up to the next parent injector until the token
	 * is found or the top is reached.
	 *
	 * @param di Node injector where the search should start
	 * @param token The directive type to search for
	 * @param flags Injection flags (e.g. CheckParent)
	 * @returns The instance found
	 */
	function getOrCreateInjectable(di, token, flags) {
	    var bloomHash = bloomHashBit(token);
	    // If the token has a bloom hash, then it is a directive that is public to the injection system
	    // (diPublic). If there is no hash, fall back to the module injector.
	    if (bloomHash === null) {
	        var moduleInjector = getPreviousOrParentNode().view.injector;
	        var formerInjector = setCurrentInjector(moduleInjector);
	        try {
	            return inject(token, flags);
	        }
	        finally {
	            setCurrentInjector(formerInjector);
	        }
	    }
	    else {
	        var injector = di;
	        while (injector) {
	            // Get the closest potential matching injector (upwards in the injector tree) that
	            // *potentially* has the token.
	            injector = bloomFindPossibleInjector(injector, bloomHash);
	            // If no injector is found, we *know* that there is no ancestor injector that contains the
	            // token, so we abort.
	            if (!injector) {
	                break;
	            }
	            // At this point, we have an injector which *may* contain the token, so we step through the
	            // directives associated with the injector's corresponding node to get the directive instance.
	            var node = injector.node;
	            var flags_1 = node.tNode.flags;
	            var count$$1 = flags_1 & 4095 /* DirectiveCountMask */;
	            if (count$$1 !== 0) {
	                var start = flags_1 >> 13 /* DirectiveStartingIndexShift */;
	                var end = start + count$$1;
	                var defs = node.view.tView.directives;
	                for (var i = start; i < end; i++) {
	                    // Get the definition for the directive at this index and, if it is injectable (diPublic),
	                    // and matches the given token, return the directive instance.
	                    var directiveDef = defs[i];
	                    if (directiveDef.type === token && directiveDef.diPublic) {
	                        return getDirectiveInstance(node.view.directives[i]);
	                    }
	                }
	            }
	            // If we *didn't* find the directive for the token and we are searching the current node's
	            // injector, it's possible the directive is on this node and hasn't been created yet.
	            var instance = void 0;
	            if (injector === di && (instance = searchMatchesQueuedForCreation(node, token))) {
	                return instance;
	            }
	            // The def wasn't found anywhere on this node, so it might be a false positive.
	            // Traverse up the tree and continue searching.
	            injector = injector.parent;
	        }
	    }
	    // No directive was found for the given token.
	    // TODO: implement optional, check-self, and check-parent.
	    throw new Error('Implement');
	}
	function searchMatchesQueuedForCreation(node, token) {
	    var matches = node.view.tView.currentMatches;
	    if (matches) {
	        for (var i = 0; i < matches.length; i += 2) {
	            var def = matches[i];
	            if (def.type === token) {
	                return resolveDirective(def, i + 1, matches, node.view.tView);
	            }
	        }
	    }
	    return null;
	}
	/**
	 * Given a directive type, this function returns the bit in an injector's bloom filter
	 * that should be used to determine whether or not the directive is present.
	 *
	 * When the directive was added to the bloom filter, it was given a unique ID that can be
	 * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's
	 * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after
	 * BLOOM_SIZE is reached).
	 *
	 * @param type The directive type
	 * @returns The bloom bit to check for the directive
	 */
	function bloomHashBit(type) {
	    var id = type[NG_ELEMENT_ID];
	    return typeof id === 'number' ? id % BLOOM_SIZE : null;
	}
	/**
	 * Finds the closest injector that might have a certain directive.
	 *
	 * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to
	 * check and a starting injector, this function traverses up injectors until it finds an
	 * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the
	 * injector may have that directive. It only *may* have the directive because directives begin
	 * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a
	 * different directive sharing the bit.
	 *
	 * Note: We can skip checking further injectors up the tree if an injector's cbf structure
	 * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent
	 * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain
	 * the directive and do not need to be checked.
	 *
	 * @param injector The starting node injector to check
	 * @param  bloomBit The bit to check in each injector's bloom filter
	 * @returns An injector that might have the directive
	 */
	function bloomFindPossibleInjector(startInjector, bloomBit) {
	    // Create a mask that targets the specific bit associated with the directive we're looking for.
	    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
	    // to bit positions 0 - 31 in a 32 bit integer.
	    var mask = 1 << bloomBit;
	    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a
	    // match.
	    var injector = startInjector;
	    while (injector) {
	        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:
	        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.
	        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.
	        var value = void 0;
	        if (bloomBit < 128) {
	            value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :
	                (bloomBit < 96 ? injector.bf2 : injector.bf3);
	        }
	        else {
	            value = bloomBit < 192 ? (bloomBit < 160 ? injector.bf4 : injector.bf5) :
	                (bloomBit < 224 ? injector.bf6 : injector.bf7);
	        }
	        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
	        // this injector is a potential match.
	        if ((value & mask) === mask) {
	            return injector;
	        }
	        // If the current injector does not have the directive, check the bloom filters for the ancestor
	        // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.
	        if (bloomBit < 128) {
	            value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :
	                (bloomBit < 96 ? injector.cbf2 : injector.cbf3);
	        }
	        else {
	            value = bloomBit < 192 ? (bloomBit < 160 ? injector.cbf4 : injector.cbf5) :
	                (bloomBit < 224 ? injector.cbf6 : injector.cbf7);
	        }
	        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to
	        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.
	        injector = (value & mask) ? injector.parent : null;
	    }
	    return null;
	}
	var ReadFromInjectorFn = /** @class */ (function () {
	    function ReadFromInjectorFn(read) {
	        this.read = read;
	    }
	    return ReadFromInjectorFn;
	}());
	/**
	 * Creates an ElementRef for a given node injector and stores it on the injector.
	 * Or, if the ElementRef already exists, retrieves the existing ElementRef.
	 *
	 * @param di The node injector where we should store a created ElementRef
	 * @returns The ElementRef instance to use
	 */
	function getOrCreateElementRef(di) {
	    return di.elementRef || (di.elementRef = new ElementRef$1(di.node.type === 0 /* Container */ ? null : di.node.native));
	}
	/** A ref to a node's native element. */
	var ElementRef$1 = /** @class */ (function () {
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    return ElementRef;
	}());
	/**
	 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
	 * already exists, retrieves the existing ViewContainerRef.
	 *
	 * @returns The ViewContainerRef instance to use
	 */
	function getOrCreateContainerRef(di) {
	    if (!di.viewContainerRef) {
	        var vcRefHost = di.node;
	        ngDevMode && assertNodeOfPossibleTypes(vcRefHost, 0 /* Container */, 3 /* Element */);
	        var lContainer = createLContainer(vcRefHost.parent, vcRefHost.view);
	        var lContainerNode = createLNodeObject(0 /* Container */, vcRefHost.view, vcRefHost.parent, undefined, lContainer, null);
	        vcRefHost.dynamicLContainerNode = lContainerNode;
	        addToViewTree(vcRefHost.view, lContainer);
	        di.viewContainerRef = new ViewContainerRef$1(lContainerNode);
	    }
	    return di.viewContainerRef;
	}
	/**
	 * A ref to a container that enables adding and removing views from that container
	 * imperatively.
	 */
	var ViewContainerRef$1 = /** @class */ (function () {
	    function ViewContainerRef(_lContainerNode) {
	        this._lContainerNode = _lContainerNode;
	        this._viewRefs = [];
	    }
	    ViewContainerRef.prototype.clear = function () {
	        var lContainer = this._lContainerNode.data;
	        while (lContainer.views.length) {
	            this.remove(0);
	        }
	    };
	    ViewContainerRef.prototype.get = function (index) { return this._viewRefs[index] || null; };
	    Object.defineProperty(ViewContainerRef.prototype, "length", {
	        get: function () {
	            var lContainer = this._lContainerNode.data;
	            return lContainer.views.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var viewRef = templateRef.createEmbeddedView(context || {});
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) {
	        throw notImplemented();
	    };
	    ViewContainerRef.prototype.insert = function (viewRef, index) {
	        var lViewNode = viewRef._lViewNode;
	        var adjustedIdx = this._adjustIndex(index);
	        insertView(this._lContainerNode, lViewNode, adjustedIdx);
	        // invalidate cache of next sibling RNode (we do similar operation in the containerRefreshEnd
	        // instruction)
	        this._lContainerNode.native = undefined;
	        this._viewRefs.splice(adjustedIdx, 0, viewRef);
	        lViewNode.parent = this._lContainerNode;
	        // If the view is dynamic (has a template), it needs to be counted both at the container
	        // level and at the node above the container.
	        if (lViewNode.data.template !== null) {
	            // Increment the container view count.
	            this._lContainerNode.data.dynamicViewCount++;
	            // Look for the parent node and increment its dynamic view count.
	            if (this._lContainerNode.parent !== null && this._lContainerNode.parent.data !== null) {
	                ngDevMode && assertNodeOfPossibleTypes(this._lContainerNode.parent, 2 /* View */, 3 /* Element */);
	                this._lContainerNode.parent.data.dynamicViewCount++;
	            }
	        }
	        return viewRef;
	    };
	    ViewContainerRef.prototype.move = function (viewRef, newIndex) {
	        var index = this.indexOf(viewRef);
	        this.detach(index);
	        this.insert(viewRef, this._adjustIndex(newIndex));
	        return viewRef;
	    };
	    ViewContainerRef.prototype.indexOf = function (viewRef) { return this._viewRefs.indexOf(viewRef); };
	    ViewContainerRef.prototype.remove = function (index) {
	        this.detach(index);
	        // TODO(ml): proper destroy of the ViewRef, i.e. recursively destroy the LviewNode and its
	        // children, delete DOM nodes and QueryList, trigger hooks (onDestroy), destroy the renderer,
	        // detach projected nodes
	    };
	    ViewContainerRef.prototype.detach = function (index) {
	        var adjustedIdx = this._adjustIndex(index, -1);
	        removeView(this._lContainerNode, adjustedIdx);
	        return this._viewRefs.splice(adjustedIdx, 1)[0] || null;
	    };
	    ViewContainerRef.prototype._adjustIndex = function (index, shift) {
	        if (shift === void 0) { shift = 0; }
	        if (index == null) {
	            return this._lContainerNode.data.views.length + shift;
	        }
	        if (ngDevMode) {
	            assertGreaterThan(index, -1, 'index must be positive');
	            // +1 because it's legal to insert at the end.
	            assertLessThan(index, this._lContainerNode.data.views.length + 1 + shift, 'index');
	        }
	        return index;
	    };
	    return ViewContainerRef;
	}());
	/**
	 * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already
	 * exists, retrieves the existing TemplateRef.
	 *
	 * @param di The node injector where we should store a created TemplateRef
	 * @returns The TemplateRef instance to use
	 */
	function getOrCreateTemplateRef(di) {
	    ngDevMode && assertNodeType(di.node, 0 /* Container */);
	    var data = di.node.data;
	    var tView = di.node.view.tView;
	    return di.templateRef || (di.templateRef = new TemplateRef$1(getOrCreateElementRef(di), data.template, getRenderer(), tView.directiveRegistry, tView.pipeRegistry));
	}
	var TemplateRef$1 = /** @class */ (function () {
	    function TemplateRef(elementRef, template, _renderer, _directives, _pipes) {
	        this._renderer = _renderer;
	        this._directives = _directives;
	        this._pipes = _pipes;
	        this.elementRef = elementRef;
	        this._template = template;
	    }
	    TemplateRef.prototype.createEmbeddedView = function (context) {
	        var viewNode = renderEmbeddedTemplate(null, this._template, context, this._renderer, this._directives, this._pipes);
	        return addDestroyable(new EmbeddedViewRef$1(viewNode, this._template, context));
	    };
	    return TemplateRef;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a component definition object.
	 *
	 *
	 * # Example
	 * ```
	 * class MyDirective {
	 *   // Generated by Angular Template Compiler
	 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
	 *   static ngComponentDef = defineComponent({
	 *     ...
	 *   });
	 * }
	 * ```
	 */
	function defineComponent(componentDefinition) {
	    var type = componentDefinition.type;
	    var pipeTypes = componentDefinition.pipes;
	    var directiveTypes = componentDefinition.directives;
	    var def = {
	        type: type,
	        diPublic: null,
	        factory: componentDefinition.factory,
	        template: componentDefinition.template || null,
	        hostBindings: componentDefinition.hostBindings || null,
	        attributes: componentDefinition.attributes || null,
	        inputs: invertObject(componentDefinition.inputs),
	        outputs: invertObject(componentDefinition.outputs),
	        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,
	        exportAs: componentDefinition.exportAs,
	        onInit: type.prototype.ngOnInit || null,
	        doCheck: type.prototype.ngDoCheck || null,
	        afterContentInit: type.prototype.ngAfterContentInit || null,
	        afterContentChecked: type.prototype.ngAfterContentChecked || null,
	        afterViewInit: type.prototype.ngAfterViewInit || null,
	        afterViewChecked: type.prototype.ngAfterViewChecked || null,
	        onDestroy: type.prototype.ngOnDestroy || null,
	        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
	        directiveDefs: directiveTypes ?
	            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)
	                .map(extractDirectiveDef); } :
	            null,
	        pipeDefs: pipeTypes ?
	            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :
	            null,
	        selectors: componentDefinition.selectors
	    };
	    var feature = componentDefinition.features;
	    feature && feature.forEach(function (fn) { return fn(def); });
	    return def;
	}
	function extractDirectiveDef(type) {
	    var def = type.ngComponentDef || type.ngDirectiveDef;
	    if (ngDevMode && !def) {
	        throw new Error("'" + type.name + "' is neither 'ComponentType' or 'DirectiveType'.");
	    }
	    return def;
	}
	function extractPipeDef(type) {
	    var def = type.ngPipeDef;
	    if (ngDevMode && !def) {
	        throw new Error("'" + type.name + "' is not a 'PipeType'.");
	    }
	    return def;
	}
	var PRIVATE_PREFIX = '__ngOnChanges_';
	/**
	 * Creates an NgOnChangesFeature function for a component's features list.
	 *
	 * It accepts an optional map of minified input property names to original property names,
	 * if any input properties have a public alias.
	 *
	 * The NgOnChangesFeature function that is returned decorates a component with support for
	 * the ngOnChanges lifecycle hook, so it should be included in any component that implements
	 * that hook.
	 *
	 * Example usage:
	 *
	 * ```
	 * static ngComponentDef = defineComponent({
	 *   ...
	 *   inputs: {name: 'publicName'},
	 *   features: [NgOnChangesFeature({name: 'name'})]
	 * });
	 * ```
	 *
	 * @param inputPropertyNames Map of input property names, if they are aliased
	 * @returns DirectiveDefFeature
	 */
	function NgOnChangesFeature(inputPropertyNames) {
	    return function (definition) {
	        var inputs = definition.inputs;
	        var proto = definition.type.prototype;
	        // Place where we will store SimpleChanges if there is a change
	        Object.defineProperty(proto, PRIVATE_PREFIX, { value: undefined, writable: true });
	        var _loop_1 = function (pubKey) {
	            var minKey = inputs[pubKey];
	            var propertyName = inputPropertyNames && inputPropertyNames[minKey] || pubKey;
	            var privateMinKey = PRIVATE_PREFIX + minKey;
	            // Create a place where the actual value will be stored and make it non-enumerable
	            Object.defineProperty(proto, privateMinKey, { value: undefined, writable: true });
	            var existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);
	            // create a getter and setter for property
	            Object.defineProperty(proto, minKey, {
	                get: function () {
	                    return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :
	                        this[privateMinKey];
	                },
	                set: function (value) {
	                    var simpleChanges = this[PRIVATE_PREFIX];
	                    var isFirstChange = simpleChanges === undefined;
	                    if (simpleChanges == null) {
	                        simpleChanges = this[PRIVATE_PREFIX] = {};
	                    }
	                    simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);
	                    (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :
	                        this[privateMinKey] = value;
	                }
	            });
	        };
	        for (var pubKey in inputs) {
	            _loop_1(pubKey);
	        }
	        // If an onInit hook is defined, it will need to wrap the ngOnChanges call
	        // so the call order is changes-init-check in creation mode. In subsequent
	        // change detection runs, only the check wrapper will be called.
	        if (definition.onInit != null) {
	            definition.onInit = onChangesWrapper(definition.onInit);
	        }
	        definition.doCheck = onChangesWrapper(definition.doCheck);
	    };
	    function onChangesWrapper(delegateHook) {
	        return function () {
	            var simpleChanges = this[PRIVATE_PREFIX];
	            if (simpleChanges != null) {
	                this.ngOnChanges(simpleChanges);
	                this[PRIVATE_PREFIX] = null;
	            }
	            delegateHook && delegateHook.apply(this);
	        };
	    }
	}
	function PublicFeature(definition) {
	    definition.diPublic = diPublic;
	}
	var EMPTY$1$1 = {};
	/** Swaps the keys and values of an object. */
	function invertObject(obj) {
	    if (obj == null)
	        return EMPTY$1$1;
	    var newObj = {};
	    for (var minifiedKey in obj) {
	        newObj[obj[minifiedKey]] = minifiedKey;
	    }
	    return newObj;
	}
	/**
	 * Create a directive definition object.
	 *
	 * # Example
	 * ```
	 * class MyDirective {
	 *   // Generated by Angular Template Compiler
	 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
	 *   static ngDirectiveDef = defineDirective({
	 *     ...
	 *   });
	 * }
	 * ```
	 */
	var defineDirective = defineComponent;
	/**
	 * Create a pipe definition object.
	 *
	 * # Example
	 * ```
	 * class MyPipe implements PipeTransform {
	 *   // Generated by Angular Template Compiler
	 *   static ngPipeDef = definePipe({
	 *     ...
	 *   });
	 * }
	 * ```
	 * @param pipeDef Pipe definition generated by the compiler
	 */
	function definePipe(pipeDef) {
	    return {
	        name: pipeDef.name,
	        n: pipeDef.factory,
	        pure: pipeDef.pure !== false,
	        onDestroy: pipeDef.type.prototype.ngOnDestroy || null
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * If the value hasn't been saved, calls the pure function to store and return the
	 * value. If it has been saved, returns the saved value.
	 *
	 * @param pureFn Function that returns a value
	 * @returns value
	 */
	function pureFunction0(pureFn, thisArg) {
	    return getCreationMode() ? checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg) : pureFn()) :
	        consumeBinding();
	}
	/**
	 * If the value of the provided exp has changed, calls the pure function to return
	 * an updated value. Or if the value has not changed, returns cached value.
	 *
	 * @param pureFn Function that returns an updated value
	 * @param exp Updated expression value
	 * @returns Updated value
	 */
	function pureFunction1(pureFn, exp, thisArg) {
	    return bindingUpdated(exp) ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @returns Updated value
	 */
	function pureFunction2(pureFn, exp1, exp2, thisArg) {
	    return bindingUpdated2(exp1, exp2) ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @returns Updated value
	 */
	function pureFunction3(pureFn, exp1, exp2, exp3, thisArg) {
	    var different = bindingUpdated2(exp1, exp2);
	    return bindingUpdated(exp3) || different ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @param exp4
	 * @returns Updated value
	 */
	function pureFunction4(pureFn, exp1, exp2, exp3, exp4, thisArg) {
	    return bindingUpdated4(exp1, exp2, exp3, exp4) ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @param exp4
	 * @param exp5
	 * @returns Updated value
	 */
	function pureFunction5(pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
	    var different = bindingUpdated4(exp1, exp2, exp3, exp4);
	    return bindingUpdated(exp5) || different ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :
	            pureFn(exp1, exp2, exp3, exp4, exp5)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @param exp4
	 * @param exp5
	 * @param exp6
	 * @returns Updated value
	 */
	function pureFunction6(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
	    var different = bindingUpdated4(exp1, exp2, exp3, exp4);
	    return bindingUpdated2(exp5, exp6) || different ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :
	            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @param exp4
	 * @param exp5
	 * @param exp6
	 * @param exp7
	 * @returns Updated value
	 */
	function pureFunction7(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
	    var different = bindingUpdated4(exp1, exp2, exp3, exp4);
	    different = bindingUpdated2(exp5, exp6) || different;
	    return bindingUpdated(exp7) || different ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :
	            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :
	        consumeBinding();
	}
	/**
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn
	 * @param exp1
	 * @param exp2
	 * @param exp3
	 * @param exp4
	 * @param exp5
	 * @param exp6
	 * @param exp7
	 * @param exp8
	 * @returns Updated value
	 */
	function pureFunction8(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
	    var different = bindingUpdated4(exp1, exp2, exp3, exp4);
	    return bindingUpdated4(exp5, exp6, exp7, exp8) || different ?
	        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :
	            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :
	        consumeBinding();
	}
	/**
	 * pureFunction instruction that can support any number of bindings.
	 *
	 * If the value of any provided exp has changed, calls the pure function to return
	 * an updated value. Or if no values have changed, returns cached value.
	 *
	 * @param pureFn A pure function that takes binding values and builds an object or array
	 * containing those values.
	 * @param exp An array of binding values
	 * @returns Updated value
	 */
	function pureFunctionV(pureFn, exps, thisArg) {
	    var different = false;
	    for (var i = 0; i < exps.length; i++) {
	        bindingUpdated(exps[i]) && (different = true);
	    }
	    return different ? checkAndUpdateBinding$1(pureFn.apply(thisArg, exps)) : consumeBinding();
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Create a pipe.
	 *
	 * @param index Pipe index where the pipe will be stored.
	 * @param pipeName The name of the pipe
	 * @returns T the instance of the pipe.
	 */
	function pipe$1(index, pipeName) {
	    var tView = getTView();
	    var pipeDef;
	    if (tView.firstTemplatePass) {
	        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
	        tView.data[index] = pipeDef;
	        if (pipeDef.onDestroy) {
	            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(index, pipeDef.onDestroy);
	        }
	    }
	    else {
	        pipeDef = tView.data[index];
	    }
	    var pipeInstance = pipeDef.n();
	    store(index, pipeInstance);
	    return pipeInstance;
	}
	/**
	 * Searches the pipe registry for a pipe with the given name. If one is found,
	 * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
	 *
	 * @param name Name of pipe to resolve
	 * @param registry Full list of available pipes
	 * @returns Matching PipeDef
	 */
	function getPipeDef(name, registry) {
	    if (registry) {
	        for (var i = 0; i < registry.length; i++) {
	            var pipeDef = registry[i];
	            if (name === pipeDef.name) {
	                return pipeDef;
	            }
	        }
	    }
	    throw new Error("Pipe with name '" + name + "' not found!");
	}
	/**
	 * Invokes a pipe with 1 arguments.
	 *
	 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
	 * the pipe only when an input to the pipe changes.
	 *
	 * @param index Pipe index where the pipe was stored on creation.
	 * @param v1 1st argument to {@link PipeTransform#transform}.
	 */
	function pipeBind1(index, v1) {
	    var pipeInstance = load(index);
	    return isPure(index) ? pureFunction1(pipeInstance.transform, v1, pipeInstance) :
	        pipeInstance.transform(v1);
	}
	/**
	 * Invokes a pipe with 2 arguments.
	 *
	 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
	 * the pipe only when an input to the pipe changes.
	 *
	 * @param index Pipe index where the pipe was stored on creation.
	 * @param v1 1st argument to {@link PipeTransform#transform}.
	 * @param v2 2nd argument to {@link PipeTransform#transform}.
	 */
	function pipeBind2(index, v1, v2) {
	    var pipeInstance = load(index);
	    return isPure(index) ? pureFunction2(pipeInstance.transform, v1, v2, pipeInstance) :
	        pipeInstance.transform(v1, v2);
	}
	/**
	 * Invokes a pipe with 3 arguments.
	 *
	 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
	 * the pipe only when an input to the pipe changes.
	 *
	 * @param index Pipe index where the pipe was stored on creation.
	 * @param v1 1st argument to {@link PipeTransform#transform}.
	 * @param v2 2nd argument to {@link PipeTransform#transform}.
	 * @param v3 4rd argument to {@link PipeTransform#transform}.
	 */
	function pipeBind3(index, v1, v2, v3) {
	    var pipeInstance = load(index);
	    return isPure(index) ? pureFunction3(pipeInstance.transform.bind(pipeInstance), v1, v2, v3) :
	        pipeInstance.transform(v1, v2, v3);
	}
	/**
	 * Invokes a pipe with 4 arguments.
	 *
	 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
	 * the pipe only when an input to the pipe changes.
	 *
	 * @param index Pipe index where the pipe was stored on creation.
	 * @param v1 1st argument to {@link PipeTransform#transform}.
	 * @param v2 2nd argument to {@link PipeTransform#transform}.
	 * @param v3 3rd argument to {@link PipeTransform#transform}.
	 * @param v4 4th argument to {@link PipeTransform#transform}.
	 */
	function pipeBind4(index, v1, v2, v3, v4) {
	    var pipeInstance = load(index);
	    return isPure(index) ? pureFunction4(pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :
	        pipeInstance.transform(v1, v2, v3, v4);
	}
	/**
	 * Invokes a pipe with variable number of arguments.
	 *
	 * This instruction acts as a guard to {@link PipeTransform#transform} invoking
	 * the pipe only when an input to the pipe changes.
	 *
	 * @param index Pipe index where the pipe was stored on creation.
	 * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
	 */
	function pipeBindV(index, values) {
	    var pipeInstance = load(index);
	    return isPure(index) ? pureFunctionV(pipeInstance.transform, values, pipeInstance) :
	        pipeInstance.transform.apply(pipeInstance, values);
	}
	function isPure(index) {
	    return getTView().data[index].pure;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LQueries_ = /** @class */ (function () {
	    function LQueries_(deep) {
	        this.shallow = null;
	        this.deep = null;
	        this.deep = deep == null ? null : deep;
	    }
	    LQueries_.prototype.track = function (queryList, predicate, descend, read) {
	        // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly
	        // mutate parent.
	        if (descend) {
	            this.deep = createQuery$1(this.deep, queryList, predicate, read != null ? read : null);
	        }
	        else {
	            this.shallow = createQuery$1(this.shallow, queryList, predicate, read != null ? read : null);
	        }
	    };
	    LQueries_.prototype.child = function () {
	        if (this.deep === null) {
	            // if we don't have any deep queries then no need to track anything more.
	            return null;
	        }
	        if (this.shallow === null) {
	            // DeepQuery: We can reuse the current state if the child state would be same as current
	            // state.
	            return this;
	        }
	        else {
	            // We need to create new state
	            return new LQueries_(this.deep);
	        }
	    };
	    LQueries_.prototype.container = function () {
	        var result = null;
	        var query = this.deep;
	        while (query) {
	            var containerValues = []; // prepare room for views
	            query.values.push(containerValues);
	            var clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: containerValues };
	            clonedQuery.next = result;
	            result = clonedQuery;
	            query = query.next;
	        }
	        return result ? new LQueries_(result) : null;
	    };
	    LQueries_.prototype.enterView = function (index) {
	        var result = null;
	        var query = this.deep;
	        while (query) {
	            var viewValues = []; // prepare room for view nodes
	            query.values.splice(index, 0, viewValues);
	            var clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: viewValues };
	            clonedQuery.next = result;
	            result = clonedQuery;
	            query = query.next;
	        }
	        return result ? new LQueries_(result) : null;
	    };
	    LQueries_.prototype.addNode = function (node) {
	        add(this.shallow, node);
	        add(this.deep, node);
	    };
	    LQueries_.prototype.removeView = function (index) {
	        var query = this.deep;
	        while (query) {
	            var removed = query.values.splice(index, 1);
	            // mark a query as dirty only when removed view had matching modes
	            ngDevMode && assertEqual(removed.length, 1, 'removed.length');
	            if (removed[0].length) {
	                query.list.setDirty();
	            }
	            query = query.next;
	        }
	    };
	    return LQueries_;
	}());
	/**
	 * Iterates over local names for a given node and returns directive index
	 * (or -1 if a local name points to an element).
	 *
	 * @param tNode static data of a node to check
	 * @param selector selector to match
	 * @returns directive index, -1 or null if a selector didn't match any of the local names
	 */
	function getIdxOfMatchingSelector(tNode, selector) {
	    var localNames = tNode.localNames;
	    if (localNames) {
	        for (var i = 0; i < localNames.length; i += 2) {
	            if (localNames[i] === selector) {
	                return localNames[i + 1];
	            }
	        }
	    }
	    return null;
	}
	/**
	 * Iterates over all the directives for a node and returns index of a directive for a given type.
	 *
	 * @param node Node on which directives are present.
	 * @param type Type of a directive to look for.
	 * @returns Index of a found directive or null when none found.
	 */
	function getIdxOfMatchingDirective(node, type) {
	    var defs = node.view.tView.directives;
	    var flags = node.tNode.flags;
	    var count$$1 = flags & 4095 /* DirectiveCountMask */;
	    var start = flags >> 13 /* DirectiveStartingIndexShift */;
	    var end = start + count$$1;
	    for (var i = start; i < end; i++) {
	        var def = defs[i];
	        if (def.type === type && def.diPublic) {
	            return i;
	        }
	    }
	    return null;
	}
	function readFromNodeInjector(nodeInjector, node, read, directiveIdx) {
	    if (read instanceof ReadFromInjectorFn) {
	        return read.read(nodeInjector, node, directiveIdx);
	    }
	    else {
	        var matchingIdx = getIdxOfMatchingDirective(node, read);
	        if (matchingIdx !== null) {
	            return node.view.directives[matchingIdx];
	        }
	    }
	    return null;
	}
	function add(query, node) {
	    var nodeInjector = getOrCreateNodeInjectorForNode(node);
	    while (query) {
	        var predicate = query.predicate;
	        var type = predicate.type;
	        if (type) {
	            var directiveIdx = getIdxOfMatchingDirective(node, type);
	            if (directiveIdx !== null) {
	                // a node is matching a predicate - determine what to read
	                // if read token and / or strategy is not specified, use type as read token
	                var result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);
	                if (result !== null) {
	                    addMatch(query, result);
	                }
	            }
	        }
	        else {
	            var selector = predicate.selector;
	            for (var i = 0; i < selector.length; i++) {
	                ngDevMode && assertNotNull(node.tNode, 'node.tNode');
	                var directiveIdx = getIdxOfMatchingSelector(node.tNode, selector[i]);
	                if (directiveIdx !== null) {
	                    // a node is matching a predicate - determine what to read
	                    // note that queries using name selector must specify read strategy
	                    ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');
	                    var result = readFromNodeInjector(nodeInjector, node, predicate.read, directiveIdx);
	                    if (result !== null) {
	                        addMatch(query, result);
	                    }
	                }
	            }
	        }
	        query = query.next;
	    }
	}
	function addMatch(query, matchingValue) {
	    query.values.push(matchingValue);
	    query.list.setDirty();
	}
	function createPredicate(predicate, read) {
	    var isArray = Array.isArray(predicate);
	    return {
	        type: isArray ? null : predicate,
	        selector: isArray ? predicate : null,
	        read: read
	    };
	}
	function createQuery$1(previous, queryList, predicate, read) {
	    return {
	        next: previous,
	        list: queryList,
	        predicate: createPredicate(predicate, read),
	        values: queryList._valuesTree
	    };
	}
	var QueryList_ = /** @class */ (function () {
	    function QueryList_() {
	        this.dirty = true;
	        this.changes = new EventEmitter();
	        this._values = [];
	        /** @internal */
	        this._valuesTree = [];
	    }
	    Object.defineProperty(QueryList_.prototype, "length", {
	        get: function () { return this._values.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList_.prototype, "first", {
	        get: function () {
	            var values = this._values;
	            return values.length ? values[0] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList_.prototype, "last", {
	        get: function () {
	            var values = this._values;
	            return values.length ? values[values.length - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     */
	    QueryList_.prototype.map = function (fn) { return this._values.map(fn); };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     */
	    QueryList_.prototype.filter = function (fn) {
	        return this._values.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     */
	    QueryList_.prototype.find = function (fn) {
	        return this._values.find(fn);
	    };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     */
	    QueryList_.prototype.reduce = function (fn, init) {
	        return this._values.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     */
	    QueryList_.prototype.forEach = function (fn) { this._values.forEach(fn); };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     */
	    QueryList_.prototype.some = function (fn) {
	        return this._values.some(fn);
	    };
	    QueryList_.prototype.toArray = function () { return this._values.slice(0); };
	    QueryList_.prototype[getSymbolIterator$1()] = function () { return this._values[getSymbolIterator$1()](); };
	    QueryList_.prototype.toString = function () { return this._values.toString(); };
	    QueryList_.prototype.reset = function (res) {
	        this._values = flatten$1(res);
	        this.dirty = false;
	    };
	    QueryList_.prototype.notifyOnChanges = function () { this.changes.emit(this); };
	    QueryList_.prototype.setDirty = function () { this.dirty = true; };
	    QueryList_.prototype.destroy = function () {
	        this.changes.complete();
	        this.changes.unsubscribe();
	    };
	    return QueryList_;
	}());
	var QueryList$1 = QueryList_;
	/**
	 * Creates and returns a QueryList.
	 *
	 * @param memoryIndex The index in memory where the QueryList should be saved. If null,
	 * this is is a content query and the QueryList will be saved later through directiveCreate.
	 * @param predicate The type for which the query will search
	 * @param descend Whether or not to descend into children
	 * @param read What to save in the query
	 * @returns QueryList<T>
	 */
	function query(memoryIndex, predicate, descend, read) {
	    ngDevMode && assertPreviousIsParent();
	    var queryList = new QueryList$1();
	    var queries = getCurrentQueries(LQueries_);
	    queries.track(queryList, predicate, descend, read);
	    if (memoryIndex != null) {
	        store(memoryIndex, queryList);
	    }
	    return queryList;
	}
	/**
	 * Refreshes a query by combining matches from all active views and removing matches from deleted
	 * views.
	 * Returns true if a query got dirty during change detection, false otherwise.
	 */
	function queryRefresh(queryList) {
	    var queryListImpl = queryList;
	    if (queryList.dirty) {
	        queryList.reset(queryListImpl._valuesTree);
	        queryList.notifyOnChanges();
	        return true;
	    }
	    return false;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BRAND = '__SANITIZER_TRUSTED_BRAND__';
	/**
	 * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
	 * dangerous content.
	 *
	 * This method parses the `html` and locates potentially dangerous content (such as urls and
	 * javascript) and removes it.
	 *
	 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
	 *
	 * @param unsafeHtml untrusted `html`, typically from the user.
	 * @returns `html` string which is safe to display to user, because all of the dangerous javascript
	 * and urls have been removed.
	 */
	function sanitizeHtml(unsafeHtml) {
	    if (unsafeHtml instanceof String && unsafeHtml[BRAND] === 'Html') {
	        return unsafeHtml.toString();
	    }
	    return _sanitizeHtml(document, stringify$1(unsafeHtml));
	}
	/**
	 * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
	 * dangerous content.
	 *
	 * This method parses the `style` and locates potentially dangerous content (such as urls and
	 * javascript) and removes it.
	 *
	 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
	 *
	 * @param unsafeStyle untrusted `style`, typically from the user.
	 * @returns `style` string which is safe to bind to the `style` properties, because all of the
	 * dangerous javascript and urls have been removed.
	 */
	function sanitizeStyle(unsafeStyle) {
	    if (unsafeStyle instanceof String && unsafeStyle[BRAND] === 'Style') {
	        return unsafeStyle.toString();
	    }
	    return _sanitizeStyle(stringify$1(unsafeStyle));
	}
	/**
	 * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
	 * dangerous
	 * content.
	 *
	 * This method parses the `url` and locates potentially dangerous content (such as javascript) and
	 * removes it.
	 *
	 * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
	 *
	 * @param unsafeUrl untrusted `url`, typically from the user.
	 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
	 * all of the dangerous javascript has been removed.
	 */
	function sanitizeUrl(unsafeUrl) {
	    if (unsafeUrl instanceof String && unsafeUrl[BRAND] === 'Url') {
	        return unsafeUrl.toString();
	    }
	    return _sanitizeUrl(stringify$1(unsafeUrl));
	}
	/**
	 * A `url` sanitizer which only lets trusted `url`s through.
	 *
	 * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
	 *
	 * @param unsafeResourceUrl untrusted `url`, typically from the user.
	 * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
	 * only trusted `url`s have been allowed to pass.
	 */
	function sanitizeResourceUrl(unsafeResourceUrl) {
	    if (unsafeResourceUrl instanceof String &&
	        unsafeResourceUrl[BRAND] === 'ResourceUrl') {
	        return unsafeResourceUrl.toString();
	    }
	    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	}
	/**
	 * Mark `html` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link htmlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedHtml `html` string which needs to be implicitly trusted.
	 * @returns a `html` `String` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustHtml(trustedHtml) {
	    return bypassSanitizationTrustString(trustedHtml, 'Html');
	}
	/**
	 * Mark `style` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link styleSanitizer} to be trusted implicitly.
	 *
	 * @param trustedStyle `style` string which needs to be implicitly trusted.
	 * @returns a `style` `String` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustStyle(trustedStyle) {
	    return bypassSanitizationTrustString(trustedStyle, 'Style');
	}
	/**
	 * Mark `script` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link scriptSanitizer} to be trusted implicitly.
	 *
	 * @param trustedScript `script` string which needs to be implicitly trusted.
	 * @returns a `script` `String` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustScript(trustedScript) {
	    return bypassSanitizationTrustString(trustedScript, 'Script');
	}
	/**
	 * Mark `url` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link urlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedUrl `url` string which needs to be implicitly trusted.
	 * @returns a `url` `String` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustUrl(trustedUrl) {
	    return bypassSanitizationTrustString(trustedUrl, 'Url');
	}
	/**
	 * Mark `url` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
	 * @returns a `url` `String` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
	    return bypassSanitizationTrustString(trustedResourceUrl, 'ResourceUrl');
	}
	function bypassSanitizationTrustString(trustedString, mode) {
	    var trusted = new String(trustedString);
	    trusted[BRAND] = mode;
	    return trusted;
	}

	var core = /*#__PURE__*/Object.freeze({
		ɵangular_packages_core_core_j: _iterableDiffersFactory,
		ɵangular_packages_core_core_k: _keyValueDiffersFactory,
		ɵangular_packages_core_core_l: _localeFactory,
		ɵangular_packages_core_core_f: _appIdRandomProviderFactory,
		ɵangular_packages_core_core_g: defaultKeyValueDiffers,
		ɵangular_packages_core_core_h: DefaultIterableDifferFactory,
		ɵangular_packages_core_core_i: DefaultKeyValueDifferFactory,
		ɵangular_packages_core_core_c: ReflectiveInjector_,
		ɵangular_packages_core_core_d: ReflectiveDependency,
		ɵangular_packages_core_core_e: resolveReflectiveProviders,
		ɵangular_packages_core_core_m: wtfEnabled,
		ɵangular_packages_core_core_o: createScope,
		ɵangular_packages_core_core_n: detectWTF,
		ɵangular_packages_core_core_r: endTimeRange,
		ɵangular_packages_core_core_p: leave,
		ɵangular_packages_core_core_q: startTimeRange,
		ɵangular_packages_core_core_v: getOrCreateChangeDetectorRef,
		ɵangular_packages_core_core_x: getOrCreateContainerRef,
		ɵangular_packages_core_core_w: getOrCreateInjectable,
		ɵangular_packages_core_core_u: getOrCreateNodeInjector,
		ɵangular_packages_core_core_y: getOrCreateTemplateRef,
		ɵangular_packages_core_core_bb: bindingUpdated,
		ɵangular_packages_core_core_bd: bindingUpdated2,
		ɵangular_packages_core_core_be: bindingUpdated4,
		ɵangular_packages_core_core_bc: checkAndUpdateBinding$1,
		ɵangular_packages_core_core_ba: consumeBinding,
		ɵangular_packages_core_core_z: getCreationMode,
		ɵangular_packages_core_core_a: makeParamDecorator,
		ɵangular_packages_core_core_b: makePropDecorator,
		ɵangular_packages_core_core_s: _def,
		ɵangular_packages_core_core_t: DebugContext,
		createPlatform: createPlatform,
		assertPlatform: assertPlatform,
		destroyPlatform: destroyPlatform,
		getPlatform: getPlatform,
		PlatformRef: PlatformRef,
		ApplicationRef: ApplicationRef,
		enableProdMode: enableProdMode,
		isDevMode: isDevMode,
		createPlatformFactory: createPlatformFactory,
		NgProbeToken: NgProbeToken,
		APP_ID: APP_ID,
		PACKAGE_ROOT_URL: PACKAGE_ROOT_URL,
		PLATFORM_INITIALIZER: PLATFORM_INITIALIZER,
		PLATFORM_ID: PLATFORM_ID,
		APP_BOOTSTRAP_LISTENER: APP_BOOTSTRAP_LISTENER,
		APP_INITIALIZER: APP_INITIALIZER,
		ApplicationInitStatus: ApplicationInitStatus,
		DebugElement: DebugElement,
		DebugNode: DebugNode,
		asNativeElements: asNativeElements,
		getDebugNode: getDebugNode,
		Testability: Testability,
		TestabilityRegistry: TestabilityRegistry,
		setTestabilityGetter: setTestabilityGetter,
		TRANSLATIONS: TRANSLATIONS,
		TRANSLATIONS_FORMAT: TRANSLATIONS_FORMAT,
		LOCALE_ID: LOCALE_ID,
		get MissingTranslationStrategy () { return MissingTranslationStrategy; },
		ApplicationModule: ApplicationModule,
		wtfCreateScope: wtfCreateScope,
		wtfLeave: wtfLeave,
		wtfStartTimeRange: wtfStartTimeRange,
		wtfEndTimeRange: wtfEndTimeRange,
		Type: Type,
		EventEmitter: EventEmitter,
		ErrorHandler: ErrorHandler,
		Sanitizer: Sanitizer,
		get SecurityContext () { return SecurityContext; },
		ANALYZE_FOR_ENTRY_COMPONENTS: ANALYZE_FOR_ENTRY_COMPONENTS,
		Attribute: Attribute,
		ContentChild: ContentChild,
		ContentChildren: ContentChildren,
		Query: Query,
		ViewChild: ViewChild,
		ViewChildren: ViewChildren,
		Component: Component,
		Directive: Directive,
		HostBinding: HostBinding,
		HostListener: HostListener,
		Input: Input,
		Output: Output,
		Pipe: Pipe,
		CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,
		NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,
		NgModule: NgModule,
		get ViewEncapsulation () { return ViewEncapsulation; },
		Version: Version,
		VERSION: VERSION,
		defineInjectable: defineInjectable,
		defineInjector: defineInjector,
		forwardRef: forwardRef,
		resolveForwardRef: resolveForwardRef,
		Injectable: Injectable,
		inject: inject,
		INJECTOR: INJECTOR,
		Injector: Injector,
		ReflectiveInjector: ReflectiveInjector,
		createInjector: createInjector,
		ResolvedReflectiveFactory: ResolvedReflectiveFactory,
		ReflectiveKey: ReflectiveKey,
		InjectionToken: InjectionToken,
		Inject: Inject,
		Optional: Optional,
		Self: Self,
		SkipSelf: SkipSelf,
		Host: Host,
		NgZone: NgZone,
		RenderComponentType: RenderComponentType,
		Renderer: Renderer,
		Renderer2: Renderer2,
		RendererFactory2: RendererFactory2,
		get RendererStyleFlags2 () { return RendererStyleFlags2; },
		RootRenderer: RootRenderer,
		COMPILER_OPTIONS: COMPILER_OPTIONS,
		Compiler: Compiler,
		CompilerFactory: CompilerFactory,
		ModuleWithComponentFactories: ModuleWithComponentFactories,
		ComponentFactory: ComponentFactory,
		ComponentRef: ComponentRef,
		ComponentFactoryResolver: ComponentFactoryResolver,
		ElementRef: ElementRef,
		NgModuleFactory: NgModuleFactory,
		NgModuleRef: NgModuleRef,
		NgModuleFactoryLoader: NgModuleFactoryLoader,
		getModuleFactory: getModuleFactory,
		QueryList: QueryList,
		SystemJsNgModuleLoader: SystemJsNgModuleLoader,
		SystemJsNgModuleLoaderConfig: SystemJsNgModuleLoaderConfig,
		TemplateRef: TemplateRef,
		ViewContainerRef: ViewContainerRef,
		EmbeddedViewRef: EmbeddedViewRef,
		ViewRef: ViewRef,
		get ChangeDetectionStrategy () { return ChangeDetectionStrategy; },
		ChangeDetectorRef: ChangeDetectorRef,
		DefaultIterableDiffer: DefaultIterableDiffer,
		IterableDiffers: IterableDiffers,
		KeyValueDiffers: KeyValueDiffers,
		SimpleChange: SimpleChange,
		WrappedValue: WrappedValue,
		platformCore: platformCore,
		ɵALLOW_MULTIPLE_PLATFORMS: ALLOW_MULTIPLE_PLATFORMS,
		ɵAPP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
		ɵdefaultIterableDiffers: defaultIterableDiffers,
		ɵdevModeEqual: devModeEqual,
		ɵisListLikeIterable: isListLikeIterable,
		get ɵChangeDetectorStatus () { return ChangeDetectorStatus; },
		ɵisDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
		ɵConsole: Console,
		ɵinject: inject,
		ɵsetCurrentInjector: setCurrentInjector,
		ɵAPP_ROOT: APP_ROOT,
		ɵComponentFactory: ComponentFactory,
		ɵCodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
		ɵReflectionCapabilities: ReflectionCapabilities,
		ɵRenderDebugInfo: RenderDebugInfo,
		ɵ_sanitizeHtml: _sanitizeHtml,
		ɵ_sanitizeStyle: _sanitizeStyle,
		ɵ_sanitizeUrl: _sanitizeUrl,
		ɵglobal: _global,
		ɵlooseIdentical: looseIdentical,
		ɵstringify: stringify,
		ɵmakeDecorator: makeDecorator,
		ɵisObservable: isObservable$1,
		ɵisPromise: isPromise$1,
		ɵclearOverrides: clearOverrides,
		ɵoverrideComponentView: overrideComponentView,
		ɵoverrideProvider: overrideProvider,
		ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,
		ɵdefineComponent: defineComponent,
		ɵdefineDirective: defineDirective,
		ɵdefinePipe: definePipe,
		ɵdetectChanges: detectChanges,
		ɵrenderComponent: renderComponent,
		ɵdirectiveInject: directiveInject,
		ɵinjectTemplateRef: injectTemplateRef,
		ɵinjectViewContainerRef: injectViewContainerRef,
		ɵinjectChangeDetectorRef: injectChangeDetectorRef,
		ɵinjectAttribute: injectAttribute,
		ɵPublicFeature: PublicFeature,
		ɵNgOnChangesFeature: NgOnChangesFeature,
		ɵmarkDirty: markDirty,
		ɵNC: NO_CHANGE,
		ɵC: container,
		ɵE: elementStart,
		ɵL: listener,
		ɵT: text,
		ɵV: embeddedViewStart,
		ɵQ: query,
		ɵd: loadDirective,
		ɵP: projection,
		ɵb: bind,
		ɵi1: interpolation1,
		ɵi2: interpolation2,
		ɵi3: interpolation3,
		ɵi4: interpolation4,
		ɵi5: interpolation5,
		ɵi6: interpolation6,
		ɵi7: interpolation7,
		ɵi8: interpolation8,
		ɵiV: interpolationV,
		ɵpb1: pipeBind1,
		ɵpb2: pipeBind2,
		ɵpb3: pipeBind3,
		ɵpb4: pipeBind4,
		ɵpbV: pipeBindV,
		ɵf0: pureFunction0,
		ɵf1: pureFunction1,
		ɵf2: pureFunction2,
		ɵf3: pureFunction3,
		ɵf4: pureFunction4,
		ɵf5: pureFunction5,
		ɵf6: pureFunction6,
		ɵf7: pureFunction7,
		ɵf8: pureFunction8,
		ɵfV: pureFunctionV,
		ɵcR: containerRefreshStart,
		ɵcr: containerRefreshEnd,
		ɵqR: queryRefresh,
		ɵe: elementEnd,
		ɵp: elementProperty,
		ɵpD: projectionDef,
		ɵa: elementAttribute,
		ɵs: elementStyle,
		ɵsn: elementStyleNamed,
		ɵk: elementClass,
		ɵkn: elementClassNamed,
		ɵt: textBinding,
		ɵv: embeddedViewEnd,
		ɵst: store,
		ɵld: load,
		ɵPp: pipe$1,
		ɵwhenRendered: whenRendered,
		ɵbypassSanitizationTrustHtml: bypassSanitizationTrustHtml,
		ɵbypassSanitizationTrustStyle: bypassSanitizationTrustStyle,
		ɵbypassSanitizationTrustScript: bypassSanitizationTrustScript,
		ɵbypassSanitizationTrustUrl: bypassSanitizationTrustUrl,
		ɵbypassSanitizationTrustResourceUrl: bypassSanitizationTrustResourceUrl,
		ɵsanitizeHtml: sanitizeHtml,
		ɵsanitizeStyle: sanitizeStyle,
		ɵsanitizeUrl: sanitizeUrl,
		ɵsanitizeResourceUrl: sanitizeResourceUrl,
		ɵregisterModuleFactory: registerModuleFactory,
		ɵEMPTY_ARRAY: EMPTY_ARRAY$2,
		ɵEMPTY_MAP: EMPTY_MAP,
		ɵand: anchorDef,
		ɵccf: createComponentFactory,
		ɵcmf: createNgModuleFactory,
		ɵcrt: createRendererType2,
		ɵdid: directiveDef,
		ɵeld: elementDef,
		ɵelementEventFullName: elementEventFullName,
		ɵgetComponentViewDefinitionFactory: getComponentViewDefinitionFactory,
		ɵinlineInterpolate: inlineInterpolate,
		ɵinterpolate: interpolate,
		ɵmod: moduleDef,
		ɵmpd: moduleProvideDef,
		ɵncd: ngContentDef,
		ɵnov: nodeValue,
		ɵpid: pipeDef,
		ɵprd: providerDef,
		ɵpad: pureArrayDef,
		ɵpod: pureObjectDef,
		ɵppd: purePipeDef,
		ɵqud: queryDef,
		ɵted: textDef,
		ɵunv: unwrapValue,
		ɵvid: viewDef
	});

	var constants = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Constants = (function () {
	    function Constants() {
	    }
	    Constants.STEP_EVERYTHING = 0;
	    Constants.STEP_FILTER = 1;
	    Constants.STEP_SORT = 2;
	    Constants.STEP_MAP = 3;
	    Constants.STEP_AGGREGATE = 4;
	    Constants.STEP_PIVOT = 5;
	    Constants.ROW_BUFFER_SIZE = 10;
	    Constants.LAYOUT_INTERVAL = 500;
	    Constants.BATCH_WAIT_MILLIS = 50;
	    Constants.EXPORT_TYPE_DRAG_COPY = 'dragCopy';
	    Constants.EXPORT_TYPE_CLIPBOARD = 'clipboard';
	    Constants.EXPORT_TYPE_EXCEL = 'excel';
	    Constants.EXPORT_TYPE_CSV = 'csv';
	    Constants.KEY_BACKSPACE = 8;
	    Constants.KEY_TAB = 9;
	    Constants.KEY_NEW_LINE = 10;
	    Constants.KEY_ENTER = 13;
	    Constants.KEY_SHIFT = 16;
	    Constants.KEY_ESCAPE = 27;
	    Constants.KEY_SPACE = 32;
	    Constants.KEY_LEFT = 37;
	    Constants.KEY_UP = 38;
	    Constants.KEY_RIGHT = 39;
	    Constants.KEY_DOWN = 40;
	    Constants.KEY_DELETE = 46;
	    Constants.KEY_A = 65;
	    Constants.KEY_C = 67;
	    Constants.KEY_V = 86;
	    Constants.KEY_D = 68;
	    Constants.KEY_F2 = 113;
	    Constants.KEY_PAGE_UP = 33;
	    Constants.KEY_PAGE_DOWN = 34;
	    Constants.KEY_PAGE_HOME = 36;
	    Constants.KEY_PAGE_END = 35;
	    Constants.ROW_MODEL_TYPE_INFINITE = 'infinite';
	    Constants.ROW_MODEL_TYPE_VIEWPORT = 'viewport';
	    Constants.ROW_MODEL_TYPE_CLIENT_SIDE = 'clientSide';
	    Constants.ROW_MODEL_TYPE_SERVER_SIDE = 'serverSide';
	    Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL = 'normal';
	    Constants.ALWAYS = 'always';
	    Constants.ONLY_WHEN_GROUPING = 'onlyWhenGrouping';
	    Constants.PINNED_TOP = 'top';
	    Constants.PINNED_BOTTOM = 'bottom';
	    return Constants;
	}());
	exports.Constants = Constants;
	});

	unwrapExports(constants);
	var constants_1 = constants.Constants;

	var utils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
	var AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';
	// util class, only used when debugging, for printing time to console
	var Timer = (function () {
	    function Timer() {
	        this.timestamp = new Date().getTime();
	    }
	    Timer.prototype.print = function (msg) {
	        var duration = (new Date().getTime()) - this.timestamp;
	        console.log(msg + " = " + duration);
	        this.timestamp = new Date().getTime();
	    };
	    return Timer;
	}());
	exports.Timer = Timer;
	/** HTML Escapes. */
	var HTML_ESCAPES = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	};
	var reUnescapedHtml = /[&<>"']/g;
	var Utils = (function () {
	    function Utils() {
	    }
	    // if the key was passed before, then doesn't execute the func
	    Utils.doOnce = function (func, key) {
	        if (this.doOnceFlags[key]) {
	            return;
	        }
	        func();
	        this.doOnceFlags[key] = true;
	    };
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    Utils.areEventsNear = function (e1, e2, pixelCount) {
	        // by default, we wait 4 pixels before starting the drag
	        if (pixelCount === 0) {
	            return false;
	        }
	        var diffX = Math.abs(e1.clientX - e2.clientX);
	        var diffY = Math.abs(e1.clientY - e2.clientY);
	        return Math.max(diffX, diffY) <= pixelCount;
	    };
	    Utils.shallowCompare = function (arr1, arr2) {
	        // if both are missing, then they are the same
	        if (this.missing(arr1) && this.missing(arr2)) {
	            return true;
	        }
	        // if one is present, but other is missing, then then are different
	        if (this.missing(arr1) || this.missing(arr2)) {
	            return false;
	        }
	        if (arr1.length !== arr2.length) {
	            return false;
	        }
	        for (var i = 0; i < arr1.length; i++) {
	            if (arr1[i] !== arr2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.getNameOfClass = function (TheClass) {
	        var funcNameRegex = /function (.{1,})\(/;
	        var funcAsString = TheClass.toString();
	        var results = (funcNameRegex).exec(funcAsString);
	        return (results && results.length > 1) ? results[1] : "";
	    };
	    Utils.values = function (object) {
	        var result = [];
	        this.iterateObject(object, function (key, value) {
	            result.push(value);
	        });
	        return result;
	    };
	    Utils.getValueUsingField = function (data, field, fieldContainsDots) {
	        if (!field || !data) {
	            return;
	        }
	        // if no '.', then it's not a deep value
	        if (!fieldContainsDots) {
	            return data[field];
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fields = field.split('.');
	            var currentObject = data;
	            for (var i = 0; i < fields.length; i++) {
	                currentObject = currentObject[fields[i]];
	                if (this.missing(currentObject)) {
	                    return null;
	                }
	            }
	            return currentObject;
	        }
	    };
	    Utils.getScrollLeft = function (element, rtl) {
	        var scrollLeft = element.scrollLeft;
	        if (rtl) {
	            // Absolute value - for FF that reports RTL scrolls in negative numbers
	            scrollLeft = Math.abs(scrollLeft);
	            // Get Chrome and Safari to return the same value as well
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
	            }
	        }
	        return scrollLeft;
	    };
	    Utils.cleanNumber = function (value) {
	        if (typeof value === 'string') {
	            value = parseInt(value);
	        }
	        if (typeof value === 'number') {
	            value = Math.floor(value);
	        }
	        else {
	            value = null;
	        }
	        return value;
	    };
	    Utils.setScrollLeft = function (element, value, rtl) {
	        if (rtl) {
	            // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                value = element.scrollWidth - element.clientWidth - value;
	            }
	            // Firefox uses negative numbers when doing RTL scrolling
	            if (this.isBrowserFirefox()) {
	                value *= -1;
	            }
	        }
	        element.scrollLeft = value;
	    };
	    Utils.iterateNamedNodeMap = function (map, callback) {
	        if (!map) {
	            return;
	        }
	        for (var i = 0; i < map.length; i++) {
	            var attr = map[i];
	            callback(attr.name, attr.value);
	        }
	    };
	    Utils.iterateObject = function (object, callback) {
	        if (this.missing(object)) {
	            return;
	        }
	        if (Array.isArray(object)) {
	            object.forEach(function (value, index) {
	                callback(index + '', value);
	            });
	        }
	        else {
	            var keys = Object.keys(object);
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = object[key];
	                callback(key, value);
	            }
	        }
	    };
	    Utils.cloneObject = function (object) {
	        var copy = {};
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = object[key];
	            copy[key] = value;
	        }
	        return copy;
	    };
	    Utils.map = function (array, callback) {
	        var result = [];
	        for (var i = 0; i < array.length; i++) {
	            var item = array[i];
	            var mappedItem = callback(item);
	            result.push(mappedItem);
	        }
	        return result;
	    };
	    Utils.mapObject = function (object, callback) {
	        var result = [];
	        Utils.iterateObject(object, function (key, value) {
	            result.push(callback(value));
	        });
	        return result;
	    };
	    Utils.forEach = function (array, callback) {
	        if (!array) {
	            return;
	        }
	        for (var i = 0; i < array.length; i++) {
	            var value = array[i];
	            callback(value, i);
	        }
	    };
	    Utils.filter = function (array, callback) {
	        var result = [];
	        array.forEach(function (item) {
	            if (callback(item)) {
	                result.push(item);
	            }
	        });
	        return result;
	    };
	    Utils.getAllKeysInObjects = function (objects) {
	        var allValues = {};
	        objects.forEach(function (obj) {
	            if (obj) {
	                Object.keys(obj).forEach(function (key) { return allValues[key] = null; });
	            }
	        });
	        return Object.keys(allValues);
	    };
	    Utils.mergeDeep = function (dest, source) {
	        if (this.exists(source)) {
	            this.iterateObject(source, function (key, newValue) {
	                var oldValue = dest[key];
	                if (oldValue === newValue) {
	                    return;
	                }
	                if (typeof oldValue === 'object' && typeof newValue === 'object') {
	                    Utils.mergeDeep(oldValue, newValue);
	                }
	                else {
	                    dest[key] = newValue;
	                }
	            });
	        }
	    };
	    Utils.assign = function (object) {
	        var _this = this;
	        var sources = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            sources[_i - 1] = arguments[_i];
	        }
	        sources.forEach(function (source) {
	            if (_this.exists(source)) {
	                _this.iterateObject(source, function (key, value) {
	                    object[key] = value;
	                });
	            }
	        });
	        return object;
	    };
	    Utils.parseYyyyMmDdToDate = function (yyyyMmDd, separator) {
	        try {
	            if (!yyyyMmDd)
	                return null;
	            if (yyyyMmDd.indexOf(separator) === -1)
	                return null;
	            var fields = yyyyMmDd.split(separator);
	            if (fields.length != 3)
	                return null;
	            return new Date(Number(fields[0]), Number(fields[1]) - 1, Number(fields[2]));
	        }
	        catch (e) {
	            return null;
	        }
	    };
	    Utils.serializeDateToYyyyMmDd = function (date, separator) {
	        if (!date)
	            return null;
	        return date.getFullYear() + separator + Utils.pad(date.getMonth() + 1, 2) + separator + Utils.pad(date.getDate(), 2);
	    };
	    Utils.pad = function (num, totalStringSize) {
	        var asString = num + "";
	        while (asString.length < totalStringSize)
	            asString = "0" + asString;
	        return asString;
	    };
	    Utils.pushAll = function (target, source) {
	        if (this.missing(source) || this.missing(target)) {
	            return;
	        }
	        source.forEach(function (func) { return target.push(func); });
	    };
	    Utils.createArrayOfNumbers = function (first, last) {
	        var result = [];
	        for (var i = first; i <= last; i++) {
	            result.push(i);
	        }
	        return result;
	    };
	    Utils.getFunctionParameters = function (func) {
	        var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
	        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);
	        if (result === null) {
	            return [];
	        }
	        else {
	            return result;
	        }
	    };
	    Utils.find = function (collection, predicate, value) {
	        if (collection === null || collection === undefined) {
	            return null;
	        }
	        if (!Array.isArray(collection)) {
	            var objToArray = this.values(collection);
	            return this.find(objToArray, predicate, value);
	        }
	        var collectionAsArray = collection;
	        var firstMatchingItem;
	        for (var i = 0; i < collectionAsArray.length; i++) {
	            var item = collectionAsArray[i];
	            if (typeof predicate === 'string') {
	                if (item[predicate] === value) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	            else {
	                var callback = predicate;
	                if (callback(item)) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	        }
	        return firstMatchingItem;
	    };
	    Utils.toStrings = function (array) {
	        return this.map(array, function (item) {
	            if (item === undefined || item === null || !item.toString) {
	                return null;
	            }
	            else {
	                return item.toString();
	            }
	        });
	    };
	    Utils.iterateArray = function (array, callback) {
	        for (var index = 0; index < array.length; index++) {
	            var value = array[index];
	            callback(value, index);
	        }
	    };
	    //Returns true if it is a DOM node
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isNode = function (o) {
	        return (typeof Node === "function" ? o instanceof Node :
	            o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
	    };
	    //Returns true if it is a DOM element
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isElement = function (o) {
	        return (typeof HTMLElement === "function" ? o instanceof HTMLElement :
	            o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
	    };
	    Utils.isNodeOrElement = function (o) {
	        return this.isNode(o) || this.isElement(o);
	    };
	    // makes a copy of a node list into a list
	    Utils.copyNodeList = function (nodeList) {
	        var childCount = nodeList ? nodeList.length : 0;
	        var res = [];
	        for (var i = 0; i < childCount; i++) {
	            res.push(nodeList[i]);
	        }
	        return res;
	    };
	    Utils.isEventFromPrintableCharacter = function (event) {
	        var pressedChar = String.fromCharCode(event.charCode);
	        // newline is an exception, as it counts as a printable character, but we don't
	        // want to start editing when it is pressed. without this check, if user is in chrome
	        // and editing a cell, and they press ctrl+enter, the cell stops editing, and then
	        // starts editing again with a blank value (two 'key down' events are fired). to
	        // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.
	        // https://ag-grid.atlassian.net/browse/AG-605
	        if (this.isKeyPressed(event, constants.Constants.KEY_NEW_LINE)) {
	            return false;
	        }
	        if (exports._.exists(event.key)) {
	            // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the
	            // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.
	            var printableCharacter = event.key.length === 1;
	            // IE11 & Edge treat the numpad del key differently - with numlock on we get "Del" for key,
	            // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browers
	            var numpadDelWithNumlockOnForEdgeOrIe = Utils.isNumpadDelWithNumlockOnForEdgeOrIe(event);
	            return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
	        }
	        else {
	            // otherwise, for older browsers, we test against a list of characters, which doesn't include
	            // accents for non-English, but don't care much, as most users are on modern browsers
	            return Utils.PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;
	        }
	    };
	    //adds all type of change listeners to an element, intended to be a text field
	    Utils.addChangeListener = function (element, listener) {
	        element.addEventListener("changed", listener);
	        element.addEventListener("paste", listener);
	        element.addEventListener("input", listener);
	        // IE doesn't fire changed for special keys (eg delete, backspace), so need to
	        // listen for this further ones
	        element.addEventListener("keydown", listener);
	        element.addEventListener("keyup", listener);
	    };
	    //if value is undefined, null or blank, returns null, otherwise returns the value
	    Utils.makeNull = function (value) {
	        var valueNoType = value;
	        if (value === null || value === undefined || valueNoType === "") {
	            return null;
	        }
	        else {
	            return value;
	        }
	    };
	    Utils.missing = function (value) {
	        return !this.exists(value);
	    };
	    Utils.missingOrEmpty = function (value) {
	        return this.missing(value) || value.length === 0;
	    };
	    Utils.missingOrEmptyObject = function (value) {
	        return this.missing(value) || Object.keys(value).length === 0;
	    };
	    Utils.exists = function (value) {
	        if (value === null || value === undefined || value === '') {
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    Utils.firstExistingValue = function () {
	        var values = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            values[_i] = arguments[_i];
	        }
	        for (var i = 0; i < values.length; i++) {
	            var value = values[i];
	            if (exports._.exists(value))
	                return value;
	        }
	        return null;
	    };
	    Utils.anyExists = function (values) {
	        if (values) {
	            for (var i = 0; i < values.length; i++) {
	                if (this.exists(values[i])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    Utils.existsAndNotEmpty = function (value) {
	        return this.exists(value) && value.length > 0;
	    };
	    Utils.removeAllChildren = function (node) {
	        if (node) {
	            while (node.hasChildNodes()) {
	                node.removeChild(node.lastChild);
	            }
	        }
	    };
	    Utils.removeElement = function (parent, cssSelector) {
	        this.removeFromParent(parent.querySelector(cssSelector));
	    };
	    Utils.removeFromParent = function (node) {
	        if (node && node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	    };
	    Utils.isVisible = function (element) {
	        return (element.offsetParent !== null);
	    };
	    /**
	     * loads the template and returns it as an element. makes up for no simple way in
	     * the dom api to load html directly, eg we cannot do this: document.createElement(template)
	     */
	    Utils.loadTemplate = function (template) {
	        var tempDiv = document.createElement("div");
	        tempDiv.innerHTML = template;
	        return tempDiv.firstChild;
	    };
	    Utils.appendHtml = function (eContainer, htmlTemplate) {
	        if (eContainer.lastChild) {
	            // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
	            // we put the items at the start, so new items appear underneath old items,
	            // so when expanding/collapsing groups, the new rows don't go on top of the
	            // rows below that are moving our of the way
	            eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	        }
	        else {
	            eContainer.innerHTML = htmlTemplate;
	        }
	    };
	    Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
	        if (addOrRemove) {
	            this.addCssClass(element, className);
	        }
	        else {
	            this.removeCssClass(element, className);
	        }
	    };
	    Utils.callIfPresent = function (func) {
	        if (func) {
	            func();
	        }
	    };
	    Utils.addCssClass = function (element, className) {
	        var _this = this;
	        if (!className || className.length === 0) {
	            return;
	        }
	        if (className.indexOf(' ') >= 0) {
	            className.split(' ').forEach(function (value) { return _this.addCssClass(element, value); });
	            return;
	        }
	        if (element.classList) {
	            if (!element.classList.contains(className)) {
	                element.classList.add(className);
	            }
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) < 0) {
	                    cssClasses.push(className);
	                    element.className = cssClasses.join(' ');
	                }
	            }
	            else {
	                element.className = className;
	            }
	        }
	    };
	    Utils.containsClass = function (element, className) {
	        if (element.classList) {
	            // for modern browsers
	            return element.classList.contains(className);
	        }
	        else if (element.className) {
	            // for older browsers, check against the string of class names
	            // if only one class, can check for exact match
	            var onlyClass = element.className === className;
	            // if many classes, check for class name, we have to pad with ' ' to stop other
	            // class names that are a substring of this class
	            var contains = element.className.indexOf(' ' + className + ' ') >= 0;
	            // the padding above then breaks when it's the first or last class names
	            var startsWithClass = element.className.indexOf(className + ' ') === 0;
	            var endsWithClass = element.className.lastIndexOf(' ' + className) === (element.className.length - className.length - 1);
	            return onlyClass || contains || startsWithClass || endsWithClass;
	        }
	        else {
	            // if item is not a node
	            return false;
	        }
	    };
	    Utils.getElementAttribute = function (element, attributeName) {
	        if (element.attributes) {
	            if (element.attributes[attributeName]) {
	                var attribute = element.attributes[attributeName];
	                return attribute.value;
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.offsetHeight = function (element) {
	        return element && element.clientHeight ? element.clientHeight : 0;
	    };
	    Utils.offsetWidth = function (element) {
	        return element && element.clientWidth ? element.clientWidth : 0;
	    };
	    Utils.sortNumberArray = function (numberArray) {
	        numberArray.sort(function (a, b) { return a - b; });
	    };
	    Utils.removeCssClass = function (element, className) {
	        if (element.classList) {
	            if (element.classList.contains(className)) {
	                element.classList.remove(className);
	            }
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) >= 0) {
	                    // remove all instances of the item, not just the first, in case it's in more than once
	                    while (cssClasses.indexOf(className) >= 0) {
	                        cssClasses.splice(cssClasses.indexOf(className), 1);
	                    }
	                    element.className = cssClasses.join(' ');
	                }
	            }
	        }
	    };
	    Utils.removeRepeatsFromArray = function (array, object) {
	        if (!array) {
	            return;
	        }
	        for (var index = array.length - 2; index >= 0; index--) {
	            var thisOneMatches = array[index] === object;
	            var nextOneMatches = array[index + 1] === object;
	            if (thisOneMatches && nextOneMatches) {
	                array.splice(index + 1, 1);
	            }
	        }
	    };
	    Utils.removeFromArray = function (array, object) {
	        if (array.indexOf(object) >= 0) {
	            array.splice(array.indexOf(object), 1);
	        }
	    };
	    Utils.removeAllFromArray = function (array, toRemove) {
	        toRemove.forEach(function (item) {
	            if (array.indexOf(item) >= 0) {
	                array.splice(array.indexOf(item), 1);
	            }
	        });
	    };
	    Utils.insertIntoArray = function (array, object, toIndex) {
	        array.splice(toIndex, 0, object);
	    };
	    Utils.insertArrayIntoArray = function (dest, src, toIndex) {
	        if (this.missing(dest) || this.missing(src)) {
	            return;
	        }
	        // put items in backwards, otherwise inserted items end up in reverse order
	        for (var i = src.length - 1; i >= 0; i--) {
	            var item = src[i];
	            this.insertIntoArray(dest, item, toIndex);
	        }
	    };
	    Utils.moveInArray = function (array, objectsToMove, toIndex) {
	        var _this = this;
	        // first take out it items from the array
	        objectsToMove.forEach(function (obj) {
	            _this.removeFromArray(array, obj);
	        });
	        // now add the objects, in same order as provided to us, that means we start at the end
	        // as the objects will be pushed to the right as they are inserted
	        objectsToMove.slice().reverse().forEach(function (obj) {
	            _this.insertIntoArray(array, obj, toIndex);
	        });
	    };
	    Utils.defaultComparator = function (valueA, valueB, accentedCompare) {
	        if (accentedCompare === void 0) { accentedCompare = false; }
	        var valueAMissing = valueA === null || valueA === undefined;
	        var valueBMissing = valueB === null || valueB === undefined;
	        // this is for aggregations sum and avg, where the result can be a number that is wrapped.
	        // if we didn't do this, then the toString() value would be used, which would result in
	        // the strings getting used instead of the numbers.
	        if (valueA && valueA.toNumber) {
	            valueA = valueA.toNumber();
	        }
	        if (valueB && valueB.toNumber) {
	            valueB = valueB.toNumber();
	        }
	        if (valueAMissing && valueBMissing) {
	            return 0;
	        }
	        if (valueAMissing) {
	            return -1;
	        }
	        if (valueBMissing) {
	            return 1;
	        }
	        if (typeof valueA === "string") {
	            if (!accentedCompare) {
	                return doQuickCompare(valueA, valueB);
	            }
	            else {
	                try {
	                    // using local compare also allows chinese comparisons
	                    return valueA.localeCompare(valueB);
	                }
	                catch (e) {
	                    // if something wrong with localeCompare, eg not supported
	                    // by browser, then just continue with the quick one
	                    return doQuickCompare(valueA, valueB);
	                }
	            }
	        }
	        if (valueA < valueB) {
	            return -1;
	        }
	        else if (valueA > valueB) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	        function doQuickCompare(a, b) {
	            return (a > b ? 1 : (a < b ? -1 : 0));
	        }
	    };
	    Utils.compareArrays = function (array1, array2) {
	        if (this.missing(array1) && this.missing(array2)) {
	            return true;
	        }
	        if (this.missing(array1) || this.missing(array2)) {
	            return false;
	        }
	        if (array1.length !== array2.length) {
	            return false;
	        }
	        for (var i = 0; i < array1.length; i++) {
	            if (array1[i] !== array2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.ensureDomOrder = function (eContainer, eChild, eChildBefore) {
	        // if already in right order, do nothing
	        if (eChildBefore && eChildBefore.nextSibling === eChild) {
	            return;
	        }
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            // otherwise put at start
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	        }
	    };
	    Utils.insertWithDomOrder = function (eContainer, eChild, eChildBefore) {
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.appendChild(eChild);
	            }
	        }
	    };
	    Utils.insertTemplateWithDomOrder = function (eContainer, htmlTemplate, eChildBefore) {
	        var res;
	        if (eChildBefore) {
	            // if previous element exists, just slot in after the previous element
	            eChildBefore.insertAdjacentHTML('afterend', htmlTemplate);
	            res = eChildBefore.nextSibling;
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.innerHTML = htmlTemplate;
	            }
	            res = eContainer.firstChild;
	        }
	        return res;
	    };
	    Utils.every = function (items, callback) {
	        if (!items || items.length === 0) {
	            return true;
	        }
	        for (var i = 0; i < items.length; i++) {
	            if (!callback(items[i])) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.toStringOrNull = function (value) {
	        if (this.exists(value) && value.toString) {
	            return value.toString();
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.formatWidth = function (width) {
	        if (typeof width === "number") {
	            return width + "px";
	        }
	        else {
	            return width;
	        }
	    };
	    Utils.formatNumberTwoDecimalPlacesAndCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return (Math.round(value * 100) / 100).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE,
	    // so we use this method instead
	    Utils.formatNumberCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    Utils.prependDC = function (parent, documentFragment) {
	        if (this.exists(parent.firstChild)) {
	            parent.insertBefore(documentFragment, parent.firstChild);
	        }
	        else {
	            parent.appendChild(documentFragment);
	        }
	    };
	    /**
	     * If icon provided, use this (either a string, or a function callback).
	     * if not, then use the default icon from the theme
	     */
	    Utils.createIcon = function (iconName, gridOptionsWrapper, column) {
	        var iconContents = this.createIconNoSpan(iconName, gridOptionsWrapper, column);
	        if (iconContents.className.indexOf('ag-icon') > -1) {
	            return iconContents;
	        }
	        else {
	            var eResult = document.createElement('span');
	            eResult.appendChild(iconContents);
	            return eResult;
	        }
	    };
	    Utils.createIconNoSpan = function (iconName, gridOptionsWrapper, column) {
	        var userProvidedIcon;
	        // check col for icon first
	        if (column && column.getColDef().icons) {
	            userProvidedIcon = column.getColDef().icons[iconName];
	        }
	        // it not in col, try grid options
	        if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
	            userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
	        }
	        // now if user provided, use it
	        if (userProvidedIcon) {
	            var rendererResult = void 0;
	            if (typeof userProvidedIcon === 'function') {
	                rendererResult = userProvidedIcon();
	            }
	            else if (typeof userProvidedIcon === 'string') {
	                rendererResult = userProvidedIcon;
	            }
	            else {
	                throw 'icon from grid options needs to be a string or a function';
	            }
	            if (typeof rendererResult === 'string') {
	                return this.loadTemplate(rendererResult);
	            }
	            else if (this.isNodeOrElement(rendererResult)) {
	                return rendererResult;
	            }
	            else {
	                throw 'iconRenderer should return back a string or a dom object';
	            }
	        }
	        else {
	            var span = document.createElement('span');
	            var cssClass = this.iconNameClassMap[iconName];
	            if (!cssClass) {
	                throw new Error(iconName + " did not find class");
	            }
	            span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
	            return span;
	        }
	    };
	    Utils.addStylesToElement = function (eElement, styles) {
	        var _this = this;
	        if (!styles) {
	            return;
	        }
	        Object.keys(styles).forEach(function (key) {
	            var keyCamelCase = _this.hyphenToCamelCase(key);
	            eElement.style[keyCamelCase] = styles[key];
	        });
	    };
	    Utils.isHorizontalScrollShowing = function (element) {
	        return element.clientWidth < element.scrollWidth;
	    };
	    Utils.isVerticalScrollShowing = function (element) {
	        return element.clientHeight < element.scrollHeight;
	    };
	    Utils.getMaxDivHeight = function () {
	        if (!document.body) {
	            return -1;
	        }
	        var res = 1000000;
	        // FF reports the height back but still renders blank after ~6M px
	        var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;
	        var div = this.loadTemplate("<div/>");
	        document.body.appendChild(div);
	        while (true) {
	            var test = res * 2;
	            div.style.height = test + 'px';
	            if (test > testUpTo || div.clientHeight !== test) {
	                break;
	            }
	            else {
	                res = test;
	            }
	        }
	        document.body.removeChild(div);
	        return res;
	    };
	    Utils.getScrollbarWidth = function () {
	        var outer = document.createElement("div");
	        outer.style.visibility = "hidden";
	        outer.style.width = "100px";
	        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	        document.body.appendChild(outer);
	        var widthNoScroll = outer.offsetWidth;
	        // force scrollbars
	        outer.style.overflow = "scroll";
	        // add inner div
	        var inner = document.createElement("div");
	        inner.style.width = "100%";
	        outer.appendChild(inner);
	        var widthWithScroll = inner.offsetWidth;
	        // remove divs
	        outer.parentNode.removeChild(outer);
	        return widthNoScroll - widthWithScroll;
	    };
	    Utils.isKeyPressed = function (event, keyToCheck) {
	        var pressedKey = event.which || event.keyCode;
	        return pressedKey === keyToCheck;
	    };
	    Utils.setVisible = function (element, visible) {
	        this.addOrRemoveCssClass(element, 'ag-hidden', !visible);
	    };
	    Utils.setHidden = function (element, hidden) {
	        this.addOrRemoveCssClass(element, 'ag-visibility-hidden', hidden);
	    };
	    Utils.isBrowserIE = function () {
	        if (this.isIE === undefined) {
	            this.isIE = !!document.documentMode; // At least IE6
	        }
	        return this.isIE;
	    };
	    Utils.isBrowserEdge = function () {
	        if (this.isEdge === undefined) {
	            this.isEdge = !this.isBrowserIE() && !!window.StyleMedia;
	        }
	        return this.isEdge;
	    };
	    Utils.isBrowserSafari = function () {
	        if (this.isSafari === undefined) {
	            var anyWindow = window;
	            // taken from https://github.com/ag-grid/ag-grid/issues/550
	            this.isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf('Constructor') > 0
	                || (function (p) {
	                    return p.toString() === "[object SafariRemoteNotification]";
	                })(!anyWindow.safari || anyWindow.safari.pushNotification);
	        }
	        return this.isSafari;
	    };
	    Utils.isBrowserChrome = function () {
	        if (this.isChrome === undefined) {
	            var anyWindow = window;
	            this.isChrome = !!anyWindow.chrome && !!anyWindow.chrome.webstore;
	        }
	        return this.isChrome;
	    };
	    Utils.isBrowserFirefox = function () {
	        if (this.isFirefox === undefined) {
	            var anyWindow = window;
	            this.isFirefox = typeof anyWindow.InstallTrigger !== 'undefined';
	        }
	        return this.isFirefox;
	    };
	    Utils.isUserAgentIPad = function () {
	        if (this.isIPad === undefined) {
	            // taken from https://davidwalsh.name/detect-ipad
	            this.isIPad = navigator.userAgent.match(/iPad|iPhone/i) != null;
	        }
	        return this.isIPad;
	    };
	    // srcElement is only available in IE. In all other browsers it is target
	    // http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean
	    Utils.getTarget = function (event) {
	        var eventNoType = event;
	        return eventNoType.target || eventNoType.srcElement;
	    };
	    Utils.isElementInEventPath = function (element, event) {
	        if (!event || !element) {
	            return false;
	        }
	        var path = exports._.getEventPath(event);
	        return path.indexOf(element) >= 0;
	    };
	    Utils.createEventPath = function (event) {
	        var res = [];
	        var pointer = exports._.getTarget(event);
	        while (pointer) {
	            res.push(pointer);
	            pointer = pointer.parentElement;
	        }
	        return res;
	    };
	    // firefox doesn't have event.path set, or any alternative to it, so we hack
	    // it in. this is needed as it's to late to work out the path when the item is
	    // removed from the dom. used by MouseEventService, where it works out if a click
	    // was from the current grid, or a detail grid (master / detail).
	    Utils.addAgGridEventPath = function (event) {
	        event.__agGridEventPath = this.getEventPath(event);
	    };
	    Utils.getEventPath = function (event) {
	        // https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js
	        // https://developer.mozilla.org/en-US/docs/Web/API/Event
	        var eventNoType = event;
	        if (event.deepPath) {
	            // IE supports deep path
	            return event.deepPath();
	        }
	        else if (eventNoType.path) {
	            // Chrome supports path
	            return eventNoType.path;
	        }
	        else if (eventNoType.composedPath) {
	            // Firefox supports composePath
	            return eventNoType.composedPath();
	        }
	        else if (eventNoType.__agGridEventPath) {
	            // Firefox supports composePath
	            return eventNoType.__agGridEventPath;
	        }
	        else {
	            // and finally, if none of the above worked,
	            // we create the path ourselves
	            return this.createEventPath(event);
	        }
	    };
	    Utils.forEachSnapshotFirst = function (list, callback) {
	        if (list) {
	            var arrayCopy = list.slice(0);
	            arrayCopy.forEach(callback);
	        }
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyWidth = function () {
	        if (document.body) {
	            return document.body.clientWidth;
	        }
	        if (window.innerHeight) {
	            return window.innerWidth;
	        }
	        if (document.documentElement && document.documentElement.clientWidth) {
	            return document.documentElement.clientWidth;
	        }
	        return -1;
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyHeight = function () {
	        if (document.body) {
	            return document.body.clientHeight;
	        }
	        if (window.innerHeight) {
	            return window.innerHeight;
	        }
	        if (document.documentElement && document.documentElement.clientHeight) {
	            return document.documentElement.clientHeight;
	        }
	        return -1;
	    };
	    Utils.setCheckboxState = function (eCheckbox, state) {
	        if (typeof state === 'boolean') {
	            eCheckbox.checked = state;
	            eCheckbox.indeterminate = false;
	        }
	        else {
	            // isNodeSelected returns back undefined if it's a group and the children
	            // are a mix of selected and unselected
	            eCheckbox.indeterminate = true;
	        }
	    };
	    Utils.traverseNodesWithKey = function (nodes, callback) {
	        var keyParts = [];
	        recursiveSearchNodes(nodes);
	        function recursiveSearchNodes(nodes) {
	            nodes.forEach(function (node) {
	                // also checking for children for tree data
	                if (node.group || node.hasChildren()) {
	                    keyParts.push(node.key);
	                    var key = keyParts.join('|');
	                    callback(node, key);
	                    recursiveSearchNodes(node.childrenAfterGroup);
	                    keyParts.pop();
	                }
	            });
	        }
	    };
	    // from https://gist.github.com/youssman/745578062609e8acac9f
	    Utils.camelCaseToHyphen = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/([A-Z])/g, function (g) { return '-' + g[0].toLowerCase(); });
	    };
	    // from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase
	    Utils.hyphenToCamelCase = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
	    };
	    // pas in an object eg: {color: 'black', top: '25px'} and it returns "color: black; top: 25px;" for html
	    Utils.cssStyleObjectToMarkup = function (stylesToUse) {
	        var _this = this;
	        if (!stylesToUse) {
	            return '';
	        }
	        var resParts = [];
	        this.iterateObject(stylesToUse, function (styleKey, styleValue) {
	            var styleKeyDashed = _this.camelCaseToHyphen(styleKey);
	            resParts.push(styleKeyDashed + ": " + styleValue + ";");
	        });
	        return resParts.join(' ');
	    };
	    /**
	     * From http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
	     */
	    Utils.isNumeric = function (value) {
	        if (value === '')
	            return false;
	        return !isNaN(parseFloat(value)) && isFinite(value);
	    };
	    Utils.escape = function (toEscape) {
	        if (toEscape === null || toEscape === undefined || !toEscape.replace) {
	            return toEscape;
	        }
	        return toEscape.replace(reUnescapedHtml, function (chr) { return HTML_ESCAPES[chr]; });
	    };
	    // Taken from here: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
	    /**
	     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
	     * complicated, thus this doc is long and (hopefully) detailed enough to answer
	     * your questions.
	     *
	     * If you need to react to the mouse wheel in a predictable way, this code is
	     * like your bestest friend. * hugs *
	     *
	     * As of today, there are 4 DOM event types you can listen to:
	     *
	     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
	     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
	     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
	     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
	     *
	     * So what to do?  The is the best:
	     *
	     *   normalizeWheel.getEventType();
	     *
	     * In your event callback, use this code to get sane interpretation of the
	     * deltas.  This code will return an object with properties:
	     *
	     *   spinX   -- normalized spin speed (use for zoom) - x plane
	     *   spinY   -- " - y plane
	     *   pixelX  -- normalized distance (to pixels) - x plane
	     *   pixelY  -- " - y plane
	     *
	     * Wheel values are provided by the browser assuming you are using the wheel to
	     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
	     * significantly on different platforms and browsers, forgetting that you can
	     * scroll at different speeds.  Some devices (like trackpads) emit more events
	     * at smaller increments with fine granularity, and some emit massive jumps with
	     * linear speed or acceleration.
	     *
	     * This code does its best to normalize the deltas for you:
	     *
	     *   - spin is trying to normalize how far the wheel was spun (or trackpad
	     *     dragged).  This is super useful for zoom support where you want to
	     *     throw away the chunky scroll steps on the PC and make those equal to
	     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
	     *     resolve a single slow step on a wheel to 1.
	     *
	     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
	     *     get the crazy differences between browsers, but at least it'll be in
	     *     pixels!
	     *
	     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
	     *     should translate to positive value zooming IN, negative zooming OUT.
	     *     This matches the newer 'wheel' event.
	     *
	     * Why are there spinX, spinY (or pixels)?
	     *
	     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
	     *     with a mouse.  It results in side-scrolling in the browser by default.
	     *
	     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
	     *
	     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
	     *     probably is by browsers in conjunction with fancy 3D controllers .. but
	     *     you know.
	     *
	     * Implementation info:
	     *
	     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
	     * average mouse:
	     *
	     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
	     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
	     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
	     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
	     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
	     *
	     * On the trackpad:
	     *
	     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
	     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
	     *
	     * On other/older browsers.. it's more complicated as there can be multiple and
	     * also missing delta values.
	     *
	     * The 'wheel' event is more standard:
	     *
	     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
	     *
	     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
	     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
	     * backward compatibility with older events.  Those other values help us
	     * better normalize spin speed.  Example of what the browsers provide:
	     *
	     *                          | event.wheelDelta | event.detail
	     *        ------------------+------------------+--------------
	     *          Safari v5/OS X  |       -120       |       0
	     *          Safari v5/Win7  |       -120       |       0
	     *         Chrome v17/OS X  |       -120       |       0
	     *         Chrome v17/Win7  |       -120       |       0
	     *                IE9/Win7  |       -120       |   undefined
	     *         Firefox v4/OS X  |     undefined    |       1
	     *         Firefox v4/Win7  |     undefined    |       3
	     *
	     */
	    Utils.normalizeWheel = function (event) {
	        var PIXEL_STEP = 10;
	        var LINE_HEIGHT = 40;
	        var PAGE_HEIGHT = 800;
	        // spinX, spinY
	        var sX = 0;
	        var sY = 0;
	        // pixelX, pixelY
	        var pX = 0;
	        var pY = 0;
	        // Legacy
	        if ('detail' in event) {
	            sY = event.detail;
	        }
	        if ('wheelDelta' in event) {
	            sY = -event.wheelDelta / 120;
	        }
	        if ('wheelDeltaY' in event) {
	            sY = -event.wheelDeltaY / 120;
	        }
	        if ('wheelDeltaX' in event) {
	            sX = -event.wheelDeltaX / 120;
	        }
	        // side scrolling on FF with DOMMouseScroll
	        if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
	            sX = sY;
	            sY = 0;
	        }
	        pX = sX * PIXEL_STEP;
	        pY = sY * PIXEL_STEP;
	        if ('deltaY' in event) {
	            pY = event.deltaY;
	        }
	        if ('deltaX' in event) {
	            pX = event.deltaX;
	        }
	        if ((pX || pY) && event.deltaMode) {
	            if (event.deltaMode == 1) {
	                pX *= LINE_HEIGHT;
	                pY *= LINE_HEIGHT;
	            }
	            else {
	                pX *= PAGE_HEIGHT;
	                pY *= PAGE_HEIGHT;
	            }
	        }
	        // Fall-back if spin cannot be determined
	        if (pX && !sX) {
	            sX = (pX < 1) ? -1 : 1;
	        }
	        if (pY && !sY) {
	            sY = (pY < 1) ? -1 : 1;
	        }
	        return {
	            spinX: sX,
	            spinY: sY,
	            pixelX: pX,
	            pixelY: pY
	        };
	    };
	    /**
	     * https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
	     */
	    Utils.debounce = function (func, wait, immediate) {
	        if (immediate === void 0) { immediate = false; }
	        // 'private' variable for instance
	        // The returned function will be able to reference this due to closure.
	        // Each call to the returned function will share this common timer.
	        var timeout;
	        // Calling debounce returns a new anonymous function
	        return function () {
	            // reference the context and args for the setTimeout function
	            var context = this, args = arguments;
	            // Should the function be called now? If immediate is true
	            //   and not already in a timeout then the answer is: Yes
	            var callNow = immediate && !timeout;
	            // This is the basic debounce behaviour where you can call this
	            //   function several times, but it will only execute once
	            //   [before or after imposing a delay].
	            //   Each time the returned function is called, the timer starts over.
	            clearTimeout(timeout);
	            // Set the new timeout
	            timeout = setTimeout(function () {
	                // Inside the timeout function, clear the timeout variable
	                // which will let the next execution run when in 'immediate' mode
	                timeout = null;
	                // Check if the function already ran with the immediate flag
	                if (!immediate) {
	                    // Call the original function with apply
	                    // apply lets you define the 'this' object as well as the arguments
	                    //    (both captured before setTimeout)
	                    func.apply(context, args);
	                }
	            }, wait);
	            // Immediate mode and no wait timer? Execute the function..
	            if (callNow)
	                func.apply(context, args);
	        };
	    };
	    // a user once raised an issue - they said that when you opened a popup (eg context menu)
	    // and then clicked on a selection checkbox, the popup wasn't closed. this is because the
	    // popup listens for clicks on the body, however ag-grid WAS stopping propagation on the
	    // checkbox clicks (so the rows didn't pick them up as row selection selection clicks).
	    // to get around this, we have a pattern to stop propagation for the purposes of ag-Grid,
	    // but we still let the event pass back to teh body.
	    Utils.stopPropagationForAgGrid = function (event) {
	        event[AG_GRID_STOP_PROPAGATION] = true;
	    };
	    Utils.isStopPropagationForAgGrid = function (event) {
	        return event[AG_GRID_STOP_PROPAGATION] === true;
	    };
	    Utils.executeInAWhile = function (funcs) {
	        this.executeAfter(funcs, 400);
	    };
	    Utils.executeNextVMTurn = function (funcs) {
	        this.executeAfter(funcs, 0);
	    };
	    Utils.executeAfter = function (funcs, millis) {
	        if (funcs.length > 0) {
	            setTimeout(function () {
	                funcs.forEach(function (func) { return func(); });
	            }, millis);
	        }
	    };
	    Utils.referenceCompare = function (left, right) {
	        if (left == null && right == null)
	            return true;
	        if (left == null && right)
	            return false;
	        if (left && right == null)
	            return false;
	        return left === right;
	    };
	    Utils.get = function (source, expression, defaultValue) {
	        if (source == null)
	            return defaultValue;
	        if (expression.indexOf('.') > -1) {
	            var fields = expression.split('.');
	            var thisKey = fields[0];
	            var nextValue = source[thisKey];
	            if (nextValue != null) {
	                return Utils.get(nextValue, fields.slice(1, fields.length).join('.'), defaultValue);
	            }
	            else {
	                return defaultValue;
	            }
	        }
	        else {
	            var nextValue = source[expression];
	            return nextValue != null ? nextValue : defaultValue;
	        }
	    };
	    Utils.addSafePassiveEventListener = function (eElement, event, listener) {
	        eElement.addEventListener(event, listener, (Utils.passiveEvents.indexOf(event) > -1 ? { passive: true } : undefined));
	    };
	    Utils.camelCaseToHumanText = function (camelCase) {
	        if (camelCase == null)
	            return null;
	        // Who needs to learn how to code when you have stack overflow!
	        // from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression
	        var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
	        var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');
	        return words.map(function (word) { return word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : ''); }).join(' ');
	    };
	    // displays a message to the browser. this is useful in iPad, where you can't easily see the console.
	    // so the javascript code can use this to give feedback. this is NOT intended to be called in production.
	    // it is intended the ag-Grid developer calls this to troubleshoot, but then takes out the calls before
	    // checking in.
	    Utils.message = function (msg) {
	        var eMessage = document.createElement('div');
	        eMessage.innerHTML = msg;
	        var eBox = document.querySelector('#__ag__message');
	        if (!eBox) {
	            var template = "<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>";
	            eBox = this.loadTemplate(template);
	            if (document.body) {
	                document.body.appendChild(eBox);
	            }
	        }
	        eBox.appendChild(eMessage);
	    };
	    // gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.
	    // when in ClientSideNodeManager we always have indexes (as this sorts the items the
	    // user provided) but when in GroupStage, the nodes can contain filler nodes that
	    // don't have order id's
	    Utils.sortRowNodesByOrder = function (rowNodes, rowNodeOrder) {
	        if (!rowNodes) {
	            return;
	        }
	        rowNodes.sort(function (nodeA, nodeB) {
	            var positionA = rowNodeOrder[nodeA.id];
	            var positionB = rowNodeOrder[nodeB.id];
	            var aHasIndex = positionA !== undefined;
	            var bHasIndex = positionB !== undefined;
	            var bothNodesAreUserNodes = aHasIndex && bHasIndex;
	            var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
	            if (bothNodesAreUserNodes) {
	                // when comparing two nodes the user has provided, they always
	                // have indexes
	                return positionA - positionB;
	            }
	            else if (bothNodesAreFillerNodes) {
	                // when comparing two filler nodes, we have no index to compare them
	                // against, however we want this sorting to be deterministic, so that
	                // the rows don't jump around as the user does delta updates. so we
	                // want the same sort result. so we use the id - which doesn't make sense
	                // from a sorting point of view, but does give consistent behaviour between
	                // calls. otherwise groups jump around as delta updates are done.
	                return nodeA.id > nodeB.id ? 1 : -1;
	            }
	            else if (aHasIndex) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        });
	    };
	    Utils.fuzzyCheckStrings = function (inputValues, validValues, allSuggestions) {
	        var _this = this;
	        var fuzzyMatches = {};
	        var invalidInputs = inputValues.filter(function (inputValue) {
	            return !validValues.some(function (validValue) { return validValue === inputValue; });
	        });
	        if (invalidInputs.length > 0) {
	            invalidInputs.forEach(function (invalidInput) {
	                return fuzzyMatches[invalidInput] = _this.fuzzySuggestions(invalidInput, validValues, allSuggestions);
	            });
	        }
	        return fuzzyMatches;
	    };
	    Utils.fuzzySuggestions = function (inputValue, validValues, allSuggestions) {
	        var thisSuggestions = allSuggestions.slice(0);
	        thisSuggestions.sort(function (suggestedValueLeft, suggestedValueRight) {
	            var leftDifference = exports._.string_similarity(suggestedValueLeft.toLowerCase(), inputValue.toLowerCase());
	            var rightDifference = exports._.string_similarity(suggestedValueRight.toLowerCase(), inputValue.toLowerCase());
	            return leftDifference > rightDifference ? -1 :
	                leftDifference === rightDifference ? 0 :
	                    1;
	        });
	        return thisSuggestions;
	    };
	    //Algorithm to do fuzzy search
	    //https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense
	    Utils.get_bigrams = function (from) {
	        var i, j, ref, s, v;
	        s = from.toLowerCase();
	        v = new Array(s.length - 1);
	        for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
	            v[i] = s.slice(i, i + 2);
	        }
	        return v;
	    };
	    Utils.isNumpadDelWithNumlockOnForEdgeOrIe = function (event) {
	        if (Utils.isBrowserEdge() || Utils.isBrowserIE()) {
	            return event.key === Utils.NUMPAD_DEL_NUMLOCK_ON_KEY &&
	                event.charCode === Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
	        }
	        return false;
	    };
	    Utils.PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!"£$%^&*()_+-=[];\'#,./\\|<>?:@~{}';
	    Utils.NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';
	    Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
	    Utils.doOnceFlags = {};
	    // static prepend(parent: HTMLElement, child: HTMLElement): void {
	    //     if (this.exists(parent.firstChild)) {
	    //         parent.insertBefore(child, parent.firstChild);
	    //     } else {
	    //         parent.appendChild(child);
	    //     }
	    // }
	    Utils.iconNameClassMap = {
	        'columnMovePin': 'pin',
	        'columnMoveAdd': 'plus',
	        'columnMoveHide': 'eye-slash',
	        'columnMoveMove': 'arrows',
	        'columnMoveLeft': 'left',
	        'columnMoveRight': 'right',
	        'columnMoveGroup': 'group',
	        'columnMoveValue': 'aggregation',
	        'columnMovePivot': 'pivot',
	        'dropNotAllowed': 'not-allowed',
	        'groupContracted': 'expanded',
	        'groupExpanded': 'contracted',
	        'checkboxChecked': 'checkbox-checked',
	        'checkboxUnchecked': 'checkbox-unchecked',
	        'checkboxIndeterminate': 'checkbox-indeterminate',
	        'checkboxCheckedReadOnly': 'checkbox-checked-readonly',
	        'checkboxUncheckedReadOnly': 'checkbox-unchecked-readonly',
	        'checkboxIndeterminateReadOnly': 'checkbox-indeterminate-readonly',
	        'groupLoading': 'loading',
	        'menu': 'menu',
	        'filter': 'filter',
	        'columns': 'columns',
	        'menuPin': 'pin',
	        'menuValue': 'aggregation',
	        'menuAddRowGroup': 'group',
	        'menuRemoveRowGroup': 'group',
	        'clipboardCopy': 'copy',
	        'clipboardCut': 'cut',
	        'clipboardPaste': 'paste',
	        'pivotPanel': 'pivot',
	        'rowGroupPanel': 'group',
	        'valuePanel': 'aggregation',
	        'columnGroupOpened': 'expanded',
	        'columnGroupClosed': 'contracted',
	        'columnSelectClosed': 'tree-closed',
	        'columnSelectOpen': 'tree-open',
	        // from deprecated header, remove at some point
	        'sortAscending': 'asc',
	        'sortDescending': 'desc',
	        'sortUnSort': 'none'
	    };
	    Utils.passiveEvents = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];
	    Utils.string_similarity = function (str1, str2) {
	        var hit_count, j, k, len, len1, pairs1, pairs2, union, x, y;
	        if (str1.length > 0 && str2.length > 0) {
	            pairs1 = Utils.get_bigrams(str1);
	            pairs2 = Utils.get_bigrams(str2);
	            union = pairs1.length + pairs2.length;
	            hit_count = 0;
	            for (j = 0, len = pairs1.length; j < len; j++) {
	                x = pairs1[j];
	                for (k = 0, len1 = pairs2.length; k < len1; k++) {
	                    y = pairs2[k];
	                    if (x === y) {
	                        hit_count++;
	                    }
	                }
	            }
	            if (hit_count > 0) {
	                return (2.0 * hit_count) / union;
	            }
	        }
	        return 0.0;
	    };
	    return Utils;
	}());
	exports.Utils = Utils;
	var NumberSequence = (function () {
	    function NumberSequence(initValue, step) {
	        if (initValue === void 0) { initValue = 0; }
	        if (step === void 0) { step = 1; }
	        this.nextValue = initValue;
	        this.step = step;
	    }
	    NumberSequence.prototype.next = function () {
	        var valToReturn = this.nextValue;
	        this.nextValue += this.step;
	        return valToReturn;
	    };
	    NumberSequence.prototype.peek = function () {
	        return this.nextValue;
	    };
	    NumberSequence.prototype.skip = function (count) {
	        this.nextValue += count;
	    };
	    return NumberSequence;
	}());
	exports.NumberSequence = NumberSequence;
	exports._ = Utils;
	var PromiseStatus;
	(function (PromiseStatus) {
	    PromiseStatus[PromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
	    PromiseStatus[PromiseStatus["RESOLVED"] = 1] = "RESOLVED";
	})(PromiseStatus = exports.PromiseStatus || (exports.PromiseStatus = {}));
	var Promise = (function () {
	    function Promise(callback) {
	        this.status = PromiseStatus.IN_PROGRESS;
	        this.resolution = null;
	        this.listOfWaiters = [];
	        callback(this.onDone.bind(this), this.onReject.bind(this));
	    }
	    Promise.all = function (toCombine) {
	        return new Promise(function (resolve) {
	            var combinedValues = [];
	            var remainingToResolve = toCombine.length;
	            toCombine.forEach(function (source, index) {
	                source.then(function (sourceResolved) {
	                    remainingToResolve--;
	                    combinedValues[index] = sourceResolved;
	                    if (remainingToResolve == 0) {
	                        resolve(combinedValues);
	                    }
	                });
	                combinedValues.push(null);
	            });
	        });
	    };
	    Promise.resolve = function (value) {
	        return new Promise(function (resolve) { return resolve(value); });
	    };
	    Promise.external = function () {
	        var capture;
	        var promise = new Promise(function (resolve) {
	            capture = resolve;
	        });
	        return {
	            promise: promise,
	            resolve: function (value) {
	                capture(value);
	            }
	        };
	    };
	    Promise.prototype.then = function (func) {
	        if (this.status === PromiseStatus.IN_PROGRESS) {
	            this.listOfWaiters.push(func);
	        }
	        else {
	            func(this.resolution);
	        }
	    };
	    Promise.prototype.firstOneOnly = function (func) {
	        if (this.status === PromiseStatus.IN_PROGRESS) {
	            if (this.listOfWaiters.length === 0) {
	                this.listOfWaiters.push(func);
	            }
	        }
	        else {
	            func(this.resolution);
	        }
	    };
	    Promise.prototype.map = function (adapter) {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this.then(function (unmapped) {
	                resolve(adapter(unmapped));
	            });
	        });
	    };
	    Promise.prototype.resolveNow = function (ifNotResolvedValue, ifResolved) {
	        if (this.status == PromiseStatus.IN_PROGRESS)
	            return ifNotResolvedValue;
	        return ifResolved(this.resolution);
	    };
	    Promise.prototype.onDone = function (value) {
	        this.status = PromiseStatus.RESOLVED;
	        this.resolution = value;
	        this.listOfWaiters.forEach(function (waiter) { return waiter(value); });
	    };
	    Promise.prototype.onReject = function (params) {
	        console.warn('TBI');
	    };
	    return Promise;
	}());
	exports.Promise = Promise;
	});

	unwrapExports(utils);
	var utils_1 = utils.Timer;
	var utils_2 = utils.Utils;
	var utils_3 = utils.NumberSequence;
	var utils_4 = utils._;
	var utils_5 = utils.PromiseStatus;
	var utils_6 = utils.Promise;

	var context = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var Context = (function () {
	    function Context(params, logger) {
	        this.beans = {};
	        this.componentsMappedByName = {};
	        this.destroyed = false;
	        if (!params || !params.beans) {
	            return;
	        }
	        this.contextParams = params;
	        this.logger = logger;
	        this.logger.log(">> creating ag-Application Context");
	        this.setupComponents();
	        this.createBeans();
	        var beans = utils.Utils.mapObject(this.beans, function (beanEntry) { return beanEntry.beanInstance; });
	        this.wireBeans(beans);
	        this.logger.log(">> ag-Application Context ready - component is alive");
	    }
	    Context.prototype.setupComponents = function () {
	        var _this = this;
	        if (this.contextParams.components) {
	            this.contextParams.components.forEach(function (componentMeta) { return _this.addComponent(componentMeta); });
	        }
	    };
	    Context.prototype.addComponent = function (componentMeta) {
	        // get name of the class as a string
	        // let className = _.getNameOfClass(ComponentClass);
	        // insert a dash after every capital letter
	        // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
	        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
	        // put all to upper case
	        var classUpperCase = classEscaped.toUpperCase();
	        // finally store
	        this.componentsMappedByName[classUpperCase] = componentMeta.theClass;
	    };
	    Context.prototype.createComponent = function (element, afterPreCreateCallback) {
	        var key = element.nodeName;
	        if (this.componentsMappedByName && this.componentsMappedByName[key]) {
	            var newComponent = new this.componentsMappedByName[key]();
	            this.wireBean(newComponent, afterPreCreateCallback);
	            return newComponent;
	        }
	        else {
	            return null;
	        }
	    };
	    Context.prototype.wireBean = function (bean, afterPreCreateCallback) {
	        if (!bean) {
	            throw Error("Can't wire to bean since it is null");
	        }
	        this.wireBeans([bean], afterPreCreateCallback);
	    };
	    Context.prototype.wireBeans = function (beans, afterPreCreateCallback) {
	        this.autoWireBeans(beans);
	        this.methodWireBeans(beans);
	        this.preConstruct(beans);
	        // the callback sets the attributes, so the component has access to attributes
	        // before postConstruct methods in the component are executed
	        if (utils.Utils.exists(afterPreCreateCallback)) {
	            beans.forEach(afterPreCreateCallback);
	        }
	        this.postConstruct(beans);
	    };
	    Context.prototype.createBeans = function () {
	        var _this = this;
	        // register all normal beans
	        this.contextParams.beans.forEach(this.createBeanEntry.bind(this));
	        // register override beans, these will overwrite beans above of same name
	        if (this.contextParams.overrideBeans) {
	            this.contextParams.overrideBeans.forEach(this.createBeanEntry.bind(this));
	        }
	        // instantiate all beans - overridden beans will be left out
	        utils.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var constructorParamsMeta;
	            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
	                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
	            }
	            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
	            var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
	            beanEntry.beanInstance = newInstance;
	            _this.logger.log("bean " + _this.getBeanName(newInstance) + " created");
	        });
	    };
	    Context.prototype.createBeanEntry = function (Bean) {
	        var metaData = Bean.__agBeanMetaData;
	        if (!metaData) {
	            var beanName = void 0;
	            if (Bean.prototype.constructor) {
	                beanName = Bean.prototype.constructor.name;
	            }
	            else {
	                beanName = "" + Bean;
	            }
	            console.error("context item " + beanName + " is not a bean");
	            return;
	        }
	        var beanEntry = {
	            bean: Bean,
	            beanInstance: null,
	            beanName: metaData.beanName
	        };
	        this.beans[metaData.beanName] = beanEntry;
	    };
	    Context.prototype.autoWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) { return _this.autoWireBean(bean); });
	    };
	    Context.prototype.methodWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) {
	            if (!bean) {
	                throw Error("Can't wire to bean since it is null");
	            }
	            return _this.methodWireBean(bean);
	        });
	    };
	    Context.prototype.autoWireBean = function (bean) {
	        var _this = this;
	        var currentBean = bean;
	        var _loop_1 = function () {
	            var currentConstructor = currentBean.constructor;
	            if (currentConstructor.__agBeanMetaData && currentConstructor.__agBeanMetaData.agClassAttributes) {
	                var attributes = currentConstructor.__agBeanMetaData.agClassAttributes;
	                if (!attributes) {
	                    return { value: void 0 };
	                }
	                var beanName_1 = this_1.getBeanName(currentConstructor);
	                attributes.forEach(function (attribute) {
	                    var otherBean = _this.lookupBeanInstance(beanName_1, attribute.beanName, attribute.optional);
	                    bean[attribute.attributeName] = otherBean;
	                });
	            }
	            currentBean = Object.getPrototypeOf(currentBean) ? Object.getPrototypeOf(currentBean) : null;
	        };
	        var this_1 = this;
	        while (currentBean != null) {
	            var state_1 = _loop_1();
	            if (typeof state_1 === "object")
	                return state_1.value;
	        }
	    };
	    Context.prototype.getBeanName = function (constructor) {
	        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
	            return constructor.__agBeanMetaData.beanName;
	        }
	        var constructorString = constructor.toString();
	        var beanName = constructorString.substring(9, constructorString.indexOf("("));
	        return beanName;
	    };
	    Context.prototype.methodWireBean = function (bean) {
	        var _this = this;
	        var autowiredMethods;
	        if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.autowireMethods) {
	            autowiredMethods = bean.constructor.__agBeanMetaData.autowireMethods;
	        }
	        utils.Utils.iterateObject(autowiredMethods, function (methodName, wireParams) {
	            // skip constructor, as this is dealt with elsewhere
	            if (methodName === "agConstructor") {
	                return;
	            }
	            var beanName = _this.getBeanName(bean.constructor);
	            var initParams = _this.getBeansForParameters(wireParams, beanName);
	            bean[methodName].apply(bean, initParams);
	        });
	    };
	    Context.prototype.getBeansForParameters = function (parameters, beanName) {
	        var _this = this;
	        var beansList = [];
	        if (parameters) {
	            utils.Utils.iterateObject(parameters, function (paramIndex, otherBeanName) {
	                var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
	                beansList[Number(paramIndex)] = otherBean;
	            });
	        }
	        return beansList;
	    };
	    Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {
	        if (optional === void 0) { optional = false; }
	        if (beanName === "context") {
	            return this;
	        }
	        else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {
	            return this.contextParams.seed[beanName];
	        }
	        else {
	            var beanEntry = this.beans[beanName];
	            if (beanEntry) {
	                return beanEntry.beanInstance;
	            }
	            if (!optional) {
	                console.error("ag-Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
	            }
	            return null;
	        }
	    };
	    Context.prototype.postConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods) {
	                bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.preConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preConstructMethods) {
	                bean.constructor.__agBeanMetaData.preConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.getBean = function (name) {
	        return this.lookupBeanInstance("getBean", name, true);
	    };
	    Context.prototype.destroy = function () {
	        // should only be able to destroy once
	        if (this.destroyed) {
	            return;
	        }
	        this.logger.log(">> Shutting down ag-Application Context");
	        // try calling destroy methods
	        utils.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var bean = beanEntry.beanInstance;
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preDestroyMethods) {
	                bean.constructor.__agBeanMetaData.preDestroyMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	        this.destroyed = true;
	        this.logger.log(">> ag-Application Context shut down - component is dead");
	    };
	    return Context;
	}());
	exports.Context = Context;
	// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
	// allows calling 'apply' on a constructor
	function applyToConstructor(constructor, argArray) {
	    var args = [null].concat(argArray);
	    var factoryFunction = constructor.bind.apply(constructor, args);
	    return new factoryFunction();
	}
	function PreConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.preConstructMethods = [];
	    }
	    props.preConstructMethods.push(methodName);
	}
	exports.PreConstruct = PreConstruct;
	function PostConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.postConstructMethods = [];
	    }
	    props.postConstructMethods.push(methodName);
	}
	exports.PostConstruct = PostConstruct;
	function PreDestroy(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.preDestroyMethods) {
	        props.preDestroyMethods = [];
	    }
	    props.preDestroyMethods.push(methodName);
	}
	exports.PreDestroy = PreDestroy;
	function Bean(beanName) {
	    return function (classConstructor) {
	        var props = getOrCreateProps(classConstructor);
	        props.beanName = beanName;
	    };
	}
	exports.Bean = Bean;
	function Autowired(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, false, target, propertyKey, null);
	    };
	}
	exports.Autowired = Autowired;
	function Optional(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, true, target, propertyKey, null);
	    };
	}
	exports.Optional = Optional;
	function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
	    if (name === null) {
	        console.error("ag-Grid: Autowired name should not be null");
	        return;
	    }
	    if (typeof index === "number") {
	        console.error("ag-Grid: Autowired should be on an attribute");
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(target.constructor);
	    if (!props.agClassAttributes) {
	        props.agClassAttributes = [];
	    }
	    props.agClassAttributes.push({
	        attributeName: methodOrAttributeName,
	        beanName: name,
	        optional: optional
	    });
	}
	function Qualifier(name) {
	    return function (classPrototype, methodOrAttributeName, index) {
	        var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
	        var props;
	        if (typeof index === "number") {
	            // it's a parameter on a method
	            var methodName = void 0;
	            if (methodOrAttributeName) {
	                props = getOrCreateProps(constructor);
	                methodName = methodOrAttributeName;
	            }
	            else {
	                props = getOrCreateProps(constructor);
	                methodName = "agConstructor";
	            }
	            if (!props.autowireMethods) {
	                props.autowireMethods = {};
	            }
	            if (!props.autowireMethods[methodName]) {
	                props.autowireMethods[methodName] = {};
	            }
	            props.autowireMethods[methodName][index] = name;
	        }
	    };
	}
	exports.Qualifier = Qualifier;
	function getOrCreateProps(target) {
	    if (!target.hasOwnProperty("__agBeanMetaData")) {
	        target.__agBeanMetaData = {};
	    }
	    return target.__agBeanMetaData;
	}
	});

	unwrapExports(context);
	var context_1 = context.Context;
	var context_2 = context.PreConstruct;
	var context_3 = context.PostConstruct;
	var context_4 = context.PreDestroy;
	var context_5 = context.Bean;
	var context_6 = context.Autowired;
	var context_7 = context.Optional;
	var context_8 = context.Qualifier;

	var logger = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var context_2 = context;
	var LoggerFactory = (function () {
	    function LoggerFactory() {
	    }
	    LoggerFactory.prototype.setBeans = function (gridOptionsWrapper$$1) {
	        this.logging = gridOptionsWrapper$$1.isDebug();
	    };
	    LoggerFactory.prototype.create = function (name) {
	        return new Logger(name, this.isLogging.bind(this));
	    };
	    LoggerFactory.prototype.isLogging = function () {
	        return this.logging;
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('gridOptionsWrapper')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridOptionsWrapper.GridOptionsWrapper]),
	        __metadata("design:returntype", void 0)
	    ], LoggerFactory.prototype, "setBeans", null);
	    LoggerFactory = __decorate([
	        context.Bean('loggerFactory')
	    ], LoggerFactory);
	    return LoggerFactory;
	}());
	exports.LoggerFactory = LoggerFactory;
	var Logger = (function () {
	    function Logger(name, isLoggingFunc) {
	        this.name = name;
	        this.isLoggingFunc = isLoggingFunc;
	    }
	    Logger.prototype.isLogging = function () {
	        return this.isLoggingFunc();
	    };
	    Logger.prototype.log = function (message) {
	        if (this.isLoggingFunc()) {
	            console.log('ag-Grid.' + this.name + ': ' + message);
	        }
	    };
	    return Logger;
	}());
	exports.Logger = Logger;
	});

	unwrapExports(logger);
	var logger_1 = logger.LoggerFactory;
	var logger_2 = logger.Logger;

	var eventService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var context_2 = context;

	var EventService = (function () {
	    function EventService() {
	        this.allSyncListeners = {};
	        this.allAsyncListeners = {};
	        this.globalSyncListeners = [];
	        this.globalAsyncListeners = [];
	        this.asyncFunctionsQueue = [];
	        this.scheduled = false;
	    }
	    EventService_1 = EventService;
	    // because this class is used both inside the context and outside the context, we do not
	    // use autowired attributes, as that would be confusing, as sometimes the attributes
	    // would be wired, and sometimes not.
	    //
	    // the global event servers used by ag-Grid is autowired by the context once, and this
	    // setBeans method gets called once.
	    //
	    // the times when this class is used outside of the context (eg RowNode has an instance of this
	    // class) then it is not a bean, and this setBeans method is not called.
	    EventService.prototype.setBeans = function (loggerFactory, gridOptionsWrapper$$1, globalEventListener) {
	        if (globalEventListener === void 0) { globalEventListener = null; }
	        this.logger = loggerFactory.create('EventService');
	        if (globalEventListener) {
	            var async = gridOptionsWrapper$$1.useAsyncEvents();
	            this.addGlobalListener(globalEventListener, async);
	        }
	    };
	    EventService.prototype.getListenerList = function (eventType, async) {
	        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
	        var listenerList = listenerMap[eventType];
	        if (!listenerList) {
	            listenerList = [];
	            listenerMap[eventType] = listenerList;
	        }
	        return listenerList;
	    };
	    EventService.prototype.addEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        var listenerList = this.getListenerList(eventType, async);
	        if (listenerList.indexOf(listener) < 0) {
	            listenerList.push(listener);
	        }
	    };
	    // for some events, it's important that the model gets to hear about them before the view,
	    // as the model may need to update before the view works on the info. if you register
	    // via this method, you get notified before the view parts
	    EventService.prototype.addModalPriorityEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        this.addEventListener(eventType + EventService_1.PRIORITY, listener, async);
	    };
	    EventService.prototype.addGlobalListener = function (listener, async) {
	        if (async === void 0) { async = false; }
	        if (async) {
	            this.globalAsyncListeners.push(listener);
	        }
	        else {
	            this.globalSyncListeners.push(listener);
	        }
	    };
	    EventService.prototype.removeEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        var listenerList = this.getListenerList(eventType, async);
	        utils.Utils.removeFromArray(listenerList, listener);
	    };
	    EventService.prototype.removeGlobalListener = function (listener, async) {
	        if (async === void 0) { async = false; }
	        if (async) {
	            utils.Utils.removeFromArray(this.globalAsyncListeners, listener);
	        }
	        else {
	            utils.Utils.removeFromArray(this.globalSyncListeners, listener);
	        }
	    };
	    // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
	    // type is not in other types of events???
	    EventService.prototype.dispatchEvent = function (event) {
	        // console.log(`dispatching ${eventType}: ${event}`);
	        this.dispatchToListeners(event, true);
	        this.dispatchToListeners(event, false);
	    };
	    EventService.prototype.dispatchToListeners = function (event, async) {
	        var _this = this;
	        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
	        var eventType = event.type;
	        // this allows the columnController to get events before anyone else
	        var p1ListenerList = this.getListenerList(eventType + EventService_1.PRIORITY, async);
	        utils.Utils.forEachSnapshotFirst(p1ListenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        var listenerList = this.getListenerList(eventType, async);
	        utils.Utils.forEachSnapshotFirst(listenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        utils.Utils.forEachSnapshotFirst(globalListeners, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(eventType, event); });
	            }
	            else {
	                listener(eventType, event);
	            }
	        });
	    };
	    // this gets called inside the grid's thread, for each event that it
	    // wants to set async. the grid then batches the events into one setTimeout()
	    // because setTimeout() is an expensive operation. ideally we would have
	    // each event in it's own setTimeout(), but we batch for performance.
	    EventService.prototype.dispatchAsync = function (func) {
	        // add to the queue for executing later in the next VM turn
	        this.asyncFunctionsQueue.push(func);
	        // check if timeout is already scheduled. the first time the grid calls
	        // this within it's thread turn, this should be false, so it will schedule
	        // the 'flush queue' method the first time it comes here. then the flag is
	        // set to 'true' so it will know it's already scheduled for subsequent calls.
	        if (!this.scheduled) {
	            // if not scheduled, schedule one
	            setTimeout(this.flushAsyncQueue.bind(this), 0);
	            // mark that it is scheduled
	            this.scheduled = true;
	        }
	    };
	    // this happens in the next VM turn only, and empties the queue of events
	    EventService.prototype.flushAsyncQueue = function () {
	        this.scheduled = false;
	        // we take a copy, because the event listener could be using
	        // the grid, which would cause more events, which would be potentially
	        // added to the queue, so safe to take a copy, the new events will
	        // get executed in a later VM turn rather than risk updating the
	        // queue as we are flushing it.
	        var queueCopy = this.asyncFunctionsQueue.slice();
	        this.asyncFunctionsQueue = [];
	        // execute the queue
	        queueCopy.forEach(function (func) { return func(); });
	    };
	    // this is an old idea niall had, should really take it out, was to do with ordering who gets to process
	    // events first, to give model and service objects preference over the view
	    EventService.PRIORITY = '-P1';
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __param(1, context_2.Qualifier('gridOptionsWrapper')),
	        __param(2, context_2.Qualifier('globalEventListener')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory,
	            gridOptionsWrapper.GridOptionsWrapper,
	            Function]),
	        __metadata("design:returntype", void 0)
	    ], EventService.prototype, "setBeans", null);
	    EventService = EventService_1 = __decorate([
	        context.Bean('eventService')
	    ], EventService);
	    return EventService;
	    var EventService_1;
	}());
	exports.EventService = EventService;
	});

	unwrapExports(eventService);
	var eventService_1 = eventService.EventService;

	var eventKeys = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Events = (function () {
	    function Events() {
	    }
	    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/
	    Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
	    /** User has set in new columns. */
	    Events.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';
	    /** The pivot mode flag was changed */
	    Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';
	    /** A row group column was added, removed or order changed. */
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    /** A pivot column was added, removed or order changed. */
	    Events.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';
	    /** The list of grid columns has changed. */
	    Events.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';
	    /** A value column was added, removed or agg function was changed. */
	    Events.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';
	    /** A column was moved */
	    Events.EVENT_COLUMN_MOVED = 'columnMoved';
	    /** One or more columns was shown / hidden */
	    Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
	    /** One or more columns was pinned / unpinned*/
	    Events.EVENT_COLUMN_PINNED = 'columnPinned';
	    /** A column group was opened / closed */
	    Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
	    /** One or more columns was resized. If just one, the column in the event is set. */
	    Events.EVENT_COLUMN_RESIZED = 'columnResized';
	    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */
	    Events.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';
	    /** The list of virtual columns has changed, results from viewport changing */
	    Events.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';
	    /** A row group was opened / closed */
	    Events.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';
	    /** The client has set new data into the grid */
	    Events.EVENT_ROW_DATA_CHANGED = 'rowDataChanged';
	    /** The client has updated data for the grid */
	    Events.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';
	    /** The client has set new floating data into the grid */
	    Events.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';
	    /** Range selection has changed */
	    Events.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';
	    /** For when the tool panel is shown / hidden */
	    Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';
	    /** Model was updated - grid updates the drawn rows when this happens */
	    Events.EVENT_MODEL_UPDATED = 'modelUpdated';
	    Events.EVENT_PASTE_START = 'pasteStart';
	    Events.EVENT_PASTE_END = 'pasteEnd';
	    Events.EVENT_CELL_CLICKED = 'cellClicked';
	    Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
	    Events.EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';
	    Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
	    Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
	    Events.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';
	    Events.EVENT_CELL_FOCUSED = 'cellFocused';
	    Events.EVENT_ROW_SELECTED = 'rowSelected';
	    Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
	    Events.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';
	    Events.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';
	    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */
	    Events.EVENT_FILTER_CHANGED = 'filterChanged';
	    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */
	    Events.EVENT_FILTER_MODIFIED = 'filterModified';
	    Events.EVENT_SORT_CHANGED = 'sortChanged';
	    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */
	    Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
	    Events.EVENT_ROW_CLICKED = 'rowClicked';
	    Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
	    /** Gets called once after the grid has finished initialising. */
	    Events.EVENT_GRID_READY = 'gridReady';
	    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
	     * changed, so always filling the space it was given. */
	    Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
	    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */
	    Events.EVENT_VIEWPORT_CHANGED = 'viewportChanged';
	    /** A column drag has started, either resizing a column or moving a column. */
	    Events.EVENT_DRAG_STARTED = 'dragStarted';
	    /** A column drag has stopped */
	    Events.EVENT_DRAG_STOPPED = 'dragStopped';
	    Events.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';
	    Events.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';
	    Events.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';
	    Events.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';
	    /** Main body of grid has scrolled, either horizontally or vertically */
	    Events.EVENT_BODY_SCROLL = 'bodyScroll';
	    Events.EVENT_ANIMATION_QUEUE_EMPTY = 'animationQueueEmpty';
	    Events.EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';
	    /** The displayed page for pagination has changed. For example the data was filtered or sorted,
	     * or the user has moved to a different page. */
	    Events.EVENT_PAGINATION_CHANGED = 'paginationChanged';
	    /** Only used by React, Angular 2+, Web Components, Aurelia and VueJS ag-Grid components
	     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
	     * to bound properties, this event fires after the grid has finished processing the change. */
	    Events.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';
	    /** All items from here down are used internally by the grid, not intended for external use. */
	    // not documented, either experimental, or we just don't want users using an depending on them
	    Events.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';
	    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';
	    Events.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';
	    Events.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';
	    Events.EVENT_FLASH_CELLS = 'flashCells';
	    Events.EVENT_ROW_DRAG_ENTER = 'rowDragEnter';
	    Events.EVENT_ROW_DRAG_MOVE = 'rowDragMove';
	    Events.EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';
	    Events.EVENT_ROW_DRAG_END = 'rowDragEnd';
	    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
	    // to design these better around server side functions and then release to general public when fully working with
	    // all the row models.
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';
	    Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';
	    Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';
	    Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';
	    return Events;
	}());
	exports.Events = Events;
	});

	unwrapExports(eventKeys);
	var eventKeys_1 = eventKeys.Events;

	var events$1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.Events = eventKeys.Events;
	});

	unwrapExports(events$1);
	var events_1 = events$1.Events;

	var propertyKeys = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var PropertyKeys = (function () {
	    function PropertyKeys() {
	    }
	    PropertyKeys.STRING_PROPERTIES = [
	        'sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate',
	        'overlayNoRowsTemplate', 'quickFilterText', 'rowModelType',
	        'editType', 'domLayout', 'clipboardDeliminator', 'rowGroupPanelShow',
	        'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals'
	    ];
	    PropertyKeys.OBJECT_PROPERTIES = [
	        'components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'groupColumnDef', 'localeText',
	        'icons', 'datasource', 'serverSideDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs',
	        'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'columnTypes',
	        'rowClassRules', 'detailGridOptions', 'detailCellRendererParams', 'loadingOverlayComponentParams',
	        'noRowsOverlayComponentParams', 'popupParent', 'colResizeDefault'
	        //,'cellRenderers','cellEditors'
	    ];
	    PropertyKeys.ARRAY_PROPERTIES = [
	        'slaveGrids', 'alignedGrids', 'rowData',
	        'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData'
	        // deprecated
	    ];
	    PropertyKeys.NUMBER_PROPERTIES = [
	        'rowHeight', 'detailRowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight',
	        'floatingFiltersHeight', 'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded',
	        'minColWidth', 'maxColWidth', 'viewportRowModelPageSize', 'viewportRowModelBufferSize',
	        'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests',
	        'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount',
	        'scrollbarWidth', 'paginationStartPage', 'infiniteBlockSize', 'batchUpdateWaitMillis'
	    ];
	    PropertyKeys.BOOLEAN_PROPERTIES = [
	        'toolPanelSuppressRowGroups', 'toolPanelSuppressValues', 'toolPanelSuppressPivots', 'toolPanelSuppressPivotMode',
	        'toolPanelSuppressSideButtons', 'toolPanelSuppressColumnFilter', 'toolPanelSuppressColumnSelectAll',
	        'toolPanelSuppressColumnExpandAll', 'suppressMakeColumnVisibleAfterUnGroup',
	        'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'debug',
	        'enableColResize', 'enableCellExpressions', 'enableSorting', 'enableServerSideSorting',
	        'enableFilter', 'enableServerSideFilter', 'angularCompileRows', 'angularCompileFilters',
	        'angularCompileHeaders', 'groupSuppressAutoColumn', 'groupSelectsChildren',
	        'groupIncludeFooter', 'groupIncludeTotalFooter', 'groupUseEntireRow', 'groupSuppressRow', 'groupSuppressBlankHeader',
	        'forPrint', 'suppressMenuHide', 'rowDeselection', 'unSortIcon', 'suppressMultiSort',
	        'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize',
	        'suppressParentsInRowNodes', 'showToolPanel', 'suppressColumnMoveAnimation', 'suppressMovableColumns',
	        'suppressFieldDotNotation', 'enableRangeSelection',
	        'pivotPanelShow', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey',
	        'suppressContextMenu', 'suppressMenuFilterPanel', 'suppressMenuMainPanel', 'suppressMenuColumnPanel',
	        'enableStatusBar', 'alwaysShowStatusBar', 'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns',
	        'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel', 'suppressUseColIdForGroups',
	        'suppressCopyRowsToClipboard', 'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel',
	        'suppressFocusAfterRefresh', 'functionsPassive', 'functionsReadOnly',
	        'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren',
	        'enableRtl', 'suppressClickEdit', 'rowDragManaged', 'suppressRowDrag',
	        'enableGroupEdit', 'embedFullWidthRows', 'suppressTabbing', 'suppressPaginationPanel', 'floatingFilter',
	        'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination', 'stopEditingWhenGridLosesFocus',
	        'paginationAutoPageSize', 'suppressScrollOnNewData', 'purgeClosedRowNodes', 'cacheQuickFilter',
	        'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'pivotTotals', 'suppressChangeDetection',
	        'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame',
	        'suppressExcelExport', 'suppressCsvExport', 'treeData', 'masterDetail', 'suppressMultiRangeSelection',
	        'enterMovesDownAfterEdit', 'enterMovesDown', 'suppressPropertyNamesCheck', 'rowMultiSelectWithClick',
	        'contractColumnSelection', 'suppressEnterpriseResetOnNewColumns', 'enableOldSetFilterModel',
	        'suppressRowHoverHighlight', 'gridAutoHeight', 'suppressRowTransform', 'suppressClipboardPaste',
	        'serverSideSortingAlwaysResets'
	    ];
	    PropertyKeys.FUNCTION_PROPERTIES = ['localeTextFunc', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework',
	        'dateComponent', 'dateComponentFramework', 'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent',
	        'getRowHeight', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle', 'getRowClassRules',
	        'traverseNode', 'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard',
	        'getNodeChildDetails', 'groupRowAggNodes', 'getRowNodeId', 'isFullWidthCell', 'fullWidthCellRenderer',
	        'fullWidthCellRendererFramework', 'doesDataFlower', 'processSecondaryColDef', 'processSecondaryColGroupDef',
	        'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextCell', 'tabToNextCell', 'getDetailRowData',
	        'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount', 'getDataPath', 'loadingOverlayComponent',
	        'loadingOverlayComponentFramework', 'noRowsOverlayComponent', 'noRowsOverlayComponentFramework', 'detailCellRenderer',
	        'detailCellRendererFramework', 'onGridReady', 'defaultGroupSortComparator', 'isRowMaster', 'isRowSelectable', 'postSort',
	        'processHeaderForClipboard', 'paginationNumberFormatter', 'processDataFromClipboard'];
	    PropertyKeys.ALL_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES
	        .concat(PropertyKeys.OBJECT_PROPERTIES)
	        .concat(PropertyKeys.STRING_PROPERTIES)
	        .concat(PropertyKeys.NUMBER_PROPERTIES)
	        .concat(PropertyKeys.FUNCTION_PROPERTIES)
	        .concat(PropertyKeys.BOOLEAN_PROPERTIES);
	    // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
	    // properties to coldefs, gridOptions etc
	    PropertyKeys.FRAMEWORK_PROPERTIES = ['__ob__', '__metadata__', 'mappedColumnProperties', 'hasChildColumns',
	        'toColDef', 'createColDefFromGridColumn'];
	    return PropertyKeys;
	}());
	exports.PropertyKeys = PropertyKeys;
	});

	unwrapExports(propertyKeys);
	var propertyKeys_1 = propertyKeys.PropertyKeys;

	var componentUtil = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });




	var ComponentUtil = (function () {
	    function ComponentUtil() {
	    }
	    ComponentUtil.getEventCallbacks = function () {
	        if (!ComponentUtil.EVENT_CALLBACKS) {
	            ComponentUtil.EVENT_CALLBACKS = [];
	            ComponentUtil.EVENT_CALLBACKS_NO_PREFIX = [];
	            ComponentUtil.EVENTS.forEach(function (eventName) {
	                ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));
	                ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.push(eventName);
	            });
	        }
	        return ComponentUtil.EVENT_CALLBACKS;
	    };
	    ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component, skipEventDeprecationCheck) {
	        if (skipEventDeprecationCheck === void 0) { skipEventDeprecationCheck = false; }
	        checkForDeprecated(component);
	        // create empty grid options if none were passed
	        if (typeof gridOptions !== 'object') {
	            gridOptions = {};
	        }
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // add in all the simple properties
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.FUNCTION_PROPERTIES)
	            .forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = component[key];
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toNumber(component[key]);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (typeof component[funcName] !== 'undefined') {
	                pGridOptions[funcName] = component[funcName];
	            }
	        });
	        // purely for event deprecation checks (for frameworks - wouldn't apply for non-fw versions)
	        if (!skipEventDeprecationCheck) {
	            ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.forEach(function (funcName) {
	                // react uses onXXX...not sure why this is diff to the other frameworks
	                var onMethodName = ComponentUtil.getCallbackForEvent(funcName);
	                if (typeof component[funcName] !== 'undefined' ||
	                    typeof component[onMethodName] !== 'undefined') {
	                    gridOptionsWrapper.GridOptionsWrapper.checkEventDeprecation(funcName);
	                }
	            });
	        }
	        return gridOptions;
	    };
	    ComponentUtil.getCallbackForEvent = function (eventName) {
	        if (!eventName || eventName.length < 2) {
	            return eventName;
	        }
	        else {
	            return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
	        }
	    };
	    ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {
	        if (!changes) {
	            return;
	        }
	        checkForDeprecated(changes);
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // check if any change for the simple types, and if so, then just copy in the new value
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = changes[key].currentValue;
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (changes[funcName]) {
	                pGridOptions[funcName] = changes[funcName].currentValue;
	            }
	        });
	        if (changes.showToolPanel) {
	            api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));
	        }
	        if (changes.quickFilterText) {
	            api.setQuickFilter(changes.quickFilterText.currentValue);
	        }
	        if (changes.rowData) {
	            api.setRowData(changes.rowData.currentValue);
	        }
	        if (changes.pinnedTopRowData) {
	            api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);
	        }
	        if (changes.pinnedBottomRowData) {
	            api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);
	        }
	        if (changes.columnDefs) {
	            api.setColumnDefs(changes.columnDefs.currentValue, "gridOptionsChanged");
	        }
	        if (changes.datasource) {
	            api.setDatasource(changes.datasource.currentValue);
	        }
	        if (changes.headerHeight) {
	            api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));
	        }
	        if (changes.paginationPageSize) {
	            api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));
	        }
	        if (changes.pivotMode) {
	            columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));
	        }
	        if (changes.groupRemoveSingleChildren) {
	            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));
	        }
	        if (changes.suppressRowDrag) {
	            api.setSuppressRowDrag(ComponentUtil.toBoolean(changes.suppressRowDrag.currentValue));
	        }
	        if (changes.gridAutoHeight) {
	            api.setGridAutoHeight(ComponentUtil.toBoolean(changes.gridAutoHeight.currentValue));
	        }
	        if (changes.suppressClipboardPaste) {
	            api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changes.suppressClipboardPaste.currentValue));
	        }
	        // copy changes into an event for dispatch
	        var event = {
	            type: events$1.Events.EVENT_COMPONENT_STATE_CHANGED,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        utils.Utils.iterateObject(changes, function (key, value) {
	            event[key] = value;
	        });
	        api.dispatchEvent(event);
	    };
	    ComponentUtil.toBoolean = function (value) {
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // for boolean, compare to empty String to allow attributes appearing with
	            // not value to be treated as 'true'
	            return value.toUpperCase() === 'TRUE' || value == '';
	        }
	        else {
	            return false;
	        }
	    };
	    ComponentUtil.toNumber = function (value) {
	        if (typeof value === 'number') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            return Number(value);
	        }
	        else {
	            return undefined;
	        }
	    };
	    // all the events are populated in here AFTER this class (at the bottom of the file).
	    ComponentUtil.EVENTS = [];
	    ComponentUtil.STRING_PROPERTIES = propertyKeys.PropertyKeys.STRING_PROPERTIES;
	    ComponentUtil.OBJECT_PROPERTIES = propertyKeys.PropertyKeys.OBJECT_PROPERTIES;
	    ComponentUtil.ARRAY_PROPERTIES = propertyKeys.PropertyKeys.ARRAY_PROPERTIES;
	    ComponentUtil.NUMBER_PROPERTIES = propertyKeys.PropertyKeys.NUMBER_PROPERTIES;
	    ComponentUtil.BOOLEAN_PROPERTIES = propertyKeys.PropertyKeys.BOOLEAN_PROPERTIES;
	    ComponentUtil.FUNCTION_PROPERTIES = propertyKeys.PropertyKeys.FUNCTION_PROPERTIES;
	    ComponentUtil.ALL_PROPERTIES = propertyKeys.PropertyKeys.ALL_PROPERTIES;
	    return ComponentUtil;
	}());
	exports.ComponentUtil = ComponentUtil;
	utils.Utils.iterateObject(events$1.Events, function (key, value) {
	    ComponentUtil.EVENTS.push(value);
	});
	function checkForDeprecated(changes) {
	    if (changes.rowDeselected || changes.onRowDeselected) {
	        console.warn('ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.');
	    }
	}
	});

	unwrapExports(componentUtil);
	var componentUtil_1 = componentUtil.ComponentUtil;

	var columnApi = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var ColumnApi = (function () {
	    function ColumnApi() {
	    }
	    ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) { this.columnController.sizeColumnsToFit(gridWidth, 'api'); };
	    ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) { this.columnController.setColumnGroupOpened(group, newValue, 'api'); };
	    ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this.columnController.getColumnGroup(name, instanceId); };
	    ColumnApi.prototype.getOriginalColumnGroup = function (name) { return this.columnController.getOriginalColumnGroup(name); };
	    ColumnApi.prototype.getDisplayNameForColumn = function (column, location) { return this.columnController.getDisplayNameForColumn(column, location); };
	    ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) { return this.columnController.getDisplayNameForColumnGroup(columnGroup, location); };
	    ColumnApi.prototype.getColumn = function (key) { return this.columnController.getPrimaryColumn(key); };
	    ColumnApi.prototype.setColumnState = function (columnState) { return this.columnController.setColumnState(columnState, 'api'); };
	    ColumnApi.prototype.getColumnState = function () { return this.columnController.getColumnState(); };
	    ColumnApi.prototype.resetColumnState = function () { this.columnController.resetColumnState('api'); };
	    ColumnApi.prototype.getColumnGroupState = function () { return this.columnController.getColumnGroupState(); };
	    ColumnApi.prototype.setColumnGroupState = function (stateItems) { this.columnController.setColumnGroupState(stateItems, 'api'); };
	    ColumnApi.prototype.resetColumnGroupState = function () { this.columnController.resetColumnGroupState('api'); };
	    ColumnApi.prototype.isPinning = function () { return this.columnController.isPinningLeft() || this.columnController.isPinningRight(); };
	    ColumnApi.prototype.isPinningLeft = function () { return this.columnController.isPinningLeft(); };
	    ColumnApi.prototype.isPinningRight = function () { return this.columnController.isPinningRight(); };
	    ColumnApi.prototype.getDisplayedColAfter = function (col) { return this.columnController.getDisplayedColAfter(col); };
	    ColumnApi.prototype.getDisplayedColBefore = function (col) { return this.columnController.getDisplayedColBefore(col); };
	    ColumnApi.prototype.setColumnVisible = function (key, visible) { this.columnController.setColumnVisible(key, visible, 'api'); };
	    ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this.columnController.setColumnsVisible(keys, visible, 'api'); };
	    ColumnApi.prototype.setColumnPinned = function (key, pinned) { this.columnController.setColumnPinned(key, pinned, 'api'); };
	    ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this.columnController.setColumnsPinned(keys, pinned, 'api'); };
	    ColumnApi.prototype.getAllColumns = function () { return this.columnController.getAllPrimaryColumns(); };
	    ColumnApi.prototype.getAllGridColumns = function () { return this.columnController.getAllGridColumns(); };
	    ColumnApi.prototype.getDisplayedLeftColumns = function () { return this.columnController.getDisplayedLeftColumns(); };
	    ColumnApi.prototype.getDisplayedCenterColumns = function () { return this.columnController.getDisplayedCenterColumns(); };
	    ColumnApi.prototype.getDisplayedRightColumns = function () { return this.columnController.getDisplayedRightColumns(); };
	    ColumnApi.prototype.getAllDisplayedColumns = function () { return this.columnController.getAllDisplayedColumns(); };
	    ColumnApi.prototype.getAllDisplayedVirtualColumns = function () { return this.columnController.getAllDisplayedVirtualColumns(); };
	    ColumnApi.prototype.moveColumn = function (key, toIndex) {
	        if (typeof key === 'number') {
	            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
	            console.log('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');
	            this.columnController.moveColumnByIndex(key, toIndex, 'api');
	        }
	        else {
	            this.columnController.moveColumn(key, toIndex, 'api');
	        }
	    };
	    ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) { this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api'); };
	    ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) { this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api'); };
	    ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this.columnController.moveRowGroupColumn(fromIndex, toIndex); };
	    ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) { this.columnController.setColumnAggFunc(column, aggFunc); };
	    ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
	        if (finished === void 0) { finished = true; }
	        this.columnController.setColumnWidth(key, newWidth, false, finished);
	    };
	    ColumnApi.prototype.setPivotMode = function (pivotMode) { this.columnController.setPivotMode(pivotMode); };
	    ColumnApi.prototype.isPivotMode = function () { return this.columnController.isPivotMode(); };
	    ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) { return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey); };
	    ColumnApi.prototype.setValueColumns = function (colKeys) { this.columnController.setValueColumns(colKeys, 'api'); };
	    ColumnApi.prototype.getValueColumns = function () { return this.columnController.getValueColumns(); };
	    ColumnApi.prototype.removeValueColumn = function (colKey) { this.columnController.removeValueColumn(colKey, 'api'); };
	    ColumnApi.prototype.removeValueColumns = function (colKeys) { this.columnController.removeValueColumns(colKeys, 'api'); };
	    ColumnApi.prototype.addValueColumn = function (colKey) { this.columnController.addValueColumn(colKey, 'api'); };
	    ColumnApi.prototype.addValueColumns = function (colKeys) { this.columnController.addValueColumns(colKeys, 'api'); };
	    ColumnApi.prototype.setRowGroupColumns = function (colKeys) { this.columnController.setRowGroupColumns(colKeys, 'api'); };
	    ColumnApi.prototype.removeRowGroupColumn = function (colKey) { this.columnController.removeRowGroupColumn(colKey, 'api'); };
	    ColumnApi.prototype.removeRowGroupColumns = function (colKeys) { this.columnController.removeRowGroupColumns(colKeys, 'api'); };
	    ColumnApi.prototype.addRowGroupColumn = function (colKey) { this.columnController.addRowGroupColumn(colKey, 'api'); };
	    ColumnApi.prototype.addRowGroupColumns = function (colKeys) { this.columnController.addRowGroupColumns(colKeys, 'api'); };
	    ColumnApi.prototype.getRowGroupColumns = function () { return this.columnController.getRowGroupColumns(); };
	    ColumnApi.prototype.setPivotColumns = function (colKeys) { this.columnController.setPivotColumns(colKeys, 'api'); };
	    ColumnApi.prototype.removePivotColumn = function (colKey) { this.columnController.removePivotColumn(colKey, 'api'); };
	    ColumnApi.prototype.removePivotColumns = function (colKeys) { this.columnController.removePivotColumns(colKeys, 'api'); };
	    ColumnApi.prototype.addPivotColumn = function (colKey) { this.columnController.addPivotColumn(colKey, 'api'); };
	    ColumnApi.prototype.addPivotColumns = function (colKeys) { this.columnController.addPivotColumns(colKeys, 'api'); };
	    ColumnApi.prototype.getPivotColumns = function () { return this.columnController.getPivotColumns(); };
	    ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this.columnController.getLeftDisplayedColumnGroups(); };
	    ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this.columnController.getCenterDisplayedColumnGroups(); };
	    ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this.columnController.getRightDisplayedColumnGroups(); };
	    ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this.columnController.getAllDisplayedColumnGroups(); };
	    ColumnApi.prototype.autoSizeColumn = function (key) { return this.columnController.autoSizeColumn(key, 'api'); };
	    ColumnApi.prototype.autoSizeColumns = function (keys) { return this.columnController.autoSizeColumns(keys, 'api'); };
	    ColumnApi.prototype.autoSizeAllColumns = function () { this.columnController.autoSizeAllColumns('api'); };
	    ColumnApi.prototype.setSecondaryColumns = function (colDefs) { this.columnController.setSecondaryColumns(colDefs, 'api'); };
	    // below goes through deprecated items, prints message to user, then calls the new version of the same method
	    ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
	        console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
	        this.setColumnGroupOpened(group, newValue);
	    };
	    ColumnApi.prototype.hideColumns = function (colIds, hide) {
	        console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');
	        this.columnController.setColumnsVisible(colIds, !hide, 'api');
	    };
	    ColumnApi.prototype.hideColumn = function (colId, hide) {
	        console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');
	        this.columnController.setColumnVisible(colId, !hide, 'api');
	    };
	    ColumnApi.prototype.setState = function (columnState) {
	        console.error('ag-Grid: setState is deprecated, use setColumnState');
	        return this.setColumnState(columnState);
	    };
	    ColumnApi.prototype.getState = function () {
	        console.error('ag-Grid: getState is deprecated, use getColumnState');
	        return this.getColumnState();
	    };
	    ColumnApi.prototype.resetState = function () {
	        console.error('ag-Grid: resetState is deprecated, use resetColumnState');
	        this.resetColumnState();
	    };
	    ColumnApi.prototype.getAggregationColumns = function () {
	        console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');
	        return this.columnController.getValueColumns();
	    };
	    ColumnApi.prototype.removeAggregationColumn = function (colKey) {
	        console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');
	        this.columnController.removeValueColumn(colKey, 'api');
	    };
	    ColumnApi.prototype.removeAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');
	        this.columnController.removeValueColumns(colKeys, 'api');
	    };
	    ColumnApi.prototype.addAggregationColumn = function (colKey) {
	        console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');
	        this.columnController.addValueColumn(colKey, 'api');
	    };
	    ColumnApi.prototype.addAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');
	        this.columnController.addValueColumns(colKeys, 'api');
	    };
	    ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {
	        console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');
	        this.columnController.setColumnAggFunc(column, aggFunc, 'api');
	    };
	    ColumnApi.prototype.getDisplayNameForCol = function (column) {
	        console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');
	        return this.getDisplayNameForColumn(column, null);
	    };
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], ColumnApi.prototype, "columnController", void 0);
	    ColumnApi = __decorate([
	        context.Bean('columnApi')
	    ], ColumnApi);
	    return ColumnApi;
	}());
	exports.ColumnApi = ColumnApi;
	});

	unwrapExports(columnApi);
	var columnApi_1 = columnApi.ColumnApi;

	var originalColumnGroup = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var OriginalColumnGroup = (function () {
	    function OriginalColumnGroup(colGroupDef, groupId, padding, level) {
	        this.localEventService = new eventService.EventService();
	        this.expandable = false;
	        this.colGroupDef = colGroupDef;
	        this.groupId = groupId;
	        this.expanded = colGroupDef && !!colGroupDef.openByDefault;
	        this.padding = padding;
	        this.level = level;
	    }
	    OriginalColumnGroup.prototype.getLevel = function () {
	        return this.level;
	    };
	    OriginalColumnGroup.prototype.isVisible = function () {
	        // return true if at least one child is visible
	        if (this.children) {
	            return this.children.some(function (child) { return child.isVisible(); });
	        }
	        else {
	            return false;
	        }
	    };
	    OriginalColumnGroup.prototype.isPadding = function () {
	        return this.padding;
	    };
	    OriginalColumnGroup.prototype.setExpanded = function (expanded) {
	        this.expanded = expanded;
	        var event = {
	            type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
	        };
	        this.localEventService.dispatchEvent(event);
	    };
	    OriginalColumnGroup.prototype.isExpandable = function () {
	        return this.expandable;
	    };
	    OriginalColumnGroup.prototype.isExpanded = function () {
	        return this.expanded;
	    };
	    OriginalColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    OriginalColumnGroup.prototype.getId = function () {
	        return this.getGroupId();
	    };
	    OriginalColumnGroup.prototype.setChildren = function (children) {
	        this.children = children;
	    };
	    OriginalColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    OriginalColumnGroup.prototype.getColGroupDef = function () {
	        return this.colGroupDef;
	    };
	    OriginalColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        if (!this.children) {
	            return;
	        }
	        this.children.forEach(function (child) {
	            if (child instanceof column.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof OriginalColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    OriginalColumnGroup.prototype.getColumnGroupShow = function () {
	        if (!this.padding) {
	            return this.colGroupDef.columnGroupShow;
	        }
	        else {
	            // if this is padding we have exactly only child. we then
	            // take the value from the child and push it up, making
	            // this group 'invisible'.
	            return this.children[0].getColumnGroupShow();
	        }
	    };
	    // need to check that this group has at least one col showing when both expanded and contracted.
	    // if not, then we don't allow expanding and contracting on this group
	    OriginalColumnGroup.prototype.setupExpandable = function () {
	        var _this = this;
	        this.setExpandable();
	        // note - we should be removing this event listener
	        this.getLeafColumns().forEach(function (col) { return col.addEventListener(column.Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this)); });
	    };
	    OriginalColumnGroup.prototype.setExpandable = function () {
	        // want to make sure the group doesn't disappear when it's open
	        var atLeastOneShowingWhenOpen = false;
	        // want to make sure the group doesn't disappear when it's closed
	        var atLeastOneShowingWhenClosed = false;
	        // want to make sure the group has something to show / hide
	        var atLeastOneChangeable = false;
	        for (var i = 0, j = this.children.length; i < j; i++) {
	            var abstractColumn = this.children[i];
	            if (!abstractColumn.isVisible()) {
	                continue;
	            }
	            // if the abstractColumn is a grid generated group, there will be no colDef
	            var headerGroupShow = abstractColumn.getColumnGroupShow();
	            if (headerGroupShow === columnGroup.ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneChangeable = true;
	            }
	            else if (headerGroupShow === columnGroup.ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
	                atLeastOneShowingWhenClosed = true;
	                atLeastOneChangeable = true;
	            }
	            else {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneShowingWhenClosed = true;
	            }
	        }
	        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
	        if (this.expandable !== expandable) {
	            this.expandable = expandable;
	            var event_1 = {
	                type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
	            };
	            this.localEventService.dispatchEvent(event_1);
	        }
	    };
	    OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {
	        this.setExpandable();
	    };
	    OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], OriginalColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], OriginalColumnGroup.prototype, "gridApi", void 0);
	    return OriginalColumnGroup;
	}());
	exports.OriginalColumnGroup = OriginalColumnGroup;
	});

	unwrapExports(originalColumnGroup);
	var originalColumnGroup_1 = originalColumnGroup.OriginalColumnGroup;

	var columnUtils = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var context_2 = context;
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var ColumnUtils = (function () {
	    function ColumnUtils() {
	    }
	    ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
	        if (!colDef.width) {
	            // if no width defined in colDef, use default
	            return this.gridOptionsWrapper.getColWidth();
	        }
	        else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {
	            // if width in col def to small, set to min width
	            return this.gridOptionsWrapper.getMinColWidth();
	        }
	        else {
	            // otherwise use the provided width
	            return colDef.width;
	        }
	    };
	    ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {
	        var result = [];
	        var found = false;
	        recursePath(originalBalancedTree, 0);
	        // we should always find the path, but in case there is a bug somewhere, returning null
	        // will make it fail rather than provide a 'hard to track down' bug
	        if (found) {
	            return result;
	        }
	        else {
	            return null;
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {
	            let result: ColumnGroup[] = [];
	            let found = false;
	    
	            recursePath(allDisplayedColumnGroups, 0);
	    
	            // we should always find the path, but in case there is a bug somewhere, returning null
	            // will make it fail rather than provide a 'hard to track down' bug
	            if (found) {
	                return result;
	            } else {
	                return null;
	            }
	    
	            function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {
	    
	                for (let i = 0; i<balancedColumnTree.length; i++) {
	                    if (found) {
	                        // quit the search, so 'result' is kept with the found result
	                        return;
	                    }
	                    let node = balancedColumnTree[i];
	                    if (node instanceof ColumnGroup) {
	                        let nextNode = <ColumnGroup> node;
	                        recursePath(nextNode.getChildren(), dept+1);
	                        result[dept] = node;
	                    } else {
	                        if (node === column) {
	                            found = true;
	                        }
	                    }
	                }
	            }
	        }*/
	    ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof originalColumnGroup.OriginalColumnGroup) {
	                _this.depthFirstOriginalTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup.ColumnGroup) {
	                _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup.ColumnGroup) {
	                _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ColumnUtils.prototype, "gridOptionsWrapper", void 0);
	    ColumnUtils = __decorate([
	        context.Bean('columnUtils')
	    ], ColumnUtils);
	    return ColumnUtils;
	}());
	exports.ColumnUtils = ColumnUtils;
	});

	unwrapExports(columnUtils);
	var columnUtils_1 = columnUtils.ColumnUtils;

	var column = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	// Wrapper around a user provide column definition. The grid treats the column definition as ready only.
	// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
	// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
	// appear as a child of either the original tree or the displayed tree. However the relevant group classes
	// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
	// can only appear in OriginalColumn tree).
	var Column = (function () {
	    function Column(colDef, colId, primary) {
	        this.moving = false;
	        this.menuVisible = false;
	        this.filterActive = false;
	        this.eventService = new eventService.EventService();
	        this.rowGroupActive = false;
	        this.pivotActive = false;
	        this.aggregationActive = false;
	        this.colDef = colDef;
	        this.visible = !colDef.hide;
	        this.sort = colDef.sort;
	        this.sortedAt = colDef.sortedAt;
	        this.colId = colId;
	        this.primary = primary;
	        this.lockPosition = colDef.lockPosition === true;
	        this.lockPinned = colDef.lockPinned === true;
	        this.lockVisible = colDef.lockVisible === true;
	    }
	    Column.prototype.isLockPosition = function () {
	        return this.lockPosition;
	    };
	    Column.prototype.isLockVisible = function () {
	        return this.lockVisible;
	    };
	    Column.prototype.isLockPinned = function () {
	        return this.lockPinned;
	    };
	    Column.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    Column.prototype.getParent = function () {
	        return this.parent;
	    };
	    // this is done after constructor as it uses gridOptionsWrapper
	    Column.prototype.initialise = function () {
	        this.setPinned(this.colDef.pinned);
	        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
	        var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
	        if (this.colDef.minWidth) {
	            this.minWidth = this.colDef.minWidth;
	        }
	        else {
	            this.minWidth = minColWidth;
	        }
	        if (this.colDef.maxWidth) {
	            this.maxWidth = this.colDef.maxWidth;
	        }
	        else {
	            this.maxWidth = maxColWidth;
	        }
	        this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
	        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
	        this.fieldContainsDots = utils.Utils.exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;
	        this.tooltipFieldContainsDots = utils.Utils.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;
	        this.validate();
	    };
	    Column.prototype.isEmptyGroup = function () {
	        return false;
	    };
	    Column.prototype.isRowGroupDisplayed = function (colId) {
	        if (utils.Utils.missing(this.colDef) || utils.Utils.missing(this.colDef.showRowGroup)) {
	            return false;
	        }
	        var showingAllGroups = this.colDef.showRowGroup === true;
	        var showingThisGroup = this.colDef.showRowGroup === colId;
	        return showingAllGroups || showingThisGroup;
	    };
	    Column.prototype.getUniqueId = function () {
	        return this.getId();
	    };
	    Column.prototype.isPrimary = function () {
	        return this.primary;
	    };
	    Column.prototype.isFilterAllowed = function () {
	        return this.primary && !this.colDef.suppressFilter;
	    };
	    Column.prototype.isFieldContainsDots = function () {
	        return this.fieldContainsDots;
	    };
	    Column.prototype.isTooltipFieldContainsDots = function () {
	        return this.tooltipFieldContainsDots;
	    };
	    Column.prototype.validate = function () {
	        var colDefAny = this.colDef;
	        if (!this.gridOptionsWrapper.isEnterprise()) {
	            var itemsNotAllowedWithoutEnterprise = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'pivot', 'pivotIndex', 'aggFunc'];
	            itemsNotAllowedWithoutEnterprise.forEach(function (item) {
	                if (utils.Utils.exists(colDefAny[item])) {
	                    console.warn("ag-Grid: " + item + " is only valid in ag-Grid-Enterprise, your column definition should not have " + item);
	                }
	            });
	        }
	        if (this.gridOptionsWrapper.isTreeData()) {
	            var itemsNotAllowedWithTreeData = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'pivot', 'pivotIndex'];
	            itemsNotAllowedWithTreeData.forEach(function (item) {
	                if (utils.Utils.exists(colDefAny[item])) {
	                    console.warn("ag-Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item);
	                }
	            });
	        }
	        if (utils.Utils.exists(this.colDef.width) && typeof this.colDef.width !== 'number') {
	            console.warn('ag-Grid: colDef.width should be a number, not ' + typeof this.colDef.width);
	        }
	        if (utils.Utils.get(this, 'colDef.cellRendererParams.restrictToOneGroup', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup');
	        }
	        if (utils.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        if (utils.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        if (colDefAny.floatingCellRenderer) {
	            console.warn('ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer');
	            this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;
	        }
	        if (colDefAny.floatingRendererFramework) {
	            console.warn('ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework');
	            this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;
	        }
	        if (colDefAny.floatingRendererParams) {
	            console.warn('ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams');
	            this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;
	        }
	        if (colDefAny.floatingValueFormatter) {
	            console.warn('ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter');
	            this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;
	        }
	        if (colDefAny.cellFormatter) {
	            console.warn('ag-Grid: since v12, cellFormatter is now valueFormatter');
	            if (utils.Utils.missing(this.colDef.valueFormatter)) {
	                this.colDef.valueFormatter = colDefAny.cellFormatter;
	            }
	        }
	        if (colDefAny.headerCellTemplate) {
	            console.warn('ag-Grid: since v15, headerCellTemplate is gone, use header component instead.');
	        }
	        if (colDefAny.headerCellRenderer) {
	            console.warn('ag-Grid: since v15, headerCellRenderer is gone, use header component instead.');
	        }
	        if (colDefAny.volatile) {
	            console.warn('ag-Grid: since v16, colDef.volatile is gone, please check refresh docs on how to refresh specific cells.');
	        }
	    };
	    Column.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    Column.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    Column.prototype.createIsColumnFuncParams = function (rowNode) {
	        return {
	            node: rowNode,
	            data: rowNode.data,
	            column: this,
	            colDef: this.colDef,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	    };
	    Column.prototype.isSuppressNavigable = function (rowNode) {
	        // if boolean set, then just use it
	        if (typeof this.colDef.suppressNavigable === 'boolean') {
	            return this.colDef.suppressNavigable;
	        }
	        // if function, then call the function to find out
	        if (typeof this.colDef.suppressNavigable === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var userFunc = this.colDef.suppressNavigable;
	            return userFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.isCellEditable = function (rowNode) {
	        // only allow editing of groups if the user has this option enabled
	        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
	            return false;
	        }
	        return this.isColumnFunc(rowNode, this.colDef.editable);
	    };
	    Column.prototype.isRowDrag = function (rowNode) {
	        return this.isColumnFunc(rowNode, this.colDef.rowDrag);
	    };
	    Column.prototype.isCellCheckboxSelection = function (rowNode) {
	        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
	    };
	    Column.prototype.isSuppressPaste = function (rowNode) {
	        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
	    };
	    Column.prototype.isResizable = function () {
	        var enableColResize = this.gridOptionsWrapper.isEnableColResize();
	        var suppressResize = this.colDef && this.colDef.suppressResize;
	        return enableColResize && !suppressResize;
	    };
	    Column.prototype.isColumnFunc = function (rowNode, value) {
	        // if boolean set, then just use it
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        // if function, then call the function to find out
	        if (typeof value === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var editableFunc = value;
	            return editableFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.setMoving = function (moving, source) {
	        if (source === void 0) { source = "api"; }
	        this.moving = moving;
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));
	    };
	    Column.prototype.createColumnEvent = function (type, source) {
	        return {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            type: type,
	            column: this,
	            columns: [this],
	            source: source
	        };
	    };
	    Column.prototype.isMoving = function () {
	        return this.moving;
	    };
	    Column.prototype.getSort = function () {
	        return this.sort;
	    };
	    Column.prototype.setSort = function (sort, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.sort !== sort) {
	            this.sort = sort;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));
	        }
	    };
	    Column.prototype.setMenuVisible = function (visible, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.menuVisible !== visible) {
	            this.menuVisible = visible;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));
	        }
	    };
	    Column.prototype.isMenuVisible = function () {
	        return this.menuVisible;
	    };
	    Column.prototype.isSortAscending = function () {
	        return this.sort === Column.SORT_ASC;
	    };
	    Column.prototype.isSortDescending = function () {
	        return this.sort === Column.SORT_DESC;
	    };
	    Column.prototype.isSortNone = function () {
	        return utils.Utils.missing(this.sort);
	    };
	    Column.prototype.isSorting = function () {
	        return utils.Utils.exists(this.sort);
	    };
	    Column.prototype.getSortedAt = function () {
	        return this.sortedAt;
	    };
	    Column.prototype.setSortedAt = function (sortedAt) {
	        this.sortedAt = sortedAt;
	    };
	    Column.prototype.setAggFunc = function (aggFunc) {
	        this.aggFunc = aggFunc;
	    };
	    Column.prototype.getAggFunc = function () {
	        return this.aggFunc;
	    };
	    Column.prototype.getLeft = function () {
	        return this.left;
	    };
	    Column.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    Column.prototype.getRight = function () {
	        return this.left + this.actualWidth;
	    };
	    Column.prototype.setLeft = function (left, source) {
	        if (source === void 0) { source = "api"; }
	        this.oldLeft = this.left;
	        if (this.left !== left) {
	            this.left = left;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));
	        }
	    };
	    Column.prototype.isFilterActive = function () {
	        return this.filterActive;
	    };
	    Column.prototype.setFilterActive = function (active, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.filterActive !== active) {
	            this.filterActive = active;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));
	        }
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source));
	    };
	    Column.prototype.setPinned = function (pinned) {
	        if (pinned === true || pinned === Column.PINNED_LEFT) {
	            this.pinned = Column.PINNED_LEFT;
	        }
	        else if (pinned === Column.PINNED_RIGHT) {
	            this.pinned = Column.PINNED_RIGHT;
	        }
	        else {
	            this.pinned = null;
	        }
	    };
	    Column.prototype.setFirstRightPinned = function (firstRightPinned, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
	        }
	    };
	    Column.prototype.setLastLeftPinned = function (lastLeftPinned, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));
	        }
	    };
	    Column.prototype.isFirstRightPinned = function () {
	        return this.firstRightPinned;
	    };
	    Column.prototype.isLastLeftPinned = function () {
	        return this.lastLeftPinned;
	    };
	    Column.prototype.isPinned = function () {
	        return this.pinned === Column.PINNED_LEFT || this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.isPinnedLeft = function () {
	        return this.pinned === Column.PINNED_LEFT;
	    };
	    Column.prototype.isPinnedRight = function () {
	        return this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.getPinned = function () {
	        return this.pinned;
	    };
	    Column.prototype.setVisible = function (visible, source) {
	        if (source === void 0) { source = "api"; }
	        var newValue = visible === true;
	        if (this.visible !== newValue) {
	            this.visible = newValue;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));
	        }
	    };
	    Column.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Column.prototype.getColDef = function () {
	        return this.colDef;
	    };
	    Column.prototype.getColumnGroupShow = function () {
	        return this.colDef.columnGroupShow;
	    };
	    Column.prototype.getColId = function () {
	        return this.colId;
	    };
	    Column.prototype.getId = function () {
	        return this.getColId();
	    };
	    Column.prototype.getDefinition = function () {
	        return this.colDef;
	    };
	    Column.prototype.getActualWidth = function () {
	        return this.actualWidth;
	    };
	    Column.prototype.createBaseColDefParams = function (rowNode) {
	        var params = {
	            node: rowNode,
	            data: rowNode.data,
	            colDef: this.colDef,
	            column: this,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext()
	        };
	        return params;
	    };
	    Column.prototype.getColSpan = function (rowNode) {
	        if (utils.Utils.missing(this.colDef.colSpan)) {
	            return 1;
	        }
	        else {
	            var params = this.createBaseColDefParams(rowNode);
	            var colSpan = this.colDef.colSpan(params);
	            // colSpan must be number equal to or greater than 1
	            if (colSpan > 1) {
	                return colSpan;
	            }
	            else {
	                return 1;
	            }
	        }
	    };
	    Column.prototype.getRowSpan = function (rowNode) {
	        if (utils.Utils.missing(this.colDef.rowSpan)) {
	            return 1;
	        }
	        else {
	            var params = this.createBaseColDefParams(rowNode);
	            var rowSpan = this.colDef.rowSpan(params);
	            // rowSpan must be number equal to or greater than 1
	            if (rowSpan > 1) {
	                return rowSpan;
	            }
	            else {
	                return 1;
	            }
	        }
	    };
	    Column.prototype.setActualWidth = function (actualWidth, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.actualWidth !== actualWidth) {
	            this.actualWidth = actualWidth;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));
	        }
	    };
	    Column.prototype.isGreaterThanMax = function (width) {
	        if (this.maxWidth) {
	            return width > this.maxWidth;
	        }
	        else {
	            return false;
	        }
	    };
	    Column.prototype.getMinWidth = function () {
	        return this.minWidth;
	    };
	    Column.prototype.getMaxWidth = function () {
	        return this.maxWidth;
	    };
	    Column.prototype.setMinimum = function (source) {
	        if (source === void 0) { source = "api"; }
	        this.setActualWidth(this.minWidth, source);
	    };
	    Column.prototype.setRowGroupActive = function (rowGroup, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.rowGroupActive !== rowGroup) {
	            this.rowGroupActive = rowGroup;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));
	        }
	    };
	    Column.prototype.isRowGroupActive = function () {
	        return this.rowGroupActive;
	    };
	    Column.prototype.setPivotActive = function (pivot, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.pivotActive !== pivot) {
	            this.pivotActive = pivot;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));
	        }
	    };
	    Column.prototype.isPivotActive = function () {
	        return this.pivotActive;
	    };
	    Column.prototype.isAnyFunctionActive = function () {
	        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
	    };
	    Column.prototype.isAnyFunctionAllowed = function () {
	        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
	    };
	    Column.prototype.setValueActive = function (value, source) {
	        if (source === void 0) { source = "api"; }
	        if (this.aggregationActive !== value) {
	            this.aggregationActive = value;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));
	        }
	    };
	    Column.prototype.isValueActive = function () {
	        return this.aggregationActive;
	    };
	    Column.prototype.isAllowPivot = function () {
	        return this.colDef.enablePivot === true;
	    };
	    Column.prototype.isAllowValue = function () {
	        return this.colDef.enableValue === true;
	    };
	    Column.prototype.isAllowRowGroup = function () {
	        return this.colDef.enableRowGroup === true;
	    };
	    Column.prototype.getMenuTabs = function (defaultValues) {
	        var menuTabs = this.getColDef().menuTabs;
	        if (menuTabs == null) {
	            menuTabs = defaultValues;
	        }
	        return menuTabs;
	    };
	    // + renderedHeaderCell - for making header cell transparent when moving
	    Column.EVENT_MOVING_CHANGED = 'movingChanged';
	    // + renderedCell - changing left position
	    Column.EVENT_LEFT_CHANGED = 'leftChanged';
	    // + renderedCell - changing width
	    Column.EVENT_WIDTH_CHANGED = 'widthChanged';
	    // + renderedCell - for changing pinned classes
	    Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';
	    Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';
	    // + renderedColumn - for changing visibility icon
	    Column.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    // + every time the filter changes, used in the floating filters
	    Column.EVENT_FILTER_CHANGED = 'filterChanged';
	    // + renderedHeaderCell - marks the header with filter icon
	    Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';
	    // + renderedHeaderCell - marks the header with sort icon
	    Column.EVENT_SORT_CHANGED = 'sortChanged';
	    Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_VALUE_CHANGED = 'columnValueChanged';
	    Column.PINNED_RIGHT = 'right';
	    Column.PINNED_LEFT = 'left';
	    Column.SORT_ASC = 'asc';
	    Column.SORT_DESC = 'desc';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], Column.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils.ColumnUtils)
	    ], Column.prototype, "columnUtils", void 0);
	    __decorate([
	        context.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], Column.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], Column.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], Column.prototype, "gridApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Column.prototype, "initialise", null);
	    return Column;
	}());
	exports.Column = Column;
	});

	unwrapExports(column);
	var column_1 = column.Column;

	var columnGroup = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var ColumnGroup = (function () {
	    function ColumnGroup(originalColumnGroup, groupId, instanceId) {
	        // depends on the open/closed state of the group, only displaying columns are stored here
	        this.displayedChildren = [];
	        this.localEventService = new eventService.EventService();
	        this.groupId = groupId;
	        this.instanceId = instanceId;
	        this.originalColumnGroup = originalColumnGroup;
	    }
	    // this is static, a it is used outside of this class
	    ColumnGroup.createUniqueId = function (groupId, instanceId) {
	        return groupId + '_' + instanceId;
	    };
	    // as the user is adding and removing columns, the groups are recalculated.
	    // this reset clears out all children, ready for children to be added again
	    ColumnGroup.prototype.reset = function () {
	        this.parent = null;
	        this.children = null;
	        this.displayedChildren = null;
	    };
	    ColumnGroup.prototype.getParent = function () {
	        return this.parent;
	    };
	    ColumnGroup.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    ColumnGroup.prototype.getUniqueId = function () {
	        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
	    };
	    ColumnGroup.prototype.isEmptyGroup = function () {
	        return this.displayedChildren.length === 0;
	    };
	    ColumnGroup.prototype.isMoving = function () {
	        var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();
	        if (!allLeafColumns || allLeafColumns.length === 0) {
	            return false;
	        }
	        var allMoving = true;
	        allLeafColumns.forEach(function (col) {
	            if (!col.isMoving()) {
	                allMoving = false;
	            }
	        });
	        return allMoving;
	    };
	    ColumnGroup.prototype.checkLeft = function () {
	        // first get all children to setLeft, as it impacts our decision below
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof ColumnGroup) {
	                child.checkLeft();
	            }
	        });
	        // set our left based on first displayed column
	        if (this.displayedChildren.length > 0) {
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                var lastChild = this.displayedChildren[this.displayedChildren.length - 1];
	                var lastChildLeft = lastChild.getLeft();
	                this.setLeft(lastChildLeft);
	            }
	            else {
	                var firstChildLeft = this.displayedChildren[0].getLeft();
	                this.setLeft(firstChildLeft);
	            }
	        }
	        else {
	            // this should never happen, as if we have no displayed columns, then
	            // this groups should not even exist.
	            this.setLeft(null);
	        }
	    };
	    ColumnGroup.prototype.getLeft = function () {
	        return this.left;
	    };
	    ColumnGroup.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    ColumnGroup.prototype.setLeft = function (left) {
	        this.oldLeft = left;
	        if (this.left !== left) {
	            this.left = left;
	            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
	        }
	    };
	    ColumnGroup.prototype.createAgEvent = function (type) {
	        return {
	            type: type,
	        };
	    };
	    ColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    ColumnGroup.prototype.getInstanceId = function () {
	        return this.instanceId;
	    };
	    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
	        var result = false;
	        this.children.forEach(function (foundChild) {
	            if (wantedChild === foundChild) {
	                result = true;
	            }
	            if (foundChild instanceof ColumnGroup) {
	                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
	                    result = true;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getActualWidth = function () {
	        var groupActualWidth = 0;
	        if (this.displayedChildren) {
	            this.displayedChildren.forEach(function (child) {
	                groupActualWidth += child.getActualWidth();
	            });
	        }
	        return groupActualWidth;
	    };
	    ColumnGroup.prototype.isResizable = function () {
	        if (!this.displayedChildren) {
	            return false;
	        }
	        // if at least one child is resizable, then the group is resizable
	        var result = false;
	        this.displayedChildren.forEach(function (child) {
	            if (child.isResizable()) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getMinWidth = function () {
	        var result = 0;
	        this.displayedChildren.forEach(function (groupChild) {
	            result += groupChild.getMinWidth();
	        });
	        return result;
	    };
	    ColumnGroup.prototype.addChild = function (child) {
	        if (!this.children) {
	            this.children = [];
	        }
	        this.children.push(child);
	    };
	    ColumnGroup.prototype.getDisplayedChildren = function () {
	        return this.displayedChildren;
	    };
	    ColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    ColumnGroup.prototype.getDisplayedLeafColumns = function () {
	        var result = [];
	        this.addDisplayedLeafColumns(result);
	        return result;
	    };
	    // why two methods here doing the same thing?
	    ColumnGroup.prototype.getDefinition = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.getColGroupDef = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.isPadding = function () {
	        return this.originalColumnGroup.isPadding();
	    };
	    ColumnGroup.prototype.isExpandable = function () {
	        return this.originalColumnGroup.isExpandable();
	    };
	    ColumnGroup.prototype.isExpanded = function () {
	        return this.originalColumnGroup.isExpanded();
	    };
	    ColumnGroup.prototype.setExpanded = function (expanded) {
	        this.originalColumnGroup.setExpanded(expanded);
	    };
	    ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof column.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addDisplayedLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        this.children.forEach(function (child) {
	            if (child instanceof column.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    ColumnGroup.prototype.getColumnGroupShow = function () {
	        return this.originalColumnGroup.getColumnGroupShow();
	    };
	    ColumnGroup.prototype.getOriginalColumnGroup = function () {
	        return this.originalColumnGroup;
	    };
	    ColumnGroup.prototype.calculateDisplayedColumns = function () {
	        var _this = this;
	        // clear out last time we calculated
	        this.displayedChildren = [];
	        // it not expandable, everything is visible
	        if (!this.originalColumnGroup.isExpandable()) {
	            this.displayedChildren = this.children;
	        }
	        else {
	            // and calculate again
	            this.children.forEach(function (abstractColumn) {
	                var headerGroupShow = abstractColumn.getColumnGroupShow();
	                switch (headerGroupShow) {
	                    case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
	                        // when set to open, only show col if group is open
	                        if (_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
	                        // when set to open, only show col if group is open
	                        if (!_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    default:
	                        // default is always show the column
	                        _this.displayedChildren.push(abstractColumn);
	                        break;
	                }
	            });
	        }
	        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
	    };
	    ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';
	    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';
	    ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';
	    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ColumnGroup.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], ColumnGroup.prototype, "gridApi", void 0);
	    return ColumnGroup;
	}());
	exports.ColumnGroup = ColumnGroup;
	});

	unwrapExports(columnGroup);
	var columnGroup_1 = columnGroup.ColumnGroup;

	var expressionService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var context_2 = context;
	var ExpressionService = (function () {
	    function ExpressionService() {
	        this.expressionToFunctionCache = {};
	    }
	    ExpressionService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ExpressionService');
	    };
	    ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {
	        if (typeof expressionOrFunc === 'function') {
	            // valueGetter is a function, so just call it
	            var func = expressionOrFunc;
	            return func(params);
	        }
	        else if (typeof expressionOrFunc === 'string') {
	            // valueGetter is an expression, so execute the expression
	            var expression = expressionOrFunc;
	            return this.evaluateExpression(expression, params);
	        }
	        else {
	            console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);
	        }
	    };
	    ExpressionService.prototype.evaluateExpression = function (expression, params) {
	        try {
	            var javaScriptFunction = this.createExpressionFunction(expression);
	            // the params don't have all these values, rather we add every possible
	            // value a params can have, which makes whatever is in the params available.
	            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
	            return result;
	        }
	        catch (e) {
	            // the expression failed, which can happen, as it's the client that
	            // provides the expression. so print a nice message
	            console.log('Processing of the expression failed');
	            console.log('Expression = ' + expression);
	            console.log('Exception = ' + e);
	            return null;
	        }
	    };
	    ExpressionService.prototype.createExpressionFunction = function (expression) {
	        // check cache first
	        if (this.expressionToFunctionCache[expression]) {
	            return this.expressionToFunctionCache[expression];
	        }
	        // if not found in cache, return the function
	        var functionBody = this.createFunctionBody(expression);
	        var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);
	        // store in cache
	        this.expressionToFunctionCache[expression] = theFunction;
	        return theFunction;
	    };
	    ExpressionService.prototype.createFunctionBody = function (expression) {
	        // if the expression has the 'return' word in it, then use as is,
	        // if not, then wrap it with return and ';' to make a function
	        if (expression.indexOf('return') >= 0) {
	            return expression;
	        }
	        else {
	            return 'return ' + expression + ';';
	        }
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ExpressionService.prototype, "setBeans", null);
	    ExpressionService = __decorate([
	        context.Bean('expressionService')
	    ], ExpressionService);
	    return ExpressionService;
	}());
	exports.ExpressionService = ExpressionService;
	});

	unwrapExports(expressionService);
	var expressionService_1 = expressionService.ExpressionService;

	var displayedGroupCreator = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var context_2 = context;
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var DisplayedGroupCreator = (function () {
	    function DisplayedGroupCreator() {
	    }
	    DisplayedGroupCreator.prototype.createDisplayedGroups = function (
	        // all displayed columns sorted - this is the columns the grid should show
	        sortedVisibleColumns, 
	        // the tree of columns, as provided by the users, used to know what groups columns roll up into
	        balancedColumnTree, 
	        // create's unique id's for the group
	        groupInstanceIdCreator, 
	        // we try to reuse old groups if we can, to allow gui to do animation
	        oldDisplayedGroups) {
	        var _this = this;
	        var result = [];
	        var previousRealPath;
	        var previousOriginalPath;
	        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
	        // go through each column, then do a bottom up comparison to the previous column, and start
	        // to share groups if they converge at any point.
	        sortedVisibleColumns.forEach(function (currentColumn) {
	            var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
	            var currentRealPath = [];
	            var firstColumn = !previousOriginalPath;
	            for (var i = 0; i < currentOriginalPath.length; i++) {
	                if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
	                    // new group needed
	                    var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped);
	                    currentRealPath[i] = newGroup;
	                    // if top level, add to result, otherwise add to parent
	                    if (i == 0) {
	                        result.push(newGroup);
	                    }
	                    else {
	                        currentRealPath[i - 1].addChild(newGroup);
	                    }
	                }
	                else {
	                    // reuse old group
	                    currentRealPath[i] = previousRealPath[i];
	                }
	            }
	            var noColumnGroups = currentRealPath.length === 0;
	            if (noColumnGroups) {
	                // if we are not grouping, then the result of the above is an empty
	                // path (no groups), and we just add the column to the root list.
	                result.push(currentColumn);
	            }
	            else {
	                var leafGroup = currentRealPath[currentRealPath.length - 1];
	                leafGroup.addChild(currentColumn);
	            }
	            previousRealPath = currentRealPath;
	            previousOriginalPath = currentOriginalPath;
	        });
	        this.setupParentsIntoColumns(result, null);
	        return result;
	    };
	    DisplayedGroupCreator.prototype.createColumnGroup = function (originalGroup, groupInstanceIdCreator, oldColumnsMapped) {
	        var groupId = originalGroup.getGroupId();
	        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
	        var uniqueId = columnGroup.ColumnGroup.createUniqueId(groupId, instanceId);
	        var columnGroup$$1 = oldColumnsMapped[uniqueId];
	        // if the user is setting new colDefs, it is possible that the id's overlap, and we
	        // would have a false match from above. so we double check we are talking about the
	        // same original column group.
	        if (columnGroup$$1 && columnGroup$$1.getOriginalColumnGroup() !== originalGroup) {
	            columnGroup$$1 = null;
	        }
	        if (utils.Utils.exists(columnGroup$$1)) {
	            // clean out the old column group here, as we will be adding children into it again
	            columnGroup$$1.reset();
	        }
	        else {
	            columnGroup$$1 = new columnGroup.ColumnGroup(originalGroup, groupId, instanceId);
	            this.context.wireBean(columnGroup$$1);
	        }
	        return columnGroup$$1;
	    };
	    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
	    DisplayedGroupCreator.prototype.mapOldGroupsById = function (displayedGroups) {
	        var result = {};
	        var recursive = function (columnsOrGroups) {
	            columnsOrGroups.forEach(function (columnOrGroup) {
	                if (columnOrGroup instanceof columnGroup.ColumnGroup) {
	                    var columnGroup$$1 = columnOrGroup;
	                    result[columnOrGroup.getUniqueId()] = columnGroup$$1;
	                    recursive(columnGroup$$1.getChildren());
	                }
	            });
	        };
	        if (displayedGroups) {
	            recursive(displayedGroups);
	        }
	        return result;
	    };
	    DisplayedGroupCreator.prototype.setupParentsIntoColumns = function (columnsOrGroups, parent) {
	        var _this = this;
	        columnsOrGroups.forEach(function (columnsOrGroup) {
	            columnsOrGroup.setParent(parent);
	            if (columnsOrGroup instanceof columnGroup.ColumnGroup) {
	                var columnGroup$$1 = columnsOrGroup;
	                _this.setupParentsIntoColumns(columnGroup$$1.getChildren(), columnGroup$$1);
	            }
	        });
	    };
	    // private createFakePath(balancedColumnTree: OriginalColumnGroupChild[], column: Column): OriginalColumnGroup[] {
	    //     let fakePath: OriginalColumnGroup[] = [];
	    //     let currentChildren = balancedColumnTree;
	    //     // this while loop does search on the balanced tree, so our result is the right length
	    //     let index = 0;
	    //     while (currentChildren && currentChildren[0] && currentChildren[0] instanceof OriginalColumnGroup) {
	    //         // putting in a deterministic fake id, in case the API in the future needs to reference the col
	    //         let fakeGroup = new OriginalColumnGroup(null, 'FAKE_PATH_' + index, true);
	    //         this.context.wireBean(fakeGroup);
	    //
	    //         // fakePath.setChildren(children);
	    //
	    //         fakePath.push(fakeGroup);
	    //         currentChildren = (<OriginalColumnGroup>currentChildren[0]).getChildren();
	    //         index++;
	    //     }
	    //
	    //     fakePath.forEach( (fakePathGroup: OriginalColumnGroup, i: number) => {
	    //         let lastItemInList = i === fakePath.length-1;
	    //         let child = lastItemInList ? column : fakePath[i+1];
	    //         fakePathGroup.setChildren([child]);
	    //     });
	    //
	    //     return fakePath;
	    // }
	    DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
	        var result = [];
	        var found = false;
	        recursePath(balancedColumnTree, 0);
	        // it's possible we didn't find a path. this happens if the column is generated
	        // by the grid (auto-group), in that the definition didn't come from the client. in this case,
	        // we create a fake original path.
	        if (found) {
	            return result;
	        }
	        else {
	            console.log('could not get path');
	            return null;
	            // return this.createFakePath(balancedColumnTree, column);
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    __decorate([
	        context_2.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils.ColumnUtils)
	    ], DisplayedGroupCreator.prototype, "columnUtils", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], DisplayedGroupCreator.prototype, "context", void 0);
	    DisplayedGroupCreator = __decorate([
	        context.Bean('displayedGroupCreator')
	    ], DisplayedGroupCreator);
	    return DisplayedGroupCreator;
	}());
	exports.DisplayedGroupCreator = DisplayedGroupCreator;
	});

	unwrapExports(displayedGroupCreator);
	var displayedGroupCreator_1 = displayedGroupCreator.DisplayedGroupCreator;

	var templateService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var context_2 = context;
	var TemplateService = (function () {
	    function TemplateService() {
	        this.templateCache = {};
	        this.waitingCallbacks = {};
	    }
	    // returns the template if it is loaded, or null if it is not loaded
	    // but will call the callback when it is loaded
	    TemplateService.prototype.getTemplate = function (url, callback) {
	        var templateFromCache = this.templateCache[url];
	        if (templateFromCache) {
	            return templateFromCache;
	        }
	        var callbackList = this.waitingCallbacks[url];
	        var that = this;
	        if (!callbackList) {
	            // first time this was called, so need a new list for callbacks
	            callbackList = [];
	            this.waitingCallbacks[url] = callbackList;
	            // and also need to do the http request
	            var client = new XMLHttpRequest();
	            client.onload = function () {
	                that.handleHttpResult(this, url);
	            };
	            client.open("GET", url);
	            client.send();
	        }
	        // add this callback
	        if (callback) {
	            callbackList.push(callback);
	        }
	        // caller needs to wait for template to load, so return null
	        return null;
	    };
	    TemplateService.prototype.handleHttpResult = function (httpResult, url) {
	        if (httpResult.status !== 200 || httpResult.response === null) {
	            console.warn('Unable to get template error ' + httpResult.status + ' - ' + url);
	            return;
	        }
	        // response success, so process it
	        // in IE9 the response is in - responseText
	        this.templateCache[url] = httpResult.response || httpResult.responseText;
	        // inform all listeners that this is now in the cache
	        var callbacks = this.waitingCallbacks[url];
	        for (var i = 0; i < callbacks.length; i++) {
	            var callback = callbacks[i];
	            // we could pass the callback the response, however we know the client of this code
	            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
	            // which doesn't take any parameters.
	            callback();
	        }
	        if (this.$scope) {
	            var that_1 = this;
	            setTimeout(function () {
	                that_1.$scope.$apply();
	            }, 0);
	        }
	    };
	    __decorate([
	        context_2.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], TemplateService.prototype, "$scope", void 0);
	    TemplateService = __decorate([
	        context.Bean('templateService')
	    ], TemplateService);
	    return TemplateService;
	}());
	exports.TemplateService = TemplateService;
	});

	unwrapExports(templateService);
	var templateService_1 = templateService.TemplateService;

	var valueCache = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var ValueCache = (function () {
	    function ValueCache() {
	        this.cacheVersion = 0;
	    }
	    ValueCache.prototype.init = function () {
	        this.active = this.gridOptionsWrapper.isValueCache();
	        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
	    };
	    ValueCache.prototype.onDataChanged = function () {
	        if (this.neverExpires) {
	            return;
	        }
	        this.expire();
	    };
	    ValueCache.prototype.expire = function () {
	        this.cacheVersion++;
	    };
	    ValueCache.prototype.setValue = function (rowNode, colId, value) {
	        if (this.active) {
	            if (rowNode.__cacheVersion !== this.cacheVersion) {
	                rowNode.__cacheVersion = this.cacheVersion;
	                rowNode.__cacheData = {};
	            }
	            rowNode.__cacheData[colId] = value;
	        }
	    };
	    ValueCache.prototype.getValue = function (rowNode, colId) {
	        var valueInCache = this.active
	            && rowNode.__cacheVersion === this.cacheVersion
	            && rowNode.__cacheData[colId] !== undefined;
	        if (valueInCache) {
	            return rowNode.__cacheData[colId];
	        }
	        else {
	            return undefined;
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ValueCache.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueCache.prototype, "init", null);
	    ValueCache = __decorate([
	        context.Bean('valueCache')
	    ], ValueCache);
	    return ValueCache;
	}());
	exports.ValueCache = ValueCache;
	});

	unwrapExports(valueCache);
	var valueCache_1 = valueCache.ValueCache;

	var valueService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var ValueService = (function () {
	    function ValueService() {
	        this.initialised = false;
	    }
	    ValueService.prototype.init = function () {
	        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
	        this.initialised = true;
	    };
	    ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {
	        // console.log(`turnActive = ${this.turnActive}`);
	        if (forFilter === void 0) { forFilter = false; }
	        if (ignoreAggData === void 0) { ignoreAggData = false; }
	        // hack - the grid is getting refreshed before this bean gets initialised, race condition.
	        // really should have a way so they get initialised in the right order???
	        if (!this.initialised) {
	            this.init();
	        }
	        // pull these out to make code below easier to read
	        var colDef = column.getColDef();
	        var field = colDef.field;
	        var colId = column.getId();
	        var data = rowNode.data;
	        var result;
	        // if there is a value getter, this gets precedence over a field
	        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
	        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;
	        if (forFilter && colDef.filterValueGetter) {
	            result = this.executeValueGetter(colDef.filterValueGetter, data, column, rowNode);
	        }
	        else if (groupDataExists) {
	            result = rowNode.groupData[colId];
	        }
	        else if (aggDataExists) {
	            result = rowNode.aggData[colId];
	        }
	        else if (colDef.valueGetter) {
	            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
	        }
	        else if (field && data) {
	            result = utils._.getValueUsingField(data, field, column.isFieldContainsDots());
	        }
	        else {
	            result = undefined;
	        }
	        // the result could be an expression itself, if we are allowing cell values to be expressions
	        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {
	            var cellValueGetter = result.substring(1);
	            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
	        }
	        return result;
	    };
	    ValueService.prototype.setValue = function (rowNode, colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (!rowNode || !column) {
	            return;
	        }
	        // this will only happen if user is trying to paste into a group row, which doesn't make sense
	        // the user should not be trying to paste into group rows
	        var data = rowNode.data;
	        if (utils._.missing(data)) {
	            rowNode.data = {};
	        }
	        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter
	        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
	        // need either a field or a newValueHandler for this to work
	        if (utils._.missing(field) && utils._.missing(newValueHandler) && utils._.missing(valueSetter)) {
	            // we don't tell user about newValueHandler, as that is deprecated
	            console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
	            return;
	        }
	        var params = {
	            node: rowNode,
	            data: rowNode.data,
	            oldValue: this.getValue(column, rowNode),
	            newValue: newValue,
	            colDef: column.getColDef(),
	            column: column,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext()
	        };
	        params.newValue = newValue;
	        var valueWasDifferent;
	        if (utils._.exists(newValueHandler)) {
	            valueWasDifferent = newValueHandler(params);
	        }
	        else if (utils._.exists(valueSetter)) {
	            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
	        }
	        else {
	            valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());
	        }
	        // in case user forgot to return something (possible if they are not using TypeScript
	        // and just forgot, or using an old newValueHandler we didn't always expect a return
	        // value here), we default the return value to true, so we always refresh.
	        if (valueWasDifferent === undefined) {
	            valueWasDifferent = true;
	        }
	        // if no change to the value, then no need to do the updating, or notifying via events.
	        // otherwise the user could be tabbing around the grid, and cellValueChange would get called
	        // all the time.
	        if (!valueWasDifferent) {
	            return;
	        }
	        // reset quick filter on this row
	        rowNode.resetQuickFilterAggregateText();
	        this.valueCache.onDataChanged();
	        params.newValue = this.getValue(column, rowNode);
	        if (typeof column.getColDef().onCellValueChanged === 'function') {
	            // to make callback async, do in a timeout
	            setTimeout(function () { return column.getColDef().onCellValueChanged(params); }, 0);
	        }
	        var event = {
	            type: events$1.Events.EVENT_CELL_VALUE_CHANGED,
	            event: null,
	            rowIndex: rowNode.rowIndex,
	            rowPinned: rowNode.rowPinned,
	            column: params.column,
	            api: params.api,
	            colDef: params.colDef,
	            columnApi: params.columnApi,
	            context: params.context,
	            data: rowNode.data,
	            node: rowNode,
	            oldValue: params.oldValue,
	            newValue: params.newValue,
	            value: params.newValue
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {
	        // if no '.', then it's not a deep value
	        var valuesAreSame;
	        if (!isFieldContainsDots) {
	            data[field] = newValue;
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fieldPieces = field.split('.');
	            var currentObject = data;
	            while (fieldPieces.length > 0 && currentObject) {
	                var fieldPiece = fieldPieces.shift();
	                if (fieldPieces.length === 0) {
	                    currentObject[fieldPiece] = newValue;
	                }
	                else {
	                    currentObject = currentObject[fieldPiece];
	                }
	            }
	        }
	        return !valuesAreSame;
	    };
	    ValueService.prototype.executeValueGetter = function (filterValueGetter, data, column, rowNode) {
	        var colId = column.getId();
	        // if inside the same turn, just return back the value we got last time
	        var valueFromCache = this.valueCache.getValue(rowNode, colId);
	        if (valueFromCache !== undefined) {
	            return valueFromCache;
	        }
	        var params = {
	            data: data,
	            node: rowNode,
	            column: column,
	            colDef: column.getColDef(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext(),
	            getValue: this.getValueCallback.bind(this, rowNode)
	        };
	        var result = this.expressionService.evaluate(filterValueGetter, params);
	        // if a turn is active, store the value in case the grid asks for it again
	        this.valueCache.setValue(rowNode, colId, result);
	        return result;
	    };
	    ValueService.prototype.getValueCallback = function (node, field) {
	        var otherColumn = this.columnController.getPrimaryColumn(field);
	        if (otherColumn) {
	            return this.getValue(otherColumn, node);
	        }
	        else {
	            return null;
	        }
	    };
	    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col
	    ValueService.prototype.getKeyForNode = function (col, rowNode) {
	        var value = this.getValue(col, rowNode);
	        var result;
	        var keyCreator = col.getColDef().keyCreator;
	        if (keyCreator) {
	            result = keyCreator({ value: value });
	        }
	        else {
	            result = value;
	        }
	        // if already a string, or missing, just return it
	        if (typeof result === 'string' || result === null || result === undefined) {
	            return result;
	        }
	        result = String(result);
	        if (result === '[object Object]') {
	            utils._.doOnce(function () {
	                console.warn('ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key');
	            }, 'getKeyForNode - warn about [object,object]');
	        }
	        return result;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ValueService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], ValueService.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], ValueService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ValueService.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('valueCache'),
	        __metadata("design:type", valueCache.ValueCache)
	    ], ValueService.prototype, "valueCache", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueService.prototype, "init", null);
	    ValueService = __decorate([
	        context.Bean('valueService')
	    ], ValueService);
	    return ValueService;
	}());
	exports.ValueService = ValueService;
	});

	unwrapExports(valueService);
	var valueService_1 = valueService.ValueService;

	var selectionController = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var context_2 = context;



	var context_3 = context;

	var context_4 = context;



	var SelectionController = (function () {
	    function SelectionController() {
	    }
	    SelectionController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('SelectionController');
	        this.reset();
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            this.eventService.addEventListener(events$1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
	        }
	        else {
	            this.logger.log('dont know what to do here');
	        }
	    };
	    SelectionController.prototype.init = function () {
	        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.eventService.addEventListener(events$1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	    };
	    SelectionController.prototype.setLastSelectedNode = function (rowNode) {
	        this.lastSelectedNode = rowNode;
	    };
	    SelectionController.prototype.getLastSelectedNode = function () {
	        return this.lastSelectedNode;
	    };
	    SelectionController.prototype.getSelectedNodes = function () {
	        var selectedNodes = [];
	        utils.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode) {
	                selectedNodes.push(rowNode);
	            }
	        });
	        return selectedNodes;
	    };
	    SelectionController.prototype.getSelectedRows = function () {
	        var selectedRows = [];
	        utils.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode && rowNode.data) {
	                selectedRows.push(rowNode.data);
	            }
	        });
	        return selectedRows;
	    };
	    SelectionController.prototype.removeGroupsFromSelection = function () {
	        var _this = this;
	        utils.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode && rowNode.group) {
	                _this.selectedNodes[rowNode.id] = undefined;
	            }
	        });
	    };
	    // should only be called if groupSelectsChildren=true
	    SelectionController.prototype.updateGroupsFromChildrenSelections = function () {
	        // we only do this when group selection state depends on selected children
	        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
	            return;
	        }
	        // also only do it if CSRM (code should never allow this anyway)
	        if (this.rowModel.getType() !== constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            return;
	        }
	        var clientSideRowModel = this.rowModel;
	        clientSideRowModel.getTopLevelNodes().forEach(function (rowNode) {
	            rowNode.depthFirstSearch(function (rowNode) {
	                if (rowNode.group) {
	                    rowNode.calculateSelectedFromChildren();
	                }
	            });
	        });
	    };
	    SelectionController.prototype.getNodeForIdIfSelected = function (id) {
	        return this.selectedNodes[id];
	    };
	    SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {
	        var _this = this;
	        var groupsToRefresh = {};
	        var updatedCount = 0;
	        utils.Utils.iterateObject(this.selectedNodes, function (key, otherRowNode) {
	            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
	                var rowNode = _this.selectedNodes[otherRowNode.id];
	                updatedCount += rowNode.setSelectedParams({ newValue: false, clearSelection: false, suppressFinishActions: true });
	                if (_this.groupSelectsChildren && otherRowNode.parent) {
	                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
	                }
	            }
	        });
	        utils.Utils.iterateObject(groupsToRefresh, function (key, group) {
	            group.calculateSelectedFromChildren();
	        });
	        return updatedCount;
	    };
	    SelectionController.prototype.onRowSelected = function (event) {
	        var rowNode = event.node;
	        // we do not store the group rows when the groups select children
	        if (this.groupSelectsChildren && rowNode.group) {
	            return;
	        }
	        if (rowNode.isSelected()) {
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            this.selectedNodes[rowNode.id] = undefined;
	        }
	    };
	    SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {
	        this.syncInOldRowNode(rowNode, oldNode);
	        this.syncInNewRowNode(rowNode);
	    };
	    // if the id has changed for the node, then this means the rowNode
	    // is getting used for a different data item, which breaks
	    // our selectedNodes, as the node now is mapped by the old id
	    // which is inconsistent. so to keep the old node as selected,
	    // we swap in the clone (with the old id and old data). this means
	    // the oldNode is effectively a daemon we keep a reference to,
	    // so if client calls api.getSelectedNodes(), it gets the daemon
	    // in the result. when the client un-selects, the reference to the
	    // daemon is removed. the daemon, because it's an oldNode, is not
	    // used by the grid for rendering, it's a copy of what the node used
	    // to be like before the id was changed.
	    SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {
	        var oldNodeHasDifferentId = utils.Utils.exists(oldNode) && (rowNode.id !== oldNode.id);
	        if (oldNodeHasDifferentId) {
	            var oldNodeSelected = utils.Utils.exists(this.selectedNodes[oldNode.id]);
	            if (oldNodeSelected) {
	                this.selectedNodes[oldNode.id] = oldNode;
	            }
	        }
	    };
	    SelectionController.prototype.syncInNewRowNode = function (rowNode) {
	        if (utils.Utils.exists(this.selectedNodes[rowNode.id])) {
	            rowNode.setSelectedInitialValue(true);
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            rowNode.setSelectedInitialValue(false);
	        }
	    };
	    SelectionController.prototype.reset = function () {
	        this.logger.log('reset');
	        this.selectedNodes = {};
	        this.lastSelectedNode = null;
	    };
	    // returns a list of all nodes at 'best cost' - a feature to be used
	    // with groups / trees. if a group has all it's children selected,
	    // then the group appears in the result, but not the children.
	    // Designed for use with 'children' as the group selection type,
	    // where groups don't actually appear in the selection normally.
	    SelectionController.prototype.getBestCostNodeSelection = function () {
	        if (this.rowModel.getType() !== constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            console.warn('getBestCostNodeSelection is only avilable when using normal row model');
	        }
	        var clientSideRowModel = this.rowModel;
	        var topLevelNodes = clientSideRowModel.getTopLevelNodes();
	        if (topLevelNodes === null) {
	            console.warn('selectAll not available doing rowModel=virtual');
	            return;
	        }
	        var result = [];
	        // recursive function, to find the selected nodes
	        function traverse(nodes) {
	            for (var i = 0, l = nodes.length; i < l; i++) {
	                var node = nodes[i];
	                if (node.isSelected()) {
	                    result.push(node);
	                }
	                else {
	                    // if not selected, then if it's a group, and the group
	                    // has children, continue to search for selections
	                    if (node.group && node.children) {
	                        traverse(node.children);
	                    }
	                }
	            }
	        }
	        traverse(topLevelNodes);
	        return result;
	    };
	    SelectionController.prototype.setRowModel = function (rowModel) {
	        this.rowModel = rowModel;
	    };
	    SelectionController.prototype.isEmpty = function () {
	        var count = 0;
	        utils.Utils.iterateObject(this.selectedNodes, function (nodeId, rowNode) {
	            if (rowNode) {
	                count++;
	            }
	        });
	        return count === 0;
	    };
	    SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        var callback = function (rowNode) { return rowNode.selectThisNode(false); };
	        var rowModelClientSide = this.rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
	        if (justFiltered) {
	            if (!rowModelClientSide) {
	                console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');
	                return;
	            }
	            var clientSideRowModel = this.rowModel;
	            clientSideRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            utils.Utils.iterateObject(this.selectedNodes, function (id, rowNode) {
	                // remember the reference can be to null, as we never 'delete' from the map
	                if (rowNode) {
	                    callback(rowNode);
	                }
	            });
	            // this clears down the map (whereas above only sets the items in map to 'undefined')
	            this.reset();
	        }
	        // the above does not clean up the parent rows if they are selected
	        if (rowModelClientSide && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events$1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SelectionController.prototype.selectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        if (this.rowModel.getType() !== constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            throw "selectAll only available with normal row model, ie not " + this.rowModel.getType();
	        }
	        var clientSideRowModel = this.rowModel;
	        var callback = function (rowNode) { return rowNode.selectThisNode(true); };
	        if (justFiltered) {
	            clientSideRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            clientSideRowModel.forEachNode(callback);
	        }
	        // the above does not clean up the parent rows if they are selected
	        if (this.rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events$1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // Deprecated method
	    SelectionController.prototype.selectNode = function (rowNode, tryMulti) {
	        rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectIndex = function (rowIndex) {
	        var node = this.rowModel.getRow(rowIndex);
	        this.deselectNode(node);
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectNode = function (rowNode) {
	        rowNode.setSelectedParams({ newValue: false, clearSelection: false });
	    };
	    // Deprecated method
	    SelectionController.prototype.selectIndex = function (index, tryMulti) {
	        var node = this.rowModel.getRow(index);
	        this.selectNode(node, tryMulti);
	    };
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], SelectionController.prototype, "eventService", void 0);
	    __decorate([
	        context_3.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectionController.prototype, "rowModel", void 0);
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SelectionController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], SelectionController.prototype, "columnApi", void 0);
	    __decorate([
	        context_3.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], SelectionController.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "init", null);
	    SelectionController = __decorate([
	        context.Bean('selectionController')
	    ], SelectionController);
	    return SelectionController;
	}());
	exports.SelectionController = SelectionController;
	});

	unwrapExports(selectionController);
	var selectionController_1 = selectionController.SelectionController;

	var rowNode = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });












	var RowNode = (function () {
	    function RowNode() {
	        /** Children mapped by the pivot columns */
	        this.childrenMapped = {};
	        /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */
	        this.selectable = true;
	        this.selected = false;
	    }
	    RowNode.prototype.setData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        this.valueCache.onDataChanged();
	        this.updateDataOnDetailNode();
	        this.checkRowSelectable();
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    // when we are doing master / detail, the detail node is lazy created, but then kept around.
	    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data
	    // in sync, otherwise expand/collapse of the detail would still show the old values.
	    RowNode.prototype.updateDataOnDetailNode = function () {
	        if (this.detailNode) {
	            this.detailNode.data = this.data;
	        }
	    };
	    RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {
	        return {
	            type: RowNode.EVENT_DATA_CHANGED,
	            node: this,
	            oldData: oldData,
	            newData: newData,
	            update: update
	        };
	    };
	    RowNode.prototype.createLocalRowEvent = function (type) {
	        return {
	            type: type,
	            node: this
	        };
	    };
	    // similar to setRowData, however it is expected that the data is the same data item. this
	    // is intended to be used with Redux type stores, where the whole data can be changed. we are
	    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
	    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
	    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).
	    RowNode.prototype.updateData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        this.updateDataOnDetailNode();
	        this.checkRowSelectable();
	        this.updateDataOnDetailNode();
	        var event = this.createDataChangedEvent(data, oldData, true);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.getRowIndexString = function () {
	        if (this.rowPinned === constants.Constants.PINNED_TOP) {
	            return 't-' + this.rowIndex;
	        }
	        else if (this.rowPinned === constants.Constants.PINNED_BOTTOM) {
	            return 'b-' + this.rowIndex;
	        }
	        else {
	            return this.rowIndex.toString();
	        }
	    };
	    RowNode.prototype.createDaemonNode = function () {
	        var oldNode = new RowNode();
	        this.context.wireBean(oldNode);
	        // just copy the id and data, this is enough for the node to be used
	        // in the selection controller (the selection controller is the only
	        // place where daemon nodes can live).
	        oldNode.id = this.id;
	        oldNode.data = this.data;
	        oldNode.daemon = true;
	        oldNode.selected = this.selected;
	        oldNode.level = this.level;
	        return oldNode;
	    };
	    RowNode.prototype.setDataAndId = function (data, id) {
	        var oldNode = utils.Utils.exists(this.id) ? this.createDaemonNode() : null;
	        var oldData = this.data;
	        this.data = data;
	        this.updateDataOnDetailNode();
	        this.setId(id);
	        this.selectionController.syncInRowNode(this, oldNode);
	        this.checkRowSelectable();
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.checkRowSelectable = function () {
	        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
	        var shouldInvokeIsRowSelectable = isRowSelectableFunc && utils.Utils.exists(this);
	        this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);
	    };
	    RowNode.prototype.setRowSelectable = function (newVal) {
	        if (this.selectable !== newVal) {
	            this.selectable = newVal;
	            if (this.eventService) {
	                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));
	            }
	        }
	    };
	    RowNode.prototype.setId = function (id) {
	        // see if user is providing the id's
	        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (getRowNodeId) {
	            // if user is providing the id's, then we set the id only after the data has been set.
	            // this is important for virtual pagination and viewport, where empty rows exist.
	            if (this.data) {
	                this.id = getRowNodeId(this.data);
	            }
	            else {
	                // this can happen if user has set blank into the rowNode after the row previously
	                // having data. this happens in virtual page row model, when data is delete and
	                // the page is refreshed.
	                this.id = undefined;
	            }
	        }
	        else {
	            this.id = id;
	        }
	    };
	    RowNode.prototype.isPixelInRange = function (pixel) {
	        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);
	    };
	    RowNode.prototype.clearRowTop = function () {
	        this.oldRowTop = this.rowTop;
	        this.setRowTop(null);
	    };
	    RowNode.prototype.setFirstChild = function (firstChild) {
	        if (this.firstChild === firstChild) {
	            return;
	        }
	        this.firstChild = firstChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setLastChild = function (lastChild) {
	        if (this.lastChild === lastChild) {
	            return;
	        }
	        this.lastChild = lastChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setChildIndex = function (childIndex) {
	        if (this.childIndex === childIndex) {
	            return;
	        }
	        this.childIndex = childIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowTop = function (rowTop) {
	        if (this.rowTop === rowTop) {
	            return;
	        }
	        this.rowTop = rowTop;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
	        }
	    };
	    RowNode.prototype.setDragging = function (dragging) {
	        if (this.dragging === dragging) {
	            return;
	        }
	        this.dragging = dragging;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));
	        }
	    };
	    RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {
	        if (this.allChildrenCount === allChildrenCount) {
	            return;
	        }
	        this.allChildrenCount = allChildrenCount;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowHeight = function (rowHeight) {
	        this.rowHeight = rowHeight;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowIndex = function (rowIndex) {
	        this.rowIndex = rowIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setUiLevel = function (uiLevel) {
	        if (this.uiLevel === uiLevel) {
	            return;
	        }
	        this.uiLevel = uiLevel;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
	        }
	    };
	    RowNode.prototype.setExpanded = function (expanded) {
	        if (this.expanded === expanded) {
	            return;
	        }
	        this.expanded = expanded;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
	        }
	        var event = this.createGlobalRowEvent(events$1.Events.EVENT_ROW_GROUP_OPENED);
	        this.mainEventService.dispatchEvent(event);
	        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	            this.gridApi.redrawRows({ rowNodes: [this] });
	        }
	    };
	    RowNode.prototype.createGlobalRowEvent = function (type) {
	        var event = {
	            type: type,
	            node: this,
	            data: this.data,
	            rowIndex: this.rowIndex,
	            rowPinned: this.rowPinned,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	        return event;
	    };
	    RowNode.prototype.dispatchLocalEvent = function (event) {
	        if (this.eventService) {
	            this.eventService.dispatchEvent(event);
	        }
	    };
	    // we also allow editing the value via the editors. when it is done via
	    // the editors, no 'cell changed' event gets fired, as it's assumed that
	    // the cell knows about the change given it's in charge of the editing.
	    // this method is for the client to call, so the cell listens for the change
	    // event, and also flashes the cell when the change occurs.
	    RowNode.prototype.setDataValue = function (colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.valueService.setValue(this, column, newValue);
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    RowNode.prototype.setGroupValue = function (colKey, newValue) {
	        var column = this.columnController.getGridColumn(colKey);
	        if (utils.Utils.missing(this.groupData)) {
	            this.groupData = {};
	        }
	        this.groupData[column.getColId()] = newValue;
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    // sets the data for an aggregation
	    RowNode.prototype.setAggData = function (newAggData) {
	        var _this = this;
	        // find out all keys that could potentially change
	        var colIds = utils.Utils.getAllKeysInObjects([this.aggData, newAggData]);
	        this.aggData = newAggData;
	        // if no event service, nobody has registered for events, so no need fire event
	        if (this.eventService) {
	            colIds.forEach(function (colId) {
	                var column = _this.columnController.getGridColumn(colId);
	                var value = _this.aggData ? _this.aggData[colId] : undefined;
	                _this.dispatchCellChangedEvent(column, value);
	            });
	        }
	    };
	    RowNode.prototype.hasChildren = function () {
	        // we need to return true when this.group=true, as this is used by server side row model
	        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true
	        // if children exist.
	        return this.group || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);
	    };
	    RowNode.prototype.isEmptyFillerNode = function () {
	        return this.group && utils.Utils.missingOrEmpty(this.childrenAfterGroup);
	    };
	    RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {
	        var cellChangedEvent = {
	            type: RowNode.EVENT_CELL_CHANGED,
	            node: this,
	            column: column,
	            newValue: newValue
	        };
	        this.dispatchLocalEvent(cellChangedEvent);
	    };
	    RowNode.prototype.resetQuickFilterAggregateText = function () {
	        this.quickFilterAggregateText = null;
	    };
	    RowNode.prototype.isExpandable = function () {
	        return this.hasChildren() || this.master;
	    };
	    RowNode.prototype.isSelected = function () {
	        // for footers, we just return what our sibling selected state is, as cannot select a footer
	        if (this.footer) {
	            return this.sibling.isSelected();
	        }
	        return this.selected;
	    };
	    RowNode.prototype.depthFirstSearch = function (callback) {
	        if (this.childrenAfterGroup) {
	            this.childrenAfterGroup.forEach(function (child) { return child.depthFirstSearch(callback); });
	        }
	        callback(this);
	    };
	    // + rowController.updateGroupsInSelection()
	    // + selectionController.calculatedSelectedForAllGroupNodes()
	    RowNode.prototype.calculateSelectedFromChildren = function () {
	        var atLeastOneSelected = false;
	        var atLeastOneDeSelected = false;
	        var atLeastOneMixed = false;
	        var newSelectedValue;
	        if (this.childrenAfterGroup) {
	            for (var i = 0; i < this.childrenAfterGroup.length; i++) {
	                var child = this.childrenAfterGroup[i];
	                // skip non-selectable nodes to prevent inconsistent selection values
	                if (!child.selectable)
	                    continue;
	                var childState = child.isSelected();
	                switch (childState) {
	                    case true:
	                        atLeastOneSelected = true;
	                        break;
	                    case false:
	                        atLeastOneDeSelected = true;
	                        break;
	                    default:
	                        atLeastOneMixed = true;
	                        break;
	                }
	            }
	        }
	        if (atLeastOneMixed) {
	            newSelectedValue = undefined;
	        }
	        else if (atLeastOneSelected && !atLeastOneDeSelected) {
	            newSelectedValue = true;
	        }
	        else if (!atLeastOneSelected && atLeastOneDeSelected) {
	            newSelectedValue = false;
	        }
	        else {
	            newSelectedValue = undefined;
	        }
	        this.selectThisNode(newSelectedValue);
	    };
	    RowNode.prototype.setSelectedInitialValue = function (selected) {
	        this.selected = selected;
	    };
	    RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {
	        if (clearSelection === void 0) { clearSelection = false; }
	        if (suppressFinishActions === void 0) { suppressFinishActions = false; }
	        this.setSelectedParams({
	            newValue: newValue,
	            clearSelection: clearSelection,
	            suppressFinishActions: suppressFinishActions,
	            rangeSelect: false
	        });
	    };
	    RowNode.prototype.isRowPinned = function () {
	        return this.rowPinned === constants.Constants.PINNED_TOP || this.rowPinned === constants.Constants.PINNED_BOTTOM;
	    };
	    // to make calling code more readable, this is the same method as setSelected except it takes names parameters
	    RowNode.prototype.setSelectedParams = function (params) {
	        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var newValue = params.newValue === true;
	        var clearSelection = params.clearSelection === true;
	        var suppressFinishActions = params.suppressFinishActions === true;
	        var rangeSelect = params.rangeSelect === true;
	        // groupSelectsFiltered only makes sense when group selects children
	        var groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);
	        if (this.id === undefined) {
	            console.warn('ag-Grid: cannot select node until id for node is known');
	            return 0;
	        }
	        if (this.rowPinned) {
	            console.log('ag-Grid: cannot select pinned rows');
	            return 0;
	        }
	        // if we are a footer, we don't do selection, just pass the info
	        // to the sibling (the parent of the group)
	        if (this.footer) {
	            var count = this.sibling.setSelectedParams(params);
	            return count;
	        }
	        if (rangeSelect) {
	            var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
	            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
	            if (newRowClicked && allowMultiSelect) {
	                return this.doRowRangeSelection();
	            }
	        }
	        var updatedCount = 0;
	        // when groupSelectsFiltered, then this node may end up intermediate despite
	        // trying to set it to true / false. this group will be calculated further on
	        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
	        // here, otherwise the updatedCount would include it.
	        var skipThisNode = groupSelectsFiltered && this.group;
	        if (!skipThisNode) {
	            var thisNodeWasSelected = this.selectThisNode(newValue);
	            if (thisNodeWasSelected) {
	                updatedCount++;
	            }
	        }
	        if (groupSelectsChildren && this.group) {
	            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
	        }
	        // clear other nodes if not doing multi select
	        if (!suppressFinishActions) {
	            var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());
	            if (clearOtherNodes) {
	                updatedCount += this.selectionController.clearOtherNodes(this);
	            }
	            // only if we selected something, then update groups and fire events
	            if (updatedCount > 0) {
	                this.selectionController.updateGroupsFromChildrenSelections();
	                // this is the very end of the 'action node', so we are finished all the updates,
	                // include any parent / child changes that this method caused
	                var event_1 = {
	                    type: events$1.Events.EVENT_SELECTION_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.mainEventService.dispatchEvent(event_1);
	            }
	            // so if user next does shift-select, we know where to start the selection from
	            if (newValue) {
	                this.selectionController.setLastSelectedNode(this);
	            }
	        }
	        return updatedCount;
	    };
	    // selects all rows between this node and the last selected node (or the top if this is the first selection).
	    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
	    // holding down 'shift'.
	    RowNode.prototype.doRowRangeSelection = function () {
	        var updatedCount = 0;
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var lastSelectedNode = this.selectionController.getLastSelectedNode();
	        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
	        nodesToSelect.forEach(function (rowNode) {
	            if (rowNode.group && groupsSelectChildren) {
	                return;
	            }
	            var nodeWasSelected = rowNode.selectThisNode(true);
	            if (nodeWasSelected) {
	                updatedCount++;
	            }
	        });
	        this.selectionController.updateGroupsFromChildrenSelections();
	        var event = {
	            type: events$1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.mainEventService.dispatchEvent(event);
	        return updatedCount;
	    };
	    RowNode.prototype.isParentOfNode = function (potentialParent) {
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode === potentialParent) {
	                return true;
	            }
	            parentNode = parentNode.parent;
	        }
	        return false;
	    };
	    RowNode.prototype.selectThisNode = function (newValue) {
	        if (!this.selectable || this.selected === newValue)
	            return false;
	        this.selected = newValue;
	        if (this.eventService) {
	            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
	        }
	        var event = this.createGlobalRowEvent(events$1.Events.EVENT_ROW_SELECTED);
	        this.mainEventService.dispatchEvent(event);
	        return true;
	    };
	    RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {
	        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
	        var updatedCount = 0;
	        if (utils.Utils.missing(children)) {
	            return;
	        }
	        for (var i = 0; i < children.length; i++) {
	            updatedCount += children[i].setSelectedParams({
	                newValue: newValue,
	                clearSelection: false,
	                suppressFinishActions: true,
	                groupSelectsFiltered: groupSelectsFiltered
	            });
	        }
	        return updatedCount;
	    };
	    RowNode.prototype.addEventListener = function (eventType, listener) {
	        if (!this.eventService) {
	            this.eventService = new eventService.EventService();
	        }
	        this.eventService.addEventListener(eventType, listener);
	    };
	    RowNode.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    RowNode.prototype.onMouseEnter = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
	    };
	    RowNode.prototype.onMouseLeave = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
	    };
	    RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {
	        var currentRowNode = this;
	        // if we are hiding groups, then if we are the first child, of the first child,
	        // all the way up to the column we are interested in, then we show the group cell.
	        var isCandidate = true;
	        var foundFirstChildPath = false;
	        var nodeToSwapIn;
	        while (isCandidate && !foundFirstChildPath) {
	            var parentRowNode = currentRowNode.parent;
	            var firstChild = utils.Utils.exists(parentRowNode) && currentRowNode.firstChild;
	            if (firstChild) {
	                if (parentRowNode.rowGroupColumn === rowGroupColumn) {
	                    foundFirstChildPath = true;
	                    nodeToSwapIn = parentRowNode;
	                }
	            }
	            else {
	                isCandidate = false;
	            }
	            currentRowNode = parentRowNode;
	        }
	        return foundFirstChildPath ? nodeToSwapIn : null;
	    };
	    RowNode.EVENT_ROW_SELECTED = 'rowSelected';
	    RowNode.EVENT_DATA_CHANGED = 'dataChanged';
	    RowNode.EVENT_CELL_CHANGED = 'cellChanged';
	    RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';
	    RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';
	    RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';
	    RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';
	    RowNode.EVENT_TOP_CHANGED = 'topChanged';
	    RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';
	    RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';
	    RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';
	    RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';
	    RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';
	    RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';
	    RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], RowNode.prototype, "mainEventService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], RowNode.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], RowNode.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], RowNode.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], RowNode.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], RowNode.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], RowNode.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('valueCache'),
	        __metadata("design:type", valueCache.ValueCache)
	    ], RowNode.prototype, "valueCache", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], RowNode.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], RowNode.prototype, "gridApi", void 0);
	    return RowNode;
	}());
	exports.RowNode = RowNode;
	});

	unwrapExports(rowNode);
	var rowNode_1 = rowNode.RowNode;

	var gridRow = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	var GridRow = (function () {
	    function GridRow(rowIndex, floating) {
	        this.rowIndex = rowIndex;
	        this.floating = utils.Utils.makeNull(floating);
	    }
	    GridRow.prototype.isFloatingTop = function () {
	        return this.floating === constants.Constants.PINNED_TOP;
	    };
	    GridRow.prototype.isFloatingBottom = function () {
	        return this.floating === constants.Constants.PINNED_BOTTOM;
	    };
	    GridRow.prototype.isNotFloating = function () {
	        return !this.isFloatingBottom() && !this.isFloatingTop();
	    };
	    GridRow.prototype.equals = function (otherSelection) {
	        return this.rowIndex === otherSelection.rowIndex
	            && this.floating === otherSelection.floating;
	    };
	    GridRow.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating;
	    };
	    GridRow.prototype.getGridCell = function (column) {
	        var gridCellDef = { rowIndex: this.rowIndex, floating: this.floating, column: column };
	        return new gridCell.GridCell(gridCellDef);
	    };
	    // tests if this row selection is before the other row selection
	    GridRow.prototype.before = function (otherSelection) {
	        var otherFloating = otherSelection.floating;
	        switch (this.floating) {
	            case constants.Constants.PINNED_TOP:
	                // we we are floating top, and other isn't, then we are always before
	                if (otherFloating !== constants.Constants.PINNED_TOP) {
	                    return true;
	                }
	                break;
	            case constants.Constants.PINNED_BOTTOM:
	                // if we are floating bottom, and the other isn't, then we are never before
	                if (otherFloating !== constants.Constants.PINNED_BOTTOM) {
	                    return false;
	                }
	                break;
	            default:
	                // if we are not floating, but the other one is floating...
	                if (utils.Utils.exists(otherFloating)) {
	                    if (otherFloating === constants.Constants.PINNED_TOP) {
	                        // we are not floating, other is floating top, we are first
	                        return false;
	                    }
	                    else {
	                        // we are not floating, other is floating bottom, we are always first
	                        return true;
	                    }
	                }
	                break;
	        }
	        return this.rowIndex < otherSelection.rowIndex;
	    };
	    return GridRow;
	}());
	exports.GridRow = GridRow;
	});

	unwrapExports(gridRow);
	var gridRow_1 = gridRow.GridRow;

	var gridCell = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	var GridCell = (function () {
	    function GridCell(gridCellDef) {
	        this.rowIndex = gridCellDef.rowIndex;
	        this.column = gridCellDef.column;
	        this.floating = utils.Utils.makeNull(gridCellDef.floating);
	    }
	    GridCell.prototype.getGridCellDef = function () {
	        return {
	            rowIndex: this.rowIndex,
	            column: this.column,
	            floating: this.floating
	        };
	    };
	    GridCell.prototype.getGridRow = function () {
	        return new gridRow.GridRow(this.rowIndex, this.floating);
	    };
	    GridCell.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating + ", column = " + (this.column ? this.column.getId() : null);
	    };
	    GridCell.prototype.createId = function () {
	        return this.rowIndex + "." + this.floating + "." + this.column.getId();
	    };
	    GridCell.prototype.equals = function (other) {
	        var colsMatch = this.column === other.column;
	        var floatingMatch = this.floating === other.floating;
	        var indexMatch = this.rowIndex === other.rowIndex;
	        return colsMatch && floatingMatch && indexMatch;
	    };
	    return GridCell;
	}());
	exports.GridCell = GridCell;
	});

	unwrapExports(gridCell);
	var gridCell_1 = gridCell.GridCell;

	var beanStub = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	var BeanStub = (function () {
	    function BeanStub() {
	        this.destroyFunctions = [];
	        this.destroyed = false;
	    }
	    BeanStub.prototype.destroy = function () {
	        this.destroyFunctions.forEach(function (func) { return func(); });
	        this.destroyFunctions.length = 0;
	        this.destroyed = true;
	        this.dispatchEvent({ type: BeanStub.EVENT_DESTROYED });
	    };
	    BeanStub.prototype.addEventListener = function (eventType, listener) {
	        if (!this.localEventService) {
	            this.localEventService = new eventService.EventService();
	        }
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    BeanStub.prototype.removeEventListener = function (eventType, listener) {
	        if (this.localEventService) {
	            this.localEventService.removeEventListener(eventType, listener);
	        }
	    };
	    BeanStub.prototype.dispatchEventAsync = function (event) {
	        var _this = this;
	        setTimeout(function () { return _this.dispatchEvent(event); }, 0);
	    };
	    BeanStub.prototype.dispatchEvent = function (event) {
	        if (this.localEventService) {
	            this.localEventService.dispatchEvent(event);
	        }
	    };
	    BeanStub.prototype.addDestroyableEventListener = function (eElement, event, listener) {
	        if (this.destroyed) {
	            return;
	        }
	        if (eElement instanceof HTMLElement) {
	            utils._.addSafePassiveEventListener(eElement, event, listener);
	        }
	        else if (eElement instanceof Window) {
	            eElement.addEventListener(event, listener);
	        }
	        else if (eElement instanceof gridOptionsWrapper.GridOptionsWrapper) {
	            eElement.addEventListener(event, listener);
	        }
	        else {
	            eElement.addEventListener(event, listener);
	        }
	        this.destroyFunctions.push(function () {
	            if (eElement instanceof HTMLElement) {
	                eElement.removeEventListener(event, listener);
	            }
	            else if (eElement instanceof Window) {
	                eElement.removeEventListener(event, listener);
	            }
	            else if (eElement instanceof gridOptionsWrapper.GridOptionsWrapper) {
	                eElement.removeEventListener(event, listener);
	            }
	            else {
	                eElement.removeEventListener(event, listener);
	            }
	        });
	    };
	    BeanStub.prototype.isAlive = function () {
	        return !this.destroyed;
	    };
	    BeanStub.prototype.addDestroyFunc = function (func) {
	        // if we are already destroyed, we execute the func now
	        if (this.isAlive()) {
	            this.destroyFunctions.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    BeanStub.EVENT_DESTROYED = 'destroyed';
	    return BeanStub;
	}());
	exports.BeanStub = BeanStub;
	});

	unwrapExports(beanStub);
	var beanStub_1 = beanStub.BeanStub;

	var component = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var compIdSequence = new utils.NumberSequence();
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(template) {
	        var _this = _super.call(this) || this;
	        _this.childComponents = [];
	        _this.annotatedEventListeners = [];
	        _this.visible = true;
	        // unique id for this row component. this is used for getting a reference to the HTML dom.
	        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
	        // around as we create a new rowComp instance for the same row node).
	        _this.compId = compIdSequence.next();
	        if (template) {
	            _this.setTemplate(template);
	        }
	        return _this;
	    }
	    Component.prototype.getCompId = function () {
	        return this.compId;
	    };
	    Component.prototype.instantiate = function (context) {
	        this.instantiateRecurse(this.getGui(), context);
	    };
	    Component.prototype.instantiateRecurse = function (parentNode, context) {
	        var _this = this;
	        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM
	        // which messes up the traversal order of the children.
	        var childNodeList = utils.Utils.copyNodeList(parentNode.childNodes);
	        childNodeList.forEach(function (childNode) {
	            var childComp = context.createComponent(childNode, function (childComp) {
	                var attrList = _this.getAttrLists(childNode);
	                _this.copyAttributesFromNode(attrList, childComp.getGui());
	                _this.createChildAttributes(attrList, childComp);
	                _this.addEventListenersToComponent(attrList, childComp);
	            });
	            if (childComp) {
	                _this.swapComponentForNode(childComp, parentNode, childNode);
	            }
	            else {
	                if (childNode.childNodes) {
	                    _this.instantiateRecurse(childNode, context);
	                }
	                if (childNode instanceof HTMLElement) {
	                    var attrList = _this.getAttrLists(childNode);
	                    _this.addEventListenersToElement(attrList, childNode);
	                }
	            }
	        });
	    };
	    Component.prototype.getAttrLists = function (child) {
	        var res = {
	            bindings: [],
	            events: [],
	            normal: []
	        };
	        utils.Utils.iterateNamedNodeMap(child.attributes, function (name, value) {
	            var firstCharacter = name.substr(0, 1);
	            if (firstCharacter === '(') {
	                var eventName = name.replace('(', '').replace(')', '');
	                res.events.push({
	                    name: eventName,
	                    value: value
	                });
	            }
	            else if (firstCharacter === '[') {
	                var bindingName = name.replace('[', '').replace(']', '');
	                res.bindings.push({
	                    name: bindingName,
	                    value: value
	                });
	            }
	            else {
	                res.normal.push({
	                    name: name,
	                    value: value
	                });
	            }
	        });
	        return res;
	    };
	    Component.prototype.addEventListenersToElement = function (attrLists, element) {
	        var _this = this;
	        this.addEventListenerCommon(attrLists, function (eventName, listener) {
	            _this.addDestroyableEventListener(element, eventName, listener);
	        });
	    };
	    Component.prototype.addEventListenersToComponent = function (attrLists, component) {
	        var _this = this;
	        this.addEventListenerCommon(attrLists, function (eventName, listener) {
	            _this.addDestroyableEventListener(component, eventName, listener);
	        });
	    };
	    Component.prototype.addEventListenerCommon = function (attrLists, callback) {
	        var _this = this;
	        var methodAliases = this.getAgComponentMetaData('methods');
	        attrLists.events.forEach(function (nameValue) {
	            var methodName = nameValue.value;
	            var methodAlias = utils.Utils.find(methodAliases, 'alias', methodName);
	            var methodNameToUse = utils.Utils.exists(methodAlias) ? methodAlias.methodName : methodName;
	            var listener = _this[methodNameToUse];
	            if (typeof listener !== 'function') {
	                console.warn('ag-Grid: count not find callback ' + methodName);
	                return;
	            }
	            var eventCamelCase = utils.Utils.hyphenToCamelCase(nameValue.name);
	            callback(eventCamelCase, listener.bind(_this));
	        });
	    };
	    Component.prototype.createChildAttributes = function (attrLists, child) {
	        var _this = this;
	        var childAttributes = {};
	        attrLists.normal.forEach(function (nameValue) {
	            var nameCamelCase = utils.Utils.hyphenToCamelCase(nameValue.name);
	            childAttributes[nameCamelCase] = nameValue.value;
	        });
	        attrLists.bindings.forEach(function (nameValue) {
	            var nameCamelCase = utils.Utils.hyphenToCamelCase(nameValue.name);
	            childAttributes[nameCamelCase] = _this[nameValue.value];
	        });
	        child.props = childAttributes;
	    };
	    Component.prototype.copyAttributesFromNode = function (attrLists, childNode) {
	        attrLists.normal.forEach(function (nameValue) {
	            childNode.setAttribute(nameValue.name, nameValue.value);
	        });
	    };
	    Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {
	        var eComponent = newComponent.getGui();
	        parentNode.replaceChild(eComponent, childNode);
	        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
	        this.childComponents.push(newComponent);
	        this.swapInComponentForQuerySelectors(newComponent, childNode);
	    };
	    Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {
	        var thisProto = Object.getPrototypeOf(this);
	        var thisNoType = this;
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    if (thisNoType[querySelector.attributeName] === childNode) {
	                        thisNoType[querySelector.attributeName] = newComponent;
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	    };
	    Component.prototype.setTemplate = function (template) {
	        var eGui = utils.Utils.loadTemplate(template);
	        this.setTemplateFromElement(eGui);
	    };
	    Component.prototype.setTemplateFromElement = function (element) {
	        this.eGui = element;
	        this.eGui.__agComponent = this;
	        this.addAnnotatedEventListeners();
	        this.wireQuerySelectors();
	    };
	    Component.prototype.wireQuerySelectors = function () {
	        var _this = this;
	        if (!this.eGui) {
	            return;
	        }
	        var thisProto = Object.getPrototypeOf(this);
	        var _loop_1 = function () {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                var thisNoType_1 = this_1;
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
	                    if (resultOfQuery) {
	                        var backingComponent = resultOfQuery.__agComponent;
	                        if (backingComponent) {
	                            thisNoType_1[querySelector.attributeName] = backingComponent;
	                        }
	                        else {
	                            thisNoType_1[querySelector.attributeName] = resultOfQuery;
	                        }
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        };
	        var this_1 = this;
	        while (thisProto != null) {
	            _loop_1();
	        }
	    };
	    Component.prototype.addAnnotatedEventListeners = function () {
	        var _this = this;
	        this.removeAnnotatedEventListeners();
	        if (!this.eGui) {
	            return;
	        }
	        var listenerMethods = this.getAgComponentMetaData('listenerMethods');
	        if (utils.Utils.missingOrEmpty(listenerMethods)) {
	            return;
	        }
	        if (!this.annotatedEventListeners) {
	            this.annotatedEventListeners = [];
	        }
	        listenerMethods.forEach(function (eventListener) {
	            var listener = _this[eventListener.methodName].bind(_this);
	            _this.eGui.addEventListener(eventListener.eventName, listener);
	            _this.annotatedEventListeners.push({ eventName: eventListener.eventName, listener: listener });
	        });
	    };
	    Component.prototype.getAgComponentMetaData = function (key) {
	        var res = [];
	        var thisProto = Object.getPrototypeOf(this);
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {
	                res = res.concat(metaData[currentProtoName][key]);
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	        return res;
	    };
	    Component.prototype.removeAnnotatedEventListeners = function () {
	        var _this = this;
	        if (!this.annotatedEventListeners) {
	            return;
	        }
	        if (!this.eGui) {
	            return;
	        }
	        this.annotatedEventListeners.forEach(function (eventListener) {
	            _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);
	        });
	        this.annotatedEventListeners = null;
	    };
	    Component.prototype.getGui = function () {
	        return this.eGui;
	    };
	    // this method is for older code, that wants to provide the gui element,
	    // it is not intended for this to be in ag-Stack
	    Component.prototype.setGui = function (eGui) {
	        this.eGui = eGui;
	    };
	    Component.prototype.queryForHtmlElement = function (cssSelector) {
	        return this.eGui.querySelector(cssSelector);
	    };
	    Component.prototype.queryForHtmlInputElement = function (cssSelector) {
	        return this.eGui.querySelector(cssSelector);
	    };
	    Component.prototype.appendChild = function (newChild) {
	        if (utils.Utils.isNodeOrElement(newChild)) {
	            this.eGui.appendChild(newChild);
	        }
	        else {
	            var childComponent = newChild;
	            this.eGui.appendChild(childComponent.getGui());
	            this.childComponents.push(childComponent);
	        }
	    };
	    Component.prototype.addFeature = function (context, feature) {
	        context.wireBean(feature);
	        if (feature.destroy) {
	            this.addDestroyFunc(feature.destroy.bind(feature));
	        }
	    };
	    Component.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Component.prototype.setVisible = function (visible) {
	        if (visible !== this.visible) {
	            this.visible = visible;
	            utils.Utils.addOrRemoveCssClass(this.eGui, 'ag-hidden', !visible);
	            var event_1 = {
	                type: Component.EVENT_VISIBLE_CHANGED,
	                visible: this.visible
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {
	        utils.Utils.addOrRemoveCssClass(this.eGui, className, addOrRemove);
	    };
	    Component.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.childComponents.forEach(function (childComponent) { return childComponent.destroy(); });
	        this.childComponents.length = 0;
	        this.removeAnnotatedEventListeners();
	    };
	    Component.prototype.addGuiEventListener = function (event, listener) {
	        var _this = this;
	        this.getGui().addEventListener(event, listener);
	        this.addDestroyFunc(function () { return _this.getGui().removeEventListener(event, listener); });
	    };
	    Component.prototype.addCssClass = function (className) {
	        utils.Utils.addCssClass(this.getGui(), className);
	    };
	    Component.prototype.removeCssClass = function (className) {
	        utils.Utils.removeCssClass(this.getGui(), className);
	    };
	    Component.prototype.getAttribute = function (key) {
	        var eGui = this.getGui();
	        if (eGui) {
	            return eGui.getAttribute(key);
	        }
	        else {
	            return null;
	        }
	    };
	    Component.prototype.getRefElement = function (refName) {
	        return this.queryForHtmlElement('[ref="' + refName + '"]');
	    };
	    Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    return Component;
	}(beanStub.BeanStub));
	exports.Component = Component;
	});

	unwrapExports(component);
	var component_1 = component.Component;

	var checkboxSelectionComponent = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });









	var CheckboxSelectionComponent = (function (_super) {
	    __extends(CheckboxSelectionComponent, _super);
	    function CheckboxSelectionComponent() {
	        return _super.call(this, "<span class=\"ag-selection-checkbox\"/>") || this;
	    }
	    CheckboxSelectionComponent.prototype.createAndAddIcons = function () {
	        this.eCheckedIcon = utils.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);
	        this.eUncheckedIcon = utils.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);
	        this.eIndeterminateIcon = utils.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);
	        var element = this.getGui();
	        element.appendChild(this.eCheckedIcon);
	        element.appendChild(this.eUncheckedIcon);
	        element.appendChild(this.eIndeterminateIcon);
	    };
	    CheckboxSelectionComponent.prototype.onDataChanged = function () {
	        // when rows are loaded for the second time, this can impact the selection, as a row
	        // could be loaded as already selected (if user scrolls down, and then up again).
	        this.onSelectionChanged();
	    };
	    CheckboxSelectionComponent.prototype.onSelectableChanged = function () {
	        this.showOrHideSelect();
	    };
	    CheckboxSelectionComponent.prototype.onSelectionChanged = function () {
	        var state = this.rowNode.isSelected();
	        utils.Utils.setVisible(this.eCheckedIcon, state === true);
	        utils.Utils.setVisible(this.eUncheckedIcon, state === false);
	        utils.Utils.setVisible(this.eIndeterminateIcon, typeof state !== 'boolean');
	    };
	    CheckboxSelectionComponent.prototype.onCheckedClicked = function () {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onIndeterminateClicked = function (event) {
	        var result = this.onUncheckedClicked(event);
	        if (result === 0) {
	            this.onCheckedClicked();
	        }
	    };
	    CheckboxSelectionComponent.prototype.init = function (params) {
	        this.rowNode = params.rowNode;
	        this.column = params.column;
	        this.createAndAddIcons();
	        this.onSelectionChanged();
	        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
	        // would possibly get selected twice
	        this.addGuiEventListener('click', function (event) { return utils.Utils.stopPropagationForAgGrid(event); });
	        // likewise we don't want double click on this icon to open a group
	        this.addGuiEventListener('dblclick', function (event) { return utils.Utils.stopPropagationForAgGrid(event); });
	        this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
	        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
	        var checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();
	        if (checkboxVisibleIsDynamic) {
	            this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
	            this.showOrHideSelect();
	        }
	    };
	    CheckboxSelectionComponent.prototype.showOrHideSelect = function () {
	        // if the isRowSelectable() is not provided the row node is selectable by default
	        var selectable = this.rowNode.selectable;
	        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.
	        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need
	        // to call the colDef callback.
	        if (selectable && this.checkboxCallbackExists()) {
	            selectable = this.column.isCellCheckboxSelection(this.rowNode);
	        }
	        // show checkbox if both conditions are true
	        this.setVisible(selectable);
	    };
	    CheckboxSelectionComponent.prototype.checkboxCallbackExists = function () {
	        // column will be missing if groupUseEntireRow=true
	        var colDef = this.column ? this.column.getColDef() : null;
	        return colDef && typeof colDef.checkboxSelection === 'function';
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CheckboxSelectionComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], CheckboxSelectionComponent.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], CheckboxSelectionComponent.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], CheckboxSelectionComponent.prototype, "columnApi", void 0);
	    return CheckboxSelectionComponent;
	}(component.Component));
	exports.CheckboxSelectionComponent = CheckboxSelectionComponent;
	});

	unwrapExports(checkboxSelectionComponent);
	var checkboxSelectionComponent_1 = checkboxSelectionComponent.CheckboxSelectionComponent;

	var dragService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
	 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */
	var DragService = (function () {
	    function DragService() {
	        this.onMouseUpListener = this.onMouseUp.bind(this);
	        this.onMouseMoveListener = this.onMouseMove.bind(this);
	        this.onTouchEndListener = this.onTouchUp.bind(this);
	        this.onTouchMoveListener = this.onTouchMove.bind(this);
	        this.dragEndFunctions = [];
	        this.dragSources = [];
	    }
	    DragService.prototype.init = function () {
	        this.logger = this.loggerFactory.create('DragService');
	    };
	    DragService.prototype.destroy = function () {
	        this.dragSources.forEach(this.removeListener.bind(this));
	        this.dragSources.length = 0;
	    };
	    DragService.prototype.removeListener = function (dragSourceAndListener) {
	        var element = dragSourceAndListener.dragSource.eElement;
	        var mouseDownListener = dragSourceAndListener.mouseDownListener;
	        element.removeEventListener('mousedown', mouseDownListener);
	        // remove touch listener only if it exists
	        if (dragSourceAndListener.touchEnabled) {
	            var touchStartListener = dragSourceAndListener.touchStartListener;
	            element.removeEventListener('touchstart', touchStartListener, { passive: true });
	        }
	    };
	    DragService.prototype.removeDragSource = function (params) {
	        var dragSourceAndListener = utils.Utils.find(this.dragSources, function (item) { return item.dragSource === params; });
	        if (!dragSourceAndListener) {
	            return;
	        }
	        this.removeListener(dragSourceAndListener);
	        utils.Utils.removeFromArray(this.dragSources, dragSourceAndListener);
	    };
	    DragService.prototype.setNoSelectToBody = function (noSelect) {
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var eBody = usrDocument.querySelector('body');
	        if (utils.Utils.exists(eBody)) {
	            utils.Utils.addOrRemoveCssClass(eBody, 'ag-body-no-select', noSelect);
	        }
	    };
	    DragService.prototype.addDragSource = function (params, includeTouch) {
	        if (includeTouch === void 0) { includeTouch = false; }
	        var mouseListener = this.onMouseDown.bind(this, params);
	        params.eElement.addEventListener('mousedown', mouseListener);
	        var touchListener = null;
	        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
	        var reallyIncludeTouch = includeTouch && !suppressTouch;
	        if (reallyIncludeTouch) {
	            touchListener = this.onTouchStart.bind(this, params);
	            params.eElement.addEventListener('touchstart', touchListener, { passive: false });
	        }
	        this.dragSources.push({
	            dragSource: params,
	            mouseDownListener: mouseListener,
	            touchStartListener: touchListener,
	            touchEnabled: includeTouch
	        });
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onTouchStart = function (params, touchEvent) {
	        var _this = this;
	        this.currentDragParams = params;
	        this.dragging = false;
	        var touch = touchEvent.touches[0];
	        this.touchLastTime = touch;
	        this.touchStart = touch;
	        touchEvent.preventDefault();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in touch end handling.
	        params.eElement.addEventListener('touchmove', this.onTouchMoveListener, { passive: true });
	        params.eElement.addEventListener('touchend', this.onTouchEndListener, { passive: true });
	        params.eElement.addEventListener('touchcancel', this.onTouchEndListener, { passive: true });
	        this.dragEndFunctions.push(function () {
	            params.eElement.removeEventListener('touchmove', _this.onTouchMoveListener, { passive: true });
	            params.eElement.removeEventListener('touchend', _this.onTouchEndListener, { passive: true });
	            params.eElement.removeEventListener('touchcancel', _this.onTouchEndListener, { passive: true });
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onCommonMove(touch, this.touchStart);
	        }
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onMouseDown = function (params, mouseEvent) {
	        var _this = this;
	        // we ignore when shift key is pressed. this is for the range selection, as when
	        // user shift-clicks a cell, this should not be interpreted as the start of a drag.
	        // if (mouseEvent.shiftKey) { return; }
	        if (params.skipMouseEvent) {
	            if (params.skipMouseEvent(mouseEvent)) {
	                return;
	            }
	        }
	        // if there are two elements with parent / child relationship, and both are draggable,
	        // when we drag the child, we should NOT drag the parent. an example of this is row moving
	        // and range selection - row moving should get preference when use drags the rowDrag component.
	        if (mouseEvent._alreadyProcessedByDragService) {
	            return;
	        }
	        mouseEvent._alreadyProcessedByDragService = true;
	        // only interested in left button clicks
	        if (mouseEvent.button !== 0) {
	            return;
	        }
	        this.currentDragParams = params;
	        this.dragging = false;
	        this.mouseEventLastTime = mouseEvent;
	        this.mouseStartEvent = mouseEvent;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in mouseup handling.
	        usrDocument.addEventListener('mousemove', this.onMouseMoveListener);
	        usrDocument.addEventListener('mouseup', this.onMouseUpListener);
	        this.dragEndFunctions.push(function () {
	            usrDocument.removeEventListener('mousemove', _this.onMouseMoveListener);
	            usrDocument.removeEventListener('mouseup', _this.onMouseUpListener);
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onMouseMove(mouseEvent);
	        }
	    };
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    DragService.prototype.isEventNearStartEvent = function (currentEvent, startEvent) {
	        // by default, we wait 4 pixels before starting the drag
	        var requiredPixelDiff = utils.Utils.exists(this.currentDragParams.dragStartPixels) ? this.currentDragParams.dragStartPixels : 4;
	        return utils.Utils.areEventsNear(currentEvent, startEvent, requiredPixelDiff);
	    };
	    DragService.prototype.getFirstActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    DragService.prototype.onCommonMove = function (currentEvent, startEvent) {
	        if (!this.dragging) {
	            // if mouse hasn't travelled from the start position enough, do nothing
	            var toEarlyToDrag = !this.dragging && this.isEventNearStartEvent(currentEvent, startEvent);
	            if (toEarlyToDrag) {
	                return;
	            }
	            else {
	                // alert(`started`);
	                this.dragging = true;
	                var event_1 = {
	                    type: events$1.Events.EVENT_DRAG_STARTED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	                this.currentDragParams.onDragStart(startEvent);
	                this.setNoSelectToBody(true);
	            }
	        }
	        this.currentDragParams.onDragging(currentEvent);
	    };
	    DragService.prototype.onTouchMove = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        // this.___statusBar.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
	        // if we don't preview default, then the browser will try and do it's own touch stuff,
	        // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused
	        // with scroll page in the app)
	        // touchEvent.preventDefault();
	        this.onCommonMove(touch, this.touchStart);
	    };
	    // only gets called after a mouse down - as this is only added after mouseDown
	    // and is removed when mouseUp happens
	    DragService.prototype.onMouseMove = function (mouseEvent) {
	        this.onCommonMove(mouseEvent, this.mouseStartEvent);
	    };
	    DragService.prototype.onTouchUp = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
	        // i haven't worked this out yet, but there is no matching touch
	        // when we get the touch up event. to get around this, we swap in
	        // the last touch. this is a hack to 'get it working' while we
	        // figure out what's going on, why we are not getting a touch in
	        // current event.
	        if (!touch) {
	            touch = this.touchLastTime;
	        }
	        // if mouse was left up before we started to move, then this is a tap.
	        // we check this before onUpCommon as onUpCommon resets the dragging
	        // let tap = !this.dragging;
	        // let tapTarget = this.currentDragParams.eElement;
	        this.onUpCommon(touch);
	        // if tap, tell user
	        // console.log(`${Math.random()} tap = ${tap}`);
	        // if (tap) {
	        //     tapTarget.click();
	        // }
	    };
	    DragService.prototype.onMouseUp = function (mouseEvent) {
	        this.onUpCommon(mouseEvent);
	    };
	    DragService.prototype.onUpCommon = function (eventOrTouch) {
	        if (this.dragging) {
	            this.dragging = false;
	            this.currentDragParams.onDragStop(eventOrTouch);
	            var event_2 = {
	                type: events$1.Events.EVENT_DRAG_STOPPED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	        this.setNoSelectToBody(false);
	        this.mouseStartEvent = null;
	        this.mouseEventLastTime = null;
	        this.touchStart = null;
	        this.touchLastTime = null;
	        this.currentDragParams = null;
	        this.dragEndFunctions.forEach(function (func) { return func(); });
	        this.dragEndFunctions.length = 0;
	    };
	    __decorate([
	        context.Autowired('loggerFactory'),
	        __metadata("design:type", logger.LoggerFactory)
	    ], DragService.prototype, "loggerFactory", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], DragService.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], DragService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], DragService.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], DragService.prototype, "gridApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "init", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "destroy", null);
	    DragService = __decorate([
	        context.Bean('dragService')
	    ], DragService);
	    return DragService;
	}());
	exports.DragService = DragService;
	});

	unwrapExports(dragService);
	var dragService_1 = dragService.DragService;

	var environment = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var themeNames = ['fresh', 'dark', 'blue', 'bootstrap', 'material', 'balham-dark', 'balham'];
	var themes = themeNames.concat(themeNames.map(function (name) { return "theme-" + name; }));
	var themeClass = new RegExp("ag-(" + themes.join('|') + ")");
	var matGridSize = 8;
	var freshGridSize = 4;
	var balhamGridSize = 4;
	var HARD_CODED_SIZES = {
	    'ag-theme-material': {
	        headerHeight: matGridSize * 7,
	        virtualItemHeight: matGridSize * 5,
	        rowHeight: matGridSize * 6
	    },
	    'ag-theme-classic': {
	        headerHeight: 25,
	        virtualItemHeight: freshGridSize * 5,
	        rowHeight: 25
	    },
	    'ag-theme-balham': {
	        headerHeight: balhamGridSize * 8,
	        virtualItemHeight: balhamGridSize * 7,
	        rowHeight: balhamGridSize * 7
	    }
	};
	var Environment = (function () {
	    function Environment() {
	        this.sassVariables = {};
	    }
	    // Approach described here:
	    // https://www.ofcodeandcolor.com/2017/04/02/encoding-data-in-css/
	    Environment.prototype.loadSassVariables = function () {
	        /*
	        var element = document.createElement('div');
	        element.className = 'sass-variables';
	        this.eGridDiv.appendChild(element);

	        var content = window.getComputedStyle(element, '::after').content;

	        try {
	            this.sassVariables = JSON.parse(JSON.parse(content));
	        } catch (e) {
	            throw new Error("Failed loading the theme sizing - check that you have the theme set up correctly.");
	        }

	        this.eGridDiv.removeChild(element);
	        */
	    };
	    Environment.prototype.getSassVariable = function (theme, key) {
	        if (theme == 'ag-theme-material') {
	            return HARD_CODED_SIZES['ag-theme-material'][key];
	        }
	        else if (theme == 'ag-theme-balham' || theme == 'ag-theme-balham-dark') {
	            return HARD_CODED_SIZES['ag-theme-balham'][key];
	        }
	        return HARD_CODED_SIZES['ag-theme-classic'][key];
	        /*
	        const result = parseInt(this.sassVariables[key]);
	        if (!result || isNaN(result)) {
	            throw new Error(`Failed loading ${key} Sass variable from ${this.sassVariables}`);
	        }
	        return result;
	        */
	    };
	    Environment.prototype.getTheme = function () {
	        var themeMatch;
	        var element = this.eGridDiv;
	        while (element != document.documentElement && themeMatch == null) {
	            themeMatch = element.className.match(themeClass);
	            element = element.parentElement;
	            if (element == null) {
	                break;
	            }
	        }
	        if (themeMatch) {
	            return themeMatch[0];
	        }
	        else {
	            return 'ag-fresh';
	        }
	    };
	    __decorate([
	        context.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], Environment.prototype, "eGridDiv", void 0);
	    Environment = __decorate([
	        context.Bean('environment')
	    ], Environment);
	    return Environment;
	}());
	exports.Environment = Environment;
	});

	unwrapExports(environment);
	var environment_1 = environment.Environment;

	var dragAndDropService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var DragSourceType;
	(function (DragSourceType) {
	    DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
	    DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
	    DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
	})(DragSourceType = exports.DragSourceType || (exports.DragSourceType = {}));
	var VDirection;
	(function (VDirection) {
	    VDirection[VDirection["Up"] = 0] = "Up";
	    VDirection[VDirection["Down"] = 1] = "Down";
	})(VDirection = exports.VDirection || (exports.VDirection = {}));
	var HDirection;
	(function (HDirection) {
	    HDirection[HDirection["Left"] = 0] = "Left";
	    HDirection[HDirection["Right"] = 1] = "Right";
	})(HDirection = exports.HDirection || (exports.HDirection = {}));
	var DragAndDropService = (function () {
	    function DragAndDropService() {
	        this.dragSourceAndParamsList = [];
	        this.dropTargets = [];
	    }
	    DragAndDropService_1 = DragAndDropService;
	    DragAndDropService.prototype.init = function () {
	        this.ePinnedIcon = utils.Utils.createIcon('columnMovePin', this.gridOptionsWrapper, null);
	        this.ePlusIcon = utils.Utils.createIcon('columnMoveAdd', this.gridOptionsWrapper, null);
	        this.eHiddenIcon = utils.Utils.createIcon('columnMoveHide', this.gridOptionsWrapper, null);
	        this.eMoveIcon = utils.Utils.createIcon('columnMoveMove', this.gridOptionsWrapper, null);
	        this.eLeftIcon = utils.Utils.createIcon('columnMoveLeft', this.gridOptionsWrapper, null);
	        this.eRightIcon = utils.Utils.createIcon('columnMoveRight', this.gridOptionsWrapper, null);
	        this.eGroupIcon = utils.Utils.createIcon('columnMoveGroup', this.gridOptionsWrapper, null);
	        this.eAggregateIcon = utils.Utils.createIcon('columnMoveValue', this.gridOptionsWrapper, null);
	        this.ePivotIcon = utils.Utils.createIcon('columnMovePivot', this.gridOptionsWrapper, null);
	        this.eDropNotAllowedIcon = utils.Utils.createIcon('dropNotAllowed', this.gridOptionsWrapper, null);
	    };
	    DragAndDropService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('OldToolPanelDragAndDropService');
	    };
	    DragAndDropService.prototype.getStringType = function (type) {
	        switch (type) {
	            case DragSourceType.RowDrag: return 'row';
	            case DragSourceType.HeaderCell: return 'headerCell';
	            case DragSourceType.ToolPanel: return 'toolPanel';
	            default:
	                console.warn("ag-Grid: bug - unknown drag type " + type);
	                return null;
	        }
	    };
	    DragAndDropService.prototype.addDragSource = function (dragSource, allowTouch) {
	        if (allowTouch === void 0) { allowTouch = false; }
	        var params = {
	            eElement: dragSource.eElement,
	            dragStartPixels: dragSource.dragStartPixels,
	            onDragStart: this.onDragStart.bind(this, dragSource),
	            onDragStop: this.onDragStop.bind(this),
	            onDragging: this.onDragging.bind(this)
	        };
	        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });
	        this.dragService.addDragSource(params, allowTouch);
	    };
	    DragAndDropService.prototype.removeDragSource = function (dragSource) {
	        var sourceAndParams = utils.Utils.find(this.dragSourceAndParamsList, function (item) { return item.dragSource === dragSource; });
	        if (sourceAndParams) {
	            this.dragService.removeDragSource(sourceAndParams.params);
	            utils.Utils.removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
	        }
	    };
	    DragAndDropService.prototype.destroy = function () {
	        var _this = this;
	        this.dragSourceAndParamsList.forEach(function (sourceAndParams) {
	            _this.dragService.removeDragSource(sourceAndParams.params);
	        });
	        this.dragSourceAndParamsList.length = 0;
	    };
	    DragAndDropService.prototype.nudge = function () {
	        if (this.dragging) {
	            this.onDragging(this.eventLastTime, true);
	        }
	    };
	    DragAndDropService.prototype.onDragStart = function (dragSource, mouseEvent) {
	        this.dragging = true;
	        this.dragSource = dragSource;
	        this.eventLastTime = mouseEvent;
	        this.dragItem = this.dragSource.dragItemCallback();
	        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
	        if (this.dragSource.dragStarted) {
	            this.dragSource.dragStarted();
	        }
	        this.createGhost();
	    };
	    DragAndDropService.prototype.onDragStop = function (mouseEvent) {
	        this.eventLastTime = null;
	        this.dragging = false;
	        if (this.dragSource.dragStopped) {
	            this.dragSource.dragStopped();
	        }
	        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
	            var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
	            this.lastDropTarget.onDragStop(draggingEvent);
	        }
	        this.lastDropTarget = null;
	        this.dragItem = null;
	        this.removeGhost();
	    };
	    DragAndDropService.prototype.onDragging = function (mouseEvent, fromNudge) {
	        var hDirection = this.workOutHDirection(mouseEvent);
	        var vDirection = this.workOutVDirection(mouseEvent);
	        this.eventLastTime = mouseEvent;
	        this.positionGhost(mouseEvent);
	        // check if mouseEvent intersects with any of the drop targets
	        var dropTarget = utils.Utils.find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));
	        if (dropTarget !== this.lastDropTarget) {
	            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
	            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            this.lastDropTarget = dropTarget;
	        }
	        else if (dropTarget) {
	            var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            dropTarget.onDragging(draggingEvent);
	        }
	    };
	    DragAndDropService.prototype.enterDragTargetIfExists = function (dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!dropTarget) {
	            return;
	        }
	        var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        dropTarget.onDragEnter(dragEnterEvent);
	        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
	    };
	    DragAndDropService.prototype.leaveLastTargetIfExists = function (mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!this.lastDropTarget) {
	            return;
	        }
	        var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        this.lastDropTarget.onDragLeave(dragLeaveEvent);
	        this.setGhostIcon(null);
	    };
	    DragAndDropService.prototype.getAllContainersFromDropTarget = function (dropTarget) {
	        var containers = [dropTarget.getContainer()];
	        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
	        if (secondaryContainers) {
	            containers = containers.concat(secondaryContainers);
	        }
	        return containers;
	    };
	    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
	    DragAndDropService.prototype.isMouseOnDropTarget = function (mouseEvent, dropTarget) {
	        var allContainers = this.getAllContainersFromDropTarget(dropTarget);
	        var mouseOverTarget = false;
	        allContainers.forEach(function (eContainer) {
	            if (!eContainer) {
	                return;
	            } // secondary can be missing
	            var rect = eContainer.getBoundingClientRect();
	            // if element is not visible, then width and height are zero
	            if (rect.width === 0 || rect.height === 0) {
	                return;
	            }
	            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
	            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;
	            //console.log(`rect.width = ${rect.width} || rect.height = ${rect.height} ## verticalFit = ${verticalFit}, horizontalFit = ${horizontalFit}, `);
	            if (horizontalFit && verticalFit) {
	                mouseOverTarget = true;
	            }
	        });
	        if (mouseOverTarget) {
	            var mouseOverTargetAndInterested = dropTarget.isInterestedIn(this.dragSource.type);
	            return mouseOverTargetAndInterested;
	        }
	        else {
	            return false;
	        }
	    };
	    DragAndDropService.prototype.addDropTarget = function (dropTarget) {
	        this.dropTargets.push(dropTarget);
	    };
	    DragAndDropService.prototype.workOutHDirection = function (event) {
	        if (this.eventLastTime.clientX > event.clientX) {
	            return HDirection.Left;
	        }
	        else if (this.eventLastTime.clientX < event.clientX) {
	            return HDirection.Right;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.workOutVDirection = function (event) {
	        if (this.eventLastTime.clientY > event.clientY) {
	            return VDirection.Up;
	        }
	        else if (this.eventLastTime.clientY < event.clientY) {
	            return VDirection.Down;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.createDropTargetEvent = function (dropTarget, event, hDirection, vDirection, fromNudge) {
	        // localise x and y to the target component
	        var rect = dropTarget.getContainer().getBoundingClientRect();
	        var x = event.clientX - rect.left;
	        var y = event.clientY - rect.top;
	        var dropTargetEvent = {
	            event: event,
	            x: x,
	            y: y,
	            vDirection: vDirection,
	            hDirection: hDirection,
	            dragSource: this.dragSource,
	            fromNudge: fromNudge,
	            dragItem: this.dragItem
	        };
	        return dropTargetEvent;
	    };
	    DragAndDropService.prototype.positionGhost = function (event) {
	        var ghostRect = this.eGhost.getBoundingClientRect();
	        var ghostHeight = ghostRect.height;
	        // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
	        // then brought in scrollbars to the browser. no idea why, but putting in -2 here
	        // works around it which is good enough for me.
	        var browserWidth = utils.Utils.getBodyWidth() - 2;
	        var browserHeight = utils.Utils.getBodyHeight() - 2;
	        // put ghost vertically in middle of cursor
	        var top = event.pageY - (ghostHeight / 2);
	        // horizontally, place cursor just right of icon
	        var left = event.pageX - 30;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
	        var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
	        // check ghost is not positioned outside of the browser
	        if (browserWidth > 0) {
	            if ((left + this.eGhost.clientWidth) > (browserWidth + windowScrollX)) {
	                left = browserWidth + windowScrollX - this.eGhost.clientWidth;
	            }
	        }
	        if (left < 0) {
	            left = 0;
	        }
	        if (browserHeight > 0) {
	            if ((top + this.eGhost.clientHeight) > (browserHeight + windowScrollY)) {
	                top = browserHeight + windowScrollY - this.eGhost.clientHeight;
	            }
	        }
	        if (top < 0) {
	            top = 0;
	        }
	        this.eGhost.style.left = left + 'px';
	        this.eGhost.style.top = top + 'px';
	    };
	    DragAndDropService.prototype.removeGhost = function () {
	        if (this.eGhost && this.eGhostParent) {
	            this.eGhostParent.removeChild(this.eGhost);
	        }
	        this.eGhost = null;
	    };
	    DragAndDropService.prototype.createGhost = function () {
	        this.eGhost = utils.Utils.loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
	        utils.Utils.addCssClass(this.eGhost, this.environment.getTheme());
	        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');
	        this.setGhostIcon(null);
	        var eText = this.eGhost.querySelector('.ag-dnd-ghost-label');
	        eText.innerHTML = this.dragSource.dragItemName;
	        this.eGhost.style.height = '25px';
	        this.eGhost.style.top = '20px';
	        this.eGhost.style.left = '20px';
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        this.eGhostParent = usrDocument.querySelector('body');
	        if (!this.eGhostParent) {
	            console.warn('ag-Grid: could not find document body, it is needed for dragging columns');
	        }
	        else {
	            this.eGhostParent.appendChild(this.eGhost);
	        }
	    };
	    DragAndDropService.prototype.setGhostIcon = function (iconName, shake) {
	        if (shake === void 0) { shake = false; }
	        utils.Utils.removeAllChildren(this.eGhostIcon);
	        var eIcon;
	        switch (iconName) {
	            case DragAndDropService_1.ICON_ADD:
	                eIcon = this.ePlusIcon;
	                break;
	            case DragAndDropService_1.ICON_PINNED:
	                eIcon = this.ePinnedIcon;
	                break;
	            case DragAndDropService_1.ICON_MOVE:
	                eIcon = this.eMoveIcon;
	                break;
	            case DragAndDropService_1.ICON_LEFT:
	                eIcon = this.eLeftIcon;
	                break;
	            case DragAndDropService_1.ICON_RIGHT:
	                eIcon = this.eRightIcon;
	                break;
	            case DragAndDropService_1.ICON_GROUP:
	                eIcon = this.eGroupIcon;
	                break;
	            case DragAndDropService_1.ICON_AGGREGATE:
	                eIcon = this.eAggregateIcon;
	                break;
	            case DragAndDropService_1.ICON_PIVOT:
	                eIcon = this.ePivotIcon;
	                break;
	            case DragAndDropService_1.ICON_NOT_ALLOWED:
	                eIcon = this.eDropNotAllowedIcon;
	                break;
	            default:
	                eIcon = this.eHiddenIcon;
	                break;
	        }
	        this.eGhostIcon.appendChild(eIcon);
	        utils.Utils.addOrRemoveCssClass(this.eGhostIcon, 'ag-shake-left-to-right', shake);
	    };
	    DragAndDropService.ICON_PINNED = 'pinned';
	    DragAndDropService.ICON_ADD = 'add';
	    DragAndDropService.ICON_MOVE = 'move';
	    DragAndDropService.ICON_LEFT = 'left';
	    DragAndDropService.ICON_RIGHT = 'right';
	    DragAndDropService.ICON_GROUP = 'group';
	    DragAndDropService.ICON_AGGREGATE = 'aggregate';
	    DragAndDropService.ICON_PIVOT = 'pivot';
	    DragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';
	    DragAndDropService.GHOST_TEMPLATE = '<div class="ag-dnd-ghost">' +
	        '  <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>' +
	        '  <div class="ag-dnd-ghost-label">' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], DragAndDropService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('dragService'),
	        __metadata("design:type", dragService.DragService)
	    ], DragAndDropService.prototype, "dragService", void 0);
	    __decorate([
	        context.Autowired('environment'),
	        __metadata("design:type", environment.Environment)
	    ], DragAndDropService.prototype, "environment", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], DragAndDropService.prototype, "columnController", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "init", null);
	    __decorate([
	        __param(0, context.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "setBeans", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "destroy", null);
	    DragAndDropService = DragAndDropService_1 = __decorate([
	        context.Bean('dragAndDropService')
	    ], DragAndDropService);
	    return DragAndDropService;
	    var DragAndDropService_1;
	}());
	exports.DragAndDropService = DragAndDropService;
	});

	unwrapExports(dragAndDropService);
	var dragAndDropService_1 = dragAndDropService.DragSourceType;
	var dragAndDropService_2 = dragAndDropService.VDirection;
	var dragAndDropService_3 = dragAndDropService.HDirection;
	var dragAndDropService_4 = dragAndDropService.DragAndDropService;

	var rowDragComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var RowDragComp = (function (_super) {
	    __extends(RowDragComp, _super);
	    function RowDragComp(rowNode$$1, column, cellValue, beans) {
	        var _this = _super.call(this, "<span class=\"ag-row-drag\"></span>") || this;
	        _this.rowNode = rowNode$$1;
	        _this.column = column;
	        _this.cellValue = cellValue;
	        _this.beans = beans;
	        return _this;
	    }
	    RowDragComp.prototype.postConstruct = function () {
	        this.addDragSource();
	        this.checkCompatibility();
	        if (this.beans.gridOptionsWrapper.isRowDragManaged()) {
	            this.addFeature(this.beans.context, new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column));
	        }
	        else {
	            this.addFeature(this.beans.context, new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column));
	        }
	    };
	    // returns true if all compatibility items work out
	    RowDragComp.prototype.checkCompatibility = function () {
	        var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
	        var treeData = this.beans.gridOptionsWrapper.isTreeData();
	        if (treeData && managed) {
	            utils._.doOnce(function () {
	                return console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true');
	            }, 'RowDragComp.managedAndTreeData');
	        }
	    };
	    RowDragComp.prototype.addDragSource = function () {
	        var _this = this;
	        var dragItem = {
	            rowNode: this.rowNode
	        };
	        var dragSource = {
	            type: dragAndDropService.DragSourceType.RowDrag,
	            eElement: this.getGui(),
	            dragItemName: this.cellValue,
	            dragItemCallback: function () { return dragItem; },
	            dragStartPixels: 0
	        };
	        this.beans.dragAndDropService.addDragSource(dragSource, true);
	        this.addDestroyFunc(function () { return _this.beans.dragAndDropService.removeDragSource(dragSource); });
	    };
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowDragComp.prototype, "postConstruct", null);
	    return RowDragComp;
	}(component.Component));
	exports.RowDragComp = RowDragComp;
	// when non managed, the visibility depends on suppressRowDrag property only
	var NonManagedVisibilityStrategy = (function (_super) {
	    __extends(NonManagedVisibilityStrategy, _super);
	    function NonManagedVisibilityStrategy(parent, beans, rowNode$$1, column) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.beans = beans;
	        _this.column = column;
	        _this.rowNode = rowNode$$1;
	        return _this;
	    }
	    NonManagedVisibilityStrategy.prototype.postConstruct = function () {
	        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));
	        // in case data changes, then we need to update visibility of drag item
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
	        this.workOutVisibility();
	    };
	    NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
	        this.workOutVisibility();
	    };
	    NonManagedVisibilityStrategy.prototype.workOutVisibility = function () {
	        // only show the drag if both sort and filter are not present
	        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
	        if (suppressRowDrag) {
	            this.parent.setVisible(false);
	        }
	        else {
	            var visible = this.column.isRowDrag(this.rowNode);
	            this.parent.setVisible(visible);
	        }
	    };
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], NonManagedVisibilityStrategy.prototype, "postConstruct", null);
	    return NonManagedVisibilityStrategy;
	}(beanStub.BeanStub));
	// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property
	var ManagedVisibilityStrategy = (function (_super) {
	    __extends(ManagedVisibilityStrategy, _super);
	    function ManagedVisibilityStrategy(parent, beans, rowNode$$1, column) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.beans = beans;
	        _this.column = column;
	        _this.rowNode = rowNode$$1;
	        return _this;
	    }
	    ManagedVisibilityStrategy.prototype.postConstruct = function () {
	        // we do not show the component if sort, filter or grouping is active
	        this.addDestroyableEventListener(this.beans.eventService, eventKeys.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, eventKeys.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, eventKeys.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
	        // in case data changes, then we need to update visibility of drag item
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
	        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));
	        this.updateSortActive();
	        this.updateFilterActive();
	        this.updateRowGroupActive();
	        this.workOutVisibility();
	    };
	    ManagedVisibilityStrategy.prototype.updateRowGroupActive = function () {
	        var rowGroups = this.beans.columnController.getRowGroupColumns();
	        this.rowGroupActive = !utils._.missingOrEmpty(rowGroups);
	    };
	    ManagedVisibilityStrategy.prototype.onRowGroupChanged = function () {
	        this.updateRowGroupActive();
	        this.workOutVisibility();
	    };
	    ManagedVisibilityStrategy.prototype.updateSortActive = function () {
	        var sortModel = this.beans.sortController.getSortModel();
	        this.sortActive = !utils._.missingOrEmpty(sortModel);
	    };
	    ManagedVisibilityStrategy.prototype.onSortChanged = function () {
	        this.updateSortActive();
	        this.workOutVisibility();
	    };
	    ManagedVisibilityStrategy.prototype.updateFilterActive = function () {
	        this.filterActive = this.beans.filterManager.isAnyFilterPresent();
	    };
	    ManagedVisibilityStrategy.prototype.onFilterChanged = function () {
	        this.updateFilterActive();
	        this.workOutVisibility();
	    };
	    ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
	        this.workOutVisibility();
	    };
	    ManagedVisibilityStrategy.prototype.workOutVisibility = function () {
	        // only show the drag if both sort and filter are not present
	        var sortOrFilterOrGroupActive = this.sortActive || this.filterActive || this.rowGroupActive;
	        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
	        var alwaysHide = sortOrFilterOrGroupActive || suppressRowDrag;
	        if (alwaysHide) {
	            this.parent.setVisible(false);
	        }
	        else {
	            var visible = this.column.isRowDrag(this.rowNode);
	            this.parent.setVisible(visible);
	        }
	    };
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ManagedVisibilityStrategy.prototype, "postConstruct", null);
	    return ManagedVisibilityStrategy;
	}(beanStub.BeanStub));
	});

	unwrapExports(rowDragComp);
	var rowDragComp_1 = rowDragComp.RowDragComp;

	var cellComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });









	var CellComp = (function (_super) {
	    __extends(CellComp, _super);
	    function CellComp(scope, beans, column$$1, rowNode$$1, rowComp, autoHeightCell) {
	        var _this = _super.call(this) || this;
	        _this.editingCell = false;
	        // every time we go into edit mode, or back again, this gets incremented.
	        // it's the components way of dealing with the async nature of framework components,
	        // so if a framework component takes a while to be created, we know if the object
	        // is still relevant when creating is finished. eg we could click edit / unedit 20
	        // times before the first React edit component comes back - we should discard
	        // the first 19.
	        _this.cellEditorVersion = 0;
	        _this.cellRendererVersion = 0;
	        _this.scope = scope;
	        _this.beans = beans;
	        _this.column = column$$1;
	        _this.rowNode = rowNode$$1;
	        _this.rowComp = rowComp;
	        _this.autoHeightCell = autoHeightCell;
	        _this.createGridCellVo();
	        _this.rangeSelectionEnabled = beans.enterprise && beans.gridOptionsWrapper.isEnableRangeSelection();
	        _this.cellFocused = _this.beans.focusedCellController.isCellFocused(_this.gridCell);
	        _this.firstRightPinned = _this.column.isFirstRightPinned();
	        _this.lastLeftPinned = _this.column.isLastLeftPinned();
	        if (_this.rangeSelectionEnabled) {
	            _this.rangeCount = _this.beans.rangeController.getCellRangeCount(_this.gridCell);
	        }
	        _this.getValueAndFormat();
	        _this.setUsingWrapper();
	        _this.chooseCellRenderer();
	        _this.setupColSpan();
	        _this.rowSpan = _this.column.getRowSpan(_this.rowNode);
	        return _this;
	    }
	    CellComp.prototype.getCreateTemplate = function () {
	        var templateParts = [];
	        var col = this.column;
	        var width = this.getCellWidth();
	        var left = col.getLeft();
	        var valueToRender = this.getInitialValueToRender();
	        var valueSanitised = utils._.get(this.column, 'colDef.template', null) ? valueToRender : utils._.escape(valueToRender);
	        this.tooltip = this.getToolTip();
	        var tooltipSanitised = utils._.escape(this.tooltip);
	        var colIdSanitised = utils._.escape(col.getId());
	        var wrapperStartTemplate;
	        var wrapperEndTemplate;
	        var stylesFromColDef = this.preProcessStylesFromColDef();
	        var cssClasses = this.getInitialCssClasses();
	        var stylesForRowSpanning = this.getStylesForRowSpanning();
	        if (this.usingWrapper) {
	            wrapperStartTemplate = '<span ref="eCellWrapper" class="ag-cell-wrapper"><span ref="eCellValue" class="ag-cell-value">';
	            wrapperEndTemplate = '</span></span>';
	        }
	        // hey, this looks like React!!!
	        templateParts.push("<div");
	        templateParts.push(" tabindex=\"-1\"");
	        templateParts.push(" role=\"gridcell\"");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\" ");
	        templateParts.push(" col-id=\"" + colIdSanitised + "\"");
	        templateParts.push(" class=\"" + cssClasses.join(' ') + "\"");
	        templateParts.push(tooltipSanitised ? " title=\"" + tooltipSanitised + "\"" : "");
	        templateParts.push(" style=\"width: " + width + "px; left: " + left + "px; " + stylesFromColDef + " " + stylesForRowSpanning + "\" >");
	        templateParts.push(wrapperStartTemplate);
	        templateParts.push(valueSanitised);
	        templateParts.push(wrapperEndTemplate);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    CellComp.prototype.getStylesForRowSpanning = function () {
	        if (this.rowSpan === 1) {
	            return '';
	        }
	        var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
	        var totalRowHeight = singleRowHeight * this.rowSpan;
	        return "height: " + totalRowHeight + "px; z-index: 1;";
	    };
	    CellComp.prototype.afterAttached = function () {
	        var querySelector = "[comp-id=\"" + this.getCompId() + "\"]";
	        var eGui = this.eParentRow.querySelector(querySelector);
	        this.setGui(eGui);
	        // all of these have dependencies on the eGui, so only do them after eGui is set
	        this.addDomData();
	        this.populateTemplate();
	        this.attachCellRenderer();
	        this.angular1Compile();
	        this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_FLASH_CELLS, this.onFlashCells.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_CELL_CHANGED, this.onCellChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, this.onFirstRightPinnedChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_LAST_LEFT_PINNED_CHANGED, this.onLastLeftPinnedChanged.bind(this));
	        // if not doing enterprise, then range selection service would be missing
	        // so need to check before trying to use it
	        if (this.rangeSelectionEnabled) {
	            this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
	        }
	    };
	    CellComp.prototype.onColumnHover = function () {
	        var isHovered = this.beans.columnHoverService.isHovered(this.column);
	        utils._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
	    };
	    CellComp.prototype.onCellChanged = function (event) {
	        var eventImpactsThisCell = event.column === this.column;
	        if (eventImpactsThisCell) {
	            this.refreshCell({});
	        }
	    };
	    CellComp.prototype.getCellLeft = function () {
	        var mostLeftCol;
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            mostLeftCol = this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            mostLeftCol = this.column;
	        }
	        return mostLeftCol.getLeft();
	    };
	    CellComp.prototype.getCellWidth = function () {
	        if (this.colsSpanning) {
	            var result_1 = 0;
	            this.colsSpanning.forEach(function (col) { return result_1 += col.getActualWidth(); });
	            return result_1;
	        }
	        else {
	            return this.column.getActualWidth();
	        }
	    };
	    CellComp.prototype.onFlashCells = function (event) {
	        var cellId = this.gridCell.createId();
	        var shouldFlash = event.cells[cellId];
	        if (shouldFlash) {
	            this.animateCell('highlight');
	        }
	    };
	    CellComp.prototype.setupColSpan = function () {
	        // if no col span is active, then we don't set it up, as it would be wasteful of CPU
	        if (utils._.missing(this.column.getColDef().colSpan)) {
	            return;
	        }
	        // because we are col spanning, a reorder of the cols can change what cols we are spanning over
	        this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
	        // because we are spanning over multiple cols, we check for width any time any cols width changes.
	        // this is expensive - really we should be explicitly checking only the cols we are spanning over
	        // instead of every col, however it would be tricky code to track the cols we are spanning over, so
	        // because hardly anyone will be using colSpan, am favoring this easier way for more maintainable code.
	        this.addDestroyableEventListener(this.beans.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.colsSpanning = this.getColSpanningList();
	    };
	    CellComp.prototype.getColSpanningList = function () {
	        var colSpan = this.column.getColSpan(this.rowNode);
	        var colsSpanning = [];
	        // if just one col, the col span is just the column we are in
	        if (colSpan === 1) {
	            colsSpanning.push(this.column);
	        }
	        else {
	            var pointer = this.column;
	            var pinned = this.column.getPinned();
	            for (var i = 0; i < colSpan; i++) {
	                colsSpanning.push(pointer);
	                pointer = this.beans.columnController.getDisplayedColAfter(pointer);
	                if (utils._.missing(pointer)) {
	                    break;
	                }
	                // we do not allow col spanning to span outside of pinned areas
	                if (pinned !== pointer.getPinned()) {
	                    break;
	                }
	            }
	        }
	        return colsSpanning;
	    };
	    CellComp.prototype.onDisplayColumnsChanged = function () {
	        var colsSpanning = this.getColSpanningList();
	        if (!utils._.compareArrays(this.colsSpanning, colsSpanning)) {
	            this.colsSpanning = colsSpanning;
	            this.onWidthChanged();
	            this.onLeftChanged(); // left changes when doing RTL
	        }
	    };
	    CellComp.prototype.getInitialCssClasses = function () {
	        var cssClasses = ["ag-cell", "ag-cell-not-inline-editing"];
	        // if we are putting the cell into a dummy container, to work out it's height,
	        // then we don't put the height css in, as we want cell to fit height in that case.
	        if (!this.autoHeightCell) {
	            cssClasses.push('ag-cell-with-height');
	        }
	        var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
	        if (doingFocusCss) {
	            // otherwise the class depends on the focus state
	            cssClasses.push(this.cellFocused ? 'ag-cell-focus' : 'ag-cell-no-focus');
	        }
	        else {
	            // if we are not doing cell selection, then ag-cell-no-focus gets put onto every cell
	            cssClasses.push('ag-cell-no-focus');
	        }
	        if (this.firstRightPinned) {
	            cssClasses.push('ag-cell-first-right-pinned');
	        }
	        if (this.lastLeftPinned) {
	            cssClasses.push('ag-cell-last-left-pinned');
	        }
	        if (this.beans.columnHoverService.isHovered(this.column)) {
	            cssClasses.push('ag-column-hover');
	        }
	        utils._.pushAll(cssClasses, this.preProcessClassesFromColDef());
	        utils._.pushAll(cssClasses, this.preProcessCellClassRules());
	        utils._.pushAll(cssClasses, this.getRangeClasses());
	        // if using the wrapper, this class goes on the wrapper instead
	        if (!this.usingWrapper) {
	            cssClasses.push('ag-cell-value');
	        }
	        return cssClasses;
	    };
	    CellComp.prototype.getInitialValueToRender = function () {
	        // if using a cellRenderer, then render the html from the cell renderer if it exists
	        if (this.usingCellRenderer) {
	            if (typeof this.cellRendererGui === 'string') {
	                return this.cellRendererGui;
	            }
	            else {
	                return '';
	            }
	        }
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            return colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                return template;
	            }
	            else {
	                return '';
	            }
	        }
	        else {
	            return this.getValueToUse();
	        }
	    };
	    CellComp.prototype.getRenderedRow = function () {
	        return this.rowComp;
	    };
	    CellComp.prototype.isSuppressNavigable = function () {
	        return this.column.isSuppressNavigable(this.rowNode);
	    };
	    CellComp.prototype.getCellRenderer = function () {
	        return this.cellRenderer;
	    };
	    CellComp.prototype.getCellEditor = function () {
	        return this.cellEditor;
	    };
	    // + stop editing {forceRefresh: true, suppressFlash: true}
	    // + event cellChanged {}
	    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
	    // + rowComp: event dataChanged {animate: update, newData: !update}
	    // + rowComp: api refreshCells() {animate: true/false}
	    // + rowRenderer: api softRefreshView() {}
	    CellComp.prototype.refreshCell = function (params) {
	        if (this.editingCell) {
	            return;
	        }
	        var newData = params && params.newData;
	        var suppressFlash = (params && params.suppressFlash) || this.column.getColDef().suppressCellFlash;
	        var forceRefresh = params && params.forceRefresh;
	        var oldValue = this.value;
	        this.getValueAndFormat();
	        // for simple values only (not pojo's), see if the value is the same, and if it is, skip the refresh.
	        // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
	        // if was before the edit.
	        var valuesDifferent = !this.valuesAreEqual(oldValue, this.value);
	        var dataNeedsUpdating = forceRefresh || valuesDifferent;
	        if (dataNeedsUpdating) {
	            var cellRendererRefreshed = void 0;
	            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
	            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
	            // then we are not showing a movement in the stock price, rather we are showing different stock.
	            if (newData || suppressFlash) {
	                cellRendererRefreshed = false;
	            }
	            else {
	                cellRendererRefreshed = this.attemptCellRendererRefresh();
	            }
	            // we do the replace if not doing refresh, or if refresh was unsuccessful.
	            // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
	            // wrapper has the refresh method, but the underlying component doesn't
	            if (!cellRendererRefreshed) {
	                this.replaceContentsAfterRefresh();
	            }
	            if (!suppressFlash) {
	                var flashCell = this.beans.gridOptionsWrapper.isEnableCellChangeFlash()
	                    || this.column.getColDef().enableCellChangeFlash;
	                if (flashCell) {
	                    this.flashCell();
	                }
	            }
	            // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static
	            this.postProcessStylesFromColDef();
	            this.postProcessClassesFromColDef();
	        }
	        this.refreshToolTip();
	        // we do cellClassRules even if the value has not changed, so that users who have rules that
	        // look at other parts of the row (where the other part of the row might of changed) will work.
	        this.postProcessCellClassRules();
	    };
	    // user can also call this via API
	    CellComp.prototype.flashCell = function () {
	        this.animateCell('data-changed');
	    };
	    CellComp.prototype.animateCell = function (cssName) {
	        var fullName = 'ag-cell-' + cssName;
	        var animationFullName = 'ag-cell-' + cssName + '-animation';
	        var element = this.getGui();
	        // we want to highlight the cells, without any animation
	        utils._.addCssClass(element, fullName);
	        utils._.removeCssClass(element, animationFullName);
	        // then once that is applied, we remove the highlight with animation
	        setTimeout(function () {
	            utils._.removeCssClass(element, fullName);
	            utils._.addCssClass(element, animationFullName);
	            setTimeout(function () {
	                // and then to leave things as we got them, we remove the animation
	                utils._.removeCssClass(element, animationFullName);
	            }, 1000);
	        }, 500);
	    };
	    CellComp.prototype.replaceContentsAfterRefresh = function () {
	        // otherwise we rip out the cell and replace it
	        utils._.removeAllChildren(this.eParentOfValue);
	        // remove old renderer component if it exists
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	        }
	        this.cellRenderer = null;
	        this.cellRendererGui = null;
	        // populate
	        this.putDataIntoCellAfterRefresh();
	        this.angular1Compile();
	    };
	    CellComp.prototype.angular1Compile = function () {
	        // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var eGui = this.getGui();
	            var compiledElement_1 = this.beans.$compile(eGui)(this.scope);
	            this.addDestroyFunc(function () {
	                compiledElement_1.remove();
	            });
	        }
	    };
	    CellComp.prototype.postProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        if (stylesToUse) {
	            utils._.addStylesToElement(this.getGui(), stylesToUse);
	        }
	    };
	    CellComp.prototype.preProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        return utils._.cssStyleObjectToMarkup(stylesToUse);
	    };
	    CellComp.prototype.processStylesFromColDef = function () {
	        var colDef = this.column.getColDef();
	        if (colDef.cellStyle) {
	            var cssToUse = void 0;
	            if (typeof colDef.cellStyle === 'function') {
	                var cellStyleParams = {
	                    value: this.value,
	                    data: this.rowNode.data,
	                    node: this.rowNode,
	                    colDef: colDef,
	                    column: this.column,
	                    $scope: this.scope,
	                    context: this.beans.gridOptionsWrapper.getContext(),
	                    api: this.beans.gridOptionsWrapper.getApi()
	                };
	                var cellStyleFunc = colDef.cellStyle;
	                cssToUse = cellStyleFunc(cellStyleParams);
	            }
	            else {
	                cssToUse = colDef.cellStyle;
	            }
	            return cssToUse;
	        }
	    };
	    CellComp.prototype.postProcessClassesFromColDef = function () {
	        var _this = this;
	        this.processClassesFromColDef(function (className) { return utils._.addCssClass(_this.getGui(), className); });
	    };
	    CellComp.prototype.preProcessClassesFromColDef = function () {
	        var res = [];
	        this.processClassesFromColDef(function (className) { return res.push(className); });
	        return res;
	    };
	    CellComp.prototype.processClassesFromColDef = function (onApplicableClass) {
	        this.beans.stylingService.processStaticCellClasses(this.column.getColDef(), {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.rowNode.rowIndex,
	            $scope: this.scope,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass);
	    };
	    CellComp.prototype.putDataIntoCellAfterRefresh = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            this.eParentOfValue.innerHTML = colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                this.eParentOfValue.innerHTML = template;
	            }
	            // use cell renderer if it exists
	        }
	        else if (this.usingCellRenderer) {
	            this.attachCellRenderer();
	        }
	        else {
	            var valueToUse = this.getValueToUse();
	            if (valueToUse !== null && valueToUse !== undefined) {
	                this.eParentOfValue.innerText = valueToUse;
	            }
	        }
	    };
	    CellComp.prototype.attemptCellRendererRefresh = function () {
	        if (utils._.missing(this.cellRenderer) || utils._.missing(this.cellRenderer.refresh)) {
	            return false;
	        }
	        // if the cell renderer has a refresh method, we call this instead of doing a refresh
	        // note: should pass in params here instead of value?? so that client has formattedValue
	        var params = this.createCellRendererParams();
	        var result = this.cellRenderer.refresh(params);
	        // NOTE on undefined: previous version of the cellRenderer.refresh() interface
	        // returned nothing, if the method existed, we assumed it refreshed. so for
	        // backwards compatibility, we assume if method exists and returns nothing,
	        // that it was successful.
	        return result === true || result === undefined;
	    };
	    CellComp.prototype.refreshToolTip = function () {
	        var newTooltip = this.getToolTip();
	        if (this.tooltip !== newTooltip) {
	            this.tooltip = newTooltip;
	            if (utils._.exists(newTooltip)) {
	                var tooltipSanitised = utils._.escape(this.tooltip);
	                this.eParentOfValue.setAttribute('title', tooltipSanitised);
	            }
	            else {
	                this.eParentOfValue.removeAttribute('title');
	            }
	        }
	    };
	    CellComp.prototype.valuesAreEqual = function (val1, val2) {
	        // if the user provided an equals method, use that, otherwise do simple comparison
	        var colDef = this.column.getColDef();
	        var equalsMethod = colDef ? colDef.equals : null;
	        if (equalsMethod) {
	            return equalsMethod(val1, val2);
	        }
	        else {
	            return val1 === val2;
	        }
	    };
	    CellComp.prototype.getToolTip = function () {
	        var colDef = this.column.getColDef();
	        var data = this.rowNode.data;
	        if (colDef.tooltipField && utils._.exists(data)) {
	            return utils._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
	        }
	        else if (colDef.tooltip) {
	            return colDef.tooltip({
	                value: this.value,
	                valueFormatted: this.valueFormatted,
	                data: this.rowNode.data,
	                node: this.rowNode,
	                colDef: this.column.getColDef(),
	                api: this.beans.gridOptionsWrapper.getApi(),
	                $scope: this.scope,
	                context: this.beans.gridOptionsWrapper.getContext(),
	                rowIndex: this.gridCell.rowIndex
	            });
	        }
	        else {
	            return null;
	        }
	    };
	    CellComp.prototype.processCellClassRules = function (onApplicableClass, onNotApplicableClass) {
	        this.beans.stylingService.processClassRules(this.column.getColDef().cellClassRules, {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            $scope: this.scope,
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass, onNotApplicableClass);
	    };
	    CellComp.prototype.postProcessCellClassRules = function () {
	        var _this = this;
	        this.processCellClassRules(function (className) {
	            utils._.addCssClass(_this.getGui(), className);
	        }, function (className) {
	            utils._.removeCssClass(_this.getGui(), className);
	        });
	    };
	    CellComp.prototype.preProcessCellClassRules = function () {
	        var res = [];
	        this.processCellClassRules(function (className) {
	            res.push(className);
	        }, function (className) {
	            // not catered for, if creating, no need
	            // to remove class as it was never there
	        });
	        return res;
	    };
	    // a wrapper is used when we are putting a selection checkbox in the cell with the value
	    CellComp.prototype.setUsingWrapper = function () {
	        var colDef = this.column.getColDef();
	        // never allow selection or dragging on pinned rows
	        if (this.rowNode.rowPinned) {
	            this.usingWrapper = false;
	            this.includeSelectionComponent = false;
	            this.includeRowDraggingComponent = false;
	            return;
	        }
	        var cbSelectionIsFunc = typeof colDef.checkboxSelection === 'function';
	        var rowDraggableIsFunc = typeof colDef.rowDrag === 'function';
	        this.includeSelectionComponent = cbSelectionIsFunc || colDef.checkboxSelection === true;
	        this.includeRowDraggingComponent = rowDraggableIsFunc || colDef.rowDrag === true;
	        this.usingWrapper = this.includeRowDraggingComponent || this.includeSelectionComponent;
	    };
	    CellComp.prototype.chooseCellRenderer = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        // templates are for ng1, ideally we wouldn't have these, they are ng1 support
	        // inside the core which is bad
	        if (colDef.template || colDef.templateUrl) {
	            this.usingCellRenderer = false;
	            return;
	        }
	        var params = this.createCellRendererParams();
	        var cellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'cellRenderer', params, null);
	        var pinnedRowCellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'pinnedRowCellRenderer', params, null);
	        if (pinnedRowCellRenderer && this.rowNode.rowPinned) {
	            this.cellRendererType = 'pinnedRowCellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else if (cellRenderer) {
	            this.cellRendererType = 'cellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else {
	            this.usingCellRenderer = false;
	        }
	    };
	    CellComp.prototype.createCellRendererInstance = function () {
	        var params = this.createCellRendererParams();
	        this.cellRendererVersion++;
	        var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
	        this.beans.componentResolver.createAgGridComponent(this.column.getColDef(), params, this.cellRendererType, params, null).then(callback);
	    };
	    CellComp.prototype.afterCellRendererCreated = function (cellRendererVersion, cellRenderer) {
	        // see if daemon
	        if (!this.isAlive() || (cellRendererVersion !== this.cellRendererVersion)) {
	            if (cellRenderer.destroy) {
	                cellRenderer.destroy();
	            }
	            return;
	        }
	        this.cellRenderer = cellRenderer;
	        this.cellRendererGui = this.cellRenderer.getGui();
	        if (utils._.missing(this.cellRendererGui)) {
	            return;
	        }
	        // if async components, then it's possible the user started editing since
	        // this call was made
	        if (!this.editingCell) {
	            this.eParentOfValue.appendChild(this.cellRendererGui);
	        }
	    };
	    CellComp.prototype.attachCellRenderer = function () {
	        if (!this.usingCellRenderer) {
	            return;
	        }
	        this.createCellRendererInstance();
	    };
	    CellComp.prototype.createCellRendererParams = function () {
	        var _this = this;
	        var params = {
	            value: this.value,
	            valueFormatted: this.valueFormatted,
	            getValue: this.getValue.bind(this),
	            setValue: function (value) {
	                _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
	            },
	            formatValue: this.formatValue.bind(this),
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            $scope: this.scope,
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            refreshCell: this.refreshCell.bind(this),
	            eGridCell: this.getGui(),
	            eParentOfValue: this.eParentOfValue,
	            // these bits are not documented anywhere, so we could drop them?
	            // it was in the olden days to allow user to register for when rendered
	            // row was removed (the row comp was removed), however now that the user
	            // can provide components for cells, the destroy method gets call when this
	            // happens so no longer need to fire event.
	            addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
	            addRenderedRowListener: function (eventType, listener) {
	                console.warn('ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()');
	                if (_this.rowComp) {
	                    _this.rowComp.addEventListener(eventType, listener);
	                }
	            }
	        };
	        return params;
	    };
	    CellComp.prototype.formatValue = function (value) {
	        var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
	        var valueFormattedExists = valueFormatted !== null && valueFormatted !== undefined;
	        return valueFormattedExists ? valueFormatted : value;
	    };
	    CellComp.prototype.getValueToUse = function () {
	        var valueFormattedExists = this.valueFormatted !== null && this.valueFormatted !== undefined;
	        return valueFormattedExists ? this.valueFormatted : this.value;
	    };
	    CellComp.prototype.getValueAndFormat = function () {
	        this.value = this.getValue();
	        this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
	    };
	    CellComp.prototype.getValue = function () {
	        // if we don't check this, then the grid will render leaf groups as open even if we are not
	        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
	        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
	        // them via the API, or user user expanded them in the UI before turning on pivot mode
	        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
	        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
	        if (isOpenGroup && this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {
	            // if doing grouping and footers, we don't want to include the agg value
	            // in the header when the group is open
	            return this.beans.valueService.getValue(this.column, this.rowNode, false, true);
	        }
	        else {
	            return this.beans.valueService.getValue(this.column, this.rowNode);
	        }
	    };
	    CellComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        if (utils._.isStopPropagationForAgGrid(mouseEvent)) {
	            return;
	        }
	        switch (eventName) {
	            case 'click':
	                this.onCellClicked(mouseEvent);
	                break;
	            case 'mousedown':
	                this.onMouseDown(mouseEvent);
	                break;
	            case 'dblclick':
	                this.onCellDoubleClicked(mouseEvent);
	                break;
	            case 'mouseout':
	                this.onMouseOut(mouseEvent);
	                break;
	            case 'mouseover':
	                this.onMouseOver(mouseEvent);
	                break;
	        }
	    };
	    CellComp.prototype.dispatchCellContextMenuEvent = function (event) {
	        var colDef = this.column.getColDef();
	        var cellContextMenuEvent = this.createEvent(event, events$1.Events.EVENT_CELL_CONTEXT_MENU);
	        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
	        if (colDef.onCellContextMenu) {
	            // to make the callback async, do in a timeout
	            setTimeout(function () { return colDef.onCellContextMenu(cellContextMenuEvent); }, 0);
	        }
	    };
	    CellComp.prototype.createEvent = function (domEvent, eventType) {
	        var event = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            value: this.value,
	            column: this.column,
	            colDef: this.column.getColDef(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridApi,
	            columnApi: this.beans.columnApi,
	            rowPinned: this.rowNode.rowPinned,
	            event: domEvent,
	            type: eventType,
	            rowIndex: this.rowNode.rowIndex
	        };
	        // because we are hacking in $scope for angular 1, we have to de-reference
	        if (this.scope) {
	            event.$scope = this.scope;
	        }
	        return event;
	    };
	    CellComp.prototype.onMouseOut = function (mouseEvent) {
	        var cellMouseOutEvent = this.createEvent(mouseEvent, events$1.Events.EVENT_CELL_MOUSE_OUT);
	        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
	        this.beans.columnHoverService.clearMouseOver();
	    };
	    CellComp.prototype.onMouseOver = function (mouseEvent) {
	        var cellMouseOverEvent = this.createEvent(mouseEvent, events$1.Events.EVENT_CELL_MOUSE_OVER);
	        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
	        this.beans.columnHoverService.setMouseOver([this.column]);
	    };
	    CellComp.prototype.onCellDoubleClicked = function (mouseEvent) {
	        var colDef = this.column.getColDef();
	        // always dispatch event to eventService
	        var cellDoubleClickedEvent = this.createEvent(mouseEvent, events$1.Events.EVENT_CELL_DOUBLE_CLICKED);
	        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
	        // check if colDef also wants to handle event
	        if (typeof colDef.onCellDoubleClicked === 'function') {
	            // to make the callback async, do in a timeout
	            setTimeout(function () { return colDef.onCellDoubleClicked(cellDoubleClickedEvent); }, 0);
	        }
	        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnDoubleClick) {
	            this.startRowOrCellEdit();
	        }
	    };
	    // called by rowRenderer when user navigates via tab key
	    CellComp.prototype.startRowOrCellEdit = function (keyPress, charPress) {
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.startRowEditing(keyPress, charPress, this);
	        }
	        else {
	            this.startEditingIfEnabled(keyPress, charPress, true);
	        }
	    };
	    CellComp.prototype.isCellEditable = function () {
	        return this.column.isCellEditable(this.rowNode);
	    };
	    // either called internally if single cell editing, or called by rowRenderer if row editing
	    CellComp.prototype.startEditingIfEnabled = function (keyPress, charPress, cellStartedEdit) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (cellStartedEdit === void 0) { cellStartedEdit = false; }
	        // don't do it if not editable
	        if (!this.isCellEditable()) {
	            return;
	        }
	        // don't do it if already editing
	        if (this.editingCell) {
	            return;
	        }
	        this.editingCell = true;
	        this.cellEditorVersion++;
	        var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
	        var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
	        this.beans.cellEditorFactory.createCellEditor(this.column.getColDef(), params).then(callback);
	        // if we don't do this, and editor component is async, then there will be a period
	        // when the component isn't present and keyboard navigation won't work - so example
	        // of user hitting tab quickly (more quickly than renderers getting created) won't work
	        var cellEditorAsync = utils._.missing(this.cellEditor);
	        if (cellEditorAsync && cellStartedEdit) {
	            this.focusCell(true);
	        }
	    };
	    CellComp.prototype.afterCellEditorCreated = function (cellEditorVersion, cellEditor) {
	        // if editingCell=false, means user cancelled the editor before component was ready.
	        // if versionMismatch, then user cancelled the edit, then started the edit again, and this
	        //   is the first editor which is now stale.
	        var versionMismatch = cellEditorVersion !== this.cellEditorVersion;
	        if (versionMismatch || !this.editingCell) {
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            return;
	        }
	        if (cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart()) {
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            this.editingCell = false;
	            return;
	        }
	        if (!cellEditor.getGui) {
	            console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
	            // no getGui, for React guys, see if they attached a react component directly
	            if (cellEditor.render) {
	                console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
	            }
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            this.editingCell = false;
	            return;
	        }
	        this.cellEditor = cellEditor;
	        this.cellEditorInPopup = cellEditor.isPopup && cellEditor.isPopup();
	        this.setInlineEditingClass();
	        if (this.cellEditorInPopup) {
	            this.addPopupCellEditor();
	        }
	        else {
	            this.addInCellEditor();
	        }
	        if (cellEditor.afterGuiAttached) {
	            cellEditor.afterGuiAttached();
	        }
	        var event = this.createEvent(null, events$1.Events.EVENT_CELL_EDITING_STARTED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    CellComp.prototype.addInCellEditor = function () {
	        utils._.removeAllChildren(this.getGui());
	        this.getGui().appendChild(this.cellEditor.getGui());
	        this.angular1Compile();
	    };
	    CellComp.prototype.addPopupCellEditor = function () {
	        var _this = this;
	        var ePopupGui = this.cellEditor.getGui();
	        this.hideEditorPopup = this.beans.popupService.addAsModalPopup(ePopupGui, true, 
	        // callback for when popup disappears
	        function () {
	            _this.onPopupEditorClosed();
	        });
	        this.beans.popupService.positionPopupOverComponent({
	            column: this.column,
	            rowNode: this.rowNode,
	            type: 'popupCellEditor',
	            eventSource: this.getGui(),
	            ePopup: ePopupGui,
	            keepWithinBounds: true
	        });
	        this.angular1Compile();
	    };
	    CellComp.prototype.onPopupEditorClosed = function () {
	        // we only call stopEditing if we are editing, as
	        // it's possible the popup called 'stop editing'
	        // before this, eg if 'enter key' was pressed on
	        // the editor.
	        if (this.editingCell) {
	            // note: this only happens when use clicks outside of the grid. if use clicks on another
	            // cell, then the editing will have already stopped on this cell
	            this.stopRowOrCellEdit();
	            // we only focus cell again if this cell is still focused. it is possible
	            // it is not focused if the user cancelled the edit by clicking on another
	            // cell outside of this one
	            if (this.beans.focusedCellController.isCellFocused(this.gridCell)) {
	                this.focusCell(true);
	            }
	        }
	    };
	    // if we are editing inline, then we don't have the padding in the cell (set in the themes)
	    // to allow the text editor full access to the entire cell
	    CellComp.prototype.setInlineEditingClass = function () {
	        // ag-cell-inline-editing - appears when user is inline editing
	        // ag-cell-not-inline-editing - appears when user is no inline editing
	        // ag-cell-popup-editing - appears when user is editing cell in popup (appears on the cell, not on the popup)
	        // note: one of {ag-cell-inline-editing, ag-cell-not-inline-editing} is always present, they toggle.
	        //       however {ag-cell-popup-editing} shows when popup, so you have both {ag-cell-popup-editing}
	        //       and {ag-cell-not-inline-editing} showing at the same time.
	        var editingInline = this.editingCell && !this.cellEditorInPopup;
	        var popupEditorShowing = this.editingCell && this.cellEditorInPopup;
	        utils._.addOrRemoveCssClass(this.getGui(), "ag-cell-inline-editing", editingInline);
	        utils._.addOrRemoveCssClass(this.getGui(), "ag-cell-not-inline-editing", !editingInline);
	        utils._.addOrRemoveCssClass(this.getGui(), "ag-cell-popup-editing", popupEditorShowing);
	        utils._.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-inline-editing", editingInline);
	        utils._.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-not-inline-editing", !editingInline);
	    };
	    CellComp.prototype.createCellEditorParams = function (keyPress, charPress, cellStartedEdit) {
	        var params = {
	            value: this.getValue(),
	            keyPress: keyPress,
	            charPress: charPress,
	            column: this.column,
	            rowIndex: this.gridCell.rowIndex,
	            node: this.rowNode,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            cellStartedEdit: cellStartedEdit,
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            $scope: this.scope,
	            onKeyDown: this.onKeyDown.bind(this),
	            stopEditing: this.stopEditingAndFocus.bind(this),
	            eGridCell: this.getGui(),
	            parseValue: this.parseValue.bind(this),
	            formatValue: this.formatValue.bind(this)
	        };
	        return params;
	    };
	    // cell editors call this, when they want to stop for reasons other
	    // than what we pick up on. eg selecting from a dropdown ends editing.
	    CellComp.prototype.stopEditingAndFocus = function (suppressNavigateAfterEdit) {
	        if (suppressNavigateAfterEdit === void 0) { suppressNavigateAfterEdit = false; }
	        this.stopRowOrCellEdit();
	        this.focusCell(true);
	        if (!suppressNavigateAfterEdit) {
	            this.navigateAfterEdit();
	        }
	    };
	    CellComp.prototype.parseValue = function (newValue) {
	        var params = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            oldValue: this.value,
	            newValue: newValue,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        };
	        var valueParser = this.column.getColDef().valueParser;
	        return utils._.exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
	    };
	    CellComp.prototype.focusCell = function (forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        this.beans.focusedCellController.setFocusedCell(this.gridCell.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
	    };
	    CellComp.prototype.setFocusInOnEditor = function () {
	        if (this.editingCell) {
	            if (this.cellEditor && this.cellEditor.focusIn) {
	                // if the editor is present, then we just focus it
	                this.cellEditor.focusIn();
	            }
	            else {
	                // if the editor is not present, it means async cell editor (eg React fibre)
	                // and we are trying to set focus before the cell editor is present, so we
	                // focus the cell instead
	                this.focusCell(true);
	            }
	        }
	    };
	    CellComp.prototype.isEditing = function () {
	        return this.editingCell;
	    };
	    CellComp.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        // give user a chance to cancel event processing
	        if (this.doesUserWantToCancelKeyboardEvent(event)) {
	            return;
	        }
	        switch (key) {
	            case constants.Constants.KEY_ENTER:
	                this.onEnterKeyDown();
	                break;
	            case constants.Constants.KEY_F2:
	                this.onF2KeyDown();
	                break;
	            case constants.Constants.KEY_ESCAPE:
	                this.onEscapeKeyDown();
	                break;
	            case constants.Constants.KEY_TAB:
	                this.onTabKeyDown(event);
	                break;
	            case constants.Constants.KEY_BACKSPACE:
	            case constants.Constants.KEY_DELETE:
	                this.onBackspaceOrDeleteKeyPressed(key);
	                break;
	            case constants.Constants.KEY_DOWN:
	            case constants.Constants.KEY_UP:
	            case constants.Constants.KEY_RIGHT:
	            case constants.Constants.KEY_LEFT:
	                this.onNavigationKeyPressed(event, key);
	                break;
	        }
	    };
	    CellComp.prototype.doesUserWantToCancelKeyboardEvent = function (event) {
	        var callback = this.column.getColDef().suppressKeyboardEvent;
	        if (utils._.missing(callback)) {
	            return false;
	        }
	        else {
	            // if editing is null or undefined, this sets it to false
	            var params = {
	                event: event,
	                editing: this.editingCell,
	                column: this.column,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                node: this.rowNode,
	                data: this.rowNode.data,
	                colDef: this.column.getColDef(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi()
	            };
	            return callback(params);
	        }
	    };
	    CellComp.prototype.setFocusOutOnEditor = function () {
	        if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    CellComp.prototype.onNavigationKeyPressed = function (event, key) {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	        if (event.shiftKey && this.rangeSelectionEnabled) {
	            this.onShiftRangeSelect(key);
	        }
	        else {
	            this.beans.rowRenderer.navigateToNextCell(event, key, this.gridCell, true);
	        }
	        // if we don't prevent default, the grid will scroll with the navigation keys
	        event.preventDefault();
	    };
	    CellComp.prototype.onShiftRangeSelect = function (key) {
	        var success = this.beans.rangeController.extendRangeInDirection(this.gridCell, key);
	        if (!success) {
	            return;
	        }
	        var ranges = this.beans.rangeController.getCellRanges();
	        // this should never happen, as extendRangeFromCell should always have one range after getting called
	        if (utils._.missing(ranges) || ranges.length !== 1) {
	            return;
	        }
	        var endCell = ranges[0].end;
	        this.beans.rowRenderer.ensureCellVisible(endCell);
	    };
	    CellComp.prototype.onTabKeyDown = function (event) {
	        if (this.beans.gridOptionsWrapper.isSuppressTabbing()) {
	            return;
	        }
	        this.beans.rowRenderer.onTabKeyDown(this, event);
	    };
	    CellComp.prototype.onBackspaceOrDeleteKeyPressed = function (key) {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(key);
	        }
	    };
	    CellComp.prototype.onEnterKeyDown = function () {
	        if (this.editingCell || this.rowComp.isEditing()) {
	            this.stopEditingAndFocus();
	        }
	        else {
	            if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
	                this.beans.rowRenderer.navigateToNextCell(null, constants.Constants.KEY_DOWN, this.gridCell, false);
	            }
	            else {
	                this.startRowOrCellEdit(constants.Constants.KEY_ENTER);
	            }
	        }
	    };
	    CellComp.prototype.navigateAfterEdit = function () {
	        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
	        if (fullRowEdit) {
	            return;
	        }
	        var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
	        if (enterMovesDownAfterEdit) {
	            this.beans.rowRenderer.navigateToNextCell(null, constants.Constants.KEY_DOWN, this.gridCell, false);
	        }
	    };
	    CellComp.prototype.onF2KeyDown = function () {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(constants.Constants.KEY_F2);
	        }
	    };
	    CellComp.prototype.onEscapeKeyDown = function () {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit(true);
	            this.focusCell(true);
	        }
	    };
	    CellComp.prototype.onKeyPress = function (event) {
	        // check this, in case focus is on a (for example) a text field inside the cell,
	        // in which cse we should not be listening for these key pressed
	        var eventTarget = utils._.getTarget(event);
	        var eventOnChildComponent = eventTarget !== this.getGui();
	        if (eventOnChildComponent) {
	            return;
	        }
	        if (!this.editingCell) {
	            var pressedChar = String.fromCharCode(event.charCode);
	            if (pressedChar === ' ') {
	                this.onSpaceKeyPressed(event);
	            }
	            else {
	                if (utils._.isEventFromPrintableCharacter(event)) {
	                    this.startRowOrCellEdit(null, pressedChar);
	                    // if we don't prevent default, then the keypress also gets applied to the text field
	                    // (at least when doing the default editor), but we need to allow the editor to decide
	                    // what it wants to do. we only do this IF editing was started - otherwise it messes
	                    // up when the use is not doing editing, but using rendering with text fields in cellRenderer
	                    // (as it would block the the user from typing into text fields).
	                    event.preventDefault();
	                }
	            }
	        }
	    };
	    CellComp.prototype.onSpaceKeyPressed = function (event) {
	        if (!this.editingCell && this.beans.gridOptionsWrapper.isRowSelection()) {
	            var selected = this.rowNode.isSelected();
	            this.rowNode.setSelected(!selected);
	        }
	        // prevent default as space key, by default, moves browser scroll down
	        event.preventDefault();
	    };
	    CellComp.prototype.onMouseDown = function (mouseEvent) {
	        // we pass false to focusCell, as we don't want the cell to focus
	        // also get the browser focus. if we did, then the cellRenderer could
	        // have a text field in it, for example, and as the user clicks on the
	        // text field, the text field, the focus doesn't get to the text
	        // field, instead to goes to the div behind, making it impossible to
	        // select the text field.
	        this.focusCell(false);
	        // if it's a right click, then if the cell is already in range,
	        // don't change the range, however if the cell is not in a range,
	        // we set a new range
	        if (this.beans.rangeController) {
	            var thisCell = this.gridCell;
	            if (mouseEvent.shiftKey) {
	                this.beans.rangeController.extendRangeToCell(thisCell);
	            }
	            else {
	                var cellAlreadyInRange = this.beans.rangeController.isCellInAnyRange(thisCell);
	                if (!cellAlreadyInRange) {
	                    var ctrlKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
	                    this.beans.rangeController.setRangeToCell(thisCell, ctrlKeyPressed);
	                }
	            }
	        }
	        var cellMouseDownEvent = this.createEvent(mouseEvent, events$1.Events.EVENT_CELL_MOUSE_DOWN);
	        this.beans.eventService.dispatchEvent(cellMouseDownEvent);
	    };
	    // returns true if on iPad and this is second 'click' event in 200ms
	    CellComp.prototype.isDoubleClickOnIPad = function () {
	        if (!utils._.isUserAgentIPad()) {
	            return false;
	        }
	        var nowMillis = new Date().getTime();
	        var res = nowMillis - this.lastIPadMouseClickEvent < 200;
	        this.lastIPadMouseClickEvent = nowMillis;
	        return res;
	    };
	    CellComp.prototype.onCellClicked = function (mouseEvent) {
	        // iPad doesn't have double click - so we need to mimic it do enable editing for
	        // iPad.
	        if (this.isDoubleClickOnIPad()) {
	            this.onCellDoubleClicked(mouseEvent);
	            mouseEvent.preventDefault(); // if we don't do this, then ipad zooms in
	            return;
	        }
	        var cellClickedEvent = this.createEvent(mouseEvent, events$1.Events.EVENT_CELL_CLICKED);
	        this.beans.eventService.dispatchEvent(cellClickedEvent);
	        var colDef = this.column.getColDef();
	        if (colDef.onCellClicked) {
	            // to make callback async, do in a timeout
	            setTimeout(function () { return colDef.onCellClicked(cellClickedEvent); }, 0);
	        }
	        var editOnSingleClick = this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnSingleClick) {
	            this.startRowOrCellEdit();
	        }
	        this.doIeFocusHack();
	    };
	    // https://ag-grid.com/forum/showthread.php?tid=4362
	    // when in IE or Edge, when you are editing a cell, then click on another cell,
	    // the other cell doesn't keep focus, so navigation keys, type to start edit etc
	    // don't work. appears that when you update the dom in IE it looses focus
	    CellComp.prototype.doIeFocusHack = function () {
	        if (utils._.isBrowserIE() || utils._.isBrowserEdge()) {
	            if (utils._.missing(document.activeElement) || document.activeElement === document.body) {
	                // console.log('missing focus');
	                this.getGui().focus();
	            }
	        }
	    };
	    CellComp.prototype.createGridCellVo = function () {
	        var gridCellDef = {
	            rowIndex: this.rowNode.rowIndex,
	            floating: this.rowNode.rowPinned,
	            column: this.column
	        };
	        this.gridCell = new gridCell.GridCell(gridCellDef);
	    };
	    CellComp.prototype.getGridCell = function () {
	        return this.gridCell;
	    };
	    CellComp.prototype.getParentRow = function () {
	        return this.eParentRow;
	    };
	    CellComp.prototype.setParentRow = function (eParentRow) {
	        this.eParentRow = eParentRow;
	    };
	    CellComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    CellComp.prototype.detach = function () {
	        this.eParentRow.removeChild(this.getGui());
	    };
	    // if the row is also getting destroyed, then we don't need to remove from dom,
	    // as the row will also get removed, so no need to take out the cells from the row
	    // if the row is going (removing is an expensive operation, so only need to remove
	    // the top part)
	    CellComp.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.cellEditor && this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	            this.cellEditor = null;
	        }
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	            this.cellRenderer = null;
	        }
	    };
	    CellComp.prototype.onLeftChanged = function () {
	        var left = this.getCellLeft();
	        this.getGui().style.left = left + 'px';
	    };
	    CellComp.prototype.onWidthChanged = function () {
	        var width = this.getCellWidth();
	        this.getGui().style.width = width + 'px';
	    };
	    CellComp.prototype.getRangeClasses = function () {
	        var res = [];
	        if (!this.rangeSelectionEnabled) {
	            return res;
	        }
	        if (this.rangeCount !== 0) {
	            res.push('ag-cell-range-selected');
	        }
	        if (this.rangeCount === 1) {
	            res.push('ag-cell-range-selected-1');
	        }
	        if (this.rangeCount === 2) {
	            res.push('ag-cell-range-selected-2');
	        }
	        if (this.rangeCount === 3) {
	            res.push('ag-cell-range-selected-3');
	        }
	        if (this.rangeCount >= 4) {
	            res.push('ag-cell-range-selected-4');
	        }
	        return res;
	    };
	    CellComp.prototype.onRowIndexChanged = function () {
	        // when index changes, this influences items that need the index, so we update the
	        // grid cell so they are working off the new index.
	        this.createGridCellVo();
	        // when the index of the row changes, ie means the cell may have lost or gained focus
	        this.onCellFocused();
	        // check range selection
	        this.onRangeSelectionChanged();
	    };
	    CellComp.prototype.onRangeSelectionChanged = function () {
	        if (!this.beans.enterprise) {
	            return;
	        }
	        var newRangeCount = this.beans.rangeController.getCellRangeCount(this.gridCell);
	        var element = this.getGui();
	        if (this.rangeCount !== newRangeCount) {
	            utils._.addOrRemoveCssClass(element, 'ag-cell-range-selected', newRangeCount !== 0);
	            utils._.addOrRemoveCssClass(element, 'ag-cell-range-selected-1', newRangeCount === 1);
	            utils._.addOrRemoveCssClass(element, 'ag-cell-range-selected-2', newRangeCount === 2);
	            utils._.addOrRemoveCssClass(element, 'ag-cell-range-selected-3', newRangeCount === 3);
	            utils._.addOrRemoveCssClass(element, 'ag-cell-range-selected-4', newRangeCount >= 4);
	            this.rangeCount = newRangeCount;
	        }
	    };
	    CellComp.prototype.onFirstRightPinnedChanged = function () {
	        var firstRightPinned = this.column.isFirstRightPinned();
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            utils._.addOrRemoveCssClass(this.getGui(), 'ag-cell-first-right-pinned', firstRightPinned);
	        }
	    };
	    CellComp.prototype.onLastLeftPinnedChanged = function () {
	        var lastLeftPinned = this.column.isLastLeftPinned();
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            utils._.addOrRemoveCssClass(this.getGui(), 'ag-cell-last-left-pinned', lastLeftPinned);
	        }
	    };
	    CellComp.prototype.populateTemplate = function () {
	        if (this.usingWrapper) {
	            this.eParentOfValue = this.getRefElement('eCellValue');
	            this.eCellWrapper = this.getRefElement('eCellWrapper');
	            if (this.includeRowDraggingComponent) {
	                this.addRowDragging();
	            }
	            if (this.includeSelectionComponent) {
	                this.addSelectionCheckbox();
	            }
	        }
	        else {
	            this.eParentOfValue = this.getGui();
	        }
	    };
	    CellComp.prototype.addRowDragging = function () {
	        // row dragging only available in default row model
	        if (!this.beans.gridOptionsWrapper.isRowModelDefault()) {
	            utils._.doOnce(function () { return console.warn('ag-Grid: row dragging is only allowed in the In Memory Row Model'); }, 'CellComp.addRowDragging');
	            return;
	        }
	        if (this.beans.gridOptionsWrapper.isPagination()) {
	            utils._.doOnce(function () { return console.warn('ag-Grid: row dragging is not possible when doing pagination'); }, 'CellComp.addRowDragging');
	            return;
	        }
	        var rowDraggingComp = new rowDragComp.RowDragComp(this.rowNode, this.column, this.getValueToUse(), this.beans);
	        this.addFeature(this.beans.context, rowDraggingComp);
	        // let visibleFunc = this.column.getColDef().checkboxSelection;
	        // visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
	        // cbSelectionComponent.init({rowNode: this.rowNode, column: this.column, visibleFunc: visibleFunc});
	        // put the checkbox in before the value
	        this.eCellWrapper.insertBefore(rowDraggingComp.getGui(), this.eParentOfValue);
	    };
	    CellComp.prototype.addSelectionCheckbox = function () {
	        var cbSelectionComponent = new checkboxSelectionComponent.CheckboxSelectionComponent();
	        this.beans.context.wireBean(cbSelectionComponent);
	        var visibleFunc = this.column.getColDef().checkboxSelection;
	        visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
	        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column, visibleFunc: visibleFunc });
	        this.addDestroyFunc(function () { return cbSelectionComponent.destroy(); });
	        // put the checkbox in before the value
	        this.eCellWrapper.insertBefore(cbSelectionComponent.getGui(), this.eParentOfValue);
	    };
	    CellComp.prototype.addDomData = function () {
	        var _this = this;
	        var element = this.getGui();
	        this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
	        this.addDestroyFunc(function () {
	            return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
	        });
	    };
	    CellComp.prototype.onCellFocused = function (event) {
	        var cellFocused = this.beans.focusedCellController.isCellFocused(this.gridCell);
	        // see if we need to change the classes on this cell
	        if (cellFocused !== this.cellFocused) {
	            // if we are not doing cell selection, then the focus class does not change, all cells will
	            // stay with ag-cell-no-focus class
	            var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
	            if (doingFocusCss) {
	                utils._.addOrRemoveCssClass(this.getGui(), 'ag-cell-focus', cellFocused);
	                utils._.addOrRemoveCssClass(this.getGui(), 'ag-cell-no-focus', !cellFocused);
	            }
	            this.cellFocused = cellFocused;
	        }
	        // if this cell was just focused, see if we need to force browser focus, his can
	        // happen if focus is programmatically set.
	        if (cellFocused && event && event.forceBrowserFocus) {
	            this.getGui().focus();
	        }
	        // if another cell was focused, and we are editing, then stop editing
	        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
	        if (!cellFocused && !fullRowEdit && this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	    };
	    // pass in 'true' to cancel the editing.
	    CellComp.prototype.stopRowOrCellEdit = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.stopRowEditing(cancel);
	        }
	        else {
	            this.stopEditing(cancel);
	        }
	    };
	    CellComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (!this.editingCell) {
	            return;
	        }
	        // if no cell editor, this means due to async, that the cell editor never got initialised,
	        // so we just carry on regardless as if the editing was never started.
	        if (!this.cellEditor) {
	            this.editingCell = false;
	            return;
	        }
	        var newValueExists = false;
	        var newValue;
	        if (!cancel) {
	            // also have another option here to cancel after editing, so for example user could have a popup editor and
	            // it is closed by user clicking outside the editor. then the editor will close automatically (with false
	            // passed above) and we need to see if the editor wants to accept the new value.
	            var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
	            if (!userWantsToCancel) {
	                newValue = this.cellEditor.getValue();
	                newValueExists = true;
	            }
	        }
	        // it is important we set this after setValue() above, as otherwise the cell will flash
	        // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
	        // thus it will skip the refresh on this cell until the end of this method where we call
	        // refresh directly and we suppress the flash.
	        this.editingCell = false;
	        if (this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	        }
	        // important to clear this out - as parts of the code will check for
	        // this to see if an async cellEditor has yet to be created
	        this.cellEditor = null;
	        if (this.cellEditorInPopup) {
	            this.hideEditorPopup();
	            this.hideEditorPopup = null;
	        }
	        else {
	            utils._.removeAllChildren(this.getGui());
	            // put the cell back the way it was before editing
	            if (this.usingWrapper) {
	                // if wrapper, then put the wrapper back
	                this.getGui().appendChild(this.eCellWrapper);
	            }
	            else {
	                // if cellRenderer, then put the gui back in. if the renderer has
	                // a refresh, it will be called. however if it doesn't, then later
	                // the renderer will be destroyed and a new one will be created.
	                if (this.cellRenderer) {
	                    // we know it's a dom element (not a string) because we converted
	                    // it after the gui was attached if it was a string.
	                    var eCell = this.cellRendererGui;
	                    // can be null if cell was previously null / contained empty string,
	                    // this will result in new value not being rendered.
	                    if (eCell) {
	                        this.getGui().appendChild(eCell);
	                    }
	                }
	            }
	        }
	        this.setInlineEditingClass();
	        if (newValueExists) {
	            this.rowNode.setDataValue(this.column, newValue);
	            this.getValueAndFormat();
	        }
	        // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
	        // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
	        // (as the flash is meant to draw the user to a change that they didn't manually do themselves).
	        this.refreshCell({ forceRefresh: true, suppressFlash: true });
	        var event = this.createEvent(null, events$1.Events.EVENT_CELL_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    CellComp.DOM_DATA_KEY_CELL_COMP = 'cellComp';
	    return CellComp;
	}(component.Component));
	exports.CellComp = CellComp;
	});

	unwrapExports(cellComp);
	var cellComp_1 = cellComp.CellComp;

	var componentAnnotations = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function QuerySelector(selector) {
	    return querySelectorFunc.bind(this, selector);
	}
	exports.QuerySelector = QuerySelector;
	function RefSelector(ref) {
	    return querySelectorFunc.bind(this, "[ref=" + ref + "]");
	}
	exports.RefSelector = RefSelector;
	function querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
	    if (selector === null) {
	        console.error("ag-Grid: QuerySelector selector should not be null");
	        return;
	    }
	    if (typeof index === "number") {
	        console.error("ag-Grid: QuerySelector should be on an attribute");
	        return;
	    }
	    addToObjectProps(classPrototype, 'querySelectors', {
	        attributeName: methodOrAttributeName,
	        querySelector: selector
	    });
	}
	// think we should take this out, put property bindings on the
	function Listener(eventName) {
	    return listenerFunc.bind(this, eventName);
	}
	exports.Listener = Listener;
	function listenerFunc(eventName, target, methodName) {
	    if (eventName === null) {
	        console.error("ag-Grid: EventListener eventName should not be null");
	        return;
	    }
	    addToObjectProps(target, 'listenerMethods', {
	        methodName: methodName,
	        eventName: eventName
	    });
	}
	// think we should take this out, put property bindings on the
	function Method(eventName) {
	    return methodFunc.bind(this, eventName);
	}
	exports.Method = Method;
	function methodFunc(alias, target, methodName) {
	    if (alias === null) {
	        console.error("ag-Grid: EventListener eventName should not be null");
	        return;
	    }
	    addToObjectProps(target, 'methods', {
	        methodName: methodName,
	        alias: alias
	    });
	}
	function addToObjectProps(target, key, value) {
	    // it's an attribute on the class
	    var props = getOrCreateProps(target, target.constructor.name);
	    if (!props[key]) {
	        props[key] = [];
	    }
	    props[key].push(value);
	}
	function getOrCreateProps(target, instanceName) {
	    if (!target.__agComponentMetaData) {
	        target.__agComponentMetaData = {};
	    }
	    if (!target.__agComponentMetaData[instanceName]) {
	        target.__agComponentMetaData[instanceName] = {};
	    }
	    return target.__agComponentMetaData[instanceName];
	}
	});

	unwrapExports(componentAnnotations);
	var componentAnnotations_1 = componentAnnotations.QuerySelector;
	var componentAnnotations_2 = componentAnnotations.RefSelector;
	var componentAnnotations_3 = componentAnnotations.Listener;
	var componentAnnotations_4 = componentAnnotations.Method;

	var rowComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });









	var LoadingCellRenderer = (function (_super) {
	    __extends(LoadingCellRenderer, _super);
	    function LoadingCellRenderer() {
	        return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
	    }
	    LoadingCellRenderer.prototype.init = function (params) {
	        var eLoadingIcon = utils._.createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);
	        this.eLoadingIcon.appendChild(eLoadingIcon);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');
	    };
	    LoadingCellRenderer.prototype.refresh = function (params) {
	        return false;
	    };
	    LoadingCellRenderer.TEMPLATE = "<div class=\"ag-stub-cell\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], LoadingCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLoadingIcon'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLoadingText'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingText", void 0);
	    return LoadingCellRenderer;
	}(component.Component));
	exports.LoadingCellRenderer = LoadingCellRenderer;
	var RowComp = (function (_super) {
	    __extends(RowComp, _super);
	    function RowComp(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode$$1, beans, animateIn, useAnimationFrameForCreate) {
	        var _this = _super.call(this) || this;
	        _this.eAllRowContainers = [];
	        _this.active = true;
	        _this.columnRefreshPending = false;
	        _this.cellComps = {};
	        // for animations, there are bits we want done in the next VM turn, to all DOM to update first.
	        // instead of each row doing a setTimeout(func,0), we put the functions here and the rowRenderer
	        // executes them all in one timeout
	        _this.createSecondPassFuncs = [];
	        // these get called before the row is destroyed - they set up the DOM for the remove animation (ie they
	        // set the DOM up for the animation), then the delayedDestroyFunctions get called when the animation is
	        // complete (ie removes from the dom).
	        _this.removeFirstPassFuncs = [];
	        // for animations, these functions get called 400ms after the row is cleared, called by the rowRenderer
	        // so each row isn't setting up it's own timeout
	        _this.removeSecondPassFuncs = [];
	        _this.initialised = false;
	        _this.parentScope = parentScope;
	        _this.beans = beans;
	        _this.bodyContainerComp = bodyContainerComp;
	        _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
	        _this.pinnedRightContainerComp = pinnedRightContainerComp;
	        _this.fullWidthContainerComp = fullWidthContainerComp;
	        _this.rowNode = rowNode$$1;
	        _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
	        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
	        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
	        _this.setAnimateFlags(animateIn);
	        return _this;
	    }
	    RowComp.prototype.init = function () {
	        var _this = this;
	        this.rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        this.scope = this.createChildScopeOrNull(this.rowNode.data);
	        this.setupRowContainers();
	        this.addListeners();
	        if (this.slideRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.onTopChanged();
	            });
	        }
	        if (this.fadeRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.eAllRowContainers.forEach(function (eRow) { return utils._.removeCssClass(eRow, 'ag-opacity-zero'); });
	            });
	        }
	    };
	    RowComp.prototype.createTemplate = function (contents, extraCssClass) {
	        if (extraCssClass === void 0) { extraCssClass = null; }
	        var templateParts = [];
	        var rowHeight = this.rowNode.rowHeight;
	        var rowClasses = this.getInitialRowClasses(extraCssClass).join(' ');
	        var rowIdSanitised = utils._.escape(this.rowNode.id);
	        var userRowStyles = this.preProcessStylesFromGridOptions();
	        var businessKey = this.getRowBusinessKey();
	        var businessKeySanitised = utils._.escape(businessKey);
	        var rowTopStyle = this.getInitialRowTopStyle();
	        templateParts.push("<div");
	        templateParts.push(" role=\"row\"");
	        templateParts.push(" row-index=\"" + this.rowNode.getRowIndexString() + "\"");
	        templateParts.push(rowIdSanitised ? " row-id=\"" + rowIdSanitised + "\"" : "");
	        templateParts.push(businessKey ? " row-business-key=\"" + businessKeySanitised + "\"" : "");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\"");
	        templateParts.push(" class=\"" + rowClasses + "\"");
	        templateParts.push(" style=\"height: " + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + "\">");
	        // add in the template for the cells
	        templateParts.push(contents);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    RowComp.prototype.getCellForCol = function (column$$1) {
	        var cellComp$$1 = this.cellComps[column$$1.getColId()];
	        if (cellComp$$1) {
	            return cellComp$$1.getGui();
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.afterFlush = function () {
	        if (!this.initialised) {
	            this.initialised = true;
	            this.executeProcessRowPostCreateFunc();
	        }
	    };
	    RowComp.prototype.executeProcessRowPostCreateFunc = function () {
	        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
	        if (func) {
	            var params = {
	                eRow: this.eBodyRow,
	                ePinnedLeftRow: this.ePinnedLeftRow,
	                ePinnedRightRow: this.ePinnedRightRow,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                rowIndex: this.rowNode.rowIndex,
	                addRenderedRowListener: this.addEventListener.bind(this),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	                context: this.beans.gridOptionsWrapper.getContext()
	            };
	            func(params);
	        }
	    };
	    RowComp.prototype.getInitialRowTopStyle = function () {
	        // if sliding in, we take the old row top. otherwise we just set the current row top.
	        var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
	        var afterPaginationPixels = this.applyPaginationOffset(pixels);
	        var afterScalingPixels = this.beans.heightScaler.getRealPixelPosition(afterPaginationPixels);
	        if (this.beans.gridOptionsWrapper.isSuppressRowTransform()) {
	            return "top: " + afterScalingPixels + "px; ";
	        }
	        else {
	            return "transform: translateY(" + afterScalingPixels + "px); ";
	        }
	    };
	    RowComp.prototype.getRowBusinessKey = function () {
	        if (typeof this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc() === 'function') {
	            var businessKey = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.rowNode);
	            return businessKey;
	        }
	    };
	    RowComp.prototype.lazyCreateCells = function (cols, eRow) {
	        if (this.active) {
	            var cellTemplatesAndComps = this.createCells(cols);
	            eRow.innerHTML = cellTemplatesAndComps.template;
	            this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	        }
	    };
	    RowComp.prototype.createRowContainer = function (rowContainerComp, cols, callback) {
	        var _this = this;
	        var cellTemplatesAndComps;
	        if (this.useAnimationFrameForCreate) {
	            cellTemplatesAndComps = { cellComps: [], template: '' };
	        }
	        else {
	            cellTemplatesAndComps = this.createCells(cols);
	        }
	        var rowTemplate = this.createTemplate(cellTemplatesAndComps.template);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            _this.afterRowAttached(rowContainerComp, eRow);
	            callback(eRow);
	            if (_this.useAnimationFrameForCreate) {
	                _this.beans.taskQueue.addP1Task(_this.lazyCreateCells.bind(_this, cols, eRow));
	            }
	            else {
	                _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	            }
	        });
	    };
	    RowComp.prototype.createChildScopeOrNull = function (data) {
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var newChildScope_1 = this.parentScope.$new();
	            newChildScope_1.data = data;
	            newChildScope_1.rowNode = this.rowNode;
	            newChildScope_1.context = this.beans.gridOptionsWrapper.getContext();
	            this.addDestroyFunc(function () {
	                newChildScope_1.$destroy();
	                newChildScope_1.data = null;
	                newChildScope_1.rowNode = null;
	                newChildScope_1.context = null;
	            });
	            return newChildScope_1;
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.setupRowContainers = function () {
	        var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
	        var isFullWidthCell = isFullWidthCellFunc ? isFullWidthCellFunc(this.rowNode) : false;
	        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
	        var isGroupSpanningRow = this.rowNode.group && this.beans.gridOptionsWrapper.isGroupUseEntireRow();
	        if (this.rowNode.stub) {
	            this.createFullWidthRows(RowComp.LOADING_CELL_RENDERER, RowComp.LOADING_CELL_RENDERER_COMP_NAME);
	        }
	        else if (isDetailCell) {
	            this.createFullWidthRows(RowComp.DETAIL_CELL_RENDERER, RowComp.DETAIL_CELL_RENDERER_COMP_NAME);
	        }
	        else if (isFullWidthCell) {
	            this.createFullWidthRows(RowComp.FULL_WIDTH_CELL_RENDERER, null);
	        }
	        else if (isGroupSpanningRow) {
	            this.createFullWidthRows(RowComp.GROUP_ROW_RENDERER, RowComp.GROUP_ROW_RENDERER_COMP_NAME);
	        }
	        else {
	            this.setupNormalRowContainers();
	        }
	    };
	    RowComp.prototype.setupNormalRowContainers = function () {
	        var _this = this;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        this.createRowContainer(this.bodyContainerComp, centerCols, function (eRow) { return _this.eBodyRow = eRow; });
	        var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	        var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	        this.createRowContainer(this.pinnedRightContainerComp, rightCols, function (eRow) { return _this.ePinnedRightRow = eRow; });
	        this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function (eRow) { return _this.ePinnedLeftRow = eRow; });
	    };
	    RowComp.prototype.createFullWidthRows = function (type, name) {
	        var _this = this;
	        this.fullWidthRow = true;
	        this.fullWidthRowEmbedded = this.beans.gridOptionsWrapper.isEmbedFullWidthRows();
	        if (this.fullWidthRowEmbedded) {
	            this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, name, function (eRow) {
	                _this.eFullWidthRowBody = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentBody = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedLeftContainerComp, column.Column.PINNED_LEFT, 'ag-cell-last-left-pinned', type, name, function (eRow) {
	                _this.eFullWidthRowLeft = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentLeft = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedRightContainerComp, column.Column.PINNED_RIGHT, 'ag-cell-first-right-pinned', type, name, function (eRow) {
	                _this.eFullWidthRowRight = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentRight = cellRenderer;
	            });
	        }
	        else {
	            // otherwise we add to the fullWidth container as normal
	            // let previousFullWidth = ensureDomOrder ? this.lastPlacedElements.eFullWidth : null;
	            this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, name, function (eRow) {
	                _this.eFullWidthRow = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponent = cellRenderer;
	            });
	        }
	    };
	    RowComp.prototype.setAnimateFlags = function (animateIn) {
	        if (animateIn) {
	            var oldRowTopExists = utils._.exists(this.rowNode.oldRowTop);
	            // if the row had a previous position, we slide it in (animate row top)
	            this.slideRowIn = oldRowTopExists;
	            // if the row had no previous position, we fade it in (animate
	            this.fadeRowIn = !oldRowTopExists;
	        }
	        else {
	            this.slideRowIn = false;
	            this.fadeRowIn = false;
	        }
	    };
	    RowComp.prototype.isEditing = function () {
	        return this.editingRow;
	    };
	    RowComp.prototype.stopRowEditing = function (cancel) {
	        this.stopEditing(cancel);
	    };
	    RowComp.prototype.isFullWidth = function () {
	        return this.fullWidthRow;
	    };
	    RowComp.prototype.addListeners = function () {
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_EXPANDED_CHANGED, this.onExpandedChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
	        var eventService = this.beans.eventService;
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events$1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    // when grid columns change, then all cells should be cleaned out,
	    // as the new columns could have same id as the previous columns and may conflict
	    RowComp.prototype.onGridColumnsChanged = function () {
	        var allRenderedCellIds = Object.keys(this.cellComps);
	        this.removeRenderedCells(allRenderedCellIds);
	    };
	    RowComp.prototype.onRowNodeDataChanged = function (event) {
	        // if this is an update, we want to refresh, as this will allow the user to put in a transition
	        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
	        // we will want to completely replace the cells
	        this.forEachCellComp(function (cellComp$$1) {
	            return cellComp$$1.refreshCell({
	                suppressFlash: !event.update,
	                newData: !event.update
	            });
	        });
	        // check for selected also, as this could be after lazy loading of the row data, in which case
	        // the id might of just gotten set inside the row and the row selected state may of changed
	        // as a result. this is what happens when selected rows are loaded in virtual pagination.
	        // - niall note - since moving to the stub component, this may no longer be true, as replacing
	        // the stub component now replaces the entire row
	        this.onRowSelected();
	        // as data has changed, then the style and class needs to be recomputed
	        this.postProcessCss();
	    };
	    RowComp.prototype.onRowNodeCellChanged = function (event) {
	        // as data has changed, then the style and class needs to be recomputed
	        this.postProcessCss();
	    };
	    RowComp.prototype.postProcessCss = function () {
	        this.postProcessStylesFromGridOptions();
	        this.postProcessClassesFromGridOptions();
	        this.postProcessRowClassRules();
	        this.postProcessRowDragging();
	    };
	    RowComp.prototype.onRowNodeDraggingChanged = function () {
	        this.postProcessRowDragging();
	    };
	    RowComp.prototype.postProcessRowDragging = function () {
	        var dragging = this.rowNode.dragging;
	        this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-dragging', dragging); });
	    };
	    RowComp.prototype.onExpandedChanged = function () {
	        if (this.rowNode.group && !this.rowNode.footer) {
	            var expanded_1 = this.rowNode.expanded;
	            this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-group-expanded', expanded_1); });
	            this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-group-contracted', !expanded_1); });
	        }
	    };
	    RowComp.prototype.onDisplayedColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.destroyFullWidthComponents = function () {
	        if (this.fullWidthRowComponent) {
	            if (this.fullWidthRowComponent.destroy) {
	                this.fullWidthRowComponent.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentBody) {
	            if (this.fullWidthRowComponentBody.destroy) {
	                this.fullWidthRowComponentBody.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentLeft) {
	            if (this.fullWidthRowComponentLeft.destroy) {
	                this.fullWidthRowComponentLeft.destroy();
	            }
	            this.fullWidthRowComponentLeft = null;
	        }
	        if (this.fullWidthRowComponentRight) {
	            if (this.fullWidthRowComponentRight.destroy) {
	                this.fullWidthRowComponentRight.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	    };
	    RowComp.prototype.getContainerForCell = function (pinnedType) {
	        switch (pinnedType) {
	            case column.Column.PINNED_LEFT: return this.ePinnedLeftRow;
	            case column.Column.PINNED_RIGHT: return this.ePinnedRightRow;
	            default: return this.eBodyRow;
	        }
	    };
	    RowComp.prototype.onVirtualColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.onColumnResized = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.refreshCells = function () {
	        if (this.beans.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.refreshCellsInAnimationFrame();
	        }
	        else {
	            if (this.columnRefreshPending) {
	                return;
	            }
	            this.beans.taskQueue.addP1Task(this.refreshCellsInAnimationFrame.bind(this));
	        }
	    };
	    RowComp.prototype.refreshCellsInAnimationFrame = function () {
	        if (!this.active) {
	            return;
	        }
	        this.columnRefreshPending = false;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	        var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	        this.insertCellsIntoContainer(this.eBodyRow, centerCols);
	        this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
	        this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
	        var colIdsToRemove = Object.keys(this.cellComps);
	        centerCols.forEach(function (col) { return utils._.removeFromArray(colIdsToRemove, col.getId()); });
	        leftCols.forEach(function (col) { return utils._.removeFromArray(colIdsToRemove, col.getId()); });
	        rightCols.forEach(function (col) { return utils._.removeFromArray(colIdsToRemove, col.getId()); });
	        // we never remove editing cells, as this would cause the cells to loose their values while editing
	        // as the grid is scrolling horizontally.
	        colIdsToRemove = utils._.filter(colIdsToRemove, this.isCellEligibleToBeRemoved.bind(this));
	        // remove old cells from gui, but we don't destroy them, we might use them again
	        this.removeRenderedCells(colIdsToRemove);
	    };
	    RowComp.prototype.removeRenderedCells = function (colIds) {
	        var _this = this;
	        colIds.forEach(function (key) {
	            var cellComp$$1 = _this.cellComps[key];
	            // could be old reference, ie removed cell
	            if (utils._.missing(cellComp$$1)) {
	                return;
	            }
	            cellComp$$1.detach();
	            cellComp$$1.destroy();
	            _this.cellComps[key] = null;
	        });
	    };
	    RowComp.prototype.isCellEligibleToBeRemoved = function (indexStr) {
	        var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
	        var REMOVE_CELL = true;
	        var KEEP_CELL = false;
	        var renderedCell = this.cellComps[indexStr];
	        if (!renderedCell) {
	            return REMOVE_CELL;
	        }
	        // always remove the cell if it's in the wrong pinned location
	        if (this.isCellInWrongRow(renderedCell)) {
	            return REMOVE_CELL;
	        }
	        // we want to try and keep editing and focused cells
	        var editing = renderedCell.isEditing();
	        var focused = this.beans.focusedCellController.isCellFocused(renderedCell.getGridCell());
	        var mightWantToKeepCell = editing || focused;
	        if (mightWantToKeepCell) {
	            var column$$1 = renderedCell.getColumn();
	            var cellStillDisplayed = displayedColumns.indexOf(column$$1) >= 0;
	            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
	        }
	        else {
	            return REMOVE_CELL;
	        }
	    };
	    RowComp.prototype.ensureCellInCorrectContainer = function (cellComp$$1) {
	        var element = cellComp$$1.getGui();
	        var column$$1 = cellComp$$1.getColumn();
	        var pinnedType = column$$1.getPinned();
	        var eContainer = this.getContainerForCell(pinnedType);
	        // if in wrong container, remove it
	        var eOldContainer = cellComp$$1.getParentRow();
	        var inWrongRow = eOldContainer !== eContainer;
	        if (inWrongRow) {
	            // take out from old row
	            if (eOldContainer) {
	                eOldContainer.removeChild(element);
	            }
	            eContainer.appendChild(element);
	            cellComp$$1.setParentRow(eContainer);
	        }
	    };
	    RowComp.prototype.isCellInWrongRow = function (cellComp$$1) {
	        var column$$1 = cellComp$$1.getColumn();
	        var rowWeWant = this.getContainerForCell(column$$1.getPinned());
	        // if in wrong container, remove it
	        var oldRow = cellComp$$1.getParentRow();
	        return oldRow !== rowWeWant;
	    };
	    RowComp.prototype.insertCellsIntoContainer = function (eRow, cols) {
	        var _this = this;
	        if (!eRow) {
	            return;
	        }
	        var cellTemplates = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var colId = col.getId();
	            var oldCell = _this.cellComps[colId];
	            if (oldCell) {
	                _this.ensureCellInCorrectContainer(oldCell);
	            }
	            else {
	                _this.createNewCell(col, eRow, cellTemplates, newCellComps);
	            }
	        });
	        if (cellTemplates.length > 0) {
	            utils._.appendHtml(eRow, cellTemplates.join(''));
	            this.callAfterRowAttachedOnCells(newCellComps, eRow);
	        }
	    };
	    RowComp.prototype.addDomData = function (eRowContainer) {
	        var gow = this.beans.gridOptionsWrapper;
	        gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, this);
	        this.addDestroyFunc(function () {
	            gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, null);
	        });
	    };
	    RowComp.prototype.createNewCell = function (col, eContainer, cellTemplates, newCellComps) {
	        var newCellComp = new cellComp.CellComp(this.scope, this.beans, col, this.rowNode, this, false);
	        var cellTemplate = newCellComp.getCreateTemplate();
	        cellTemplates.push(cellTemplate);
	        newCellComps.push(newCellComp);
	        this.cellComps[col.getId()] = newCellComp;
	        newCellComp.setParentRow(eContainer);
	    };
	    RowComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        switch (eventName) {
	            case 'dblclick':
	                this.onRowDblClick(mouseEvent);
	                break;
	            case 'click':
	                this.onRowClick(mouseEvent);
	                break;
	        }
	    };
	    RowComp.prototype.createRowEvent = function (type, domEvent) {
	        return {
	            type: type,
	            node: this.rowNode,
	            data: this.rowNode.data,
	            rowIndex: this.rowNode.rowIndex,
	            rowPinned: this.rowNode.rowPinned,
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            event: domEvent
	        };
	    };
	    RowComp.prototype.createRowEventWithSource = function (type, domEvent) {
	        var event = this.createRowEvent(type, domEvent);
	        // when first developing this, we included the rowComp in the event.
	        // this seems very weird. so when introducing the event types, i left the 'source'
	        // out of the type, and just include the source in the two places where this event
	        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
	        // users to be using this, as the rowComp isn't an object we expose, so would be
	        // very surprising if a user was using it.
	        event.source = this;
	        return event;
	    };
	    RowComp.prototype.onRowDblClick = function (mouseEvent) {
	        if (utils._.isStopPropagationForAgGrid(mouseEvent)) {
	            return;
	        }
	        var agEvent = this.createRowEventWithSource(events$1.Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	    };
	    RowComp.prototype.onRowClick = function (mouseEvent) {
	        var stop = utils._.isStopPropagationForAgGrid(mouseEvent);
	        if (stop) {
	            return;
	        }
	        var agEvent = this.createRowEventWithSource(events$1.Events.EVENT_ROW_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	        // ctrlKey for windows, metaKey for Apple
	        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
	        var shiftKeyPressed = mouseEvent.shiftKey;
	        // we do not allow selecting groups by clicking (as the click here expands the group)
	        // so return if it's a group row
	        if (this.rowNode.group) {
	            return;
	        }
	        // we also don't allow selection of pinned rows
	        if (this.rowNode.rowPinned) {
	            return;
	        }
	        // if no selection method enabled, do nothing
	        if (!this.beans.gridOptionsWrapper.isRowSelection()) {
	            return;
	        }
	        // if click selection suppressed, do nothing
	        if (this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
	            return;
	        }
	        var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
	        var rowDeselectionWithCtrl = this.beans.gridOptionsWrapper.isRowDeselection();
	        if (this.rowNode.isSelected()) {
	            if (multiSelectOnClick) {
	                this.rowNode.setSelectedParams({ newValue: false });
	            }
	            else if (multiSelectKeyPressed) {
	                if (rowDeselectionWithCtrl) {
	                    this.rowNode.setSelectedParams({ newValue: false });
	                }
	            }
	            else {
	                // selected with no multi key, must make sure anything else is unselected
	                this.rowNode.setSelectedParams({ newValue: true, clearSelection: true });
	            }
	        }
	        else {
	            var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
	            this.rowNode.setSelectedParams({ newValue: true, clearSelection: clearSelection, rangeSelect: shiftKeyPressed });
	        }
	    };
	    RowComp.prototype.createFullWidthRowContainer = function (rowContainerComp, pinned, extraCssClass, cellRendererType, cellRendererName, eRowCallback, cellRendererCallback) {
	        var _this = this;
	        var rowTemplate = this.createTemplate('', extraCssClass);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            var params = _this.createFullWidthParams(eRow, pinned);
	            var callback = function (cellRenderer) {
	                if (_this.isAlive()) {
	                    var gui = cellRenderer.getGui();
	                    eRow.appendChild(gui);
	                    cellRendererCallback(cellRenderer);
	                }
	                else {
	                    if (cellRenderer.destroy) {
	                        cellRenderer.destroy();
	                    }
	                }
	            };
	            _this.beans.componentResolver.createAgGridComponent(null, params, cellRendererType, params, cellRendererName).then(callback);
	            _this.afterRowAttached(rowContainerComp, eRow);
	            eRowCallback(eRow);
	            _this.angular1Compile(eRow);
	        });
	    };
	    RowComp.prototype.angular1Compile = function (element) {
	        if (this.scope) {
	            this.beans.$compile(element)(this.scope);
	        }
	    };
	    RowComp.prototype.createFullWidthParams = function (eRow, pinned) {
	        var params = {
	            fullWidth: true,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            value: this.rowNode.key,
	            $scope: this.scope,
	            rowIndex: this.rowNode.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            // these need to be taken out, as part of 'afterAttached' now
	            eGridCell: eRow,
	            eParentOfValue: eRow,
	            pinned: pinned,
	            addRenderedRowListener: this.addEventListener.bind(this)
	        };
	        return params;
	    };
	    RowComp.prototype.getInitialRowClasses = function (extraCssClass) {
	        var classes = [];
	        if (utils._.exists(extraCssClass)) {
	            classes.push(extraCssClass);
	        }
	        classes.push('ag-row');
	        classes.push(this.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');
	        if (this.fadeRowIn) {
	            classes.push('ag-opacity-zero');
	        }
	        if (this.rowIsEven) {
	            classes.push('ag-row-even');
	        }
	        else {
	            classes.push('ag-row-odd');
	        }
	        if (this.rowNode.isSelected()) {
	            classes.push('ag-row-selected');
	        }
	        if (this.rowNode.group) {
	            classes.push('ag-row-group');
	            // if a group, put the level of the group in
	            classes.push('ag-row-level-' + this.rowNode.level);
	            if (this.rowNode.footer) {
	                classes.push('ag-row-footer');
	            }
	        }
	        else {
	            // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
	            if (this.rowNode.parent) {
	                classes.push('ag-row-level-' + (this.rowNode.parent.level + 1));
	            }
	            else {
	                classes.push('ag-row-level-0');
	            }
	        }
	        if (this.rowNode.stub) {
	            classes.push('ag-row-stub');
	        }
	        if (this.fullWidthRow) {
	            classes.push('ag-full-width-row');
	        }
	        if (this.rowNode.group && !this.rowNode.footer) {
	            classes.push(this.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');
	        }
	        if (this.rowNode.dragging) {
	            classes.push('ag-row-dragging');
	        }
	        utils._.pushAll(classes, this.processClassesFromGridOptions());
	        utils._.pushAll(classes, this.preProcessRowClassRules());
	        return classes;
	    };
	    RowComp.prototype.preProcessRowClassRules = function () {
	        var res = [];
	        this.processRowClassRules(function (className) {
	            res.push(className);
	        }, function (className) {
	            // not catered for, if creating, no need
	            // to remove class as it was never there
	        });
	        return res;
	    };
	    RowComp.prototype.processRowClassRules = function (onApplicableClass, onNotApplicableClass) {
	        this.beans.stylingService.processClassRules(this.beans.gridOptionsWrapper.rowClassRules(), {
	            value: undefined,
	            colDef: undefined,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            rowIndex: this.rowNode.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            $scope: this.scope,
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass, onNotApplicableClass);
	    };
	    RowComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachCellComp(function (renderedCell) {
	            renderedCell.stopEditing(cancel);
	        });
	        if (this.editingRow) {
	            if (!cancel) {
	                var event_1 = this.createRowEvent(events$1.Events.EVENT_ROW_VALUE_CHANGED);
	                this.beans.eventService.dispatchEvent(event_1);
	            }
	            this.setEditingRow(false);
	        }
	    };
	    RowComp.prototype.setEditingRow = function (value) {
	        this.editingRow = value;
	        this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-editing', value); });
	        var event = value ?
	            this.createRowEvent(events$1.Events.EVENT_ROW_EDITING_STARTED)
	            : this.createRowEvent(events$1.Events.EVENT_ROW_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.startRowEditing = function (keyPress, charPress, sourceRenderedCell) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (sourceRenderedCell === void 0) { sourceRenderedCell = null; }
	        // don't do it if already editing
	        if (this.editingRow) {
	            return;
	        }
	        this.forEachCellComp(function (renderedCell) {
	            var cellStartedEdit = renderedCell === sourceRenderedCell;
	            if (cellStartedEdit) {
	                renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
	            }
	            else {
	                renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
	            }
	        });
	        this.setEditingRow(true);
	    };
	    RowComp.prototype.forEachCellComp = function (callback) {
	        utils._.iterateObject(this.cellComps, function (key, cellComp$$1) {
	            if (cellComp$$1) {
	                callback(cellComp$$1);
	            }
	        });
	    };
	    RowComp.prototype.postProcessClassesFromGridOptions = function () {
	        var _this = this;
	        var cssClasses = this.processClassesFromGridOptions();
	        if (cssClasses) {
	            cssClasses.forEach(function (classStr) {
	                _this.eAllRowContainers.forEach(function (row) { return utils._.addCssClass(row, classStr); });
	            });
	        }
	    };
	    RowComp.prototype.postProcessRowClassRules = function () {
	        var _this = this;
	        this.processRowClassRules(function (className) {
	            _this.eAllRowContainers.forEach(function (row) { return utils._.addCssClass(row, className); });
	        }, function (className) {
	            _this.eAllRowContainers.forEach(function (row) { return utils._.removeCssClass(row, className); });
	        });
	    };
	    RowComp.prototype.processClassesFromGridOptions = function () {
	        var res = [];
	        var process = function (rowClass) {
	            if (typeof rowClass === 'string') {
	                res.push(rowClass);
	            }
	            else if (Array.isArray(rowClass)) {
	                rowClass.forEach(function (e) { return res.push(e); });
	            }
	        };
	        // part 1 - rowClass
	        var rowClass = this.beans.gridOptionsWrapper.getRowClass();
	        if (rowClass) {
	            if (typeof rowClass === 'function') {
	                console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');
	                return;
	            }
	            process(rowClass);
	        }
	        // part 2 - rowClassFunc
	        var rowClassFunc = this.beans.gridOptionsWrapper.getRowClassFunc();
	        if (rowClassFunc) {
	            var params = {
	                node: this.rowNode,
	                data: this.rowNode.data,
	                rowIndex: this.rowNode.rowIndex,
	                context: this.beans.gridOptionsWrapper.getContext(),
	                api: this.beans.gridOptionsWrapper.getApi()
	            };
	            var rowClassFuncResult = rowClassFunc(params);
	            process(rowClassFuncResult);
	        }
	        return res;
	    };
	    RowComp.prototype.preProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        return utils._.cssStyleObjectToMarkup(rowStyles);
	    };
	    RowComp.prototype.postProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        this.eAllRowContainers.forEach(function (row) { return utils._.addStylesToElement(row, rowStyles); });
	    };
	    RowComp.prototype.processStylesFromGridOptions = function () {
	        // part 1 - rowStyle
	        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
	        if (rowStyle && typeof rowStyle === 'function') {
	            console.log('ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');
	            return;
	        }
	        // part 1 - rowStyleFunc
	        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
	        var rowStyleFuncResult;
	        if (rowStyleFunc) {
	            var params = {
	                data: this.rowNode.data,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                $scope: this.scope
	            };
	            rowStyleFuncResult = rowStyleFunc(params);
	        }
	        return utils._.assign({}, rowStyle, rowStyleFuncResult);
	    };
	    RowComp.prototype.createCells = function (cols) {
	        var _this = this;
	        var templateParts = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var newCellComp = new cellComp.CellComp(_this.scope, _this.beans, col, _this.rowNode, _this, false);
	            var cellTemplate = newCellComp.getCreateTemplate();
	            templateParts.push(cellTemplate);
	            newCellComps.push(newCellComp);
	            _this.cellComps[col.getId()] = newCellComp;
	        });
	        var templateAndComps = {
	            template: templateParts.join(''),
	            cellComps: newCellComps
	        };
	        return templateAndComps;
	    };
	    RowComp.prototype.onRowSelected = function () {
	        var selected = this.rowNode.isSelected();
	        this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-selected', selected); });
	    };
	    // called:
	    // + after row created for first time
	    // + after horizontal scroll, so new cells due to column virtualisation
	    RowComp.prototype.callAfterRowAttachedOnCells = function (newCellComps, eRow) {
	        var _this = this;
	        newCellComps.forEach(function (cellComp$$1) {
	            cellComp$$1.setParentRow(eRow);
	            cellComp$$1.afterAttached();
	            // if we are editing the row, then the cell needs to turn
	            // into edit mode
	            if (_this.editingRow) {
	                cellComp$$1.startEditingIfEnabled();
	            }
	        });
	    };
	    RowComp.prototype.afterRowAttached = function (rowContainerComp, eRow) {
	        var _this = this;
	        this.addDomData(eRow);
	        this.removeSecondPassFuncs.push(function () {
	            // console.log(eRow);
	            rowContainerComp.removeRowElement(eRow);
	        });
	        this.removeFirstPassFuncs.push(function () {
	            if (utils._.exists(_this.rowNode.rowTop)) {
	                // the row top is updated anyway, however we set it here again
	                // to something more reasonable for the animation - ie if the
	                // row top is 10000px away, the row will flash out, so this
	                // gives it a rounded value, so row animates out more slowly
	                var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);
	                _this.setRowTop(rowTop);
	            }
	            else {
	                utils._.addCssClass(eRow, 'ag-opacity-zero');
	            }
	        });
	        this.eAllRowContainers.push(eRow);
	        // adding hover functionality adds listener to this row, so we
	        // do it lazily in an animation frame
	        if (this.useAnimationFrameForCreate) {
	            this.beans.taskQueue.addP1Task(this.addHoverFunctionality.bind(this, eRow));
	        }
	        else {
	            this.addHoverFunctionality(eRow);
	        }
	    };
	    RowComp.prototype.addHoverFunctionality = function (eRow) {
	        var _this = this;
	        // because we use animation frames to do this, it's possible the row no longer exists
	        // by the time we get to add it
	        if (!this.active) {
	            return;
	        }
	        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
	        // like we do for all the other mouse events.
	        // because of the pinning, we cannot simply add / remove the class based on the eRow. we
	        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
	        // mouse hover, it sets such in the rowNode, and then all three reflect the change as
	        // all are listening for event on the row node.
	        // step 1 - add listener, to set flag on row node
	        this.addDestroyableEventListener(eRow, 'mouseenter', function () { return _this.rowNode.onMouseEnter(); });
	        this.addDestroyableEventListener(eRow, 'mouseleave', function () { return _this.rowNode.onMouseLeave(); });
	        // step 2 - listen for changes on row node (which any eRow can trigger)
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_MOUSE_ENTER, function () {
	            // if hover turned off, we don't add the class. we do this here so that if the application
	            // toggles this property mid way, we remove the hover form the last row, but we stop
	            // adding hovers from that point onwards.
	            if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
	                utils._.addCssClass(eRow, 'ag-row-hover');
	            }
	        });
	        this.addDestroyableEventListener(this.rowNode, rowNode.RowNode.EVENT_MOUSE_LEAVE, function () {
	            utils._.removeCssClass(eRow, 'ag-row-hover');
	        });
	    };
	    // for animation, we don't want to animate entry or exit to a very far away pixel,
	    // otherwise the row would move so fast, it would appear to disappear. so this method
	    // moves the row closer to the viewport if it is far away, so the row slide in / out
	    // at a speed the user can see.
	    RowComp.prototype.roundRowTopToBounds = function (rowTop) {
	        var range = this.beans.gridPanel.getVScrollPosition();
	        var minPixel = this.applyPaginationOffset(range.top, true) - 100;
	        var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
	        if (rowTop < minPixel) {
	            return minPixel;
	        }
	        else if (rowTop > maxPixel) {
	            return maxPixel;
	        }
	        else {
	            return rowTop;
	        }
	    };
	    RowComp.prototype.onRowHeightChanged = function () {
	        // check for exists first - if the user is resetting the row height, then
	        // it will be null (or undefined) momentarily until the next time the flatten
	        // stage is called where the row will then update again with a new height
	        if (utils._.exists(this.rowNode.rowHeight)) {
	            var heightPx_1 = this.rowNode.rowHeight + 'px';
	            this.eAllRowContainers.forEach(function (row) { return row.style.height = heightPx_1; });
	        }
	    };
	    RowComp.prototype.addEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
	            eventType = events$1.Events.EVENT_VIRTUAL_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved is now called ' + events$1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        }
	        _super.prototype.addEventListener.call(this, eventType, listener);
	    };
	    RowComp.prototype.removeEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
	            eventType = events$1.Events.EVENT_VIRTUAL_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called ' + events$1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        }
	        _super.prototype.removeEventListener.call(this, eventType, listener);
	    };
	    RowComp.prototype.destroy = function (animate) {
	        if (animate === void 0) { animate = false; }
	        _super.prototype.destroy.call(this);
	        this.active = false;
	        // why do we have this method? shouldn't everything below be added as a destroy func beside
	        // the corresponding create logic?
	        this.destroyFullWidthComponents();
	        if (animate) {
	            this.removeFirstPassFuncs.forEach(function (func) { return func(); });
	            this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
	        }
	        else {
	            this.destroyContainingCells();
	            // we are not animating, so execute the second stage of removal now.
	            // we call getAndClear, so that they are only called once
	            var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
	            delayedDestroyFunctions.forEach(function (func) { return func(); });
	        }
	        var event = this.createRowEvent(events$1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        this.dispatchEvent(event);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.destroyContainingCells = function () {
	        this.forEachCellComp(function (renderedCell) { return renderedCell.destroy(); });
	        this.destroyFullWidthComponents();
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearDelayedDestroyFunctions = function () {
	        var result = this.removeSecondPassFuncs;
	        this.removeSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.onCellFocusChanged = function () {
	        var rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        if (rowFocused !== this.rowFocused) {
	            this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-focus', rowFocused); });
	            this.eAllRowContainers.forEach(function (row) { return utils._.addOrRemoveCssClass(row, 'ag-row-no-focus', !rowFocused); });
	            this.rowFocused = rowFocused;
	        }
	        // if we are editing, then moving the focus out of a row will stop editing
	        if (!rowFocused && this.editingRow) {
	            this.stopEditing(false);
	        }
	    };
	    RowComp.prototype.onPaginationChanged = function () {
	        var currentPage = this.beans.paginationProxy.getCurrentPage();
	        // it is possible this row is in the new page, but the page number has changed, which means
	        // it needs to reposition itself relative to the new page
	        if (this.paginationPage !== currentPage) {
	            this.paginationPage = currentPage;
	            this.onTopChanged();
	        }
	    };
	    RowComp.prototype.onTopChanged = function () {
	        this.setRowTop(this.rowNode.rowTop);
	    };
	    // applies pagination offset, eg if on second page, and page height is 500px, then removes
	    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.
	    // reverse will take the offset away rather than add.
	    RowComp.prototype.applyPaginationOffset = function (topPx, reverse) {
	        if (reverse === void 0) { reverse = false; }
	        if (this.rowNode.isRowPinned()) {
	            return topPx;
	        }
	        else {
	            var pixelOffset = this.beans.paginationProxy.getPixelOffset();
	            if (reverse) {
	                return topPx + pixelOffset;
	            }
	            else {
	                return topPx - pixelOffset;
	            }
	        }
	    };
	    RowComp.prototype.setRowTop = function (pixels) {
	        // need to make sure rowTop is not null, as this can happen if the node was once
	        // visible (ie parent group was expanded) but is now not visible
	        if (utils._.exists(pixels)) {
	            var afterPaginationPixels = this.applyPaginationOffset(pixels);
	            var afterScalingPixels = this.beans.heightScaler.getRealPixelPosition(afterPaginationPixels);
	            var topPx_1 = afterScalingPixels + "px";
	            if (this.beans.gridOptionsWrapper.isSuppressRowTransform()) {
	                this.eAllRowContainers.forEach(function (row) { return row.style.top = "" + topPx_1; });
	            }
	            else {
	                this.eAllRowContainers.forEach(function (row) { return row.style.transform = "translateY(" + topPx_1 + ")"; });
	            }
	        }
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearNextVMTurnFunctions = function () {
	        var result = this.createSecondPassFuncs;
	        this.createSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.getRowNode = function () {
	        return this.rowNode;
	    };
	    RowComp.prototype.getRenderedCellForColumn = function (column$$1) {
	        return this.cellComps[column$$1.getColId()];
	    };
	    RowComp.prototype.onRowIndexChanged = function () {
	        this.onCellFocusChanged();
	        this.updateRowIndexes();
	    };
	    RowComp.prototype.updateRowIndexes = function () {
	        var rowIndexStr = this.rowNode.getRowIndexString();
	        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
	        var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
	        if (rowIsEvenChanged) {
	            this.rowIsEven = rowIsEven;
	        }
	        this.eAllRowContainers.forEach(function (eRow) {
	            eRow.setAttribute('row-index', rowIndexStr);
	            if (rowIsEvenChanged) {
	                utils._.addOrRemoveCssClass(eRow, 'ag-row-even', rowIsEven);
	                utils._.addOrRemoveCssClass(eRow, 'ag-row-odd', !rowIsEven);
	            }
	        });
	    };
	    RowComp.prototype.ensureDomOrder = function () {
	        var body = this.getBodyRowElement();
	        if (body) {
	            this.bodyContainerComp.ensureDomOrder(body);
	        }
	        var left = this.getPinnedLeftRowElement();
	        if (left) {
	            this.pinnedLeftContainerComp.ensureDomOrder(left);
	        }
	        var right = this.getPinnedRightRowElement();
	        if (right) {
	            this.pinnedRightContainerComp.ensureDomOrder(right);
	        }
	        var fullWidth = this.getFullWidthRowElement();
	        if (fullWidth) {
	            this.fullWidthContainerComp.ensureDomOrder(fullWidth);
	        }
	    };
	    // returns the pinned left container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedLeftRowElement = function () {
	        return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
	    };
	    // returns the pinned right container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedRightRowElement = function () {
	        return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
	    };
	    // returns the body container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getBodyRowElement = function () {
	        return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
	    };
	    // returns the full width container
	    RowComp.prototype.getFullWidthRowElement = function () {
	        return this.eFullWidthRow;
	    };
	    RowComp.DOM_DATA_KEY_RENDERED_ROW = 'renderedRow';
	    RowComp.FULL_WIDTH_CELL_RENDERER = 'fullWidthCellRenderer';
	    RowComp.GROUP_ROW_RENDERER = 'groupRowRenderer';
	    RowComp.GROUP_ROW_RENDERER_COMP_NAME = 'agGroupRowRenderer';
	    RowComp.LOADING_CELL_RENDERER = 'loadingCellRenderer';
	    RowComp.LOADING_CELL_RENDERER_COMP_NAME = 'agLoadingCellRenderer';
	    RowComp.DETAIL_CELL_RENDERER = 'detailCellRenderer';
	    RowComp.DETAIL_CELL_RENDERER_COMP_NAME = 'agDetailCellRenderer';
	    return RowComp;
	}(component.Component));
	exports.RowComp = RowComp;
	});

	unwrapExports(rowComp);
	var rowComp_1 = rowComp.LoadingCellRenderer;
	var rowComp_2 = rowComp.RowComp;

	var popupService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var PopupService = (function () {
	    function PopupService() {
	        this.activePopupElements = [];
	    }
	    PopupService.prototype.getPopupParent = function () {
	        var ePopupParent = this.gridOptionsWrapper.getPopupParent();
	        if (ePopupParent) {
	            // user provided popup parent, may not have the right theme applied
	            return ePopupParent;
	        }
	        else {
	            return this.gridCore.getRootGui();
	        }
	    };
	    PopupService.prototype.positionPopupForMenu = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var y = sourceRect.top - parentRect.top;
	        y = this.keepYWithinBounds(params, y);
	        var minWidth = (params.ePopup.clientWidth > 0) ? params.ePopup.clientWidth : 200;
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth;
	        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
	        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
	        // we try place it first to the left, and then if not to the right.
	        var x;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, try left first
	            x = xLeftPosition();
	            if (x < 0) {
	                x = xRightPosition();
	            }
	            if (x > maxX) {
	                x = 0;
	            }
	        }
	        else {
	            // for LTR, try right first
	            x = xRightPosition();
	            if (x > maxX) {
	                x = xLeftPosition();
	            }
	            if (x < 0) {
	                x = 0;
	            }
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	        function xRightPosition() {
	            return sourceRect.right - parentRect.left - 2;
	        }
	        function xLeftPosition() {
	            return sourceRect.left - parentRect.left - minWidth;
	        }
	    };
	    PopupService.prototype.positionPopupUnderMouseEvent = function (params) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            x: params.mouseEvent.clientX - parentRect.left,
	            y: params.mouseEvent.clientY - parentRect.top,
	            keepWithinBounds: true
	        });
	        this.callPostProcessPopup(params.ePopup, null, params.mouseEvent, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopupUnderComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top + sourceRect.height,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.callPostProcessPopup = function (ePopup, eventSource, mouseEvent, type, column, rowNode) {
	        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
	        if (callback) {
	            var params = {
	                column: column,
	                rowNode: rowNode,
	                ePopup: ePopup,
	                type: type,
	                eventSource: eventSource,
	                mouseEvent: mouseEvent
	            };
	            callback(params);
	        }
	    };
	    PopupService.prototype.positionPopupOverComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopup = function (params) {
	        var x = params.x;
	        var y = params.y;
	        if (params.nudgeX) {
	            x += params.nudgeX;
	        }
	        if (params.nudgeY) {
	            y += params.nudgeY;
	        }
	        // if popup is overflowing to the bottom, move it up
	        if (params.keepWithinBounds) {
	            x = this.keepXWithinBounds(params, x);
	            y = this.keepYWithinBounds(params, y);
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	    };
	    PopupService.prototype.keepYWithinBounds = function (params, y) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minHeight;
	        if (params.ePopup.clientHeight > 0) {
	            minHeight = params.ePopup.clientHeight;
	        }
	        else {
	            minHeight = 200;
	        }
	        var heightOfParent = parentRect.bottom - parentRect.top;
	        var maxY = heightOfParent - minHeight - 5;
	        if (y > maxY) {
	            return maxY;
	        }
	        else if (y < 0) {
	            return 0;
	        }
	        else {
	            return y;
	        }
	    };
	    PopupService.prototype.keepXWithinBounds = function (params, x) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minWidth;
	        if (params.minWidth > 0) {
	            minWidth = params.minWidth;
	        }
	        else if (params.ePopup.clientWidth > 0) {
	            minWidth = params.ePopup.clientWidth;
	        }
	        else {
	            minWidth = 200;
	        }
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth - 5;
	        if (x > maxX) {
	            return maxX;
	        }
	        else if (x < 0) {
	            return 0;
	        }
	        else {
	            return x;
	        }
	    };
	    //adds an element to a div, but also listens to background checking for clicks,
	    //so that when the background is clicked, the child is removed again, giving
	    //a model look to popups.
	    PopupService.prototype.addAsModalPopup = function (eChild, closeOnEsc, closedCallback, click) {
	        var _this = this;
	        var eBody = this.gridOptionsWrapper.getDocument();
	        if (!eBody) {
	            console.warn('ag-grid: could not find the body of the document, document.body is empty');
	            return;
	        }
	        eChild.style.top = '0px';
	        eChild.style.left = '0px';
	        var popupAlreadyShown = utils.Utils.isVisible(eChild);
	        if (popupAlreadyShown) {
	            return;
	        }
	        var ePopupParent = this.getPopupParent();
	        // add env CSS class to child, in case user provided a popup parent, which means
	        // theme class may be missing
	        var eWrapper = document.createElement('div');
	        utils.Utils.addCssClass(eWrapper, this.environment.getTheme());
	        eWrapper.appendChild(eChild);
	        ePopupParent.appendChild(eWrapper);
	        this.activePopupElements.push(eChild);
	        var popupHidden = false;
	        var hidePopupOnKeyboardEvent = function (event) {
	            var key = event.which || event.keyCode;
	            if (key === constants.Constants.KEY_ESCAPE) {
	                hidePopup(null);
	            }
	        };
	        var hidePopupOnMouseEvent = function (event) {
	            hidePopup(event);
	        };
	        var hidePopupOnTouchEvent = function (event) {
	            hidePopup(null, event);
	        };
	        var hidePopup = function (mouseEvent, touchEvent) {
	            // we don't hide popup if the event was on the child, or any
	            // children of this child
	            if (_this.isEventFromCurrentPopup(mouseEvent, touchEvent, eChild)) {
	                return;
	            }
	            // if the event to close is actually the open event, then ignore it
	            if (_this.isEventSameChainAsOriginalEvent(click, mouseEvent, touchEvent)) {
	                return;
	            }
	            // this method should only be called once. the client can have different
	            // paths, each one wanting to close, so this method may be called multiple times.
	            if (popupHidden) {
	                return;
	            }
	            popupHidden = true;
	            ePopupParent.removeChild(eWrapper);
	            utils.Utils.removeFromArray(_this.activePopupElements, eChild);
	            eBody.removeEventListener('keydown', hidePopupOnKeyboardEvent);
	            eBody.removeEventListener('click', hidePopupOnMouseEvent);
	            eBody.removeEventListener('touchstart', hidePopupOnTouchEvent);
	            eBody.removeEventListener('contextmenu', hidePopupOnMouseEvent);
	            if (closedCallback) {
	                closedCallback();
	            }
	        };
	        // if we add these listeners now, then the current mouse
	        // click will be included, which we don't want
	        setTimeout(function () {
	            if (closeOnEsc) {
	                eBody.addEventListener('keydown', hidePopupOnKeyboardEvent);
	            }
	            eBody.addEventListener('click', hidePopupOnMouseEvent);
	            eBody.addEventListener('touchstart', hidePopupOnTouchEvent);
	            eBody.addEventListener('contextmenu', hidePopupOnMouseEvent);
	        }, 0);
	        return hidePopup;
	    };
	    PopupService.prototype.isEventFromCurrentPopup = function (mouseEvent, touchEvent, eChild) {
	        var event = mouseEvent ? mouseEvent : touchEvent;
	        if (event) {
	            var indexOfThisChild = this.activePopupElements.indexOf(eChild);
	            for (var i = indexOfThisChild; i < this.activePopupElements.length; i++) {
	                var element = this.activePopupElements[i];
	                if (utils.Utils.isElementInEventPath(element, event)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    // in some browsers, the context menu event can be fired before the click event, which means
	    // the context menu event could open the popup, but then the click event closes it straight away.
	    PopupService.prototype.isEventSameChainAsOriginalEvent = function (originalClick, mouseEvent, touchEvent) {
	        // we check the coordinates of the event, to see if it's the same event. there is a 1 / 1000 chance that
	        // the event is a different event, however that is an edge case that is not very relevant (the user clicking
	        // twice on the same location isn't a normal path).
	        // event could be mouse event or touch event.
	        var mouseEventOrTouch;
	        if (mouseEvent) {
	            // mouse event can be used direction, it has coordinates
	            mouseEventOrTouch = mouseEvent;
	        }
	        else if (touchEvent) {
	            // touch event doesn't have coordinates, need it's touch object
	            mouseEventOrTouch = touchEvent.touches[0];
	        }
	        if (mouseEventOrTouch && originalClick) {
	            // for x, allow 4px margin, to cover iPads, where touch (which opens menu) is followed
	            // by browser click (when you life finger up, touch is interrupted as click in browser)
	            var xMatch = Math.abs(originalClick.screenX - mouseEvent.screenX) < 5;
	            var yMatch = Math.abs(originalClick.screenY - mouseEvent.screenY) < 5;
	            if (xMatch && yMatch) {
	                return true;
	            }
	        }
	        return false;
	    };
	    __decorate([
	        context.Autowired('gridCore'),
	        __metadata("design:type", gridCore.GridCore)
	    ], PopupService.prototype, "gridCore", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PopupService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('environment'),
	        __metadata("design:type", environment.Environment)
	    ], PopupService.prototype, "environment", void 0);
	    PopupService = __decorate([
	        context.Bean('popupService')
	    ], PopupService);
	    return PopupService;
	}());
	exports.PopupService = PopupService;
	});

	unwrapExports(popupService);
	var popupService_1 = popupService.PopupService;

	var textCellEditor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var TextCellEditor = (function (_super) {
	    __extends(TextCellEditor, _super);
	    function TextCellEditor() {
	        return _super.call(this, TextCellEditor.TEMPLATE) || this;
	    }
	    TextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        var eInput = this.getGui();
	        var startValue;
	        // cellStartedEdit is only false if we are doing fullRow editing
	        if (params.cellStartedEdit) {
	            this.focusAfterAttached = true;
	            var keyPressBackspaceOrDelete = params.keyPress === constants.Constants.KEY_BACKSPACE
	                || params.keyPress === constants.Constants.KEY_DELETE;
	            if (keyPressBackspaceOrDelete) {
	                startValue = '';
	            }
	            else if (params.charPress) {
	                startValue = params.charPress;
	            }
	            else {
	                startValue = this.getStartValue(params);
	                if (params.keyPress !== constants.Constants.KEY_F2) {
	                    this.highlightAllOnFocus = true;
	                }
	            }
	        }
	        else {
	            this.focusAfterAttached = false;
	            startValue = this.getStartValue(params);
	        }
	        if (utils.Utils.exists(startValue)) {
	            eInput.value = startValue;
	        }
	        this.addDestroyableEventListener(eInput, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants.Constants.KEY_LEFT
	                || event.keyCode === constants.Constants.KEY_RIGHT
	                || event.keyCode === constants.Constants.KEY_UP
	                || event.keyCode === constants.Constants.KEY_DOWN
	                || event.keyCode === constants.Constants.KEY_PAGE_DOWN
	                || event.keyCode === constants.Constants.KEY_PAGE_UP
	                || event.keyCode === constants.Constants.KEY_PAGE_HOME
	                || event.keyCode === constants.Constants.KEY_PAGE_END;
	            if (isNavigationKey) {
	                // this stops the grid from executing keyboard navigation
	                event.stopPropagation();
	                // this stops the browser from scrolling up / down
	                var pageUp = event.keyCode === constants.Constants.KEY_PAGE_UP;
	                var pageDown = event.keyCode === constants.Constants.KEY_PAGE_DOWN;
	                if (pageUp || pageDown) {
	                    event.preventDefault();
	                }
	            }
	        });
	    };
	    TextCellEditor.prototype.afterGuiAttached = function () {
	        if (!this.focusAfterAttached) {
	            return;
	        }
	        var eInput = this.getGui();
	        eInput.focus();
	        if (this.highlightAllOnFocus) {
	            eInput.select();
	        }
	        else {
	            // when we started editing, we want the carot at the end, not the start.
	            // this comes into play in two scenarios: a) when user hits F2 and b)
	            // when user hits a printable character, then on IE (and only IE) the carot
	            // was placed after the first character, thus 'apply' would end up as 'pplea'
	            var length_1 = eInput.value ? eInput.value.length : 0;
	            if (length_1 > 0) {
	                eInput.setSelectionRange(length_1, length_1);
	            }
	        }
	    };
	    // gets called when tabbing trough cells and in full row edit mode
	    TextCellEditor.prototype.focusIn = function () {
	        var eInput = this.getGui();
	        eInput.focus();
	        eInput.select();
	    };
	    TextCellEditor.prototype.getValue = function () {
	        var eInput = this.getGui();
	        return this.params.parseValue(eInput.value);
	    };
	    TextCellEditor.prototype.getStartValue = function (params) {
	        var formatValue = params.useFormatter || params.column.getColDef().refData;
	        return formatValue ? params.formatValue(params.value) : params.value;
	    };
	    TextCellEditor.TEMPLATE = '<input class="ag-cell-edit-input" type="text"/>';
	    return TextCellEditor;
	}(component.Component));
	exports.TextCellEditor = TextCellEditor;
	});

	unwrapExports(textCellEditor);
	var textCellEditor_1 = textCellEditor.TextCellEditor;

	var baseFilter = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var FilterConditionType;
	(function (FilterConditionType) {
	    FilterConditionType[FilterConditionType["MAIN"] = 0] = "MAIN";
	    FilterConditionType[FilterConditionType["CONDITION"] = 1] = "CONDITION";
	})(FilterConditionType = exports.FilterConditionType || (exports.FilterConditionType = {}));
	var DEFAULT_TRANSLATIONS = {
	    loadingOoo: 'Loading...',
	    equals: 'Equals',
	    notEqual: 'Not equal',
	    lessThan: 'Less than',
	    greaterThan: 'Greater than',
	    inRange: 'In range',
	    lessThanOrEqual: 'Less than or equals',
	    greaterThanOrEqual: 'Greater than or equals',
	    filterOoo: 'Filter...',
	    contains: 'Contains',
	    notContains: 'Not contains',
	    startsWith: 'Starts with',
	    endsWith: 'Ends with',
	    searchOoo: 'Search...',
	    selectAll: 'Select All',
	    applyFilter: 'Apply Filter',
	    clearFilter: 'Clear Filter'
	};
	/**
	 * T(ype) The type of this filter. ie in DateFilter T=Date
	 * P(arams) The params that this filter can take
	 * M(model getModel/setModel) The object that this filter serializes to
	 * F Floating filter params
	 *
	 * Contains common logic to ALL filters.. Translation, apply and clear button
	 * get/setModel context wiring....
	 */
	var BaseFilter = (function (_super) {
	    __extends(BaseFilter, _super);
	    function BaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilter.prototype.init = function (params) {
	        this.filterParams = params;
	        this.defaultFilter = this.filterParams.defaultOption;
	        if (this.filterParams.filterOptions && !this.defaultFilter) {
	            if (this.filterParams.filterOptions.lastIndexOf(BaseFilter.EQUALS) < 0) {
	                this.defaultFilter = this.filterParams.filterOptions[0];
	            }
	        }
	        this.customInit();
	        this.filter = this.defaultFilter;
	        this.filterCondition = this.defaultFilter;
	        this.clearActive = params.clearButton === true;
	        //Allowing for old param property apply, even though is not advertised through the interface
	        this.applyActive = ((params.applyButton === true) || (params.apply === true));
	        this.newRowsActionKeep = params.newRowsAction === 'keep';
	        this.setTemplate(this.generateTemplate());
	        utils._.setVisible(this.eApplyButton, this.applyActive);
	        if (this.applyActive) {
	            this.addDestroyableEventListener(this.eApplyButton, "click", this.filterParams.filterChangedCallback);
	        }
	        utils._.setVisible(this.eClearButton, this.clearActive);
	        if (this.clearActive) {
	            this.addDestroyableEventListener(this.eClearButton, "click", this.onClearButton.bind(this));
	        }
	        var anyButtonVisible = this.applyActive || this.clearActive;
	        utils._.setVisible(this.eButtonsPanel, anyButtonVisible);
	        this.instantiate(this.context);
	        this.initialiseFilterBodyUi(FilterConditionType.MAIN);
	        this.refreshFilterBodyUi(FilterConditionType.MAIN);
	    };
	    BaseFilter.prototype.onClearButton = function () {
	        this.setModel(null);
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.floatingFilter = function (from) {
	        if (from !== '') {
	            var model = this.modelFromFloatingFilter(from);
	            this.setModel(model);
	        }
	        else {
	            this.resetState();
	        }
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.onNewRowsLoaded = function () {
	        if (!this.newRowsActionKeep) {
	            this.resetState();
	        }
	    };
	    BaseFilter.prototype.getModel = function () {
	        if (this.isFilterActive()) {
	            if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
	                return this.serialize(FilterConditionType.MAIN);
	            }
	            else {
	                return {
	                    condition1: this.serialize(FilterConditionType.MAIN),
	                    condition2: this.serialize(FilterConditionType.CONDITION),
	                    operator: this.conditionValue
	                };
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    BaseFilter.prototype.getNullableModel = function () {
	        if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
	            return this.serialize(FilterConditionType.MAIN);
	        }
	        else {
	            return {
	                condition1: this.serialize(FilterConditionType.MAIN),
	                condition2: this.serialize(FilterConditionType.CONDITION),
	                operator: this.conditionValue
	            };
	        }
	    };
	    BaseFilter.prototype.setModel = function (model) {
	        if (model) {
	            if (!model.operator) {
	                this.resetState();
	                this.parse(model, FilterConditionType.MAIN);
	            }
	            else {
	                var asCombinedFilter = model;
	                this.parse((asCombinedFilter).condition1, FilterConditionType.MAIN);
	                this.parse((asCombinedFilter).condition2, FilterConditionType.CONDITION);
	                this.conditionValue = asCombinedFilter.operator;
	            }
	        }
	        else {
	            this.resetState();
	        }
	        this.redrawCondition();
	        this.refreshFilterBodyUi(FilterConditionType.MAIN);
	        this.refreshFilterBodyUi(FilterConditionType.CONDITION);
	    };
	    BaseFilter.prototype.doOnFilterChanged = function (applyNow) {
	        if (applyNow === void 0) { applyNow = false; }
	        this.filterParams.filterModifiedCallback();
	        var requiresApplyAndIsApplying = this.applyActive && applyNow;
	        var notRequiresApply = !this.applyActive;
	        var shouldFilter = notRequiresApply || requiresApplyAndIsApplying;
	        if (shouldFilter) {
	            this.filterParams.filterChangedCallback();
	        }
	        this.refreshFilterBodyUi(FilterConditionType.MAIN);
	        this.refreshFilterBodyUi(FilterConditionType.CONDITION);
	        return shouldFilter;
	    };
	    BaseFilter.prototype.onFilterChanged = function (applyNow) {
	        if (applyNow === void 0) { applyNow = false; }
	        this.doOnFilterChanged(applyNow);
	        this.redrawCondition();
	        this.refreshFilterBodyUi(FilterConditionType.MAIN);
	        this.refreshFilterBodyUi(FilterConditionType.CONDITION);
	    };
	    BaseFilter.prototype.redrawCondition = function () {
	        var _this = this;
	        var filterCondition = this.eFilterBodyWrapper.querySelector('.ag-filter-condition');
	        if (!filterCondition && this.isFilterActive() && this.acceptsBooleanLogic()) {
	            this.eConditionWrapper = utils._.loadTemplate(this.createConditionTemplate(FilterConditionType.CONDITION));
	            this.eFilterBodyWrapper.appendChild(this.eConditionWrapper);
	            this.wireQuerySelectors();
	            var _a = this.refreshOperatorUi(), andButton = _a.andButton, orButton = _a.orButton;
	            this.addDestroyableEventListener(andButton, 'change', function () {
	                _this.conditionValue = 'AND';
	                _this.onFilterChanged();
	            });
	            this.addDestroyableEventListener(orButton, 'change', function () {
	                _this.conditionValue = 'OR';
	                _this.onFilterChanged();
	            });
	            this.initialiseFilterBodyUi(FilterConditionType.CONDITION);
	        }
	        else if (filterCondition && !this.isFilterActive()) {
	            this.eFilterBodyWrapper.removeChild(this.eConditionWrapper);
	            this.eConditionWrapper = null;
	        }
	        else {
	            this.refreshFilterBodyUi(FilterConditionType.CONDITION);
	            if (this.eConditionWrapper) {
	                this.refreshOperatorUi();
	            }
	        }
	    };
	    BaseFilter.prototype.refreshOperatorUi = function () {
	        var andButton = this.eConditionWrapper.querySelector('.and');
	        var orButton = this.eConditionWrapper.querySelector('.or');
	        this.conditionValue = this.conditionValue == null ? 'AND' : this.conditionValue;
	        andButton.checked = this.conditionValue === 'AND';
	        orButton.checked = this.conditionValue === 'OR';
	        return { andButton: andButton, orButton: orButton };
	    };
	    BaseFilter.prototype.onFloatingFilterChanged = function (change) {
	        //It has to be of the type FloatingFilterWithApplyChange if it gets here
	        var casted = change;
	        if (casted == null) {
	            this.setModel(null);
	        }
	        else if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
	            this.setModel(casted ? casted.model : null);
	        }
	        else {
	            var combinedFilter = {
	                condition1: casted.model,
	                condition2: this.serialize(FilterConditionType.CONDITION),
	                operator: this.conditionValue
	            };
	            this.setModel(combinedFilter);
	        }
	        return this.doOnFilterChanged(casted ? casted.apply : false);
	    };
	    BaseFilter.prototype.generateFilterHeader = function (type) {
	        return '';
	    };
	    BaseFilter.prototype.generateTemplate = function () {
	        var translate = this.translate.bind(this);
	        var mainConditionBody = this.createConditionBody(FilterConditionType.MAIN);
	        var bodyWithBooleanLogic = !this.acceptsBooleanLogic() ?
	            mainConditionBody :
	            this.wrapCondition(mainConditionBody);
	        return "<div>\n                    <div class='ag-filter-body-wrapper'>" + bodyWithBooleanLogic + "</div>\n                    <div class=\"ag-filter-apply-panel\" id=\"applyPanel\">\n                        <button type=\"button\" id=\"clearButton\">" + translate('clearFilter') + "</button>\n                        <button type=\"button\" id=\"applyButton\">" + translate('applyFilter') + "</button>\n                    </div>\n                </div>";
	    };
	    BaseFilter.prototype.acceptsBooleanLogic = function () {
	        return false;
	    };
	    BaseFilter.prototype.wrapCondition = function (mainCondition) {
	        if (!this.isFilterActive())
	            return mainCondition;
	        return "" + mainCondition + this.createConditionTemplate(FilterConditionType.CONDITION);
	    };
	    BaseFilter.prototype.createConditionTemplate = function (type) {
	        return "<div class=\"ag-filter-condition\">\n            <input id=\"andId\" type=\"radio\" class=\"and\" name=\"booleanLogic\" value=\"AND\" checked=\"checked\" /><label style=\"display: inline\" for=\"andId\">AND</label>\n            <input id=\"orId\" type=\"radio\" class=\"or\" name=\"booleanLogic\" value=\"OR\" /><label style=\"display: inline\" for=\"orId\">OR</label>\n            <div>" + this.createConditionBody(type) + "</div>\n        </div>";
	    };
	    BaseFilter.prototype.createConditionBody = function (type) {
	        var body = this.bodyTemplate(type);
	        return this.generateFilterHeader(type) + body;
	    };
	    BaseFilter.prototype.translate = function (toTranslate) {
	        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
	        return translate(toTranslate, DEFAULT_TRANSLATIONS[toTranslate]);
	    };
	    BaseFilter.prototype.getDebounceMs = function (filterParams) {
	        if (filterParams.applyButton && filterParams.debounceMs) {
	            console.warn('ag-Grid: debounceMs is ignored when applyButton = true');
	            return 0;
	        }
	        return filterParams.debounceMs != null ? filterParams.debounceMs : 500;
	    };
	    BaseFilter.EQUALS = 'equals';
	    BaseFilter.NOT_EQUAL = 'notEqual';
	    BaseFilter.LESS_THAN = 'lessThan';
	    BaseFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';
	    BaseFilter.GREATER_THAN = 'greaterThan';
	    BaseFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';
	    BaseFilter.IN_RANGE = 'inRange';
	    BaseFilter.CONTAINS = 'contains'; //1;
	    BaseFilter.NOT_CONTAINS = 'notContains'; //1;
	    BaseFilter.STARTS_WITH = 'startsWith'; //4;
	    BaseFilter.ENDS_WITH = 'endsWith'; //5;
	    __decorate([
	        componentAnnotations.QuerySelector('#applyPanel'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eButtonsPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('.ag-filter-body-wrapper'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eFilterBodyWrapper", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#applyButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eApplyButton", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#clearButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eClearButton", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], BaseFilter.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], BaseFilter.prototype, "gridOptionsWrapper", void 0);
	    return BaseFilter;
	}(component.Component));
	exports.BaseFilter = BaseFilter;
	/**
	 * Every filter with a dropdown where the user can specify a comparing type against the filter values
	 */
	var ComparableBaseFilter = (function (_super) {
	    __extends(ComparableBaseFilter, _super);
	    function ComparableBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ComparableBaseFilter.prototype.doesFilterPass = function (params) {
	        var mainFilterResult = this.individualFilterPasses(params, FilterConditionType.MAIN);
	        if (this.eTypeConditionSelector == null) {
	            return mainFilterResult;
	        }
	        var auxFilterResult = this.individualFilterPasses(params, FilterConditionType.CONDITION);
	        return this.conditionValue === 'AND' ? mainFilterResult && auxFilterResult : mainFilterResult || auxFilterResult;
	    };
	    ComparableBaseFilter.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.suppressAndOrCondition = params.suppressAndOrCondition;
	    };
	    ComparableBaseFilter.prototype.customInit = function () {
	        if (!this.defaultFilter) {
	            this.defaultFilter = this.getDefaultType();
	        }
	    };
	    ComparableBaseFilter.prototype.acceptsBooleanLogic = function () {
	        return this.suppressAndOrCondition !== true;
	    };
	    ComparableBaseFilter.prototype.generateFilterHeader = function (type) {
	        var _this = this;
	        var defaultFilterTypes = this.getApplicableFilterTypes();
	        var restrictedFilterTypes = this.filterParams.filterOptions;
	        var actualFilterTypes = restrictedFilterTypes ? restrictedFilterTypes : defaultFilterTypes;
	        var optionsHtml = actualFilterTypes.map(function (filterType) {
	            var localeFilterName = _this.translate(filterType);
	            return "<option value=\"" + filterType + "\">" + localeFilterName + "</option>";
	        });
	        var readOnly = optionsHtml.length == 1 ? 'disabled' : '';
	        var id = type == FilterConditionType.MAIN ? 'filterType' : 'filterConditionType';
	        return optionsHtml.length <= 0 ?
	            '' :
	            "<div>\n                <select class=\"ag-filter-select\" id=\"" + id + "\" " + readOnly + ">\n                    " + optionsHtml.join('') + "\n                </select>\n            </div>";
	    };
	    ComparableBaseFilter.prototype.initialiseFilterBodyUi = function (type) {
	        var _this = this;
	        if (type === FilterConditionType.MAIN) {
	            this.setFilterType(this.filter, type);
	            this.addDestroyableEventListener(this.eTypeSelector, "change", function () { return _this.onFilterTypeChanged(type); });
	        }
	        else {
	            this.setFilterType(this.filterCondition, type);
	            this.addDestroyableEventListener(this.eTypeConditionSelector, "change", function () { return _this.onFilterTypeChanged(type); });
	        }
	    };
	    ComparableBaseFilter.prototype.onFilterTypeChanged = function (type) {
	        if (type === FilterConditionType.MAIN) {
	            this.filter = this.eTypeSelector.value;
	        }
	        else {
	            this.filterCondition = this.eTypeConditionSelector.value;
	        }
	        this.refreshFilterBodyUi(type);
	        // we check if filter is active, so that if user changes the type (eg from 'less than' to 'equals'),
	        // well this doesn't matter if the user has no value in the text field, so don't fire 'onFilterChanged'.
	        // this means we don't refresh the grid when the type changes if no value is present.
	        if (this.isFilterActive()) {
	            this.onFilterChanged();
	        }
	    };
	    ComparableBaseFilter.prototype.isFilterActive = function () {
	        var rawFilterValues = this.filterValues(FilterConditionType.MAIN);
	        if (this.filter === BaseFilter.IN_RANGE) {
	            var filterValueArray = rawFilterValues;
	            return filterValueArray[0] != null && filterValueArray[1] != null;
	        }
	        else {
	            return rawFilterValues != null;
	        }
	    };
	    ComparableBaseFilter.prototype.setFilterType = function (filterType, type) {
	        if (type === FilterConditionType.MAIN) {
	            this.filter = filterType;
	            if (!this.eTypeSelector)
	                return;
	            this.eTypeSelector.value = filterType;
	        }
	        else {
	            this.filterCondition = filterType;
	            if (!this.eTypeConditionSelector)
	                return;
	            this.eTypeConditionSelector.value = filterType;
	        }
	    };
	    ComparableBaseFilter.prototype.isFilterConditionActive = function (type) {
	        return this.filterValues(type) != null;
	    };
	    __decorate([
	        componentAnnotations.QuerySelector('#filterType'),
	        __metadata("design:type", HTMLSelectElement)
	    ], ComparableBaseFilter.prototype, "eTypeSelector", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterConditionType'),
	        __metadata("design:type", HTMLSelectElement)
	    ], ComparableBaseFilter.prototype, "eTypeConditionSelector", void 0);
	    return ComparableBaseFilter;
	}(BaseFilter));
	exports.ComparableBaseFilter = ComparableBaseFilter;
	/**
	 * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend
	 * ComparableBaseFilter)
	 */
	var ScalarBaseFilter = (function (_super) {
	    __extends(ScalarBaseFilter, _super);
	    function ScalarBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ScalarBaseFilter.prototype.nullComparator = function (type) {
	        var _this = this;
	        return function (filterValue, gridValue) {
	            if (gridValue == null) {
	                var nullValue = _this.translateNull(type);
	                if (_this.filter === BaseFilter.EQUALS) {
	                    return nullValue ? 0 : 1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.NOT_EQUAL) {
	                    return nullValue ? 1 : 0;
	                }
	            }
	            var actualComparator = _this.comparator();
	            return actualComparator(filterValue, gridValue);
	        };
	    };
	    ScalarBaseFilter.prototype.getDefaultType = function () {
	        return BaseFilter.EQUALS;
	    };
	    ScalarBaseFilter.prototype.translateNull = function (type) {
	        var reducedType = type.indexOf('greater') > -1 ? 'greaterThan' :
	            type.indexOf('lessThan') > -1 ? 'lessThan' :
	                'equals';
	        if (this.filterParams.nullComparator && this.filterParams.nullComparator[reducedType]) {
	            return this.filterParams.nullComparator[reducedType];
	        }
	        return ScalarBaseFilter.DEFAULT_NULL_COMPARATOR[reducedType];
	    };
	    ScalarBaseFilter.prototype.individualFilterPasses = function (params, type) {
	        return this.doIndividualFilterPasses(params, type, type === FilterConditionType.MAIN ? this.filter : this.filterCondition);
	    };
	    ScalarBaseFilter.prototype.doIndividualFilterPasses = function (params, type, filter) {
	        var value = this.filterParams.valueGetter(params.node);
	        var comparator = this.nullComparator(filter);
	        var rawFilterValues = this.filterValues(type);
	        var from = Array.isArray(rawFilterValues) ? rawFilterValues[0] : rawFilterValues;
	        if (from == null) {
	            return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';
	        }
	        var compareResult = comparator(from, value);
	        if (filter === BaseFilter.EQUALS) {
	            return compareResult === 0;
	        }
	        if (filter === BaseFilter.GREATER_THAN) {
	            return compareResult > 0;
	        }
	        if (filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	            return compareResult >= 0;
	        }
	        if (filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	            return compareResult <= 0;
	        }
	        if (filter === BaseFilter.LESS_THAN) {
	            return compareResult < 0;
	        }
	        if (filter === BaseFilter.NOT_EQUAL) {
	            return compareResult != 0;
	        }
	        //From now on the type is a range and rawFilterValues must be an array!
	        var compareToResult = comparator(rawFilterValues[1], value);
	        if (filter === BaseFilter.IN_RANGE) {
	            if (!this.filterParams.inRangeInclusive) {
	                return compareResult > 0 && compareToResult < 0;
	            }
	            else {
	                return compareResult >= 0 && compareToResult <= 0;
	            }
	        }
	        throw new Error('Unexpected type of filter!: ' + filter);
	    };
	    ScalarBaseFilter.DEFAULT_NULL_COMPARATOR = {
	        equals: false,
	        lessThan: false,
	        greaterThan: false
	    };
	    return ScalarBaseFilter;
	}(ComparableBaseFilter));
	exports.ScalarBaseFilter = ScalarBaseFilter;
	});

	unwrapExports(baseFilter);
	var baseFilter_1 = baseFilter.FilterConditionType;
	var baseFilter_2 = baseFilter.BaseFilter;
	var baseFilter_3 = baseFilter.ComparableBaseFilter;
	var baseFilter_4 = baseFilter.ScalarBaseFilter;

	var floatingFilter = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var InputTextFloatingFilterComp = (function (_super) {
	    __extends(InputTextFloatingFilterComp, _super);
	    function InputTextFloatingFilterComp() {
	        var _this = _super.call(this, "<div><input ref=\"eColumnFloatingFilter\" class=\"ag-floating-filter-input\"></div>") || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    InputTextFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils._.debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'input', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keypress', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keydown', toDebounce);
	        var columnDef = params.column.getDefinition();
	        if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange') {
	            this.eColumnFloatingFilter.disabled = true;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.onParentModelChanged = function (parentModel, combinedFilter) {
	        if (combinedFilter != null) {
	            this.eColumnFloatingFilter.value = this.parseAsText(combinedFilter.condition1) + " " + combinedFilter.operator + " " + this.parseAsText(combinedFilter.condition2);
	            this.eColumnFloatingFilter.disabled = true;
	            this.lastKnownModel = null;
	            this.eColumnFloatingFilter.title = this.eColumnFloatingFilter.value;
	            this.eColumnFloatingFilter.style.cursor = 'default';
	            return;
	        }
	        else {
	            this.eColumnFloatingFilter.disabled = false;
	        }
	        if (this.equalModels(this.lastKnownModel, parentModel)) {
	            // ensure column floating filter text is blanked out when both ranges are empty
	            if (!this.lastKnownModel && !parentModel) {
	                this.eColumnFloatingFilter.value = '';
	            }
	            return;
	        }
	        this.lastKnownModel = parentModel;
	        var incomingTextValue = this.asFloatingFilterText(parentModel);
	        if (incomingTextValue === this.eColumnFloatingFilter.value) {
	            return;
	        }
	        this.eColumnFloatingFilter.value = incomingTextValue;
	        this.eColumnFloatingFilter.title = '';
	    };
	    InputTextFloatingFilterComp.prototype.syncUpWithParentFilter = function (e) {
	        var model = this.asParentModel();
	        if (this.equalModels(this.lastKnownModel, model)) {
	            return;
	        }
	        var modelUpdated = null;
	        if (utils._.isKeyPressed(e, constants.Constants.KEY_ENTER)) {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: true
	            });
	        }
	        else {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: false
	            });
	        }
	        if (modelUpdated) {
	            this.lastKnownModel = model;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils._.referenceCompare(left, right)) {
	            return true;
	        }
	        if (!left || !right) {
	            return false;
	        }
	        if (Array.isArray(left) || Array.isArray(right)) {
	            return false;
	        }
	        return (utils._.referenceCompare(left.type, right.type) &&
	            utils._.referenceCompare(left.filter, right.filter) &&
	            utils._.referenceCompare(left.filterTo, right.filterTo) &&
	            utils._.referenceCompare(left.filterType, right.filterType));
	    };
	    __decorate([
	        componentAnnotations.RefSelector('eColumnFloatingFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], InputTextFloatingFilterComp.prototype, "eColumnFloatingFilter", void 0);
	    return InputTextFloatingFilterComp;
	}(component.Component));
	exports.InputTextFloatingFilterComp = InputTextFloatingFilterComp;
	var TextFloatingFilterComp = (function (_super) {
	    __extends(TextFloatingFilterComp, _super);
	    function TextFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        if (!parentModel) {
	            return '';
	        }
	        return parentModel.filter;
	    };
	    TextFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        return {
	            type: currentParentModel.type,
	            filter: this.eColumnFloatingFilter.value,
	            filterType: 'text'
	        };
	    };
	    TextFloatingFilterComp.prototype.parseAsText = function (model) {
	        return this.asFloatingFilterText(model);
	    };
	    return TextFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.TextFloatingFilterComp = TextFloatingFilterComp;
	var DateFloatingFilterComp = (function (_super) {
	    __extends(DateFloatingFilterComp, _super);
	    function DateFloatingFilterComp() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    DateFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils._.debounce(this.onDateChanged.bind(this), debounceMs);
	        var dateComponentParams = {
	            onDateChanged: toDebounce,
	            filterParams: params.column.getColDef().filterParams
	        };
	        this.dateComponentPromise = this.componentRecipes.newDateComponent(dateComponentParams);
	        var body = utils._.loadTemplate("<div></div>");
	        this.dateComponentPromise.then(function (dateComponent) {
	            body.appendChild(dateComponent.getGui());
	            var columnDef = params.column.getDefinition();
	            var isInRange = (columnDef.filterParams &&
	                columnDef.filterParams.filterOptions &&
	                columnDef.filterParams.filterOptions.length === 1 &&
	                columnDef.filterParams.filterOptions[0] === 'inRange');
	            if (dateComponent.eDateInput) {
	                dateComponent.eDateInput.disabled = isInRange;
	            }
	        });
	        this.setTemplateFromElement(body);
	    };
	    DateFloatingFilterComp.prototype.onDateChanged = function () {
	        var parentModel = this.currentParentModel();
	        var model = this.asParentModel();
	        if (this.equalModels(parentModel, model)) {
	            return;
	        }
	        this.onFloatingFilterChanged({
	            model: model,
	            apply: true
	        });
	        this.lastKnownModel = model;
	    };
	    DateFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils._.referenceCompare(left, right)) {
	            return true;
	        }
	        if (!left || !right) {
	            return false;
	        }
	        if (Array.isArray(left) || Array.isArray(right)) {
	            return false;
	        }
	        return (utils._.referenceCompare(left.type, right.type) &&
	            utils._.referenceCompare(left.dateFrom, right.dateFrom) &&
	            utils._.referenceCompare(left.dateTo, right.dateTo) &&
	            utils._.referenceCompare(left.filterType, right.filterType));
	    };
	    DateFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueDate = this.dateComponentPromise.resolveNow(null, function (dateComponent) { return dateComponent.getDate(); });
	        var filterValueText = utils._.serializeDateToYyyyMmDd(dateFilter.DateFilter.removeTimezone(filterValueDate), "-");
	        return {
	            type: currentParentModel.type,
	            dateFrom: filterValueText,
	            dateTo: currentParentModel ? currentParentModel.dateTo : null,
	            filterType: 'date'
	        };
	    };
	    DateFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        var _this = this;
	        this.lastKnownModel = parentModel;
	        this.dateComponentPromise.then(function (dateComponent) {
	            if (!parentModel || !parentModel.dateFrom) {
	                dateComponent.setDate(null);
	                return;
	            }
	            _this.enrichDateInput(parentModel.type, parentModel.dateFrom, parentModel.dateTo, dateComponent);
	            dateComponent.setDate(utils._.parseYyyyMmDdToDate(parentModel.dateFrom, '-'));
	        });
	    };
	    DateFloatingFilterComp.prototype.enrichDateInput = function (type, dateFrom, dateTo, dateComponent) {
	        if (dateComponent.eDateInput) {
	            if (type === 'inRange') {
	                dateComponent.eDateInput.title = dateFrom + " to " + dateTo;
	                dateComponent.eDateInput.disabled = true;
	            }
	            else {
	                dateComponent.eDateInput.title = '';
	                dateComponent.eDateInput.disabled = true;
	            }
	        }
	    };
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], DateFloatingFilterComp.prototype, "componentRecipes", void 0);
	    return DateFloatingFilterComp;
	}(component.Component));
	exports.DateFloatingFilterComp = DateFloatingFilterComp;
	var NumberFloatingFilterComp = (function (_super) {
	    __extends(NumberFloatingFilterComp, _super);
	    function NumberFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFloatingFilterComp.prototype.asFloatingFilterText = function (toParse) {
	        var currentParentModel = this.currentParentModel();
	        if (toParse == null && currentParentModel == null) {
	            return '';
	        }
	        if (toParse == null && currentParentModel != null && currentParentModel.type !== 'inRange') {
	            this.eColumnFloatingFilter.disabled = false;
	            return '';
	        }
	        if (currentParentModel != null && currentParentModel.type === 'inRange') {
	            this.eColumnFloatingFilter.disabled = true;
	            return this.parseAsText(currentParentModel);
	        }
	        this.eColumnFloatingFilter.disabled = false;
	        return this.parseAsText(toParse);
	    };
	    NumberFloatingFilterComp.prototype.parseAsText = function (model) {
	        if (model.type && model.type === 'inRange') {
	            var number_1 = this.asNumber(model.filter);
	            var numberTo = this.asNumber(model.filterTo);
	            return (number_1 ? number_1 + '' : '') +
	                '-' +
	                (numberTo ? numberTo + '' : '');
	        }
	        var number = this.asNumber(model.filter);
	        return number != null ? number + '' : '';
	    };
	    NumberFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueNumber = this.asNumber(this.eColumnFloatingFilter.value);
	        var filterValueText = this.eColumnFloatingFilter.value;
	        var modelFilterValue = null;
	        if (filterValueNumber == null && filterValueText === '') {
	            modelFilterValue = null;
	        }
	        else if (filterValueNumber == null) {
	            modelFilterValue = currentParentModel.filter;
	        }
	        else {
	            modelFilterValue = filterValueNumber;
	        }
	        return {
	            type: currentParentModel.type,
	            filter: modelFilterValue,
	            filterTo: !currentParentModel ? null : currentParentModel.filterTo,
	            filterType: 'number'
	        };
	    };
	    NumberFloatingFilterComp.prototype.asNumber = function (value) {
	        if (value == null) {
	            return null;
	        }
	        if (value === '') {
	            return null;
	        }
	        var asNumber = Number(value);
	        var invalidNumber = !utils._.isNumeric(asNumber);
	        return invalidNumber ? null : asNumber;
	    };
	    return NumberFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.NumberFloatingFilterComp = NumberFloatingFilterComp;
	var SetFloatingFilterComp = (function (_super) {
	    __extends(SetFloatingFilterComp, _super);
	    function SetFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SetFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.disabled = true;
	    };
	    SetFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        this.eColumnFloatingFilter.disabled = true;
	        if (!parentModel)
	            return '';
	        // also supporting old filter model for backwards compatibility
	        var values = (parentModel instanceof Array) ? parentModel : parentModel.values;
	        if (values.length === 0) {
	            return '';
	        }
	        var arrayToDisplay = values.length > 10 ? values.slice(0, 10).concat('...') : values;
	        return "(" + values.length + ") " + arrayToDisplay.join(",");
	    };
	    SetFloatingFilterComp.prototype.parseAsText = function (model) {
	        return this.asFloatingFilterText(model);
	    };
	    SetFloatingFilterComp.prototype.asParentModel = function () {
	        if (this.eColumnFloatingFilter.value == null || this.eColumnFloatingFilter.value === '') {
	            return {
	                values: [],
	                filterType: 'set'
	            };
	        }
	        return {
	            values: this.eColumnFloatingFilter.value.split(","),
	            filterType: 'set'
	        };
	    };
	    SetFloatingFilterComp.prototype.equalModels = function (left, right) {
	        return false;
	    };
	    return SetFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.SetFloatingFilterComp = SetFloatingFilterComp;
	var ReadModelAsStringFloatingFilterComp = (function (_super) {
	    __extends(ReadModelAsStringFloatingFilterComp, _super);
	    function ReadModelAsStringFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ReadModelAsStringFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.disabled = true;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        this.eColumnFloatingFilter.value = this.asFloatingFilterText(this.currentParentModel());
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        return parentModel;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.parseAsText = function (model) {
	        return model;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asParentModel = function () {
	        return null;
	    };
	    return ReadModelAsStringFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.ReadModelAsStringFloatingFilterComp = ReadModelAsStringFloatingFilterComp;
	});

	unwrapExports(floatingFilter);
	var floatingFilter_1 = floatingFilter.InputTextFloatingFilterComp;
	var floatingFilter_2 = floatingFilter.TextFloatingFilterComp;
	var floatingFilter_3 = floatingFilter.DateFloatingFilterComp;
	var floatingFilter_4 = floatingFilter.NumberFloatingFilterComp;
	var floatingFilter_5 = floatingFilter.SetFloatingFilterComp;
	var floatingFilter_6 = floatingFilter.ReadModelAsStringFloatingFilterComp;

	var setLeftFeature = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var SetLeftFeature = (function (_super) {
	    __extends(SetLeftFeature, _super);
	    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
	        var _this = _super.call(this) || this;
	        _this.columnOrGroup = columnOrGroup;
	        _this.eCell = eCell;
	        _this.colsSpanning = colsSpanning;
	        _this.beans = beans;
	        return _this;
	    }
	    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {
	        this.colsSpanning = colsSpanning;
	        this.onLeftChanged();
	    };
	    SetLeftFeature.prototype.getColumnOrGroup = function () {
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            return this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            return this.columnOrGroup;
	        }
	    };
	    SetLeftFeature.prototype.init = function () {
	        this.addDestroyableEventListener(this.columnOrGroup, column.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.setLeftFirstTime();
	    };
	    SetLeftFeature.prototype.setLeftFirstTime = function () {
	        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
	        var oldLeftExists = utils.Utils.exists(this.columnOrGroup.getOldLeft());
	        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
	        if (animateColumnMove) {
	            this.animateInLeft();
	        }
	        else {
	            this.onLeftChanged();
	        }
	    };
	    SetLeftFeature.prototype.animateInLeft = function () {
	        var _this = this;
	        var left = this.getColumnOrGroup().getLeft();
	        var oldLeft = this.getColumnOrGroup().getOldLeft();
	        this.setLeft(oldLeft);
	        // we must keep track of the left we want to set to, as this would otherwise lead to a race
	        // condition, if the user changed the left value many times in one VM turn, then we want to make
	        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
	        // position. eg if user changes column position twice, then setLeft() below executes twice in next
	        // VM turn, but only one (the correct one) should get applied.
	        this.actualLeft = left;
	        this.beans.columnAnimationService.executeNextVMTurn(function () {
	            // test this left value is the latest one to be applied, and if not, do nothing
	            if (_this.actualLeft === left) {
	                _this.setLeft(left);
	            }
	        });
	    };
	    SetLeftFeature.prototype.onLeftChanged = function () {
	        this.actualLeft = this.getColumnOrGroup().getLeft();
	        this.setLeft(this.actualLeft);
	    };
	    SetLeftFeature.prototype.setLeft = function (value) {
	        // if the value is null, then that means the column is no longer
	        // displayed. there is logic in the rendering to fade these columns
	        // out, so we don't try and change their left positions.
	        if (utils.Utils.exists(value)) {
	            this.eCell.style.left = value + 'px';
	        }
	    };
	    return SetLeftFeature;
	}(beanStub.BeanStub));
	exports.SetLeftFeature = SetLeftFeature;
	});

	unwrapExports(setLeftFeature);
	var setLeftFeature_1 = setLeftFeature.SetLeftFeature;

	var columnAnimationService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var ColumnAnimationService = (function () {
	    function ColumnAnimationService() {
	        this.executeNextFuncs = [];
	        this.executeLaterFuncs = [];
	        this.active = false;
	        this.animationThreadCount = 0;
	    }
	    ColumnAnimationService.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    ColumnAnimationService.prototype.isActive = function () {
	        return this.active;
	    };
	    ColumnAnimationService.prototype.start = function () {
	        if (this.active) {
	            return;
	        }
	        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
	            return;
	        }
	        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
	        // the animation moves all the row the the right rather than to the left (ie it's the static
	        // columns that actually get their coordinates updated)
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            return;
	        }
	        this.ensureAnimationCssClassPresent();
	        this.active = true;
	    };
	    ColumnAnimationService.prototype.finish = function () {
	        if (!this.active) {
	            return;
	        }
	        this.flush();
	        this.active = false;
	    };
	    ColumnAnimationService.prototype.executeNextVMTurn = function (func) {
	        if (this.active) {
	            this.executeNextFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.executeLaterVMTurn = function (func) {
	        if (this.active) {
	            this.executeLaterFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function () {
	        var _this = this;
	        // up the count, so we can tell if someone else has updated the count
	        // by the time the 'wait' func executes
	        this.animationThreadCount++;
	        var animationThreadCountCopy = this.animationThreadCount;
	        this.gridPanel.setColumnMovingCss(true);
	        this.executeLaterFuncs.push(function () {
	            // only remove the class if this thread was the last one to update it
	            if (_this.animationThreadCount === animationThreadCountCopy) {
	                _this.gridPanel.setColumnMovingCss(false);
	            }
	        });
	    };
	    ColumnAnimationService.prototype.flush = function () {
	        var nowFuncs = this.executeNextFuncs;
	        this.executeNextFuncs = [];
	        var waitFuncs = this.executeLaterFuncs;
	        this.executeLaterFuncs = [];
	        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
	            return;
	        }
	        setTimeout(function () { return nowFuncs.forEach(function (func) { return func(); }); }, 0);
	        setTimeout(function () { return waitFuncs.forEach(function (func) { return func(); }); }, 300);
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ColumnAnimationService.prototype, "gridOptionsWrapper", void 0);
	    ColumnAnimationService = __decorate([
	        context.Bean('columnAnimationService')
	    ], ColumnAnimationService);
	    return ColumnAnimationService;
	}());
	exports.ColumnAnimationService = ColumnAnimationService;
	});

	unwrapExports(columnAnimationService);
	var columnAnimationService_1 = columnAnimationService.ColumnAnimationService;

	var focusedCellController = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var FocusedCellController = (function () {
	    function FocusedCellController() {
	    }
	    FocusedCellController.prototype.init = function () {
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));
	    };
	    FocusedCellController.prototype.clearFocusedCell = function () {
	        this.focusedCell = null;
	        this.onCellFocused(false);
	    };
	    FocusedCellController.prototype.getFocusedCell = function () {
	        return this.focusedCell;
	    };
	    // we check if the browser is focusing something, and if it is, and
	    // it's the cell we think is focused, then return the cell. so this
	    // methods returns the cell if a) we think it has focus and b) the
	    // browser thinks it has focus. this then returns nothing if we
	    // first focus a cell, then second click outside the grid, as then the
	    // grid cell will still be focused as far as the grid is concerned,
	    // however the browser focus will have moved somewhere else.
	    FocusedCellController.prototype.getFocusCellToUseAfterRefresh = function () {
	        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {
	            return null;
	        }
	        if (!this.focusedCell) {
	            return null;
	        }
	        // we check that the browser is actually focusing on the grid, if it is not, then
	        // we have nothing to worry about
	        var browserFocusedCell = this.getGridCellForDomElement(document.activeElement);
	        if (!browserFocusedCell) {
	            return null;
	        }
	        return this.focusedCell;
	    };
	    FocusedCellController.prototype.getGridCellForDomElement = function (eBrowserCell) {
	        var ePointer = eBrowserCell;
	        while (ePointer) {
	            var cellComp$$1 = this.gridOptionsWrapper.getDomData(ePointer, cellComp.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (cellComp$$1) {
	                return cellComp$$1.getGridCell();
	            }
	            ePointer = ePointer.parentNode;
	        }
	        return null;
	    };
	    FocusedCellController.prototype.setFocusedCell = function (rowIndex, colKey, floating, forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        var column = utils.Utils.makeNull(this.columnController.getGridColumn(colKey));
	        this.focusedCell = new gridCell.GridCell({ rowIndex: rowIndex,
	            floating: utils.Utils.makeNull(floating),
	            column: column });
	        this.onCellFocused(forceBrowserFocus);
	    };
	    FocusedCellController.prototype.isCellFocused = function (gridCell$$1) {
	        if (utils.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        return this.focusedCell.column === gridCell$$1.column && this.isRowFocused(gridCell$$1.rowIndex, gridCell$$1.floating);
	    };
	    FocusedCellController.prototype.isRowNodeFocused = function (rowNode) {
	        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
	    };
	    FocusedCellController.prototype.isAnyCellFocused = function () {
	        return !!this.focusedCell;
	    };
	    FocusedCellController.prototype.isRowFocused = function (rowIndex, floating) {
	        if (utils.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        var floatingOrNull = utils.Utils.makeNull(floating);
	        return this.focusedCell.rowIndex === rowIndex && this.focusedCell.floating === floatingOrNull;
	    };
	    FocusedCellController.prototype.onCellFocused = function (forceBrowserFocus) {
	        var event = {
	            type: events$1.Events.EVENT_CELL_FOCUSED,
	            forceBrowserFocus: forceBrowserFocus,
	            rowIndex: null,
	            column: null,
	            floating: null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            rowPinned: null
	        };
	        if (this.focusedCell) {
	            event.rowIndex = this.focusedCell.rowIndex;
	            event.column = this.focusedCell.column;
	            event.rowPinned = this.focusedCell.floating;
	        }
	        this.eventService.dispatchEvent(event);
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], FocusedCellController.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FocusedCellController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], FocusedCellController.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], FocusedCellController.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], FocusedCellController.prototype, "gridApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FocusedCellController.prototype, "init", null);
	    FocusedCellController = __decorate([
	        context.Bean('focusedCellController')
	    ], FocusedCellController);
	    return FocusedCellController;
	}());
	exports.FocusedCellController = FocusedCellController;
	});

	unwrapExports(focusedCellController);
	var focusedCellController_1 = focusedCellController.FocusedCellController;

	var popupEditorWrapper = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var PopupEditorWrapper = (function (_super) {
	    __extends(PopupEditorWrapper, _super);
	    function PopupEditorWrapper(cellEditor) {
	        var _this = _super.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;
	        _this.getGuiCalledOnChild = false;
	        _this.cellEditor = cellEditor;
	        return _this;
	    }
	    PopupEditorWrapper.prototype.onKeyDown = function (event) {
	        this.params.onKeyDown(event);
	    };
	    PopupEditorWrapper.prototype.getGui = function () {
	        // we call getGui() on child here (rather than in the constructor)
	        // as we should wait for 'init' to be called on child first.
	        if (!this.getGuiCalledOnChild) {
	            this.appendChild(this.cellEditor.getGui());
	            this.getGuiCalledOnChild = true;
	        }
	        return _super.prototype.getGui.call(this);
	    };
	    PopupEditorWrapper.prototype.init = function (params) {
	        var _this = this;
	        this.params = params;
	        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
	        this.addDestroyFunc(function () {
	            if (_this.cellEditor.destroy) {
	                _this.cellEditor.destroy();
	            }
	        });
	        this.addDestroyableEventListener(
	        // this needs to be 'super' and not 'this' as if we call 'this',
	        // it ends up called 'getGui()' on the child before 'init' was called,
	        // which is not good
	        _super.prototype.getGui.call(this), 'keydown', this.onKeyDown.bind(this));
	    };
	    PopupEditorWrapper.prototype.afterGuiAttached = function () {
	        if (this.cellEditor.afterGuiAttached) {
	            this.cellEditor.afterGuiAttached();
	        }
	    };
	    PopupEditorWrapper.prototype.getValue = function () {
	        return this.cellEditor.getValue();
	    };
	    PopupEditorWrapper.prototype.isPopup = function () {
	        return true;
	    };
	    PopupEditorWrapper.prototype.isCancelBeforeStart = function () {
	        if (this.cellEditor.isCancelBeforeStart) {
	            return this.cellEditor.isCancelBeforeStart();
	        }
	    };
	    PopupEditorWrapper.prototype.isCancelAfterEnd = function () {
	        if (this.cellEditor.isCancelAfterEnd) {
	            return this.cellEditor.isCancelAfterEnd();
	        }
	    };
	    PopupEditorWrapper.prototype.focusIn = function () {
	        if (this.cellEditor.focusIn) {
	            this.cellEditor.focusIn();
	        }
	    };
	    PopupEditorWrapper.prototype.focusOut = function () {
	        if (this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PopupEditorWrapper.prototype, "gridOptionsWrapper", void 0);
	    return PopupEditorWrapper;
	}(component.Component));
	exports.PopupEditorWrapper = PopupEditorWrapper;
	});

	unwrapExports(popupEditorWrapper);
	var popupEditorWrapper_1 = popupEditorWrapper.PopupEditorWrapper;

	var cellEditorFactory = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var CellEditorFactory = (function () {
	    function CellEditorFactory() {
	    }
	    CellEditorFactory.prototype.init = function () {
	    };
	    CellEditorFactory.prototype.addCellEditor = function (key, cellEditor) {
	        console.warn("ag-grid: since v13.3.1 this method is not supported anymore. If you want to register your own editor check the docs: https://www.ag-grid.com/javascript-grid-cell-editor/");
	    };
	    // private registerEditorsFromGridOptions(): void {
	    //     let userProvidedCellEditors = this.gridOptionsWrapper.getCellEditors();
	    //     _.iterateObject(userProvidedCellEditors, (key: string, cellEditor: {new(): ICellEditor})=> {
	    //         this.addCellEditor(key, cellEditor);
	    //     });
	    // }
	    CellEditorFactory.prototype.createCellEditor = function (column, params) {
	        var _this = this;
	        var cellEditorPromise = this.componentResolver.createAgGridComponent(column, params, 'cellEditor', {
	            api: params.api,
	            columnApi: params.columnApi,
	            node: params.node,
	            data: params.node.data,
	            rowIndex: params.rowIndex,
	            column: params.column,
	            colDef: params.column.getColDef()
	        }, 'agCellEditor');
	        return cellEditorPromise.map(function (cellEditor) {
	            var isPopup = cellEditor.isPopup && cellEditor.isPopup();
	            if (!isPopup) {
	                return cellEditor;
	            }
	            if (_this.gridOptionsWrapper.isFullRowEdit()) {
	                console.warn('ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +
	                    '- either turn off fullRowEdit, or stop using popup editors.');
	            }
	            // if a popup, then we wrap in a popup editor and return the popup
	            var popupEditorWrapper$$1 = new popupEditorWrapper.PopupEditorWrapper(cellEditor);
	            _this.context.wireBean(popupEditorWrapper$$1);
	            popupEditorWrapper$$1.init(params);
	            return popupEditorWrapper$$1;
	        });
	    };
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], CellEditorFactory.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver.ComponentResolver)
	    ], CellEditorFactory.prototype, "componentResolver", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CellEditorFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellEditorFactory.prototype, "init", null);
	    CellEditorFactory = __decorate([
	        context.Bean('cellEditorFactory')
	    ], CellEditorFactory);
	    return CellEditorFactory;
	}());
	exports.CellEditorFactory = CellEditorFactory;
	});

	unwrapExports(cellEditorFactory);
	var cellEditorFactory_1 = cellEditorFactory.CellEditorFactory;

	var animateSlideCellRenderer = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var AnimateSlideCellRenderer = (function (_super) {
	    __extends(AnimateSlideCellRenderer, _super);
	    function AnimateSlideCellRenderer() {
	        var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');
	        return _this;
	    }
	    AnimateSlideCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        this.refresh(params);
	    };
	    AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {
	        var _this = this;
	        this.refreshCount++;
	        // below we keep checking this, and stop working on the animation
	        // if it no longer matches - this means another animation has started
	        // and this one is stale.
	        var refreshCountCopy = this.refreshCount;
	        // if old animation, remove it
	        if (this.ePrevious) {
	            this.getGui().removeChild(this.ePrevious);
	        }
	        this.ePrevious = utils.Utils.loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
	        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
	        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
	        // having timeout of 0 allows use to skip to the next css turn,
	        // so we know the previous css classes have been applied. so the
	        // complex set of setTimeout below creates the animation
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            utils.Utils.addCssClass(_this.ePrevious, 'ag-value-slide-out-end');
	        }, 50);
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            _this.getGui().removeChild(_this.ePrevious);
	            _this.ePrevious = null;
	        }, 3000);
	    };
	    AnimateSlideCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (utils.Utils.missing(value)) {
	            value = '';
	        }
	        if (value === this.lastValue) {
	            return;
	        }
	        this.addSlideAnimation();
	        this.lastValue = value;
	        if (utils.Utils.exists(params.valueFormatted)) {
	            this.eCurrent.innerHTML = params.valueFormatted;
	        }
	        else if (utils.Utils.exists(params.value)) {
	            this.eCurrent.innerHTML = value;
	        }
	        else {
	            this.eCurrent.innerHTML = '';
	        }
	        return true;
	    };
	    AnimateSlideCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-slide-current"></span>' +
	        '</span>';
	    return AnimateSlideCellRenderer;
	}(component.Component));
	exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;
	});

	unwrapExports(animateSlideCellRenderer);
	var animateSlideCellRenderer_1 = animateSlideCellRenderer.AnimateSlideCellRenderer;

	var animateShowChangeCellRenderer = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var ARROW_UP = '&#65514;';
	var ARROW_DOWN = '&#65516;';
	var AnimateShowChangeCellRenderer = (function (_super) {
	    __extends(AnimateShowChangeCellRenderer, _super);
	    function AnimateShowChangeCellRenderer() {
	        var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        return _this;
	    }
	    AnimateShowChangeCellRenderer.prototype.init = function (params) {
	        // this.params = params;
	        this.eValue = this.queryForHtmlElement('.ag-value-change-value');
	        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');
	        this.refresh(params);
	    };
	    AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {
	        var absDelta = Math.abs(delta);
	        var valueFormatted = params.formatValue(absDelta);
	        var valueToUse = utils.Utils.exists(valueFormatted) ? valueFormatted : absDelta;
	        var deltaUp = (delta >= 0);
	        if (deltaUp) {
	            this.eDelta.innerHTML = ARROW_UP + valueToUse;
	        }
	        else {
	            // because negative, use ABS to remove sign
	            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
	        }
	        // class makes it green (in ag-fresh)
	        utils.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp);
	        // class makes it red (in ag-fresh)
	        utils.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);
	    };
	    AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {
	        var _this = this;
	        // the refreshCount makes sure that if the value updates again while
	        // the below timer is waiting, then the below timer will realise it
	        // is not the most recent and will not try to remove the delta value.
	        this.refreshCount++;
	        var refreshCountCopy = this.refreshCount;
	        setTimeout(function () {
	            if (refreshCountCopy === _this.refreshCount) {
	                _this.hideDeltaValue();
	            }
	        }, 2000);
	    };
	    AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {
	        utils.Utils.removeCssClass(this.eValue, 'ag-value-change-value-highlight');
	        this.eDelta.innerHTML = '';
	    };
	    AnimateShowChangeCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (value === this.lastValue) {
	            return;
	        }
	        if (utils.Utils.exists(params.valueFormatted)) {
	            this.eValue.innerHTML = params.valueFormatted;
	        }
	        else if (utils.Utils.exists(params.value)) {
	            this.eValue.innerHTML = value;
	        }
	        else {
	            this.eValue.innerHTML = '';
	        }
	        if (typeof value === 'number' && typeof this.lastValue === 'number') {
	            var delta = value - this.lastValue;
	            this.showDelta(params, delta);
	        }
	        // highlight the current value, but only if it's not new, otherwise it
	        // would get highlighted first time the value is shown
	        if (this.lastValue) {
	            utils.Utils.addCssClass(this.eValue, 'ag-value-change-value-highlight');
	        }
	        this.setTimerToRemoveDelta();
	        this.lastValue = value;
	        return true;
	    };
	    AnimateShowChangeCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-change-delta"></span>' +
	        '<span class="ag-value-change-value"></span>' +
	        '</span>';
	    return AnimateShowChangeCellRenderer;
	}(component.Component));
	exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;
	});

	unwrapExports(animateShowChangeCellRenderer);
	var animateShowChangeCellRenderer_1 = animateShowChangeCellRenderer.AnimateShowChangeCellRenderer;

	var cellRendererService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	/** Class to use a cellRenderer. */
	var CellRendererService = (function () {
	    function CellRendererService() {
	    }
	    CellRendererService.prototype.useCellRenderer = function (target, eTarget, params) {
	        var _this = this;
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target, params);
	        if (cellRendererPromise != null) {
	            cellRendererPromise.then(function (cellRenderer) {
	                if (cellRenderer == null) {
	                    eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	                }
	                else {
	                    _this.bindToHtml(cellRendererPromise, eTarget);
	                }
	            });
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useFilterCellRenderer = function (target, eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target.filterParams, params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            if (params.valueFormatted == null && params.value == null) {
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                eTarget.innerText = '(' + localeTextFunc('blanks', 'Blanks') + ')';
	            }
	            else {
	                eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	            }
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useRichSelectCellRenderer = function (target, eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target.cellEditorParams, params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useInnerCellRenderer = function (target, originalColumn, eTarget, params) {
	        var _this = this;
	        var rendererToUsePromise = null;
	        var componentToUse = this.componentResolver.getComponentToUse(target, "innerRenderer", null);
	        if (componentToUse && componentToUse.component != null && componentToUse.source != componentResolver.ComponentSource.DEFAULT) {
	            //THERE IS ONE INNER CELL RENDERER HARDCODED IN THE COLDEF FOR THIS GROUP COLUMN
	            rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(target, params);
	        }
	        else {
	            var otherRenderer = this.componentResolver.getComponentToUse(originalColumn, "cellRenderer", null);
	            if (otherRenderer && otherRenderer.source != componentResolver.ComponentSource.DEFAULT) {
	                //Only if the original column is using an specific renderer, it it is a using a DEFAULT one
	                //ignore it
	                //THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, WE REUSE ITS RENDERER
	                rendererToUsePromise = this.componentRecipes.newCellRenderer(originalColumn, params);
	            }
	            else if (otherRenderer && otherRenderer.source == componentResolver.ComponentSource.DEFAULT && (utils._.get(originalColumn, 'cellRendererParams.innerRenderer', null))) {
	                //EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
	                //AND HAS A INNER CELL RENDERER
	                rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(originalColumn.cellRendererParams, params);
	            }
	            else {
	                //This forces the retrieval of the default plain cellRenderer that just renders the values.
	                rendererToUsePromise = this.componentRecipes.newCellRenderer({}, params);
	            }
	        }
	        if (rendererToUsePromise != null) {
	            rendererToUsePromise.then(function (rendererToUse) {
	                if (rendererToUse == null) {
	                    eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	                    return;
	                }
	                _this.bindToHtml(rendererToUsePromise, eTarget);
	            });
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return rendererToUsePromise;
	    };
	    CellRendererService.prototype.useFullWidthGroupRowInnerCellRenderer = function (eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newFullWidthGroupRowInnerCellRenderer(params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.bindToHtml = function (cellRendererPromise, eTarget) {
	        cellRendererPromise.then(function (cellRenderer) {
	            var gui = cellRenderer.getGui();
	            if (gui != null) {
	                if (typeof gui == 'object') {
	                    eTarget.appendChild(gui);
	                }
	                else {
	                    eTarget.innerHTML = gui;
	                }
	            }
	        });
	        return cellRendererPromise;
	    };
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], CellRendererService.prototype, "componentRecipes", void 0);
	    __decorate([
	        context.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver.ComponentResolver)
	    ], CellRendererService.prototype, "componentResolver", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CellRendererService.prototype, "gridOptionsWrapper", void 0);
	    CellRendererService = __decorate([
	        context.Bean('cellRendererService')
	    ], CellRendererService);
	    return CellRendererService;
	}());
	exports.CellRendererService = CellRendererService;
	});

	unwrapExports(cellRendererService);
	var cellRendererService_1 = cellRendererService.CellRendererService;

	var valueFormatterService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var ValueFormatterService = (function () {
	    function ValueFormatterService() {
	    }
	    ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {
	        var formatter;
	        var colDef = column.getColDef();
	        // if floating, give preference to the floating formatter
	        if (rowNode && rowNode.rowPinned) {
	            formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
	        }
	        else {
	            formatter = colDef.valueFormatter;
	        }
	        var result = null;
	        if (formatter) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode ? rowNode.data : null,
	                colDef: column.getColDef(),
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            // originally we put the angular 1 scope here, but we don't want the scope
	            // in the params interface, as other frameworks will see the interface, and
	            // angular 1 is not cool any more. so we hack the scope in here (we cannot
	            // include it above, as it's not in the interface, so would cause a compile error).
	            // in the future, when we stop supporting angular 1, we can take this out.
	            params.$scope = $scope;
	            result = this.expressionService.evaluate(formatter, params);
	        }
	        else if (colDef.refData) {
	            return colDef.refData[value];
	        }
	        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)
	        if ((result === null || result === undefined) && Array.isArray(value)) {
	            result = value.join(', ');
	        }
	        return result;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ValueFormatterService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], ValueFormatterService.prototype, "expressionService", void 0);
	    ValueFormatterService = __decorate([
	        context.Bean('valueFormatterService')
	    ], ValueFormatterService);
	    return ValueFormatterService;
	}());
	exports.ValueFormatterService = ValueFormatterService;
	});

	unwrapExports(valueFormatterService);
	var valueFormatterService_1 = valueFormatterService.ValueFormatterService;

	var mouseEventService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var context_2 = context;



	var MouseEventService = (function () {
	    function MouseEventService() {
	        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
	    }
	    MouseEventService_1 = MouseEventService;
	    MouseEventService.prototype.init = function () {
	        this.stampDomElementWithGridInstance();
	    };
	    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
	    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
	    // for where this is used.
	    MouseEventService.prototype.stampDomElementWithGridInstance = function () {
	        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
	    };
	    MouseEventService.prototype.getRenderedCellForEvent = function (event) {
	        var sourceElement = utils.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedCell = this.gridOptionsWrapper.getDomData(sourceElement, cellComp.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (renderedCell) {
	                return renderedCell;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
	    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
	    // getting executed on many grids at the same time.
	    MouseEventService.prototype.isEventFromThisGrid = function (event) {
	        var path = utils.Utils.getEventPath(event);
	        for (var i = 0; i < path.length; i++) {
	            var element = path[i];
	            var instanceId = element[MouseEventService_1.GRID_DOM_KEY];
	            if (utils.Utils.exists(instanceId)) {
	                var eventFromThisGrid = instanceId === this.gridInstanceId;
	                return eventFromThisGrid;
	            }
	        }
	        return false;
	    };
	    MouseEventService.prototype.getGridCellForEvent = function (event) {
	        var cellComp$$1 = this.getRenderedCellForEvent(event);
	        return cellComp$$1 ? cellComp$$1.getGridCell() : null;
	    };
	    MouseEventService.gridInstanceSequence = new utils.NumberSequence();
	    MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], MouseEventService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], MouseEventService.prototype, "eGridDiv", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MouseEventService.prototype, "init", null);
	    MouseEventService = MouseEventService_1 = __decorate([
	        context.Bean('mouseEventService')
	    ], MouseEventService);
	    return MouseEventService;
	    var MouseEventService_1;
	}());
	exports.MouseEventService = MouseEventService;
	});

	unwrapExports(mouseEventService);
	var mouseEventService_1 = mouseEventService.MouseEventService;

	var groupCellRenderer = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });















	var GroupCellRenderer = (function (_super) {
	    __extends(GroupCellRenderer, _super);
	    function GroupCellRenderer() {
	        return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
	    }
	    GroupCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
	            this.assignBlankValueToGroupFooterCell(params);
	        }
	        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
	        // This allows for empty strings to appear as groups since
	        // it will only return for null or undefined.
	        var cellIsEmpty = params.value == null;
	        this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;
	        if (this.cellIsBlank) {
	            return;
	        }
	        this.setupDragOpenParents();
	        this.addExpandAndContract();
	        this.addCheckboxIfNeeded();
	        this.addValueElement();
	        this.setupIndent();
	    };
	    GroupCellRenderer.prototype.assignBlankValueToGroupFooterCell = function (params) {
	        // this is not ideal, but it was the only way we could get footer working for the root node
	        if (!params.value && params.node.level == -1) {
	            params.value = '';
	        }
	    };
	    // if we are doing embedded full width rows, we only show the renderer when
	    // in the body, or if pinning in the pinned section, or if pinning and RTL,
	    // in the right section. otherwise we would have the cell repeated in each section.
	    GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {
	        if (this.params.fullWidth && this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	            var pinnedLeftCell = this.params.pinned === column.Column.PINNED_LEFT;
	            var pinnedRightCell = this.params.pinned === column.Column.PINNED_RIGHT;
	            var bodyCell = !pinnedLeftCell && !pinnedRightCell;
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedRightCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	            else {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedLeftCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	        }
	        else {
	            return false;
	        }
	    };
	    GroupCellRenderer.prototype.setIndent = function () {
	        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        var params = this.params;
	        var rowNode$$1 = params.node;
	        // let paddingPx: number;
	        var paddingCount = rowNode$$1.uiLevel;
	        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
	        if (userProvidedPaddingPixelsTheDeprecatedWay) {
	            this.setPaddingDeprecatedWay(paddingCount, params.padding);
	            return;
	        }
	        if (this.indentClass) {
	            this.removeCssClass(this.indentClass);
	        }
	        this.indentClass = 'ag-row-group-indent-' + paddingCount;
	        this.addCssClass(this.indentClass);
	    };
	    GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {
	        utils.Utils.doOnce(function () { return console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.'); }, 'groupCellRenderer->doDeprecatedWay');
	        var paddingPx = paddingCount * padding;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // if doing rtl, padding is on the right
	            this.getGui().style.paddingRight = paddingPx + 'px';
	        }
	        else {
	            // otherwise it is on the left
	            this.getGui().style.paddingLeft = paddingPx + 'px';
	        }
	    };
	    GroupCellRenderer.prototype.setupIndent = function () {
	        // only do this if an indent - as this overwrites the padding that
	        // the theme set, which will make things look 'not aligned' for the
	        // first group level.
	        var node = this.params.node;
	        var suppressPadding = this.params.suppressPadding;
	        if (!suppressPadding) {
	            this.addDestroyableEventListener(node, rowNode.RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
	            this.setIndent();
	        }
	    };
	    GroupCellRenderer.prototype.addValueElement = function () {
	        var params = this.params;
	        var rowNode$$1 = this.displayedGroup;
	        if (rowNode$$1.footer) {
	            this.createFooterCell();
	        }
	        else if (rowNode$$1.hasChildren() ||
	            utils.Utils.get(params.colDef, 'cellRendererParams.innerRenderer', null) ||
	            utils.Utils.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {
	            this.createGroupCell();
	            if (rowNode$$1.hasChildren()) {
	                this.addChildCount();
	            }
	        }
	        else {
	            this.createLeafCell();
	        }
	    };
	    GroupCellRenderer.prototype.createFooterCell = function () {
	        var footerValue;
	        var footerValueGetter = this.params.footerValueGetter;
	        if (footerValueGetter) {
	            // params is same as we were given, except we set the value as the item to display
	            var paramsClone = utils.Utils.cloneObject(this.params);
	            paramsClone.value = this.params.value;
	            if (typeof footerValueGetter === 'function') {
	                footerValue = footerValueGetter(paramsClone);
	            }
	            else if (typeof footerValueGetter === 'string') {
	                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
	            }
	            else {
	                console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
	            }
	        }
	        else {
	            footerValue = 'Total ' + this.params.value;
	        }
	        this.eValue.innerHTML = footerValue;
	    };
	    GroupCellRenderer.prototype.createGroupCell = function () {
	        var _this = this;
	        var params = this.params;
	        var rowGroupColumn = this.displayedGroup.rowGroupColumn;
	        // we try and use the cellRenderer of the column used for the grouping if we can
	        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
	        var groupName = this.params.value;
	        var valueFormatted = columnToUse ?
	            this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
	        params.valueFormatted = valueFormatted;
	        var rendererPromise;
	        if (params.fullWidth == true) {
	            rendererPromise = this.cellRendererService.useFullWidthGroupRowInnerCellRenderer(this.eValue, params);
	        }
	        else {
	            rendererPromise = this.cellRendererService.useInnerCellRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), this.eValue, params);
	        }
	        // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)
	        if (rendererPromise) {
	            rendererPromise.then(function (value) {
	                _this.innerCellRenderer = value;
	            });
	        }
	    };
	    GroupCellRenderer.prototype.addChildCount = function () {
	        // only include the child count if it's included, eg if user doing custom aggregation,
	        // then this could be left out, or set to -1, ie no child count
	        if (this.params.suppressCount) {
	            return;
	        }
	        this.addDestroyableEventListener(this.displayedGroup, rowNode.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
	        // filtering changes the child count, so need to cater for it
	        this.updateChildCount();
	    };
	    GroupCellRenderer.prototype.updateChildCount = function () {
	        var allChildrenCount = this.displayedGroup.allChildrenCount;
	        this.eChildCount.innerHTML = allChildrenCount >= 0 ? "(" + allChildrenCount + ")" : "";
	    };
	    GroupCellRenderer.prototype.createLeafCell = function () {
	        if (utils.Utils.exists(this.params.value)) {
	            this.eValue.innerHTML = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;
	        }
	    };
	    GroupCellRenderer.prototype.isUserWantsSelected = function () {
	        var paramsCheckbox = this.params.checkbox;
	        if (typeof paramsCheckbox === 'function') {
	            return paramsCheckbox(this.params);
	        }
	        else {
	            return paramsCheckbox === true;
	        }
	    };
	    GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {
	        var rowNode$$1 = this.displayedGroup;
	        var checkboxNeeded = this.isUserWantsSelected()
	            && !rowNode$$1.footer
	            && !rowNode$$1.rowPinned
	            && !rowNode$$1.detail;
	        if (checkboxNeeded) {
	            var cbSelectionComponent_1 = new checkboxSelectionComponent.CheckboxSelectionComponent();
	            this.context.wireBean(cbSelectionComponent_1);
	            cbSelectionComponent_1.init({ rowNode: rowNode$$1, column: this.params.column });
	            this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
	            this.addDestroyFunc(function () { return cbSelectionComponent_1.destroy(); });
	        }
	    };
	    GroupCellRenderer.prototype.addExpandAndContract = function () {
	        var params = this.params;
	        var eGroupCell = params.eGridCell;
	        var eExpandedIcon = utils.Utils.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);
	        var eContractedIcon = utils.Utils.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);
	        this.eExpanded.appendChild(eExpandedIcon);
	        this.eContracted.appendChild(eContractedIcon);
	        this.addDestroyableEventListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));
	        this.addDestroyableEventListener(this.eContracted, 'click', this.onExpandClicked.bind(this));
	        // expand / contract as the user hits enter
	        this.addDestroyableEventListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));
	        this.addDestroyableEventListener(params.node, rowNode.RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
	        this.showExpandAndContractIcons();
	        // because we don't show the expand / contract when there are no children, we need to check every time
	        // the number of children change.
	        this.addDestroyableEventListener(this.displayedGroup, rowNode.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.onAllChildrenCountChanged.bind(this));
	        // if editing groups, then double click is to start editing
	        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
	            this.addDestroyableEventListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));
	        }
	    };
	    GroupCellRenderer.prototype.onAllChildrenCountChanged = function () {
	        // maybe if no children now, we should hide the expand / contract icons
	        this.showExpandAndContractIcons();
	        // if we have no children, this impacts the indent
	        this.setIndent();
	    };
	    GroupCellRenderer.prototype.onKeyDown = function (event) {
	        if (utils.Utils.isKeyPressed(event, constants.Constants.KEY_ENTER)) {
	            var cellEditable = this.params.column.isCellEditable(this.params.node);
	            if (cellEditable) {
	                return;
	            }
	            event.preventDefault();
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.setupDragOpenParents = function () {
	        var column$$1 = this.params.column;
	        var rowNode$$1 = this.params.node;
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            this.draggedFromHideOpenParents = false;
	        }
	        else if (!rowNode$$1.hasChildren()) {
	            // if we are here, and we are not a group, then we must of been dragged down,
	            // as otherwise the cell would be blank, and if cell is blank, this method is never called.
	            this.draggedFromHideOpenParents = true;
	        }
	        else {
	            var rowGroupColumn = rowNode$$1.rowGroupColumn;
	            // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
	            // then nothing was dragged down
	            this.draggedFromHideOpenParents = !column$$1.isRowGroupDisplayed(rowGroupColumn.getId());
	        }
	        if (this.draggedFromHideOpenParents) {
	            var pointer = rowNode$$1.parent;
	            while (true) {
	                if (utils.Utils.missing(pointer)) {
	                    break;
	                }
	                if (pointer.rowGroupColumn && column$$1.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
	                    this.displayedGroup = pointer;
	                    break;
	                }
	                pointer = pointer.parent;
	            }
	        }
	        // if we didn't find a displayed group, set it to the row node
	        if (utils.Utils.missing(this.displayedGroup)) {
	            this.displayedGroup = rowNode$$1;
	        }
	    };
	    GroupCellRenderer.prototype.onExpandClicked = function (mouseEvent) {
	        if (utils.Utils.isStopPropagationForAgGrid(mouseEvent)) {
	            return;
	        }
	        // so if we expand a node, it does not also get selected.
	        utils.Utils.stopPropagationForAgGrid(mouseEvent);
	        this.onExpandOrContract();
	    };
	    GroupCellRenderer.prototype.onCellDblClicked = function (mouseEvent) {
	        if (utils.Utils.isStopPropagationForAgGrid(mouseEvent)) {
	            return;
	        }
	        // we want to avoid acting on double click events on the expand / contract icon,
	        // as that icons already has expand / collapse functionality on it. otherwise if
	        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
	        // is open->close->open, however double click should be open->close only.
	        var targetIsExpandIcon = utils.Utils.isElementInEventPath(this.eExpanded, mouseEvent)
	            || utils.Utils.isElementInEventPath(this.eContracted, mouseEvent);
	        if (!targetIsExpandIcon) {
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.onExpandOrContract = function () {
	        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
	        var rowNode$$1 = this.displayedGroup;
	        rowNode$$1.setExpanded(!rowNode$$1.expanded);
	    };
	    GroupCellRenderer.prototype.isExpandable = function () {
	        var rowNode$$1 = this.params.node;
	        var reducedLeafNode = this.columnController.isPivotMode() && rowNode$$1.leafGroup;
	        return this.draggedFromHideOpenParents ||
	            (rowNode$$1.isExpandable() && !rowNode$$1.footer && !reducedLeafNode);
	    };
	    GroupCellRenderer.prototype.showExpandAndContractIcons = function () {
	        var rowNode$$1 = this.params.node;
	        if (this.isExpandable()) {
	            // if expandable, show one based on expand state.
	            // if we were dragged down, means our parent is always expanded
	            var expanded = this.draggedFromHideOpenParents ? true : rowNode$$1.expanded;
	            utils.Utils.setVisible(this.eContracted, !expanded);
	            utils.Utils.setVisible(this.eExpanded, expanded);
	        }
	        else {
	            // it not expandable, show neither
	            utils.Utils.setVisible(this.eExpanded, false);
	            utils.Utils.setVisible(this.eContracted, false);
	        }
	        var displayedGroup = this.displayedGroup;
	        // compensation padding for leaf nodes, so there is blank space instead of the expand icon
	        var pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;
	        var notExpandable = !displayedGroup.isExpandable();
	        var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;
	        this.addOrRemoveCssClass('ag-row-group-leaf-indent', addLeafIndentClass);
	    };
	    GroupCellRenderer.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.innerCellRenderer && this.innerCellRenderer.destroy) {
	            this.innerCellRenderer.destroy();
	        }
	    };
	    GroupCellRenderer.prototype.refresh = function () {
	        return false;
	    };
	    GroupCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-group-expanded" ref="eExpanded"></span>' +
	        '<span class="ag-group-contracted" ref="eContracted"></span>' +
	        '<span class="ag-group-checkbox" ref="eCheckbox"></span>' +
	        '<span class="ag-group-value" ref="eValue"></span>' +
	        '<span class="ag-group-child-count" ref="eChildCount"></span>' +
	        '</span>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], GroupCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], GroupCellRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], GroupCellRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService.CellRendererService)
	    ], GroupCellRenderer.prototype, "cellRendererService", void 0);
	    __decorate([
	        context.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService.ValueFormatterService)
	    ], GroupCellRenderer.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], GroupCellRenderer.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GroupCellRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService.MouseEventService)
	    ], GroupCellRenderer.prototype, "mouseEventService", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eExpanded'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eExpanded", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eContracted'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eContracted", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eCheckbox'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eCheckbox", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eValue'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eValue", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eChildCount'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eChildCount", void 0);
	    return GroupCellRenderer;
	}(component.Component));
	exports.GroupCellRenderer = GroupCellRenderer;
	});

	unwrapExports(groupCellRenderer);
	var groupCellRenderer_1 = groupCellRenderer.GroupCellRenderer;

	var cellRendererFactory = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var CellRendererFactory = (function () {
	    function CellRendererFactory() {
	        this.cellRendererMap = {};
	    }
	    CellRendererFactory_1 = CellRendererFactory;
	    CellRendererFactory.prototype.init = function () {
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = animateSlideCellRenderer.AnimateSlideCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = animateShowChangeCellRenderer.AnimateShowChangeCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.GROUP] = groupCellRenderer.GroupCellRenderer;
	        // this.registerRenderersFromGridOptions();
	    };
	    // private registerRenderersFromGridOptions(): void {
	    //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();
	    //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {
	    //         this.addCellRenderer(key, cellRenderer);
	    //     });
	    // }
	    CellRendererFactory.prototype.addCellRenderer = function (key, cellRenderer) {
	        this.cellRendererMap[key] = cellRenderer;
	    };
	    CellRendererFactory.prototype.getCellRenderer = function (key) {
	        var result = this.cellRendererMap[key];
	        if (utils.Utils.missing(result)) {
	            console.warn('ag-Grid: unable to find cellRenderer for key ' + key);
	            return null;
	        }
	        return result;
	    };
	    CellRendererFactory.ANIMATE_SLIDE = 'animateSlide';
	    CellRendererFactory.ANIMATE_SHOW_CHANGE = 'animateShowChange';
	    CellRendererFactory.GROUP = 'group';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CellRendererFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], CellRendererFactory.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], CellRendererFactory.prototype, "eventService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellRendererFactory.prototype, "init", null);
	    CellRendererFactory = CellRendererFactory_1 = __decorate([
	        context.Bean('cellRendererFactory')
	    ], CellRendererFactory);
	    return CellRendererFactory;
	    var CellRendererFactory_1;
	}());
	exports.CellRendererFactory = CellRendererFactory;
	});

	unwrapExports(cellRendererFactory);
	var cellRendererFactory_1 = cellRendererFactory.CellRendererFactory;

	var stylingService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var StylingService = (function () {
	    function StylingService() {
	    }
	    StylingService.prototype.processAllCellClasses = function (colDef, params, onApplicableClass, onNotApplicableClass) {
	        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
	        this.processStaticCellClasses(colDef, params, onApplicableClass);
	    };
	    StylingService.prototype.processClassRules = function (classRules, params, onApplicableClass, onNotApplicableClass) {
	        if (typeof classRules === 'object' && classRules !== null) {
	            var classNames = Object.keys(classRules);
	            for (var i = 0; i < classNames.length; i++) {
	                var className = classNames[i];
	                var rule = classRules[className];
	                var resultOfRule = void 0;
	                if (typeof rule === 'string') {
	                    resultOfRule = this.expressionService.evaluate(rule, params);
	                }
	                else if (typeof rule === 'function') {
	                    resultOfRule = rule(params);
	                }
	                if (resultOfRule) {
	                    onApplicableClass(className);
	                }
	                else if (onNotApplicableClass) {
	                    onNotApplicableClass(className);
	                }
	            }
	        }
	    };
	    StylingService.prototype.processStaticCellClasses = function (colDef, params, onApplicableClass) {
	        var cellClass = colDef.cellClass;
	        if (cellClass) {
	            var classOrClasses = void 0;
	            if (typeof colDef.cellClass === 'function') {
	                var cellClassFunc = colDef.cellClass;
	                classOrClasses = cellClassFunc(params);
	            }
	            else {
	                classOrClasses = colDef.cellClass;
	            }
	            if (typeof classOrClasses === 'string') {
	                onApplicableClass(classOrClasses);
	            }
	            else if (Array.isArray(classOrClasses)) {
	                classOrClasses.forEach(function (cssClassItem) {
	                    onApplicableClass(cssClassItem);
	                });
	            }
	        }
	    };
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], StylingService.prototype, "expressionService", void 0);
	    StylingService = __decorate([
	        context.Bean('stylingService')
	    ], StylingService);
	    return StylingService;
	}());
	exports.StylingService = StylingService;
	});

	unwrapExports(stylingService);
	var stylingService_1 = stylingService.StylingService;

	var columnHoverService = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var ColumnHoverService = (function (_super) {
	    __extends(ColumnHoverService, _super);
	    function ColumnHoverService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ColumnHoverService.prototype.setMouseOver = function (columns) {
	        this.selectedColumns = columns;
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.clearMouseOver = function () {
	        this.selectedColumns = null;
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.isHovered = function (column) {
	        return this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ColumnHoverService.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ColumnHoverService.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], ColumnHoverService.prototype, "gridApi", void 0);
	    ColumnHoverService = __decorate([
	        context.Bean('columnHoverService')
	    ], ColumnHoverService);
	    return ColumnHoverService;
	}(beanStub.BeanStub));
	exports.ColumnHoverService = ColumnHoverService;
	});

	unwrapExports(columnHoverService);
	var columnHoverService_1 = columnHoverService.ColumnHoverService;

	var scrollVisibleService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var ScrollVisibleService = (function () {
	    function ScrollVisibleService() {
	    }
	    ScrollVisibleService.prototype.setScrollsVisible = function (params) {
	        var atLeastOneDifferent = this.bodyHorizontalScrollShowing !== params.bodyHorizontalScrollShowing ||
	            this.leftVerticalScrollShowing !== params.leftVerticalScrollShowing ||
	            this.rightVerticalScrollShowing !== params.rightVerticalScrollShowing;
	        if (atLeastOneDifferent) {
	            this.bodyHorizontalScrollShowing = params.bodyHorizontalScrollShowing;
	            this.leftVerticalScrollShowing = params.leftVerticalScrollShowing;
	            this.rightVerticalScrollShowing = params.rightVerticalScrollShowing;
	            var event_1 = {
	                type: events$1.Events.EVENT_SCROLL_VISIBILITY_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    // used by pagination service - to know page height
	    ScrollVisibleService.prototype.isBodyHorizontalScrollShowing = function () {
	        return this.bodyHorizontalScrollShowing;
	    };
	    // used by header container
	    ScrollVisibleService.prototype.isLeftVerticalScrollShowing = function () {
	        return this.leftVerticalScrollShowing;
	    };
	    // used by header container
	    ScrollVisibleService.prototype.isRightVerticalScrollShowing = function () {
	        return this.rightVerticalScrollShowing;
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ScrollVisibleService.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], ScrollVisibleService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ScrollVisibleService.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], ScrollVisibleService.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ScrollVisibleService.prototype, "gridOptionsWrapper", void 0);
	    ScrollVisibleService = __decorate([
	        context.Bean('scrollVisibleService')
	    ], ScrollVisibleService);
	    return ScrollVisibleService;
	}());
	exports.ScrollVisibleService = ScrollVisibleService;
	});

	unwrapExports(scrollVisibleService);
	var scrollVisibleService_1 = scrollVisibleService.ScrollVisibleService;

	var paginationProxy = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var PaginationAutoPageSizeService = (function (_super) {
	    __extends(PaginationAutoPageSizeService, _super);
	    function PaginationAutoPageSizeService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PaginationAutoPageSizeService.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.notActive = function () {
	        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.checkPageSize = function () {
	        if (this.notActive()) {
	            return;
	        }
	        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        var bodyHeight = this.gridPanel.getBodyHeight();
	        if (this.scrollVisibleService.isBodyHorizontalScrollShowing()) {
	            bodyHeight = bodyHeight - this.gridOptionsWrapper.getScrollbarWidth();
	        }
	        if (bodyHeight > 0) {
	            var newPageSize = Math.floor(bodyHeight / rowHeight);
	            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);
	        }
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], PaginationAutoPageSizeService.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PaginationAutoPageSizeService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService.ScrollVisibleService)
	    ], PaginationAutoPageSizeService.prototype, "scrollVisibleService", void 0);
	    PaginationAutoPageSizeService = __decorate([
	        context.Bean('paginationAutoPageSizeService')
	    ], PaginationAutoPageSizeService);
	    return PaginationAutoPageSizeService;
	}(beanStub.BeanStub));
	exports.PaginationAutoPageSizeService = PaginationAutoPageSizeService;
	var PaginationProxy = (function (_super) {
	    __extends(PaginationProxy, _super);
	    function PaginationProxy() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.currentPage = 0;
	        _this.topRowIndex = 0;
	        _this.bottomRowIndex = 0;
	        _this.pixelOffset = 0;
	        return _this;
	    }
	    PaginationProxy.prototype.postConstruct = function () {
	        this.active = this.gridOptionsWrapper.isPagination();
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));
	        this.onModelUpdated();
	    };
	    PaginationProxy.prototype.isLastRowFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {
	        this.setIndexesAndBounds();
	        var paginationChangedEvent = {
	            type: events$1.Events.EVENT_PAGINATION_CHANGED,
	            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
	            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
	            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
	            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(paginationChangedEvent);
	    };
	    PaginationProxy.prototype.goToPage = function (page) {
	        if (!this.active) {
	            return;
	        }
	        if (this.currentPage === page) {
	            return;
	        }
	        this.currentPage = page;
	        var event = {
	            type: events$1.Events.EVENT_MODEL_UPDATED,
	            animate: false,
	            keepRenderedRows: false,
	            newData: false,
	            newPage: true,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.onModelUpdated(event);
	    };
	    PaginationProxy.prototype.getPixelOffset = function () {
	        return this.pixelOffset;
	    };
	    PaginationProxy.prototype.getRow = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    PaginationProxy.prototype.getRowNode = function (id) {
	        return this.rowModel.getRowNode(id);
	    };
	    PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {
	        return this.rowModel.getRowIndexAtPixel(pixel);
	    };
	    PaginationProxy.prototype.getCurrentPageHeight = function () {
	        if (utils._.missing(this.topRowBounds) || utils._.missing(this.bottomRowBounds)) {
	            return 0;
	        }
	        return this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop;
	    };
	    PaginationProxy.prototype.isRowPresent = function (rowNode) {
	        if (!this.rowModel.isRowPresent(rowNode)) {
	            return false;
	        }
	        var nodeIsInPage = rowNode.rowIndex >= this.topRowIndex && rowNode.rowIndex <= this.bottomRowIndex;
	        return nodeIsInPage;
	    };
	    PaginationProxy.prototype.isEmpty = function () {
	        return this.rowModel.isEmpty();
	    };
	    PaginationProxy.prototype.isRowsToRender = function () {
	        return this.rowModel.isRowsToRender();
	    };
	    PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
	    };
	    PaginationProxy.prototype.forEachNode = function (callback) {
	        return this.rowModel.forEachNode(callback);
	    };
	    PaginationProxy.prototype.getType = function () {
	        return this.rowModel.getType();
	    };
	    PaginationProxy.prototype.getRowBounds = function (index) {
	        return this.rowModel.getRowBounds(index);
	    };
	    PaginationProxy.prototype.getPageFirstRow = function () {
	        return this.pageSize * this.currentPage;
	    };
	    PaginationProxy.prototype.getPageLastRow = function () {
	        var totalLastRow = (this.pageSize * (this.currentPage + 1)) - 1;
	        var pageLastRow = this.rowModel.getPageLastRow();
	        if (pageLastRow > totalLastRow) {
	            return totalLastRow;
	        }
	        else {
	            return pageLastRow;
	        }
	    };
	    PaginationProxy.prototype.getRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    PaginationProxy.prototype.goToPageWithIndex = function (index) {
	        if (!this.active) {
	            return;
	        }
	        var pageNumber = Math.floor(index / this.pageSize);
	        this.goToPage(pageNumber);
	    };
	    PaginationProxy.prototype.getTotalRowCount = function () {
	        return this.rowModel.getPageLastRow() + 1;
	    };
	    PaginationProxy.prototype.isLastPageFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.getCurrentPage = function () {
	        return this.currentPage;
	    };
	    PaginationProxy.prototype.goToNextPage = function () {
	        this.goToPage(this.currentPage + 1);
	    };
	    PaginationProxy.prototype.goToPreviousPage = function () {
	        this.goToPage(this.currentPage - 1);
	    };
	    PaginationProxy.prototype.goToFirstPage = function () {
	        this.goToPage(0);
	    };
	    PaginationProxy.prototype.goToLastPage = function () {
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var lastPage = Math.floor(rowCount / this.pageSize);
	        this.goToPage(lastPage);
	    };
	    PaginationProxy.prototype.getPageSize = function () {
	        return this.pageSize;
	    };
	    PaginationProxy.prototype.getTotalPages = function () {
	        return this.totalPages;
	    };
	    PaginationProxy.prototype.setPageSize = function () {
	        // show put this into super class
	        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
	        if (!(this.pageSize >= 1)) {
	            this.pageSize = 100;
	        }
	    };
	    PaginationProxy.prototype.setIndexesAndBounds = function () {
	        if (this.active) {
	            this.setPageSize();
	            var totalRowCount = this.getTotalRowCount();
	            this.totalPages = Math.floor((totalRowCount - 1) / this.pageSize) + 1;
	            if (this.currentPage >= this.totalPages) {
	                this.currentPage = this.totalPages - 1;
	            }
	            if (!utils._.isNumeric(this.currentPage) || this.currentPage < 0) {
	                this.currentPage = 0;
	            }
	            this.topRowIndex = this.pageSize * this.currentPage;
	            this.bottomRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;
	            var maxRowAllowed = this.rowModel.getPageLastRow();
	            if (this.bottomRowIndex > maxRowAllowed) {
	                this.bottomRowIndex = maxRowAllowed;
	            }
	        }
	        else {
	            this.pageSize = this.rowModel.getPageLastRow() + 1;
	            this.totalPages = 1;
	            this.currentPage = 0;
	            this.topRowIndex = 0;
	            this.bottomRowIndex = this.rowModel.getPageLastRow();
	        }
	        this.topRowBounds = this.rowModel.getRowBounds(this.topRowIndex);
	        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomRowIndex);
	        this.pixelOffset = utils._.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;
	    };
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], PaginationProxy.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], PaginationProxy.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PaginationProxy.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], PaginationProxy.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], PaginationProxy.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], PaginationProxy.prototype, "gridApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationProxy.prototype, "postConstruct", null);
	    PaginationProxy = __decorate([
	        context.Bean('paginationProxy')
	    ], PaginationProxy);
	    return PaginationProxy;
	}(beanStub.BeanStub));
	exports.PaginationProxy = PaginationProxy;
	});

	unwrapExports(paginationProxy);
	var paginationProxy_1 = paginationProxy.PaginationAutoPageSizeService;
	var paginationProxy_2 = paginationProxy.PaginationProxy;

	var linkedList = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var LinkedList = (function () {
	    function LinkedList() {
	        this.first = null;
	        this.last = null;
	    }
	    LinkedList.prototype.add = function (item) {
	        var entry = {
	            item: item,
	            next: null
	        };
	        if (this.last) {
	            this.last.next = entry;
	        }
	        else {
	            this.first = entry;
	        }
	        this.last = entry;
	    };
	    LinkedList.prototype.remove = function () {
	        var result = this.first;
	        if (result) {
	            this.first = result.next;
	            if (!this.first) {
	                this.last = null;
	            }
	        }
	        return result.item;
	    };
	    LinkedList.prototype.isEmpty = function () {
	        return !this.first;
	    };
	    return LinkedList;
	}());
	exports.LinkedList = LinkedList;
	});

	unwrapExports(linkedList);
	var linkedList_1 = linkedList.LinkedList;

	var animationFrameService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var AnimationFrameService = (function () {
	    function AnimationFrameService() {
	        this.p1Tasks = new linkedList.LinkedList();
	        this.p2Tasks = new linkedList.LinkedList();
	        this.ticking = false;
	    }
	    AnimationFrameService.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    AnimationFrameService.prototype.init = function () {
	        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
	    };
	    // this method is for our ag-Grid sanity only - if animation frames are turned off,
	    // then no place in the code should be looking to add any work to be done in animation
	    // frames. this stops bugs - where some code is asking for a frame to be executed
	    // when it should not.
	    AnimationFrameService.prototype.verifyAnimationFrameOn = function (methodName) {
	        if (this.useAnimationFrame === false) {
	            console.warn("ag-Grid: AnimationFrameService." + methodName + " called but animation frames are off");
	        }
	    };
	    AnimationFrameService.prototype.addP1Task = function (task) {
	        this.verifyAnimationFrameOn('addP1Task');
	        this.p1Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.addP2Task = function (task) {
	        this.verifyAnimationFrameOn('addP2Task');
	        this.p2Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.executeFrame = function (millis) {
	        this.verifyAnimationFrameOn('executeFrame');
	        var frameStart = new Date().getTime();
	        var duration = (new Date().getTime()) - frameStart;
	        var gridPanelNeedsAFrame = true;
	        // 16ms is 60 fps
	        var noMaxMillis = millis <= 0;
	        while (noMaxMillis || duration < millis) {
	            if (gridPanelNeedsAFrame) {
	                gridPanelNeedsAFrame = this.gridPanel.executeFrame();
	            }
	            else if (!this.p1Tasks.isEmpty()) {
	                var task = this.p1Tasks.remove();
	                task();
	            }
	            else if (!this.p2Tasks.isEmpty()) {
	                var task = this.p2Tasks.remove();
	                task();
	            }
	            else {
	                break;
	            }
	            duration = (new Date().getTime()) - frameStart;
	        }
	        if (gridPanelNeedsAFrame || !this.p1Tasks.isEmpty() || !this.p2Tasks.isEmpty()) {
	            this.requestFrame();
	        }
	        else {
	            this.stopTicking();
	        }
	    };
	    AnimationFrameService.prototype.stopTicking = function () {
	        this.ticking = false;
	        var event = {
	            type: eventKeys.Events.EVENT_ANIMATION_QUEUE_EMPTY,
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            api: this.gridOptionsWrapper.getApi()
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    AnimationFrameService.prototype.flushAllFrames = function () {
	        if (!this.useAnimationFrame) {
	            return;
	        }
	        this.executeFrame(-1);
	    };
	    AnimationFrameService.prototype.schedule = function () {
	        if (!this.useAnimationFrame) {
	            return;
	        }
	        if (!this.ticking) {
	            this.ticking = true;
	            this.requestFrame();
	        }
	    };
	    AnimationFrameService.prototype.requestFrame = function () {
	        // check for the existence of requestAnimationFrame, and if
	        // it's missing, then we polyfill it with setTimeout()
	        var callback = this.executeFrame.bind(this, 60);
	        if (window.requestAnimationFrame) {
	            window.requestAnimationFrame(callback);
	        }
	        else if (window.webkitRequestAnimationFrame) {
	            window.webkitRequestAnimationFrame(callback);
	        }
	        else {
	            setTimeout(callback, 0);
	        }
	    };
	    AnimationFrameService.prototype.isQueueEmpty = function () {
	        return this.ticking;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], AnimationFrameService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], AnimationFrameService.prototype, "eventService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AnimationFrameService.prototype, "init", null);
	    AnimationFrameService = __decorate([
	        context.Bean('animationFrameService')
	    ], AnimationFrameService);
	    return AnimationFrameService;
	}());
	exports.AnimationFrameService = AnimationFrameService;
	});

	unwrapExports(animationFrameService);
	var animationFrameService_1 = animationFrameService.AnimationFrameService;

	var sortController = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var context_2 = context;


	var SortController = (function () {
	    function SortController() {
	    }
	    SortController_1 = SortController;
	    SortController.prototype.progressSort = function (column$$1, multiSort, source) {
	        if (source === void 0) { source = "api"; }
	        var nextDirection = this.getNextSortDirection(column$$1);
	        this.setSortForColumn(column$$1, nextDirection, multiSort, source);
	    };
	    SortController.prototype.setSortForColumn = function (column$$1, sort, multiSort, source) {
	        if (source === void 0) { source = "api"; }
	        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)
	        if (sort !== column.Column.SORT_ASC && sort !== column.Column.SORT_DESC) {
	            sort = null;
	        }
	        // update sort on current col
	        column$$1.setSort(sort, source);
	        // sortedAt used for knowing order of cols when multi-col sort
	        if (column$$1.getSort()) {
	            var sortedAt = Number(new Date().valueOf());
	            column$$1.setSortedAt(sortedAt);
	        }
	        else {
	            column$$1.setSortedAt(null);
	        }
	        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
	        // clear sort on all columns except this one, and update the icons
	        if (!doingMultiSort) {
	            this.clearSortBarThisColumn(column$$1, source);
	        }
	        this.dispatchSortChangedEvents();
	    };
	    // gets called by API, so if data changes, use can call this, which will end up
	    // working out the sort order again of the rows.
	    SortController.prototype.onSortChanged = function () {
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.dispatchSortChangedEvents = function () {
	        var event = {
	            type: events$1.Events.EVENT_SORT_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {
	        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {
	            // Do not clear if either holding shift, or if column in question was clicked
	            if (!(columnToClear === columnToSkip)) {
	                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise
	                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.
	                columnToClear.setSort(undefined, source);
	            }
	        });
	    };
	    SortController.prototype.getNextSortDirection = function (column$$1) {
	        var sortingOrder;
	        if (column$$1.getColDef().sortingOrder) {
	            sortingOrder = column$$1.getColDef().sortingOrder;
	        }
	        else if (this.gridOptionsWrapper.getSortingOrder()) {
	            sortingOrder = this.gridOptionsWrapper.getSortingOrder();
	        }
	        else {
	            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
	        }
	        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
	            console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s ' + sortingOrder);
	            return;
	        }
	        var currentIndex = sortingOrder.indexOf(column$$1.getSort());
	        var notInArray = currentIndex < 0;
	        var lastItemInArray = currentIndex == sortingOrder.length - 1;
	        var result;
	        if (notInArray || lastItemInArray) {
	            result = sortingOrder[0];
	        }
	        else {
	            result = sortingOrder[currentIndex + 1];
	        }
	        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid
	        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
	            console.warn('ag-grid: invalid sort type ' + result);
	            return null;
	        }
	        return result;
	    };
	    // used by the public api, for saving the sort model
	    SortController.prototype.getSortModel = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils.Utils.map(columnsWithSorting, function (column$$1) {
	            return {
	                colId: column$$1.getColId(),
	                sort: column$$1.getSort()
	            };
	        });
	    };
	    SortController.prototype.setSortModel = function (sortModel, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        if (!this.gridOptionsWrapper.isEnableSorting()) {
	            console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
	            return;
	        }
	        // first up, clear any previous sort
	        var sortModelProvided = sortModel && sortModel.length > 0;
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        allColumnsIncludingAuto.forEach(function (column$$1) {
	            var sortForCol = null;
	            var sortedAt = -1;
	            if (sortModelProvided && !column$$1.getColDef().suppressSorting) {
	                for (var j = 0; j < sortModel.length; j++) {
	                    var sortModelEntry = sortModel[j];
	                    if (typeof sortModelEntry.colId === 'string'
	                        && typeof column$$1.getColId() === 'string'
	                        && _this.compareColIds(sortModelEntry, column$$1)) {
	                        sortForCol = sortModelEntry.sort;
	                        sortedAt = j;
	                    }
	                }
	            }
	            if (sortForCol) {
	                column$$1.setSort(sortForCol, source);
	                column$$1.setSortedAt(sortedAt);
	            }
	            else {
	                column$$1.setSort(null, source);
	                column$$1.setSortedAt(null);
	            }
	        });
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.compareColIds = function (sortModelEntry, column$$1) {
	        return sortModelEntry.colId === column$$1.getColId();
	    };
	    SortController.prototype.getColumnsWithSortingOrdered = function () {
	        // pull out all the columns that have sorting set
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        var columnsWithSorting = utils.Utils.filter(allColumnsIncludingAuto, function (column$$1) { return !!column$$1.getSort(); });
	        // put the columns in order of which one got sorted first
	        columnsWithSorting.sort(function (a, b) { return a.sortedAt - b.sortedAt; });
	        return columnsWithSorting;
	    };
	    // used by row controller, when doing the sorting
	    SortController.prototype.getSortForRowController = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils.Utils.map(columnsWithSorting, function (column$$1) {
	            var ascending = column$$1.getSort() === column.Column.SORT_ASC;
	            return {
	                inverter: ascending ? 1 : -1,
	                column: column$$1
	            };
	        });
	    };
	    SortController.DEFAULT_SORTING_ORDER = [column.Column.SORT_ASC, column.Column.SORT_DESC, null];
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SortController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], SortController.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], SortController.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], SortController.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], SortController.prototype, "gridApi", void 0);
	    SortController = SortController_1 = __decorate([
	        context_2.Bean('sortController')
	    ], SortController);
	    return SortController;
	    var SortController_1;
	}());
	exports.SortController = SortController;
	});

	unwrapExports(sortController);
	var sortController_1 = sortController.SortController;

	var heightScaler = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	/**
	 * This class solves the 'max height' problem, where the user might want to show more data than
	 * the max div height actually allows.
	 */
	var HeightScaler = (function (_super) {
	    __extends(HeightScaler, _super);
	    function HeightScaler() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        // the scrollY position
	        _this.scrollY = 0;
	        // how tall the body is
	        _this.uiBodyHeight = 0;
	        return _this;
	    }
	    HeightScaler.prototype.postConstruct = function () {
	        this.addDestroyableEventListener(this.eventService, eventKeys.Events.EVENT_BODY_HEIGHT_CHANGED, this.update.bind(this));
	        this.scrollBarWidth = utils._.getScrollbarWidth();
	        this.maxDivHeight = utils._.getMaxDivHeight();
	    };
	    HeightScaler.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    HeightScaler.prototype.isScaling = function () {
	        return this.scaling;
	    };
	    HeightScaler.prototype.getOffset = function () {
	        return this.offset;
	    };
	    HeightScaler.prototype.update = function () {
	        if (!this.scaling) {
	            return;
	        }
	        var newScrollY = this.gridPanel.getVScrollPosition().top;
	        var newBodyHeight = this.getUiBodyHeight();
	        var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
	        if (atLeastOneChanged) {
	            this.scrollY = newScrollY;
	            this.uiBodyHeight = newBodyHeight;
	            this.calculateOffset();
	        }
	    };
	    HeightScaler.prototype.calculateOffset = function () {
	        this.uiContainerHeight = this.maxDivHeight;
	        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
	        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
	        var scrollPercent = this.scrollY / this.maxScrollY;
	        this.setOffset(scrollPercent * this.pixelsToShave);
	    };
	    HeightScaler.prototype.clearOffset = function () {
	        this.uiContainerHeight = this.modelHeight;
	        this.pixelsToShave = 0;
	        this.setOffset(0);
	    };
	    HeightScaler.prototype.setOffset = function (newOffset) {
	        // because we are talking pixels, no point in confusing things with half numbers
	        var newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;
	        if (this.offset !== newOffsetFloor) {
	            this.offset = newOffsetFloor;
	            this.eventService.dispatchEvent({ type: eventKeys.Events.EVENT_HEIGHT_SCALE_CHANGED });
	        }
	    };
	    HeightScaler.prototype.setModelHeight = function (modelHeight) {
	        this.modelHeight = modelHeight;
	        this.scaling = this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
	        if (this.scaling) {
	            this.calculateOffset();
	        }
	        else {
	            this.clearOffset();
	        }
	    };
	    HeightScaler.prototype.getUiContainerHeight = function () {
	        return this.uiContainerHeight;
	    };
	    HeightScaler.prototype.getRealPixelPosition = function (modelPixel) {
	        var uiPixel = modelPixel - this.offset;
	        return uiPixel;
	    };
	    HeightScaler.prototype.getUiBodyHeight = function () {
	        var pos = this.gridPanel.getVScrollPosition();
	        var bodyHeight = pos.bottom - pos.top;
	        if (this.gridPanel.isHorizontalScrollShowing()) {
	            bodyHeight -= this.scrollBarWidth;
	        }
	        return bodyHeight;
	    };
	    HeightScaler.prototype.getScrollPositionForPixel = function (rowTop) {
	        if (this.pixelsToShave <= 0) {
	            return rowTop;
	        }
	        else {
	            var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
	            var scrollPercent = rowTop / modelMaxScroll;
	            var scrollPixel = this.maxScrollY * scrollPercent;
	            return scrollPixel;
	        }
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeightScaler.prototype, "eventService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeightScaler.prototype, "postConstruct", null);
	    HeightScaler = __decorate([
	        context.Bean('heightScaler')
	    ], HeightScaler);
	    return HeightScaler;
	}(beanStub.BeanStub));
	exports.HeightScaler = HeightScaler;
	});

	unwrapExports(heightScaler);
	var heightScaler_1 = heightScaler.HeightScaler;

	var beans = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


























	/** Using the IoC has a slight performance consideration, which is no problem most of the
	 * time, unless we are trashing objects - which is the case when scrolling and rowComp
	 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
	 * with the IoC. Instead they get passed this object which is all the beans the RowComp
	 * and CellComp need. Not autowiring all the cells gives performance improvement. */
	var Beans = (function () {
	    function Beans() {
	    }
	    Beans.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    Beans.prototype.postConstruct = function () {
	        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
	    };
	    __decorate([
	        context.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], Beans.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], Beans.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], Beans.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], Beans.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], Beans.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], Beans.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], Beans.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "$compile", void 0);
	    __decorate([
	        context.Autowired('templateService'),
	        __metadata("design:type", templateService.TemplateService)
	    ], Beans.prototype, "templateService", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], Beans.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], Beans.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], Beans.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService.ColumnAnimationService)
	    ], Beans.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "rangeController", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], Beans.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory.CellEditorFactory)
	    ], Beans.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory.CellRendererFactory)
	    ], Beans.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context.Autowired('popupService'),
	        __metadata("design:type", popupService.PopupService)
	    ], Beans.prototype, "popupService", void 0);
	    __decorate([
	        context.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService.CellRendererService)
	    ], Beans.prototype, "cellRendererService", void 0);
	    __decorate([
	        context.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService.ValueFormatterService)
	    ], Beans.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context.Autowired('stylingService'),
	        __metadata("design:type", stylingService.StylingService)
	    ], Beans.prototype, "stylingService", void 0);
	    __decorate([
	        context.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService.ColumnHoverService)
	    ], Beans.prototype, "columnHoverService", void 0);
	    __decorate([
	        context.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], Beans.prototype, "enterprise", void 0);
	    __decorate([
	        context.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver.ComponentResolver)
	    ], Beans.prototype, "componentResolver", void 0);
	    __decorate([
	        context.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService.AnimationFrameService)
	    ], Beans.prototype, "taskQueue", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], Beans.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], Beans.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], Beans.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('heightScaler'),
	        __metadata("design:type", heightScaler.HeightScaler)
	    ], Beans.prototype, "heightScaler", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Beans.prototype, "postConstruct", null);
	    Beans = __decorate([
	        context.Bean('beans')
	    ], Beans);
	    return Beans;
	}());
	exports.Beans = Beans;
	});

	unwrapExports(beans);
	var beans_1 = beans.Beans;

	var hoverFeature = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var HoverFeature = (function (_super) {
	    __extends(HoverFeature, _super);
	    function HoverFeature(columns, element) {
	        var _this = _super.call(this) || this;
	        _this.columns = columns;
	        _this.addMouseHoverListeners(element);
	        return _this;
	    }
	    HoverFeature.prototype.addMouseHoverListeners = function (element) {
	        this.addDestroyableEventListener(element, 'mouseout', this.onMouseOut.bind(this));
	        this.addDestroyableEventListener(element, 'mouseover', this.onMouseOver.bind(this));
	    };
	    HoverFeature.prototype.onMouseOut = function () {
	        this.columnHoverService.clearMouseOver();
	    };
	    HoverFeature.prototype.onMouseOver = function () {
	        this.columnHoverService.setMouseOver(this.columns);
	    };
	    __decorate([
	        context.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService.ColumnHoverService)
	    ], HoverFeature.prototype, "columnHoverService", void 0);
	    return HoverFeature;
	}(beanStub.BeanStub));
	exports.HoverFeature = HoverFeature;
	});

	unwrapExports(hoverFeature);
	var hoverFeature_1 = hoverFeature.HoverFeature;

	var floatingFilterWrapper = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });












	var BaseFilterWrapperComp = (function (_super) {
	    __extends(BaseFilterWrapperComp, _super);
	    function BaseFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilterWrapperComp.prototype.init = function (params) {
	        this.column = params.column;
	        var base = utils._.loadTemplate("<div class=\"ag-header-cell\" aria-hidden=\"true\"><div class=\"ag-floating-filter-body\" aria-hidden=\"true\"></div></div>");
	        this.enrichBody(base);
	        this.setTemplateFromElement(base);
	        this.setupWidth();
	        this.addColumnHoverListener();
	        this.addFeature(this.context, new hoverFeature.HoverFeature([this.column], this.getGui()));
	        var setLeftFeature$$1 = new setLeftFeature.SetLeftFeature(this.column, this.getGui(), this.beans);
	        setLeftFeature$$1.init();
	        this.addDestroyFunc(setLeftFeature$$1.destroy.bind(setLeftFeature$$1));
	    };
	    BaseFilterWrapperComp.prototype.addColumnHoverListener = function () {
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.onColumnHover();
	    };
	    BaseFilterWrapperComp.prototype.onColumnHover = function () {
	        var isHovered = this.columnHoverService.isHovered(this.column);
	        utils._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
	    };
	    BaseFilterWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    BaseFilterWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getGui().style.width = this.column.getActualWidth() + 'px';
	    };
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], BaseFilterWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService.ColumnHoverService)
	    ], BaseFilterWrapperComp.prototype, "columnHoverService", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], BaseFilterWrapperComp.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('beans'),
	        __metadata("design:type", beans.Beans)
	    ], BaseFilterWrapperComp.prototype, "beans", void 0);
	    return BaseFilterWrapperComp;
	}(component.Component));
	exports.BaseFilterWrapperComp = BaseFilterWrapperComp;
	var FloatingFilterWrapperComp = (function (_super) {
	    __extends(FloatingFilterWrapperComp, _super);
	    function FloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FloatingFilterWrapperComp.prototype.init = function (params) {
	        this.floatingFilterCompPromise = params.floatingFilterComp;
	        this.suppressFilterButton = params.suppressFilterButton;
	        _super.prototype.init.call(this, params);
	        this.addEventListeners();
	    };
	    FloatingFilterWrapperComp.prototype.addEventListeners = function () {
	        if (!this.suppressFilterButton && this.eButtonShowMainFilter) {
	            this.addDestroyableEventListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));
	        }
	    };
	    FloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	        var _this = this;
	        this.floatingFilterCompPromise.then(function (floatingFilterComp) {
	            var floatingFilterBody = body.querySelector('.ag-floating-filter-body');
	            var floatingFilterCompUi = floatingFilterComp.getGui();
	            if (_this.suppressFilterButton) {
	                floatingFilterBody.appendChild(floatingFilterCompUi);
	                utils._.removeCssClass(floatingFilterBody, 'ag-floating-filter-body');
	                utils._.addCssClass(floatingFilterBody, 'ag-floating-filter-full-body');
	            }
	            else {
	                floatingFilterBody.appendChild(floatingFilterCompUi);
	                body.appendChild(utils._.loadTemplate("<div class=\"ag-floating-filter-button\" aria-hidden=\"true\">\n                        <button type=\"button\" ref=\"eButtonShowMainFilter\"></button>\n                </div>"));
	                var eIcon = utils._.createIconNoSpan('filter', _this.gridOptionsWrapper, _this.column);
	                body.querySelector('button').appendChild(eIcon);
	            }
	            if (floatingFilterComp.afterGuiAttached) {
	                floatingFilterComp.afterGuiAttached();
	            }
	            _this.wireQuerySelectors();
	            _this.addEventListeners();
	        });
	    };
	    FloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	        var combinedFilter = undefined;
	        var mainModel = null;
	        if (parentModel && parentModel.operator) {
	            combinedFilter = parentModel;
	            mainModel = combinedFilter.condition1;
	        }
	        else {
	            mainModel = parentModel;
	        }
	        this.floatingFilterCompPromise.then(function (floatingFilterComp) {
	            floatingFilterComp.onParentModelChanged(mainModel, combinedFilter);
	        });
	    };
	    FloatingFilterWrapperComp.prototype.showParentFilter = function () {
	        this.menuFactory.showMenuAfterButtonClick(this.column, this.eButtonShowMainFilter, 'filterMenuTab', ['filterMenuTab']);
	    };
	    __decorate([
	        componentAnnotations.RefSelector('eButtonShowMainFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], FloatingFilterWrapperComp.prototype, "eButtonShowMainFilter", void 0);
	    __decorate([
	        context.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], FloatingFilterWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FloatingFilterWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    return FloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.FloatingFilterWrapperComp = FloatingFilterWrapperComp;
	var EmptyFloatingFilterWrapperComp = (function (_super) {
	    __extends(EmptyFloatingFilterWrapperComp, _super);
	    function EmptyFloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyFloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	    };
	    EmptyFloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	    };
	    return EmptyFloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.EmptyFloatingFilterWrapperComp = EmptyFloatingFilterWrapperComp;
	});

	unwrapExports(floatingFilterWrapper);
	var floatingFilterWrapper_1 = floatingFilterWrapper.BaseFilterWrapperComp;
	var floatingFilterWrapper_2 = floatingFilterWrapper.FloatingFilterWrapperComp;
	var floatingFilterWrapper_3 = floatingFilterWrapper.EmptyFloatingFilterWrapperComp;

	var overlayWrapperComponent = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var OverlayWrapperComponent = (function (_super) {
	    __extends(OverlayWrapperComponent, _super);
	    function OverlayWrapperComponent() {
	        return _super.call(this) || this;
	    }
	    OverlayWrapperComponent.prototype.init = function () { };
	    OverlayWrapperComponent.prototype.showLoadingOverlay = function (eOverlayWrapper) {
	        var _this = this;
	        this.setTemplate(OverlayWrapperComponent.LOADING_WRAPPER_OVERLAY_TEMPLATE);
	        this.componentRecipes.newLoadingOverlayComponent().then(function (renderer) {
	            var loadingOverlayWrapper = _this.getRefElement("loadingOverlayWrapper");
	            utils.Utils.removeAllChildren(loadingOverlayWrapper);
	            loadingOverlayWrapper.appendChild(renderer.getGui());
	        });
	        this.showOverlay(eOverlayWrapper, this.getGui());
	    };
	    OverlayWrapperComponent.prototype.showNoRowsOverlay = function (eOverlayWrapper) {
	        var _this = this;
	        this.setTemplate(OverlayWrapperComponent.NO_ROWS_WRAPPER_OVERLAY_TEMPLATE);
	        // we don't use gridOptionsWrapper.addLayoutElement here because this component
	        // is passive, we don't want to add a new element each time it is created.
	        var eNoRowsOverlayWrapper = this.getRefElement('noRowsOverlayWrapper');
	        var autoHeight = this.gridOptionsWrapper.isGridAutoHeight();
	        utils.Utils.addOrRemoveCssClass(eNoRowsOverlayWrapper, 'ag-layout-auto-height', autoHeight);
	        utils.Utils.addOrRemoveCssClass(eNoRowsOverlayWrapper, 'ag-layout-normal', !autoHeight);
	        this.componentRecipes.newNoRowsOverlayComponent().then(function (renderer) {
	            var noRowsOverlayWrapper = _this.getRefElement("noRowsOverlayWrapper");
	            utils.Utils.removeAllChildren(noRowsOverlayWrapper);
	            noRowsOverlayWrapper.appendChild(renderer.getGui());
	        });
	        this.showOverlay(eOverlayWrapper, this.getGui());
	    };
	    OverlayWrapperComponent.prototype.hideOverlay = function (eOverlayWrapper) {
	        utils.Utils.removeAllChildren(eOverlayWrapper);
	        utils.Utils.setVisible(eOverlayWrapper, false);
	    };
	    OverlayWrapperComponent.prototype.showOverlay = function (eOverlayWrapper, overlay) {
	        if (overlay) {
	            utils.Utils.removeAllChildren(eOverlayWrapper);
	            utils.Utils.setVisible(eOverlayWrapper, true);
	            eOverlayWrapper.appendChild(overlay);
	        }
	        else {
	            console.warn('ag-Grid: unknown overlay');
	            this.hideOverlay(eOverlayWrapper);
	        }
	    };
	    // wrapping in outer div, and wrapper, is needed to center the loading icon
	    // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
	    OverlayWrapperComponent.LOADING_WRAPPER_OVERLAY_TEMPLATE = '<div class="ag-overlay-panel" role="presentation">' +
	        '<div class="ag-overlay-wrapper ag-overlay-loading-wrapper" ref="loadingOverlayWrapper">[OVERLAY_TEMPLATE]</div>' +
	        '</div>';
	    OverlayWrapperComponent.NO_ROWS_WRAPPER_OVERLAY_TEMPLATE = '<div class="ag-overlay-panel" role="presentation">' +
	        '<div class="ag-overlay-wrapper ag-overlay-no-rows-wrapper" ref="noRowsOverlayWrapper">[OVERLAY_TEMPLATE]</div>' +
	        '</div>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], OverlayWrapperComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], OverlayWrapperComponent.prototype, "componentRecipes", void 0);
	    return OverlayWrapperComponent;
	}(component.Component));
	exports.OverlayWrapperComponent = OverlayWrapperComponent;
	});

	unwrapExports(overlayWrapperComponent);
	var overlayWrapperComponent_1 = overlayWrapperComponent.OverlayWrapperComponent;

	var componentRecipes = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType || (ComponentType = {}));
	var ComponentRecipes = (function () {
	    function ComponentRecipes() {
	    }
	    ComponentRecipes_1 = ComponentRecipes;
	    ComponentRecipes.prototype.newDateComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "dateComponent", {
	            api: this.gridApi,
	            columnApi: this.columnApi
	        }, "agDateInput");
	    };
	    ComponentRecipes.prototype.newHeaderComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.column.getColDef(), params, "headerComponent", {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            column: params.column,
	            colDef: params.column.getColDef()
	        }, "agColumnHeader");
	    };
	    ComponentRecipes.prototype.newHeaderGroupComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.columnGroup.getColGroupDef(), params, "headerGroupComponent", {
	            api: this.gridApi,
	            columnApi: this.columnApi
	        }, "agColumnGroupHeader");
	    };
	    ComponentRecipes.prototype.newFloatingFilterWrapperComponent = function (column, params) {
	        var _this = this;
	        var colDef = column.getColDef();
	        if (colDef.suppressFilter) {
	            return this.newEmptyFloatingFilterWrapperComponent(column);
	        }
	        var defaultFloatingFilterType;
	        if (!colDef.filter) {
	            defaultFloatingFilterType = this.gridOptionsWrapper.isEnterprise() ? 'agSetColumnFloatingFilter' : 'agTextColumnFloatingFilter';
	        }
	        else if (typeof colDef.filter === 'string' && Object.keys(ComponentRecipes_1.filterToFloatingFilterNames).indexOf(colDef.filter) > -1) {
	            defaultFloatingFilterType = ComponentRecipes_1.filterToFloatingFilterNames[colDef.filter];
	        }
	        var dynamicComponentParams = {
	            column: column,
	            colDef: colDef,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        var floatingFilter$$1 = this.componentResolver.createAgGridComponent(colDef, params, "floatingFilterComponent", dynamicComponentParams, defaultFloatingFilterType, false);
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: floatingFilter$$1,
	            suppressFilterButton: this.componentResolver.mergeParams(colDef, 'floatingFilterComponent', dynamicComponentParams, params).suppressFilterButton
	        };
	        if (!floatingFilter$$1) {
	            var filterComponent = this.getFilterComponentPrototype(colDef);
	            if (filterComponent && !filterComponent.component.prototype.getModelAsString) {
	                return this.newEmptyFloatingFilterWrapperComponent(column);
	            }
	            var rawModelFn_1 = params.currentParentModel;
	            params.currentParentModel = function () {
	                var parentPromise = _this.filterManager.getFilterComponent(column);
	                return parentPromise.resolveNow(null, function (parent) { return parent.getModelAsString ? parent.getModelAsString(rawModelFn_1()) : null; });
	            };
	            floatingFilterWrapperComponentParams.floatingFilterComp = utils.Promise.resolve(this.componentResolver.createInternalAgGridComponent(floatingFilter.ReadModelAsStringFloatingFilterComp, params));
	        }
	        return this.componentResolver.createInternalAgGridComponent(floatingFilterWrapper.FloatingFilterWrapperComp, floatingFilterWrapperComponentParams);
	    };
	    ComponentRecipes.prototype.newFullWidthGroupRowInnerCellRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "groupRowInnerRenderer", params, null, false);
	    };
	    ComponentRecipes.prototype.newCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "cellRenderer", params, null, false);
	    };
	    ComponentRecipes.prototype.newInnerCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "innerRenderer", params, null);
	    };
	    ComponentRecipes.prototype.newFullRowGroupRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptionsWrapper, params, "fullWidthCellRenderer", params, null);
	    };
	    ComponentRecipes.prototype.newOverlayWrapperComponent = function () {
	        return this.componentResolver.createInternalAgGridComponent(overlayWrapperComponent.OverlayWrapperComponent, null);
	    };
	    ComponentRecipes.prototype.newLoadingOverlayComponent = function () {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, null, "loadingOverlayComponent", {
	            api: this.gridApi,
	            columnApi: this.columnApi
	        }, "agLoadingOverlay");
	    };
	    ComponentRecipes.prototype.newNoRowsOverlayComponent = function () {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, null, "noRowsOverlayComponent", {
	            api: this.gridApi,
	            columnApi: this.columnApi
	        }, "agNoRowsOverlay");
	    };
	    ComponentRecipes.prototype.getFilterComponentPrototype = function (colDef) {
	        return this.componentResolver.getComponentToUse(colDef, "filter", {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            colDef: colDef
	        });
	    };
	    ComponentRecipes.prototype.newEmptyFloatingFilterWrapperComponent = function (column) {
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: null
	        };
	        return this.componentResolver.createInternalAgGridComponent(floatingFilterWrapper.EmptyFloatingFilterWrapperComp, floatingFilterWrapperComponentParams);
	    };
	    ComponentRecipes.filterToFloatingFilterNames = {
	        set: 'agSetColumnFloatingFilter',
	        agSetColumnFilter: 'agSetColumnFloatingFilter',
	        number: 'agNumberColumnFloatingFilter',
	        agNumberColumnFilter: 'agNumberColumnFloatingFilter',
	        date: 'agDateColumnFloatingFilter',
	        agDateColumnFilter: 'agDateColumnFloatingFilter',
	        text: 'agTextColumnFloatingFilter',
	        agTextColumnFilter: 'agTextColumnFloatingFilter'
	    };
	    __decorate([
	        context.Autowired("componentResolver"),
	        __metadata("design:type", componentResolver.ComponentResolver)
	    ], ComponentRecipes.prototype, "componentResolver", void 0);
	    __decorate([
	        context.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentRecipes.prototype, "gridOptions", void 0);
	    __decorate([
	        context.Autowired("gridApi"),
	        __metadata("design:type", gridApi.GridApi)
	    ], ComponentRecipes.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired("columnApi"),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ComponentRecipes.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ComponentRecipes.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], ComponentRecipes.prototype, "filterManager", void 0);
	    ComponentRecipes = ComponentRecipes_1 = __decorate([
	        context.Bean('componentRecipes')
	    ], ComponentRecipes);
	    return ComponentRecipes;
	    var ComponentRecipes_1;
	}());
	exports.ComponentRecipes = ComponentRecipes;
	});

	unwrapExports(componentRecipes);
	var componentRecipes_1 = componentRecipes.ComponentRecipes;

	var dateFilter = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var DateFilter = (function (_super) {
	    __extends(DateFilter, _super);
	    function DateFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DateFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            dateFrom: from,
	            dateTo: this.getDateTo(),
	            type: this.filter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter.BaseFilter.EQUALS, baseFilter.BaseFilter.GREATER_THAN, baseFilter.BaseFilter.LESS_THAN, baseFilter.BaseFilter.NOT_EQUAL, baseFilter.BaseFilter.IN_RANGE];
	    };
	    DateFilter.prototype.bodyTemplate = function (type) {
	        var fromPanelId = type == baseFilter.FilterConditionType.MAIN ? "filterDateFromPanel" : "filterDateFromConditionPanel";
	        var toPanelId = type == baseFilter.FilterConditionType.MAIN ? "filterDateToPanel" : "filterDateToConditionPanel";
	        return "<div class=\"ag-filter-body\">\n                    <div class=\"ag-filter-date-from\" id=\"" + fromPanelId + "\">\n                    </div>\n                    <div class=\"ag-filter-date-to\" id=\"" + toPanelId + "\">\n                    </div>\n                </div>";
	    };
	    DateFilter.prototype.initialiseFilterBodyUi = function (type) {
	        _super.prototype.initialiseFilterBodyUi.call(this, type);
	        this.createComponents(type);
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.setDateFrom_date(this.dateFrom, baseFilter.FilterConditionType.MAIN);
	            this.setDateTo_date(this.dateTo, baseFilter.FilterConditionType.MAIN);
	            this.setFilterType(this.filterCondition, baseFilter.FilterConditionType.MAIN);
	        }
	        else {
	            this.setDateFrom_date(this.dateFromCondition, baseFilter.FilterConditionType.CONDITION);
	            this.setDateTo_date(this.dateToCondition, baseFilter.FilterConditionType.CONDITION);
	            this.setFilterType(this.filterCondition, baseFilter.FilterConditionType.CONDITION);
	        }
	    };
	    DateFilter.prototype.createComponents = function (type) {
	        var _this = this;
	        var dateComponentParams = {
	            onDateChanged: function () { _this.onDateChanged(type); },
	            filterParams: this.filterParams
	        };
	        this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateToComponent) {
	            if (type === baseFilter.FilterConditionType.MAIN) {
	                _this.dateToComponent = dateToComponent;
	            }
	            else {
	                _this.dateToConditionComponent = dateToComponent;
	            }
	            var dateToElement = dateToComponent.getGui();
	            if (type === baseFilter.FilterConditionType.MAIN) {
	                _this.eDateToPanel.appendChild(dateToElement);
	                if (_this.dateToComponent.afterGuiAttached) {
	                    _this.dateToComponent.afterGuiAttached();
	                }
	            }
	            else {
	                _this.eDateToConditionPanel.appendChild(dateToElement);
	                if (_this.dateToConditionComponent.afterGuiAttached) {
	                    _this.dateToConditionComponent.afterGuiAttached();
	                }
	            }
	        });
	        this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateComponent) {
	            if (type === baseFilter.FilterConditionType.MAIN) {
	                _this.dateFromComponent = dateComponent;
	            }
	            else {
	                _this.dateFromConditionComponent = dateComponent;
	            }
	            var dateFromElement = dateComponent.getGui();
	            if (type === baseFilter.FilterConditionType.MAIN) {
	                _this.eDateFromPanel.appendChild(dateFromElement);
	                if (_this.dateFromComponent.afterGuiAttached) {
	                    _this.dateFromComponent.afterGuiAttached();
	                }
	            }
	            else {
	                _this.eDateFromConditionPanel.appendChild(dateFromElement);
	                if (_this.dateFromConditionComponent.afterGuiAttached) {
	                    _this.dateFromConditionComponent.afterGuiAttached();
	                }
	            }
	        });
	    };
	    DateFilter.prototype.onDateChanged = function (type) {
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.dateFrom = DateFilter.removeTimezone(this.dateFromComponent.getDate());
	            this.dateTo = DateFilter.removeTimezone(this.dateToComponent.getDate());
	        }
	        else {
	            this.dateFromCondition = DateFilter.removeTimezone(this.dateFromComponent.getDate());
	            this.dateToCondition = DateFilter.removeTimezone(this.dateToComponent.getDate());
	        }
	        this.onFilterChanged();
	    };
	    DateFilter.prototype.refreshFilterBodyUi = function (type) {
	        var panel;
	        var filterTypeValue;
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            panel = this.eDateToPanel;
	            filterTypeValue = this.filter;
	        }
	        else {
	            panel = this.eDateToConditionPanel;
	            filterTypeValue = this.filterCondition;
	        }
	        if (!panel)
	            return;
	        var visible = filterTypeValue === baseFilter.BaseFilter.IN_RANGE;
	        utils.Utils.setVisible(panel, visible);
	    };
	    DateFilter.prototype.comparator = function () {
	        return this.filterParams.comparator ? this.filterParams.comparator : this.defaultComparator.bind(this);
	    };
	    DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {
	        //The default comparator assumes that the cellValue is a date
	        var cellAsDate = cellValue;
	        if (cellAsDate < filterDate) {
	            return -1;
	        }
	        if (cellAsDate > filterDate) {
	            return 1;
	        }
	        return cellValue != null ? 0 : -1;
	    };
	    DateFilter.prototype.serialize = function (type) {
	        var dateToComponent = type === baseFilter.FilterConditionType.MAIN ? this.dateToComponent : this.dateToConditionComponent;
	        var dateFromComponent = type === baseFilter.FilterConditionType.MAIN ? this.dateFromComponent : this.dateFromConditionComponent;
	        var filterType = type === baseFilter.FilterConditionType.MAIN ? this.filter : this.filterCondition;
	        return {
	            dateTo: utils.Utils.serializeDateToYyyyMmDd(dateToComponent.getDate(), "-"),
	            dateFrom: utils.Utils.serializeDateToYyyyMmDd(dateFromComponent.getDate(), "-"),
	            type: filterType ? filterType : this.defaultFilter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.filterValues = function (type) {
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            if (!this.dateFromComponent)
	                return null;
	            return this.filter !== baseFilter.BaseFilter.IN_RANGE ?
	                this.dateFromComponent.getDate() :
	                [this.dateFromComponent.getDate(), this.dateToComponent.getDate()];
	        }
	        if (!this.dateFromConditionComponent)
	            return null;
	        return this.filterCondition !== baseFilter.BaseFilter.IN_RANGE ?
	            this.dateFromConditionComponent.getDate() :
	            [this.dateFromConditionComponent.getDate(), this.dateToConditionComponent.getDate()];
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateFrom = function () {
	        return utils.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateTo = function () {
	        return utils.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getFilterType = function () {
	        return this.filter;
	    };
	    DateFilter.prototype.setDateFrom = function (date, type) {
	        var parsedDate = utils.Utils.parseYyyyMmDdToDate(date, "-");
	        this.setDateFrom_date(parsedDate, type);
	    };
	    DateFilter.prototype.setDateFrom_date = function (parsedDate, type) {
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.dateFrom = parsedDate;
	            if (!this.dateFromComponent)
	                return;
	            this.dateFromComponent.setDate(this.dateFrom);
	        }
	        else {
	            this.dateFromCondition = parsedDate;
	            if (!this.dateFromConditionComponent)
	                return;
	            this.dateFromConditionComponent.setDate(this.dateFromCondition);
	        }
	    };
	    DateFilter.prototype.setDateTo = function (date, type) {
	        var parsedDate = utils.Utils.parseYyyyMmDdToDate(date, "-");
	        this.setDateTo_date(parsedDate, type);
	    };
	    DateFilter.prototype.setDateTo_date = function (parsedDate, type) {
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.dateTo = parsedDate;
	            if (!this.dateToComponent)
	                return;
	            this.dateToComponent.setDate(this.dateTo);
	        }
	        else {
	            this.dateToCondition = parsedDate;
	            if (!this.dateToConditionComponent)
	                return;
	            this.dateToConditionComponent.setDate(this.dateToCondition);
	        }
	    };
	    DateFilter.prototype.resetState = function () {
	        this.setDateFrom(null, baseFilter.FilterConditionType.MAIN);
	        this.setDateTo(null, baseFilter.FilterConditionType.MAIN);
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.MAIN);
	        this.setDateFrom(null, baseFilter.FilterConditionType.CONDITION);
	        this.setDateTo(null, baseFilter.FilterConditionType.CONDITION);
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.MAIN);
	    };
	    DateFilter.prototype.parse = function (model, type) {
	        this.setDateFrom(model.dateFrom, type);
	        this.setDateTo(model.dateTo, type);
	        this.setFilterType(model.type, type);
	    };
	    DateFilter.prototype.setType = function (filterType, type) {
	        this.setFilterType(filterType, type);
	    };
	    DateFilter.removeTimezone = function (from) {
	        if (!from) {
	            return null;
	        }
	        return new Date(from.getFullYear(), from.getMonth(), from.getDate());
	    };
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], DateFilter.prototype, "componentRecipes", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterDateFromPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateFromPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterDateFromConditionPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateFromConditionPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterDateToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateToPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterDateToConditionPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateToConditionPanel", void 0);
	    return DateFilter;
	}(baseFilter.ScalarBaseFilter));
	exports.DateFilter = DateFilter;
	var DefaultDateComponent = (function (_super) {
	    __extends(DefaultDateComponent, _super);
	    function DefaultDateComponent() {
	        return _super.call(this, "<input class=\"ag-filter-filter\" type=\"text\" placeholder=\"yyyy-mm-dd\">") || this;
	    }
	    DefaultDateComponent.prototype.init = function (params) {
	        this.eDateInput = this.getGui();
	        if (utils.Utils.isBrowserChrome() || params.filterParams.browserDatePicker) {
	            if (utils.Utils.isBrowserIE()) {
	                console.warn('ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker');
	            }
	            else {
	                this.eDateInput.type = 'date';
	            }
	        }
	        this.listener = params.onDateChanged;
	        this.addGuiEventListener('input', this.listener);
	    };
	    DefaultDateComponent.prototype.getDate = function () {
	        return utils.Utils.parseYyyyMmDdToDate(this.eDateInput.value, "-");
	    };
	    DefaultDateComponent.prototype.setDate = function (date) {
	        this.eDateInput.value = utils.Utils.serializeDateToYyyyMmDd(date, "-");
	    };
	    return DefaultDateComponent;
	}(component.Component));
	exports.DefaultDateComponent = DefaultDateComponent;
	});

	unwrapExports(dateFilter);
	var dateFilter_1 = dateFilter.DateFilter;
	var dateFilter_2 = dateFilter.DefaultDateComponent;

	var touchListener = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	var TouchListener = (function () {
	    function TouchListener(eElement, preventMouseClick) {
	        if (preventMouseClick === void 0) { preventMouseClick = false; }
	        var _this = this;
	        this.destroyFuncs = [];
	        this.touching = false;
	        this.eventService = new eventService.EventService();
	        this.eElement = eElement;
	        this.preventMouseClick = preventMouseClick;
	        var startListener = this.onTouchStart.bind(this);
	        var moveListener = this.onTouchMove.bind(this);
	        var endListener = this.onTouchEnd.bind(this);
	        this.eElement.addEventListener("touchstart", startListener, { passive: true });
	        this.eElement.addEventListener("touchmove", moveListener, { passive: true });
	        // we set passive=false, as we want to prevent default on this event
	        this.eElement.addEventListener("touchend", endListener, { passive: false });
	        this.destroyFuncs.push(function () {
	            _this.eElement.addEventListener("touchstart", startListener, { passive: true });
	            _this.eElement.addEventListener("touchmove", moveListener, { passive: true });
	            _this.eElement.addEventListener("touchend", endListener, { passive: false });
	        });
	    }
	    TouchListener.prototype.getActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    TouchListener.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    TouchListener.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    TouchListener.prototype.onTouchStart = function (touchEvent) {
	        var _this = this;
	        // only looking at one touch point at any time
	        if (this.touching) {
	            return;
	        }
	        this.touchStart = touchEvent.touches[0];
	        this.touching = true;
	        this.moved = false;
	        var touchStartCopy = this.touchStart;
	        setTimeout(function () {
	            var touchesMatch = _this.touchStart === touchStartCopy;
	            if (_this.touching && touchesMatch && !_this.moved) {
	                _this.moved = true;
	                var event_1 = {
	                    type: TouchListener.EVENT_LONG_TAP,
	                    touchStart: _this.touchStart,
	                    touchEvent: touchEvent
	                };
	                _this.eventService.dispatchEvent(event_1);
	            }
	        }, 500);
	    };
	    TouchListener.prototype.onTouchMove = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        var touch = this.getActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        var eventIsFarAway = !utils.Utils.areEventsNear(touch, this.touchStart, 4);
	        if (eventIsFarAway) {
	            this.moved = true;
	        }
	    };
	    TouchListener.prototype.onTouchEnd = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        if (!this.moved) {
	            var event_2 = {
	                type: TouchListener.EVENT_TAP,
	                touchStart: this.touchStart
	            };
	            this.eventService.dispatchEvent(event_2);
	            this.checkForDoubleTap();
	            // stops the tap from also been processed as a mouse click
	            if (this.preventMouseClick) {
	                touchEvent.preventDefault();
	            }
	        }
	        this.touching = false;
	    };
	    TouchListener.prototype.checkForDoubleTap = function () {
	        var now = new Date().getTime();
	        if (this.lastTapTime > 0) {
	            // if previous tap, see if duration is short enough to be considered double tap
	            var interval = now - this.lastTapTime;
	            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {
	                // dispatch double tap event
	                var event_3 = {
	                    type: TouchListener.EVENT_DOUBLE_TAP,
	                    touchStart: this.touchStart
	                };
	                this.eventService.dispatchEvent(event_3);
	                // this stops a tripple tap ending up as two double taps
	                this.lastTapTime = null;
	            }
	            else {
	                this.lastTapTime = now;
	            }
	        }
	        else {
	            this.lastTapTime = now;
	        }
	    };
	    TouchListener.prototype.destroy = function () {
	        this.destroyFuncs.forEach(function (func) { return func(); });
	    };
	    TouchListener.EVENT_TAP = "tap";
	    TouchListener.EVENT_DOUBLE_TAP = "doubleTap";
	    TouchListener.EVENT_LONG_TAP = "longTap";
	    TouchListener.DOUBLE_TAP_MILLIS = 500;
	    return TouchListener;
	}());
	exports.TouchListener = TouchListener;
	});

	unwrapExports(touchListener);
	var touchListener_1 = touchListener.TouchListener;

	var headerComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var HeaderComp = (function (_super) {
	    __extends(HeaderComp, _super);
	    function HeaderComp() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.lastMovingChanged = 0;
	        return _this;
	    }
	    HeaderComp.prototype.init = function (params) {
	        var template = utils.Utils.firstExistingValue(params.template, HeaderComp.TEMPLATE);
	        this.setTemplate(template);
	        this.params = params;
	        this.setupTap();
	        this.setupIcons(params.column);
	        this.setupMenu();
	        this.setupSort();
	        this.setupFilterIcon();
	        this.setupText(params.displayName);
	    };
	    HeaderComp.prototype.setupText = function (displayName) {
	        if (this.eText) {
	            this.eText.innerHTML = displayName;
	        }
	    };
	    HeaderComp.prototype.setupIcons = function (column$$1) {
	        this.addInIcon('sortAscending', this.eSortAsc, column$$1);
	        this.addInIcon('sortDescending', this.eSortDesc, column$$1);
	        this.addInIcon('sortUnSort', this.eSortNone, column$$1);
	        this.addInIcon('menu', this.eMenu, column$$1);
	        this.addInIcon('filter', this.eFilter, column$$1);
	    };
	    HeaderComp.prototype.addInIcon = function (iconName, eParent, column$$1) {
	        if (eParent == null)
	            return;
	        var eIcon = utils.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, column$$1);
	        eParent.appendChild(eIcon);
	    };
	    HeaderComp.prototype.setupTap = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isSuppressTouch()) {
	            return;
	        }
	        var touchListener$$1 = new touchListener.TouchListener(this.getGui());
	        if (this.params.enableMenu) {
	            var longTapListener = function (event) {
	                _this.gridOptionsWrapper.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
	            };
	            this.addDestroyableEventListener(touchListener$$1, touchListener.TouchListener.EVENT_LONG_TAP, longTapListener);
	        }
	        if (this.params.enableSorting) {
	            var tapListener = function () {
	                _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
	            };
	            this.addDestroyableEventListener(touchListener$$1, touchListener.TouchListener.EVENT_TAP, tapListener);
	        }
	        this.addDestroyFunc(function () { return touchListener$$1.destroy(); });
	    };
	    HeaderComp.prototype.setupMenu = function () {
	        var _this = this;
	        // if no menu provided in template, do nothing
	        if (!this.eMenu) {
	            return;
	        }
	        // we don't show the menu if on an ipad, as the user cannot have a mouse on the ipad, so
	        // makes no sense. instead the user must long-tap if on an ipad.
	        var dontShowMenu = !this.params.enableMenu || utils.Utils.isUserAgentIPad();
	        if (dontShowMenu) {
	            utils.Utils.removeFromParent(this.eMenu);
	            return;
	        }
	        this.eMenu.addEventListener('click', function () { return _this.showMenu(_this.eMenu); });
	        if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	            this.eMenu.style.opacity = '0';
	            this.addGuiEventListener('mouseover', function () {
	                _this.eMenu.style.opacity = '1';
	            });
	            this.addGuiEventListener('mouseout', function () {
	                _this.eMenu.style.opacity = '0';
	            });
	        }
	        var style = this.eMenu.style;
	        style['transition'] = 'opacity 0.2s, border 0.2s';
	        style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
	    };
	    HeaderComp.prototype.showMenu = function (eventSource) {
	        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
	    };
	    HeaderComp.prototype.removeSortIcons = function () {
	        utils.Utils.removeFromParent(this.eSortAsc);
	        utils.Utils.removeFromParent(this.eSortDesc);
	        utils.Utils.removeFromParent(this.eSortNone);
	        utils.Utils.removeFromParent(this.eSortOrder);
	    };
	    HeaderComp.prototype.setupSort = function () {
	        var _this = this;
	        var enableSorting = this.params.enableSorting;
	        if (!enableSorting) {
	            this.removeSortIcons();
	            return;
	        }
	        var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
	        // keep track of last time the moving changed flag was set
	        this.addDestroyableEventListener(this.params.column, column.Column.EVENT_MOVING_CHANGED, function () {
	            _this.lastMovingChanged = new Date().getTime();
	        });
	        // add the event on the header, so when clicked, we do sorting
	        if (this.eLabel) {
	            this.addDestroyableEventListener(this.eLabel, 'click', function (event) {
	                // sometimes when moving a column via dragging, this was also firing a clicked event.
	                // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076
	                // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)
	                var moving = _this.params.column.isMoving();
	                var nowTime = new Date().getTime();
	                // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn
	                var movedRecently = (nowTime - _this.lastMovingChanged) < 50;
	                var columnMoving = moving || movedRecently;
	                if (!columnMoving) {
	                    var multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;
	                    _this.params.progressSort(multiSort);
	                }
	                else {
	                    console.log("kipping sort cos of moving " + _this.lastMovingChanged);
	                }
	            });
	        }
	        this.addDestroyableEventListener(this.params.column, column.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.onSortChanged();
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
	        this.setMultiSortOrder();
	    };
	    HeaderComp.prototype.onSortChanged = function () {
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-asc', this.params.column.isSortAscending());
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-desc', this.params.column.isSortDescending());
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-none', this.params.column.isSortNone());
	        if (this.eSortAsc) {
	            utils.Utils.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.params.column.isSortAscending());
	        }
	        if (this.eSortDesc) {
	            utils.Utils.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.params.column.isSortDescending());
	        }
	        if (this.eSortNone) {
	            var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
	            utils.Utils.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());
	        }
	    };
	    // we listen here for global sort events, NOT column sort events, as we want to do this
	    // when sorting has been set on all column (if we listened just for our col (where we
	    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
	    HeaderComp.prototype.setMultiSortOrder = function () {
	        if (!this.eSortOrder) {
	            return;
	        }
	        var col = this.params.column;
	        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
	        var indexThisCol = allColumnsWithSorting.indexOf(col);
	        var moreThanOneColSorting = allColumnsWithSorting.length > 1;
	        var showIndex = col.isSorting() && moreThanOneColSorting;
	        utils.Utils.setVisible(this.eSortOrder, showIndex);
	        if (indexThisCol >= 0) {
	            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
	        }
	        else {
	            this.eSortOrder.innerHTML = '';
	        }
	    };
	    HeaderComp.prototype.setupFilterIcon = function () {
	        if (!this.eFilter) {
	            return;
	        }
	        this.addDestroyableEventListener(this.params.column, column.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	    };
	    HeaderComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.params.column.isFilterActive();
	        utils.Utils.addOrRemoveCssClass(this.eFilter, 'ag-hidden', !filterPresent);
	    };
	    HeaderComp.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">' +
	        '  <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>' +
	        '  <div ref="eLabel" class="ag-header-cell-label" role="presentation">' +
	        '    <span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
	        '    <span ref="eFilter" class="ag-header-icon ag-filter-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortOrder" class="ag-header-icon ag-sort-order" aria-hidden="true"></span>' +
	        '    <span ref="eSortAsc" class="ag-header-icon ag-sort-ascending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortDesc" class="ag-header-icon ag-sort-descending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortNone" class="ag-header-icon ag-sort-none-icon" aria-hidden="true"></span>' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], HeaderComp.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeaderComp.prototype, "eventService", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eFilter'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eFilter", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eSortAsc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortAsc", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eSortDesc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortDesc", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eSortNone'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortNone", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eSortOrder'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortOrder", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eMenu'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eMenu", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLabel'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eLabel", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eText'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eText", void 0);
	    return HeaderComp;
	}(component.Component));
	exports.HeaderComp = HeaderComp;
	});

	unwrapExports(headerComp);
	var headerComp_1 = headerComp.HeaderComp;

	var headerGroupComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var HeaderGroupComp = (function (_super) {
	    __extends(HeaderGroupComp, _super);
	    function HeaderGroupComp() {
	        return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
	    }
	    HeaderGroupComp.prototype.init = function (params) {
	        this.params = params;
	        this.setupLabel();
	        this.addGroupExpandIcon();
	        this.setupExpandIcons();
	    };
	    HeaderGroupComp.prototype.setupExpandIcons = function () {
	        var _this = this;
	        this.addInIcon("columnGroupOpened", "agOpened");
	        this.addInIcon("columnGroupClosed", "agClosed");
	        var expandAction = function (event) {
	            if (utils.Utils.isStopPropagationForAgGrid(event)) {
	                return;
	            }
	            var newExpandedValue = !_this.params.columnGroup.isExpanded();
	            _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
	        };
	        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
	        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
	        var stopPropagationAction = function (event) {
	            utils.Utils.stopPropagationForAgGrid(event);
	        };
	        // adding stopPropagation to the double click for the icons prevents double click action happening
	        // when the icons are clicked. if the icons are double clicked, then the groups should open and
	        // then close again straight away. if we also listened to double click, then the group would open,
	        // close, then open, which is not what we want. double click should only action if the user double
	        // clicks outside of the icons.
	        this.addDestroyableEventListener(this.eCloseIcon, "dblclick", stopPropagationAction);
	        this.addDestroyableEventListener(this.eOpenIcon, "dblclick", stopPropagationAction);
	        this.addDestroyableEventListener(this.getGui(), "dblclick", expandAction);
	        this.updateIconVisibility();
	        var originalColumnGroup$$1 = this.params.columnGroup.getOriginalColumnGroup();
	        this.addDestroyableEventListener(originalColumnGroup$$1, originalColumnGroup.OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
	        this.addDestroyableEventListener(originalColumnGroup$$1, originalColumnGroup.OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
	    };
	    HeaderGroupComp.prototype.addTouchAndClickListeners = function (eElement, action) {
	        var touchListener$$1 = new touchListener.TouchListener(this.eCloseIcon);
	        this.addDestroyableEventListener(touchListener$$1, touchListener.TouchListener.EVENT_TAP, action);
	        this.addDestroyFunc(function () { return touchListener$$1.destroy(); });
	        this.addDestroyableEventListener(eElement, "click", action);
	    };
	    HeaderGroupComp.prototype.updateIconVisibility = function () {
	        var columnGroup = this.params.columnGroup;
	        if (columnGroup.isExpandable()) {
	            var expanded = this.params.columnGroup.isExpanded();
	            utils.Utils.setVisible(this.eOpenIcon, !expanded);
	            utils.Utils.setVisible(this.eCloseIcon, expanded);
	        }
	        else {
	            utils.Utils.setVisible(this.eOpenIcon, false);
	            utils.Utils.setVisible(this.eCloseIcon, false);
	        }
	    };
	    HeaderGroupComp.prototype.addInIcon = function (iconName, refName) {
	        var eIcon = utils.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, null);
	        this.getRefElement(refName).appendChild(eIcon);
	    };
	    HeaderGroupComp.prototype.addGroupExpandIcon = function () {
	        if (!this.params.columnGroup.isExpandable()) {
	            utils.Utils.setVisible(this.eOpenIcon, false);
	            utils.Utils.setVisible(this.eCloseIcon, false);
	            return;
	        }
	    };
	    HeaderGroupComp.prototype.setupLabel = function () {
	        // no renderer, default text render
	        if (this.params.displayName && this.params.displayName !== "") {
	            var eInnerText = this.getRefElement("agLabel");
	            eInnerText.innerHTML = this.params.displayName;
	        }
	    };
	    HeaderGroupComp.TEMPLATE = "<div class=\"ag-header-group-cell-label\" ref=\"agContainer\">" +
	        "<span ref=\"agLabel\" class=\"ag-header-group-text\"></span>" +
	        "<span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>" +
	        "<span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>" +
	        "</div>";
	    __decorate([
	        context.Autowired("columnController"),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderGroupComp.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderGroupComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations.RefSelector("agOpened"),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eOpenIcon", void 0);
	    __decorate([
	        componentAnnotations.RefSelector("agClosed"),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eCloseIcon", void 0);
	    return HeaderGroupComp;
	}(component.Component));
	exports.HeaderGroupComp = HeaderGroupComp;
	});

	unwrapExports(headerGroupComp);
	var headerGroupComp_1 = headerGroupComp.HeaderGroupComp;

	var selectCellEditor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var SelectCellEditor = (function (_super) {
	    __extends(SelectCellEditor, _super);
	    function SelectCellEditor() {
	        var _this = _super.call(this, '<div class="ag-cell-edit-input"><select class="ag-cell-edit-input"/></div>') || this;
	        _this.eSelect = _this.getGui().querySelector('select');
	        return _this;
	    }
	    SelectCellEditor.prototype.init = function (params) {
	        var _this = this;
	        this.focusAfterAttached = params.cellStartedEdit;
	        if (utils.Utils.missing(params.values)) {
	            console.log('ag-Grid: no values found for select cellEditor');
	            return;
	        }
	        params.values.forEach(function (value) {
	            var option = document.createElement('option');
	            option.value = value;
	            var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            option.text = valueFormattedExits ? valueFormatted : value;
	            if (params.value === value) {
	                option.selected = true;
	            }
	            _this.eSelect.appendChild(option);
	        });
	        // we don't want to add this if full row editing, otherwise selecting will stop the
	        // full row editing.
	        if (!this.gridOptionsWrapper.isFullRowEdit()) {
	            this.addDestroyableEventListener(this.eSelect, 'change', function () { return params.stopEditing(); });
	        }
	        this.addDestroyableEventListener(this.eSelect, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants.Constants.KEY_UP || event.keyCode === constants.Constants.KEY_DOWN;
	            if (isNavigationKey) {
	                event.stopPropagation();
	            }
	        });
	        this.addDestroyableEventListener(this.eSelect, 'mousedown', function (event) {
	            event.stopPropagation();
	        });
	    };
	    SelectCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.eSelect.focus();
	        }
	    };
	    SelectCellEditor.prototype.focusIn = function () {
	        this.eSelect.focus();
	    };
	    SelectCellEditor.prototype.getValue = function () {
	        return this.eSelect.value;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SelectCellEditor.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService.ValueFormatterService)
	    ], SelectCellEditor.prototype, "valueFormatterService", void 0);
	    return SelectCellEditor;
	}(component.Component));
	exports.SelectCellEditor = SelectCellEditor;
	});

	unwrapExports(selectCellEditor);
	var selectCellEditor_1 = selectCellEditor.SelectCellEditor;

	var popupTextCellEditor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var PopupTextCellEditor = (function (_super) {
	    __extends(PopupTextCellEditor, _super);
	    function PopupTextCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupTextCellEditor;
	}(textCellEditor.TextCellEditor));
	exports.PopupTextCellEditor = PopupTextCellEditor;
	});

	unwrapExports(popupTextCellEditor);
	var popupTextCellEditor_1 = popupTextCellEditor.PopupTextCellEditor;

	var popupSelectCellEditor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var PopupSelectCellEditor = (function (_super) {
	    __extends(PopupSelectCellEditor, _super);
	    function PopupSelectCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupSelectCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupSelectCellEditor;
	}(selectCellEditor.SelectCellEditor));
	exports.PopupSelectCellEditor = PopupSelectCellEditor;
	});

	unwrapExports(popupSelectCellEditor);
	var popupSelectCellEditor_1 = popupSelectCellEditor.PopupSelectCellEditor;

	var largeTextCellEditor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var LargeTextCellEditor = (function (_super) {
	    __extends(LargeTextCellEditor, _super);
	    function LargeTextCellEditor() {
	        return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
	    }
	    LargeTextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        this.focusAfterAttached = params.cellStartedEdit;
	        this.textarea = document.createElement("textarea");
	        this.textarea.maxLength = params.maxLength ? params.maxLength : "200";
	        this.textarea.cols = params.cols ? params.cols : "60";
	        this.textarea.rows = params.rows ? params.rows : "10";
	        if (utils.Utils.exists(params.value)) {
	            this.textarea.value = params.value.toString();
	        }
	        this.getGui().querySelector('.ag-large-textarea').appendChild(this.textarea);
	        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
	    };
	    LargeTextCellEditor.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        if (key == constants.Constants.KEY_LEFT ||
	            key == constants.Constants.KEY_UP ||
	            key == constants.Constants.KEY_RIGHT ||
	            key == constants.Constants.KEY_DOWN ||
	            (event.shiftKey && key == constants.Constants.KEY_ENTER)) {
	            event.stopPropagation();
	        }
	    };
	    LargeTextCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.textarea.focus();
	        }
	    };
	    LargeTextCellEditor.prototype.getValue = function () {
	        return this.textarea.value;
	    };
	    LargeTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    LargeTextCellEditor.TEMPLATE = 
	    // tab index is needed so we can focus, which is needed for keyboard events
	    '<div class="ag-large-text" tabindex="0">' +
	        '<div class="ag-large-textarea"></div>' +
	        '</div>';
	    return LargeTextCellEditor;
	}(component.Component));
	exports.LargeTextCellEditor = LargeTextCellEditor;
	});

	unwrapExports(largeTextCellEditor);
	var largeTextCellEditor_1 = largeTextCellEditor.LargeTextCellEditor;

	var textFilter = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var TextFilter = (function (_super) {
	    __extends(TextFilter, _super);
	    function TextFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFilter.prototype.getDefaultType = function () {
	        return baseFilter.BaseFilter.CONTAINS;
	    };
	    TextFilter.prototype.customInit = function () {
	        this.comparator = this.filterParams.textCustomComparator ? this.filterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;
	        this.formatter =
	            this.filterParams.textFormatter ? this.filterParams.textFormatter :
	                this.filterParams.caseSensitive == true ? TextFilter.DEFAULT_FORMATTER :
	                    TextFilter.DEFAULT_LOWERCASE_FORMATTER;
	        _super.prototype.customInit.call(this);
	    };
	    TextFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: from,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter.BaseFilter.EQUALS, baseFilter.BaseFilter.NOT_EQUAL, baseFilter.BaseFilter.STARTS_WITH, baseFilter.BaseFilter.ENDS_WITH,
	            baseFilter.BaseFilter.CONTAINS, baseFilter.BaseFilter.NOT_CONTAINS];
	    };
	    TextFilter.prototype.bodyTemplate = function (type) {
	        var translate = this.translate.bind(this);
	        var fieldId = type == baseFilter.FilterConditionType.MAIN ? "filterText" : "filterConditionText";
	        return "<div class=\"ag-filter-body\">\n            <input class=\"ag-filter-filter\" id=" + fieldId + " type=\"text\" placeholder=\"" + translate('filterOoo', 'Filter...') + "\"/>\n        </div>";
	    };
	    TextFilter.prototype.initialiseFilterBodyUi = function (type) {
	        _super.prototype.initialiseFilterBodyUi.call(this, type);
	        this.addFilterChangedListener(type);
	        this.setFilter(this.filterConditionText, baseFilter.FilterConditionType.CONDITION);
	        this.setFilterType(this.filterCondition, baseFilter.FilterConditionType.CONDITION);
	    };
	    TextFilter.prototype.addFilterChangedListener = function (type) {
	        var _this = this;
	        var eElement = type === baseFilter.FilterConditionType.MAIN ? this.eFilterTextField : this.eFilterConditionTextField;
	        var debounceMs = this.getDebounceMs(this.filterParams);
	        var toDebounce = utils.Utils.debounce(function () { return _this.onFilterTextFieldChanged(type); }, debounceMs);
	        this.addDestroyableEventListener(eElement, 'input', toDebounce);
	    };
	    TextFilter.prototype.refreshFilterBodyUi = function (type) {
	        if (this.eFilterConditionTextField) {
	            this.addFilterChangedListener(baseFilter.FilterConditionType.CONDITION);
	        }
	    };
	    TextFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    TextFilter.prototype.filterValues = function (type) {
	        return type === baseFilter.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
	    };
	    TextFilter.prototype.individualFilterPasses = function (params, type) {
	        var filterText = type == baseFilter.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
	        var filter = type == baseFilter.FilterConditionType.MAIN ? this.filter : this.filterCondition;
	        if (!filterText) {
	            return type === baseFilter.FilterConditionType.MAIN ? true : this.conditionValue === 'AND';
	        }
	        else {
	            return this.checkIndividualFilter(params, filter, filterText);
	        }
	    };
	    TextFilter.prototype.checkIndividualFilter = function (params, filterType, filterText) {
	        var value = this.filterParams.valueGetter(params.node);
	        if (!value) {
	            return filterType === baseFilter.BaseFilter.NOT_EQUAL || filterType === baseFilter.BaseFilter.NOT_CONTAINS;
	        }
	        var valueFormatted = this.formatter(value);
	        return this.comparator(filterType, valueFormatted, filterText);
	    };
	    TextFilter.prototype.onFilterTextFieldChanged = function (type) {
	        var value = type === baseFilter.FilterConditionType.MAIN ? this.eFilterTextField.value : this.eFilterConditionTextField.value;
	        var current = type === baseFilter.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
	        var filterText = utils.Utils.makeNull(value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        if (current !== filterText) {
	            var newLowerCase = filterText && this.filterParams.caseSensitive != true ? filterText.toLowerCase() :
	                filterText;
	            var previousLowerCase = current && this.filterParams.caseSensitive != true ? current.toLowerCase() :
	                current;
	            if (type === baseFilter.FilterConditionType.MAIN) {
	                this.filterText = this.formatter(filterText);
	            }
	            else {
	                this.filterConditionText = this.formatter(filterText);
	            }
	            if (previousLowerCase !== newLowerCase) {
	                this.onFilterChanged();
	            }
	        }
	    };
	    TextFilter.prototype.setFilter = function (filter, type) {
	        filter = utils.Utils.makeNull(filter);
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            if (filter) {
	                this.filterText = this.formatter(filter);
	                if (!this.eFilterTextField)
	                    return;
	                this.eFilterTextField.value = filter;
	            }
	            else {
	                this.filterText = null;
	                if (!this.eFilterTextField)
	                    return;
	                this.eFilterTextField.value = null;
	            }
	        }
	        else {
	            if (filter) {
	                this.filterConditionText = this.formatter(filter);
	                if (!this.eFilterConditionTextField)
	                    return;
	                this.eFilterConditionTextField.value = filter;
	            }
	            else {
	                this.filterConditionText = null;
	                if (!this.eFilterConditionTextField)
	                    return;
	                this.eFilterConditionTextField.value = null;
	            }
	        }
	    };
	    TextFilter.prototype.getFilter = function () {
	        return this.filterText;
	    };
	    TextFilter.prototype.resetState = function () {
	        this.setFilter(null, baseFilter.FilterConditionType.MAIN);
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.MAIN);
	        this.setFilter(null, baseFilter.FilterConditionType.CONDITION);
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.CONDITION);
	    };
	    TextFilter.prototype.serialize = function (type) {
	        var filter = type === baseFilter.FilterConditionType.MAIN ? this.filter : this.filterCondition;
	        var filterText = type === baseFilter.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
	        return {
	            type: filter ? filter : this.defaultFilter,
	            filter: filterText,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.parse = function (model, type) {
	        this.setFilterType(model.type, type);
	        this.setFilter(model.filter, type);
	    };
	    TextFilter.prototype.setType = function (filterType, type) {
	        this.setFilterType(filterType, type);
	    };
	    TextFilter.DEFAULT_FORMATTER = function (from) {
	        return from;
	    };
	    TextFilter.DEFAULT_LOWERCASE_FORMATTER = function (from) {
	        if (from == null) {
	            return null;
	        }
	        return from.toString().toLowerCase();
	    };
	    TextFilter.DEFAULT_COMPARATOR = function (filter, value, filterText) {
	        switch (filter) {
	            case TextFilter.CONTAINS:
	                return value.indexOf(filterText) >= 0;
	            case TextFilter.NOT_CONTAINS:
	                return value.indexOf(filterText) === -1;
	            case TextFilter.EQUALS:
	                return value === filterText;
	            case TextFilter.NOT_EQUAL:
	                return value != filterText;
	            case TextFilter.STARTS_WITH:
	                return value.indexOf(filterText) === 0;
	            case TextFilter.ENDS_WITH:
	                var index = value.lastIndexOf(filterText);
	                return index >= 0 && index === (value.length - filterText.length);
	            default:
	                // should never happen
	                console.warn('invalid filter type ' + filter);
	                return false;
	        }
	    };
	    __decorate([
	        componentAnnotations.QuerySelector('#filterText'),
	        __metadata("design:type", HTMLInputElement)
	    ], TextFilter.prototype, "eFilterTextField", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterConditionText'),
	        __metadata("design:type", HTMLInputElement)
	    ], TextFilter.prototype, "eFilterConditionTextField", void 0);
	    return TextFilter;
	}(baseFilter.ComparableBaseFilter));
	exports.TextFilter = TextFilter;
	});

	unwrapExports(textFilter);
	var textFilter_1 = textFilter.TextFilter;

	var numberFilter = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var NumberFilter = (function (_super) {
	    __extends(NumberFilter, _super);
	    function NumberFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: Number(from),
	            filterTo: this.filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter.BaseFilter.EQUALS, baseFilter.BaseFilter.NOT_EQUAL, baseFilter.BaseFilter.LESS_THAN, baseFilter.BaseFilter.LESS_THAN_OR_EQUAL,
	            baseFilter.BaseFilter.GREATER_THAN, baseFilter.BaseFilter.GREATER_THAN_OR_EQUAL, baseFilter.BaseFilter.IN_RANGE];
	    };
	    NumberFilter.prototype.bodyTemplate = function (type) {
	        var translate = this.translate.bind(this);
	        var fieldId = type == baseFilter.FilterConditionType.MAIN ? "filterText" : "filterConditionText";
	        var filterNumberToPanelId = type == baseFilter.FilterConditionType.MAIN ? "filterNumberToPanel" : "filterNumberToPanelCondition";
	        var fieldToId = type == baseFilter.FilterConditionType.MAIN ? "filterToText" : "filterToConditionText";
	        return "<div class=\"ag-filter-body\">\n            <div>\n                <input class=\"ag-filter-filter\" id=\"" + fieldId + "\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n             <div class=\"ag-filter-number-to\" id=\"" + filterNumberToPanelId + "\">\n                <input class=\"ag-filter-filter\" id=\"" + fieldToId + "\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n        </div>";
	    };
	    NumberFilter.prototype.initialiseFilterBodyUi = function (type) {
	        _super.prototype.initialiseFilterBodyUi.call(this, type);
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.eFilterTextField = this.queryForHtmlInputElement("#filterText");
	            this.addFilterChangedEventListeners(type, this.eFilterTextField, this.eFilterToTextField);
	        }
	        else {
	            this.eFilterTextConditionField = this.queryForHtmlInputElement("#filterConditionText");
	            this.addFilterChangedEventListeners(type, this.eFilterTextConditionField, this.eFilterToConditionText);
	            this.setFilter(this.filterNumberCondition, baseFilter.FilterConditionType.CONDITION);
	            this.setFilterTo(this.filterNumberConditionTo, baseFilter.FilterConditionType.CONDITION);
	            this.setFilterType(this.filterCondition, baseFilter.FilterConditionType.CONDITION);
	        }
	    };
	    NumberFilter.prototype.addFilterChangedEventListeners = function (type, filterElement, filterToElement) {
	        var _this = this;
	        var debounceMs = this.getDebounceMs(this.filterParams);
	        var toDebounce = utils.Utils.debounce(function () { return _this.onTextFieldsChanged(type, filterElement, filterToElement); }, debounceMs);
	        this.addDestroyableEventListener(filterElement, "input", toDebounce);
	        this.addDestroyableEventListener(filterToElement, "input", toDebounce);
	    };
	    NumberFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    NumberFilter.prototype.comparator = function () {
	        return function (left, right) {
	            if (left === right) {
	                return 0;
	            }
	            if (left < right) {
	                return 1;
	            }
	            if (left > right) {
	                return -1;
	            }
	        };
	    };
	    NumberFilter.prototype.onTextFieldsChanged = function (type, filterElement, filterToElement) {
	        var newFilter = this.stringToFloat(filterElement.value);
	        var newFilterTo = this.stringToFloat(filterToElement.value);
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            if (this.filterNumber !== newFilter || this.filterNumberTo !== newFilterTo) {
	                this.filterNumber = newFilter;
	                this.filterNumberTo = newFilterTo;
	                this.onFilterChanged();
	            }
	        }
	        else {
	            if (this.filterNumberCondition !== newFilter || this.filterNumberConditionTo !== newFilterTo) {
	                this.filterNumberCondition = newFilter;
	                this.filterNumberConditionTo = newFilterTo;
	                this.onFilterChanged();
	            }
	        }
	    };
	    NumberFilter.prototype.filterValues = function (type) {
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            return this.filter !== baseFilter.BaseFilter.IN_RANGE ?
	                this.asNumber(this.filterNumber) :
	                [this.asNumber(this.filterNumber), this.asNumber(this.filterNumberTo)];
	        }
	        return this.filterCondition !== baseFilter.BaseFilter.IN_RANGE ?
	            this.asNumber(this.filterNumberCondition) :
	            [this.asNumber(this.filterNumberCondition), this.asNumber(this.filterNumberConditionTo)];
	    };
	    NumberFilter.prototype.asNumber = function (value) {
	        return utils.Utils.isNumeric(value) ? value : null;
	    };
	    NumberFilter.prototype.stringToFloat = function (value) {
	        var filterText = utils.Utils.makeNull(value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        var newFilter;
	        if (filterText !== null && filterText !== undefined) {
	            newFilter = parseFloat(filterText);
	        }
	        else {
	            newFilter = null;
	        }
	        return newFilter;
	    };
	    NumberFilter.prototype.setFilter = function (filter, type) {
	        filter = utils.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.filterNumber = filter;
	            if (!this.eFilterTextField)
	                return;
	            this.eFilterTextField.value = filter;
	        }
	        else {
	            this.filterNumberCondition = filter;
	            if (!this.eFilterTextConditionField)
	                return;
	            this.eFilterTextConditionField.value = filter;
	        }
	    };
	    NumberFilter.prototype.setFilterTo = function (filter, type) {
	        filter = utils.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        if (type === baseFilter.FilterConditionType.MAIN) {
	            this.filterNumberTo = filter;
	            if (!this.eFilterToTextField)
	                return;
	            this.eFilterToTextField.value = filter;
	        }
	        else {
	            this.filterNumberConditionTo = filter;
	            if (!this.eFilterToConditionText)
	                return;
	            this.eFilterToConditionText.value = filter;
	        }
	    };
	    NumberFilter.prototype.getFilter = function (type) {
	        return type === baseFilter.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;
	    };
	    NumberFilter.prototype.serialize = function (type) {
	        var filter = type === baseFilter.FilterConditionType.MAIN ? this.filter : this.filterCondition;
	        var filterNumber = type === baseFilter.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;
	        var filterNumberTo = type === baseFilter.FilterConditionType.MAIN ? this.filterNumberTo : this.filterNumberConditionTo;
	        return {
	            type: filter ? filter : this.defaultFilter,
	            filter: filterNumber,
	            filterTo: filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.parse = function (model, type) {
	        this.setFilterType(model.type, type);
	        this.setFilter(model.filter, type);
	        this.setFilterTo(model.filterTo, type);
	    };
	    NumberFilter.prototype.refreshFilterBodyUi = function (type) {
	        var filterType = type === baseFilter.FilterConditionType.MAIN ? this.filter : this.filterCondition;
	        var panel = type === baseFilter.FilterConditionType.MAIN ? this.eNumberToPanel : this.eNumberToConditionPanel;
	        if (!panel)
	            return;
	        var visible = filterType === NumberFilter.IN_RANGE;
	        utils.Utils.setVisible(panel, visible);
	    };
	    NumberFilter.prototype.resetState = function () {
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.MAIN);
	        this.setFilter(null, baseFilter.FilterConditionType.MAIN);
	        this.setFilterTo(null, baseFilter.FilterConditionType.MAIN);
	        this.setFilterType(this.defaultFilter, baseFilter.FilterConditionType.CONDITION);
	        this.setFilter(null, baseFilter.FilterConditionType.CONDITION);
	        this.setFilterTo(null, baseFilter.FilterConditionType.CONDITION);
	    };
	    NumberFilter.prototype.setType = function (filterType, type) {
	        this.setFilterType(filterType, type);
	    };
	    NumberFilter.LESS_THAN = 'lessThan'; //3;
	    __decorate([
	        componentAnnotations.QuerySelector('#filterNumberToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], NumberFilter.prototype, "eNumberToPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterNumberToPanelCondition'),
	        __metadata("design:type", HTMLElement)
	    ], NumberFilter.prototype, "eNumberToConditionPanel", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterToText'),
	        __metadata("design:type", HTMLInputElement)
	    ], NumberFilter.prototype, "eFilterToTextField", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('#filterToConditionText'),
	        __metadata("design:type", HTMLInputElement)
	    ], NumberFilter.prototype, "eFilterToConditionText", void 0);
	    return NumberFilter;
	}(baseFilter.ScalarBaseFilter));
	exports.NumberFilter = NumberFilter;
	});

	unwrapExports(numberFilter);
	var numberFilter_1 = numberFilter.NumberFilter;

	var loadingOverlayComponent = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var LoadingOverlayComponent = (function (_super) {
	    __extends(LoadingOverlayComponent, _super);
	    function LoadingOverlayComponent() {
	        return _super.call(this) || this;
	    }
	    LoadingOverlayComponent.prototype.init = function (params) {
	        var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ?
	            this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var localisedTemplate = template.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
	        this.setTemplate(localisedTemplate);
	    };
	    LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], LoadingOverlayComponent.prototype, "gridOptionsWrapper", void 0);
	    return LoadingOverlayComponent;
	}(component.Component));
	exports.LoadingOverlayComponent = LoadingOverlayComponent;
	});

	unwrapExports(loadingOverlayComponent);
	var loadingOverlayComponent_1 = loadingOverlayComponent.LoadingOverlayComponent;

	var noRowsOverlayComponent = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var NoRowsOverlayComponent = (function (_super) {
	    __extends(NoRowsOverlayComponent, _super);
	    function NoRowsOverlayComponent() {
	        return _super.call(this) || this;
	    }
	    NoRowsOverlayComponent.prototype.init = function (params) {
	        var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ?
	            this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var localisedTemplate = template.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
	        this.setTemplate(localisedTemplate);
	    };
	    NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], NoRowsOverlayComponent.prototype, "gridOptionsWrapper", void 0);
	    return NoRowsOverlayComponent;
	}(component.Component));
	exports.NoRowsOverlayComponent = NoRowsOverlayComponent;
	});

	unwrapExports(noRowsOverlayComponent);
	var noRowsOverlayComponent_1 = noRowsOverlayComponent.NoRowsOverlayComponent;

	var componentProvider = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




















	var RegisteredComponentSource;
	(function (RegisteredComponentSource) {
	    RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
	})(RegisteredComponentSource = exports.RegisteredComponentSource || (exports.RegisteredComponentSource = {}));
	var ComponentProvider = (function () {
	    function ComponentProvider() {
	        this.agGridDefaults = {
	            //date
	            agDateInput: dateFilter.DefaultDateComponent,
	            //header
	            agColumnHeader: headerComp.HeaderComp,
	            agColumnGroupHeader: headerGroupComp.HeaderGroupComp,
	            //floating filters
	            agSetColumnFloatingFilter: floatingFilter.SetFloatingFilterComp,
	            agTextColumnFloatingFilter: floatingFilter.TextFloatingFilterComp,
	            agNumberColumnFloatingFilter: floatingFilter.NumberFloatingFilterComp,
	            agDateColumnFloatingFilter: floatingFilter.DateFloatingFilterComp,
	            // renderers
	            agAnimateShowChangeCellRenderer: animateShowChangeCellRenderer.AnimateShowChangeCellRenderer,
	            agAnimateSlideCellRenderer: animateSlideCellRenderer.AnimateSlideCellRenderer,
	            agGroupCellRenderer: groupCellRenderer.GroupCellRenderer,
	            agGroupRowRenderer: groupCellRenderer.GroupCellRenderer,
	            agLoadingCellRenderer: rowComp.LoadingCellRenderer,
	            //editors
	            agCellEditor: textCellEditor.TextCellEditor,
	            agTextCellEditor: textCellEditor.TextCellEditor,
	            agSelectCellEditor: selectCellEditor.SelectCellEditor,
	            agPopupTextCellEditor: popupTextCellEditor.PopupTextCellEditor,
	            agPopupSelectCellEditor: popupSelectCellEditor.PopupSelectCellEditor,
	            agLargeTextCellEditor: largeTextCellEditor.LargeTextCellEditor,
	            //filter
	            agTextColumnFilter: textFilter.TextFilter,
	            agNumberColumnFilter: numberFilter.NumberFilter,
	            agDateColumnFilter: dateFilter.DateFilter,
	            //overlays
	            agLoadingOverlay: loadingOverlayComponent.LoadingOverlayComponent,
	            agNoRowsOverlay: noRowsOverlayComponent.NoRowsOverlayComponent
	        };
	        this.agDeprecatedNames = {
	            set: {
	                newComponentName: 'agSetColumnFilter',
	                propertyHolder: 'filter'
	            },
	            text: {
	                newComponentName: 'agTextColumnFilter',
	                propertyHolder: 'filter'
	            },
	            number: {
	                newComponentName: 'agNumberColumnFilter',
	                propertyHolder: 'filter'
	            },
	            date: {
	                newComponentName: 'agDateColumnFilter',
	                propertyHolder: 'filter'
	            },
	            group: {
	                newComponentName: 'agGroupCellRenderer',
	                propertyHolder: 'cellRenderer'
	            },
	            animateShowChange: {
	                newComponentName: 'agAnimateShowChangeCellRenderer',
	                propertyHolder: 'cellRenderer'
	            },
	            animateSlide: {
	                newComponentName: 'agAnimateSlideCellRenderer',
	                propertyHolder: 'cellRenderer'
	            },
	            select: {
	                newComponentName: 'agSelectCellEditor',
	                propertyHolder: 'cellEditor'
	            },
	            largeText: {
	                newComponentName: 'agLargeTextCellEditor',
	                propertyHolder: 'cellEditor'
	            },
	            popupSelect: {
	                newComponentName: 'agPopupSelectCellEditor',
	                propertyHolder: 'cellEditor'
	            },
	            popupText: {
	                newComponentName: 'agPopupTextCellEditor',
	                propertyHolder: 'cellEditor'
	            },
	            richSelect: {
	                newComponentName: 'agRichSelectCellEditor',
	                propertyHolder: 'cellEditor'
	            },
	            headerComponent: {
	                newComponentName: 'agColumnHeader',
	                propertyHolder: 'headerComponent'
	            }
	        };
	        this.jsComponents = {};
	        this.frameworkComponents = {};
	    }
	    ComponentProvider.prototype.init = function () {
	        var _this = this;
	        if (this.gridOptions.components != null) {
	            Object.keys(this.gridOptions.components).forEach(function (it) {
	                _this.registerComponent(it, _this.gridOptions.components[it]);
	            });
	        }
	        if (this.gridOptions.frameworkComponents != null) {
	            Object.keys(this.gridOptions.frameworkComponents).forEach(function (it) {
	                _this.registerFwComponent(it, _this.gridOptions.frameworkComponents[it]);
	            });
	        }
	    };
	    ComponentProvider.prototype.registerDefaultComponent = function (rawName, component, overridable) {
	        if (overridable === void 0) { overridable = true; }
	        var name = this.translateIfDeprecated(rawName);
	        if (this.agGridDefaults[name]) {
	            console.error("Trying to overwrite a default component. You should call registerComponent");
	            return;
	        }
	        this.agGridDefaults[name] = component;
	    };
	    ComponentProvider.prototype.registerComponent = function (rawName, component) {
	        var name = this.translateIfDeprecated(rawName);
	        if (this.frameworkComponents[name]) {
	            console.error("Trying to register a component that you have already registered for frameworks: " + name);
	            return;
	        }
	        this.jsComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.registerFwComponent = function (rawName, component) {
	        var name = this.translateIfDeprecated(rawName);
	        if (this.jsComponents[name]) {
	            console.error("Trying to register a component that you have already registered for plain javascript: " + name);
	            return;
	        }
	        this.frameworkComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.retrieve = function (rawName) {
	        var name = this.translateIfDeprecated(rawName);
	        if (this.frameworkComponents[name]) {
	            return {
	                type: componentResolver.ComponentType.FRAMEWORK,
	                component: this.frameworkComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.jsComponents[name]) {
	            return {
	                type: componentResolver.ComponentType.AG_GRID,
	                component: this.jsComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.agGridDefaults[name]) {
	            return this.agGridDefaults[name] ?
	                {
	                    type: componentResolver.ComponentType.AG_GRID,
	                    component: this.agGridDefaults[name],
	                    source: RegisteredComponentSource.DEFAULT
	                } :
	                null;
	        }
	        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
	            console.warn("ag-grid: Looking for component [" + name + "] but it wasn't found.");
	        }
	        return null;
	    };
	    ComponentProvider.prototype.translateIfDeprecated = function (raw) {
	        var deprecatedInfo = this.agDeprecatedNames[raw];
	        if (deprecatedInfo != null) {
	            utils._.doOnce(function () {
	                console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
	            }, 'DEPREACTE_COMPONENT_' + raw);
	            return deprecatedInfo.newComponentName;
	        }
	        return raw;
	    };
	    __decorate([
	        context.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], ComponentProvider.prototype, "gridOptions", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentProvider.prototype, "init", null);
	    ComponentProvider = __decorate([
	        context.Bean('componentProvider')
	    ], ComponentProvider);
	    return ComponentProvider;
	}());
	exports.ComponentProvider = ComponentProvider;
	});

	unwrapExports(componentProvider);
	var componentProvider_1 = componentProvider.RegisteredComponentSource;
	var componentProvider_2 = componentProvider.ComponentProvider;

	var componentMetadataProvider = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var ComponentMetadataProvider = (function () {
	    function ComponentMetadataProvider() {
	    }
	    ComponentMetadataProvider.prototype.postConstruct = function () {
	        this.componentMetaData = {
	            dateComponent: {
	                mandatoryMethodList: ['getDate', 'setDate'],
	                optionalMethodList: ['afterGuiAttached']
	            },
	            detailCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            headerComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            headerGroupComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            loadingOverlayComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            noRowsOverlayComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            floatingFilterComponent: {
	                mandatoryMethodList: ['onParentModelChanged'],
	                optionalMethodList: ['afterGuiAttached']
	            },
	            floatingFilterWrapperComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            cellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['refresh', 'afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            cellEditor: {
	                mandatoryMethodList: ['getValue'],
	                optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'focusIn', 'focusOut', 'afterGuiAttached']
	            },
	            innerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            fullWidthCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            pinnedRowCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            groupRowInnerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            groupRowRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            filter: {
	                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
	                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged', 'afterGuiAttached']
	            },
	            filterComponent: {
	                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
	                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged', 'afterGuiAttached']
	            }
	        };
	    };
	    ComponentMetadataProvider.prototype.retrieve = function (name) {
	        return this.componentMetaData[name];
	    };
	    __decorate([
	        context.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils.AgComponentUtils)
	    ], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentMetadataProvider.prototype, "postConstruct", null);
	    ComponentMetadataProvider = __decorate([
	        context.Bean("componentMetadataProvider")
	    ], ComponentMetadataProvider);
	    return ComponentMetadataProvider;
	}());
	exports.ComponentMetadataProvider = ComponentMetadataProvider;
	});

	unwrapExports(componentMetadataProvider);
	var componentMetadataProvider_1 = componentMetadataProvider.ComponentMetadataProvider;

	var agComponentUtils = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var AgComponentUtils = (function () {
	    function AgComponentUtils() {
	    }
	    AgComponentUtils.prototype.adaptFunction = function (propertyName, hardcodedJsFunction, type, source) {
	        if (hardcodedJsFunction == null)
	            return {
	                component: null,
	                type: type,
	                source: source,
	                dynamicParams: null
	            };
	        var metadata = this.componentMetadataProvider.retrieve(propertyName);
	        if (metadata && metadata.functionAdapter) {
	            return {
	                type: type,
	                component: metadata.functionAdapter(hardcodedJsFunction),
	                source: source,
	                dynamicParams: null
	            };
	        }
	        return null;
	    };
	    AgComponentUtils.prototype.adaptCellRendererFunction = function (callback) {
	        var Adapter = (function () {
	            function Adapter() {
	            }
	            Adapter.prototype.refresh = function (params) {
	                return false;
	            };
	            Adapter.prototype.getGui = function () {
	                var callbackResult = callback(this.params);
	                var type = typeof callbackResult;
	                if (type === 'string' || type === 'number' || type === 'boolean') {
	                    return utils._.loadTemplate('<span>' + callbackResult + '</span>');
	                }
	                else {
	                    return callbackResult;
	                }
	            };
	            Adapter.prototype.init = function (params) {
	                this.params = params;
	            };
	            return Adapter;
	        }());
	        return Adapter;
	    };
	    AgComponentUtils.prototype.doesImplementIComponent = function (candidate) {
	        if (!candidate)
	            return false;
	        return candidate.prototype && 'getGui' in candidate.prototype;
	    };
	    __decorate([
	        context.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider.ComponentMetadataProvider)
	    ], AgComponentUtils.prototype, "componentMetadataProvider", void 0);
	    AgComponentUtils = __decorate([
	        context.Bean("agComponentUtils")
	    ], AgComponentUtils);
	    return AgComponentUtils;
	}());
	exports.AgComponentUtils = AgComponentUtils;
	});

	unwrapExports(agComponentUtils);
	var agComponentUtils_1 = agComponentUtils.AgComponentUtils;

	var componentResolver = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
	var ComponentSource;
	(function (ComponentSource) {
	    ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
	    ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
	})(ComponentSource = exports.ComponentSource || (exports.ComponentSource = {}));
	var ComponentResolver = (function () {
	    function ComponentResolver() {
	    }
	    /**
	     * This method returns the underlying representation of the component to be created. ie for Javascript the
	     * underlying function where we should be calling new into. In case of the frameworks, the framework class
	     * object that represents the component to be created.
	     *
	     * This method is handy for different reasons, for example if you want to check if a component has a particular
	     * method implemented without having to create the component, just by inspecting the source component
	     *
	     * It takes
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param dynamicComponentParams: Params to be passed to the dynamic component function in case it needs to be
	     *      invoked
	     *  @param defaultComponentName: The name of the component to load if there is no component specified
	     */
	    ComponentResolver.prototype.getComponentToUse = function (holder, propertyName, dynamicComponentParams, defaultComponentName) {
	        /**
	         * There are five things that can happen when resolving a component.
	         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
	         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
	         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
	         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
	         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
	         */
	        var hardcodedNameComponent = null;
	        var HardcodedJsComponent = null;
	        var hardcodedJsFunction = null;
	        var HardcodedFwComponent = null;
	        var dynamicComponentFn;
	        if (holder != null) {
	            var componentPropertyValue = holder[propertyName];
	            if (componentPropertyValue != null) {
	                if (typeof componentPropertyValue === 'string') {
	                    hardcodedNameComponent = componentPropertyValue;
	                }
	                else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
	                    HardcodedJsComponent = componentPropertyValue;
	                }
	                else {
	                    hardcodedJsFunction = componentPropertyValue;
	                }
	            }
	            HardcodedFwComponent = holder[propertyName + "Framework"];
	            dynamicComponentFn = holder[propertyName + "Selector"];
	        }
	        /**
	         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
	         * combination
	         */
	        if ((HardcodedJsComponent && HardcodedFwComponent) ||
	            (hardcodedNameComponent && HardcodedFwComponent) ||
	            (hardcodedJsFunction && HardcodedFwComponent)) {
	            throw Error("ag-grid: you are trying to specify: " + propertyName + " twice as a component.");
	        }
	        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
	            throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
	        }
	        if (dynamicComponentFn && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {
	            throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + propertyName);
	        }
	        /**
	         * At this stage we are guaranteed to either have,
	         * DEPRECATED
	         * - A unique HardcodedFwComponent
	         * - A unique HardcodedJsComponent
	         * - A unique hardcodedJsFunction
	         * BY NAME- FAVOURED APPROACH
	         * - A unique hardcodedNameComponent
	         * - None of the previous, hence we revert to: RegisteredComponent
	         */
	        if (HardcodedFwComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedFwComponent}`);
	            return {
	                type: ComponentType.FRAMEWORK,
	                component: HardcodedFwComponent,
	                source: ComponentSource.HARDCODED,
	                dynamicParams: null
	            };
	        }
	        if (HardcodedJsComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedJsComponent}`);
	            return {
	                type: ComponentType.AG_GRID,
	                component: HardcodedJsComponent,
	                source: ComponentSource.HARDCODED,
	                dynamicParams: null
	            };
	        }
	        if (hardcodedJsFunction) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
	            // console.warn(`${hardcodedJsFunction}`);
	            return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, ComponentType.AG_GRID, ComponentSource.HARDCODED);
	        }
	        if (dynamicComponentFn) {
	            var dynamicComponentDef = dynamicComponentFn(dynamicComponentParams);
	            if (dynamicComponentDef != null) {
	                if (dynamicComponentDef.component == null) {
	                    dynamicComponentDef.component = defaultComponentName;
	                }
	                var dynamicComponent = this.resolveByName(propertyName, dynamicComponentDef.component);
	                return utils._.assign(dynamicComponent, {
	                    dynamicParams: dynamicComponentDef.params
	                });
	            }
	        }
	        //^^^^^ABOVE DEPRECATED - AT THIS POINT WE ARE RESOLVING BY NAME
	        var componentNameToUse;
	        if (hardcodedNameComponent) {
	            componentNameToUse = hardcodedNameComponent;
	        }
	        else {
	            componentNameToUse = defaultComponentName;
	        }
	        return componentNameToUse == null ? null : this.resolveByName(propertyName, componentNameToUse);
	    };
	    ComponentResolver.prototype.resolveByName = function (propertyName, componentNameOpt) {
	        var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
	        var registeredComponent = this.componentProvider.retrieve(componentName);
	        if (registeredComponent == null)
	            return null;
	        //If it is a FW it has to be registered as a component
	        if (registeredComponent.type == ComponentType.FRAMEWORK) {
	            return {
	                component: registeredComponent.component,
	                type: ComponentType.FRAMEWORK,
	                source: ComponentSource.REGISTERED_BY_NAME,
	                dynamicParams: null
	            };
	        }
	        //If it is JS it may be a function or a component
	        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
	            return {
	                component: registeredComponent.component,
	                type: ComponentType.AG_GRID,
	                source: (registeredComponent.source == componentProvider.RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,
	                dynamicParams: null
	            };
	        }
	        // This is a function
	        return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.type, (registeredComponent.source == componentProvider.RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT);
	    };
	    /**
	     * Useful to check what would be the resultant params for a given object
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     * @returns {any} It merges the user agGridParams with the actual params specified by the user.
	     */
	    ComponentResolver.prototype.mergeParams = function (holder, propertyName, agGridParams, dynamicCustomParams, dynamicParams) {
	        if (dynamicParams === void 0) { dynamicParams = null; }
	        var customParamsRaw = holder ? holder[propertyName + "Params"] : null;
	        var finalParams = {};
	        utils._.mergeDeep(finalParams, agGridParams);
	        if (customParamsRaw != null) {
	            var customParams = null;
	            if (typeof customParamsRaw === 'function') {
	                customParams = customParamsRaw(dynamicCustomParams);
	            }
	            else {
	                customParams = customParamsRaw;
	            }
	            utils._.mergeDeep(finalParams, customParams);
	        }
	        utils._.mergeDeep(finalParams, dynamicParams);
	        if (!finalParams.api) {
	            finalParams.api = this.gridOptions.api;
	        }
	        return finalParams;
	    };
	    /**
	     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
	     * It takes
	     *  @param holderOpt: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param dynamicComponentParams: Params to be passed to the dynamic component function in case it needs to be
	     *      invoked
	     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in
	     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
	     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
	     *      component found, it throws an error, by default all components are MANDATORY
	     *  @param customInitParamsCb: A chance to customise the params passed to the init method. It receives what the current
	     *  params are and the component that init is about to get called for
	     */
	    ComponentResolver.prototype.createAgGridComponent = function (holderOpt, agGridParams, propertyName, dynamicComponentParams, defaultComponentName, mandatory, customInitParamsCb) {
	        if (mandatory === void 0) { mandatory = true; }
	        var holder = holderOpt == null ? this.gridOptions : holderOpt;
	        //Create the component instance
	        var componentAndParams = this.newAgGridComponent(holder, propertyName, dynamicComponentParams, defaultComponentName, mandatory);
	        if (!componentAndParams)
	            return null;
	        // Wire the component and call the init method with the correct params
	        var finalParams = this.mergeParams(holder, propertyName, agGridParams, dynamicComponentParams, componentAndParams[1]);
	        // a temporary fix for AG-1574
	        // AG-1715 raised to do a wider ranging refactor to improve this
	        finalParams.agGridReact = this.context.getBean('agGridReact') ? utils._.cloneObject(this.context.getBean('agGridReact')) : {};
	        // AG-1716 - directly related to AG-1574 and AG-1715
	        finalParams.frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper') ? this.context.getBean('frameworkComponentWrapper') : {};
	        var deferredInit = this.initialiseComponent(componentAndParams[0], finalParams, customInitParamsCb);
	        if (deferredInit == null) {
	            return utils.Promise.resolve(componentAndParams[0]);
	        }
	        else {
	            var asPromise = deferredInit;
	            return asPromise.map(function (notRelevant) { return componentAndParams[0]; });
	        }
	    };
	    /**
	     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
	     * It takes
	     *  @param clazz: The class to instantiate,
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     *  @param customInitParamsCb: A chance to customise the params passed to the init method. It receives what the current
	     *  params are and the component that init is about to get called for
	     */
	    ComponentResolver.prototype.createInternalAgGridComponent = function (clazz, agGridParams, customInitParamsCb) {
	        var internalComponent = new clazz();
	        this.initialiseComponent(internalComponent, agGridParams, customInitParamsCb);
	        return internalComponent;
	    };
	    ComponentResolver.prototype.newAgGridComponent = function (holder, propertyName, dynamicComponentParams, defaultComponentName, mandatory) {
	        if (mandatory === void 0) { mandatory = true; }
	        var componentToUse = this.getComponentToUse(holder, propertyName, dynamicComponentParams, defaultComponentName);
	        if (!componentToUse || !componentToUse.component) {
	            if (mandatory) {
	                console.error("Error creating component " + propertyName + "=>" + defaultComponentName);
	            }
	            return null;
	        }
	        if (componentToUse.type === ComponentType.AG_GRID) {
	            return [
	                new componentToUse.component(),
	                componentToUse.dynamicParams
	            ];
	        }
	        //Using framework component
	        var FrameworkComponentRaw = componentToUse.component;
	        var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
	        return [
	            this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, defaultComponentName),
	            componentToUse.dynamicParams
	        ];
	    };
	    ComponentResolver.prototype.initialiseComponent = function (component, agGridParams, customInitParamsCb) {
	        this.context.wireBean(component);
	        if (customInitParamsCb == null) {
	            return component.init(agGridParams);
	        }
	        else {
	            return component.init(customInitParamsCb(agGridParams, component));
	        }
	    };
	    __decorate([
	        context.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "gridOptions", void 0);
	    __decorate([
	        context.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ComponentResolver.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired("context"),
	        __metadata("design:type", context.Context)
	    ], ComponentResolver.prototype, "context", void 0);
	    __decorate([
	        context.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils.AgComponentUtils)
	    ], ComponentResolver.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider.ComponentMetadataProvider)
	    ], ComponentResolver.prototype, "componentMetadataProvider", void 0);
	    __decorate([
	        context.Autowired("componentProvider"),
	        __metadata("design:type", componentProvider.ComponentProvider)
	    ], ComponentResolver.prototype, "componentProvider", void 0);
	    __decorate([
	        context.Optional("frameworkComponentWrapper"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "frameworkComponentWrapper", void 0);
	    ComponentResolver = __decorate([
	        context.Bean('componentResolver')
	    ], ComponentResolver);
	    return ComponentResolver;
	}());
	exports.ComponentResolver = ComponentResolver;
	});

	unwrapExports(componentResolver);
	var componentResolver_1 = componentResolver.ComponentType;
	var componentResolver_2 = componentResolver.ComponentSource;
	var componentResolver_3 = componentResolver.ComponentResolver;

	var filterManager = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });











	var FilterManager = (function () {
	    function FilterManager() {
	        this.allFilters = {};
	        this.quickFilter = null;
	        this.quickFilterParts = null;
	    }
	    FilterManager_1 = FilterManager;
	    FilterManager.prototype.init = function () {
	        this.eventService.addEventListener(events$1.Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
	        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
	        this.setQuickFilterParts();
	        // check this here, in case there is a filter from the start
	        this.checkExternalFilter();
	    };
	    FilterManager.prototype.setQuickFilterParts = function () {
	        if (this.quickFilter) {
	            this.quickFilterParts = this.quickFilter.split(' ');
	        }
	        else {
	            this.quickFilterParts = null;
	        }
	    };
	    FilterManager.prototype.setFilterModel = function (model) {
	        var _this = this;
	        var allPromises = [];
	        if (model) {
	            // mark the filters as we set them, so any active filters left over we stop
	            var modelKeys_1 = Object.keys(model);
	            utils.Utils.iterateObject(this.allFilters, function (colId, filterWrapper) {
	                utils.Utils.removeFromArray(modelKeys_1, colId);
	                var newModel = model[colId];
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	            // at this point, processedFields contains data for which we don't have a filter working yet
	            utils.Utils.iterateArray(modelKeys_1, function (colId) {
	                var column = _this.columnController.getPrimaryColumn(colId);
	                if (!column) {
	                    console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
	                    return;
	                }
	                var filterWrapper = _this.getOrCreateFilterWrapper(column);
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	        }
	        else {
	            utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, null);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	        }
	        utils.Promise.all(allPromises).then(function (whatever) {
	            _this.onFilterChanged();
	        });
	    };
	    FilterManager.prototype.setModelOnFilterWrapper = function (filterPromise, newModel) {
	        filterPromise.then(function (filter) {
	            if (typeof filter.setModel !== 'function') {
	                console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');
	                return;
	            }
	            filter.setModel(newModel);
	        });
	    };
	    FilterManager.prototype.getFilterModel = function () {
	        var result = {};
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            // because user can provide filters, we provide useful error checking and messages
	            var filterPromise = filterWrapper.filterPromise;
	            var filter = filterPromise.resolveNow(null, function (filter) { return filter; });
	            if (filter == null) {
	                return null;
	            }
	            if (typeof filter.getModel !== 'function') {
	                console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
	                return;
	            }
	            var model = filter.getModel();
	            if (utils.Utils.exists(model)) {
	                result[key] = model;
	            }
	        });
	        return result;
	    };
	    // returns true if any advanced filter (ie not quick filter) active
	    FilterManager.prototype.isAdvancedFilterPresent = function () {
	        return this.advancedFilterPresent;
	    };
	    FilterManager.prototype.setAdvancedFilterPresent = function () {
	        var atLeastOneActive = false;
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            if (filterWrapper.filterPromise.resolveNow(false, function (filter) { return filter.isFilterActive(); })) {
	                atLeastOneActive = true;
	            }
	        });
	        this.advancedFilterPresent = atLeastOneActive;
	    };
	    FilterManager.prototype.updateFilterFlagInColumns = function (source) {
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            var filterActive = filterWrapper.filterPromise.resolveNow(false, function (filter) { return filter.isFilterActive(); });
	            filterWrapper.column.setFilterActive(filterActive, source);
	        });
	    };
	    // returns true if quickFilter or advancedFilter
	    FilterManager.prototype.isAnyFilterPresent = function () {
	        return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
	    };
	    FilterManager.prototype.doesFilterPass = function (node, filterToSkip) {
	        var data = node.data;
	        var colKeys = Object.keys(this.allFilters);
	        for (var i = 0, l = colKeys.length; i < l; i++) {
	            var colId = colKeys[i];
	            var filterWrapper = this.allFilters[colId];
	            // if no filter, always pass
	            if (filterWrapper === undefined) {
	                continue;
	            }
	            var filter = filterWrapper.filterPromise.resolveNow(undefined, function (filter) { return filter; });
	            // if filter not yet there, continue
	            if (filter === undefined) {
	                continue;
	            }
	            if (filter === filterToSkip) {
	                continue;
	            }
	            // don't bother with filters that are not active
	            if (!filter.isFilterActive()) {
	                continue;
	            }
	            if (!filter.doesFilterPass) {
	                console.error('Filter is missing method doesFilterPass');
	            }
	            var params = {
	                node: node,
	                data: data
	            };
	            if (!filter.doesFilterPass(params)) {
	                return false;
	            }
	        }
	        // all filters passed
	        return true;
	    };
	    FilterManager.prototype.parseQuickFilter = function (newFilter) {
	        if (utils.Utils.missing(newFilter) || newFilter === "") {
	            return null;
	        }
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            console.warn('ag-grid: cannot do quick filtering when doing virtual paging');
	            return null;
	        }
	        return newFilter.toUpperCase();
	    };
	    // returns true if it has changed (not just same value again)
	    FilterManager.prototype.setQuickFilter = function (newFilter) {
	        var parsedFilter = this.parseQuickFilter(newFilter);
	        if (this.quickFilter !== parsedFilter) {
	            this.quickFilter = parsedFilter;
	            this.setQuickFilterParts();
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.checkExternalFilter = function () {
	        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
	    };
	    FilterManager.prototype.onFilterChanged = function () {
	        this.setAdvancedFilterPresent();
	        this.updateFilterFlagInColumns("filterChanged");
	        this.checkExternalFilter();
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            filterWrapper.filterPromise.then(function (filter) {
	                if (filter.onAnyFilterChanged) {
	                    filter.onAnyFilterChanged();
	                }
	            });
	        });
	        var event = {
	            type: events$1.Events.EVENT_FILTER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    FilterManager.prototype.isQuickFilterPresent = function () {
	        return this.quickFilter !== null;
	    };
	    FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
	        return this.doesRowPassFilter(node, filterToSkip);
	    };
	    FilterManager.prototype.doesRowPassQuickFilterNoCache = function (node, filterPart) {
	        var _this = this;
	        var columns = this.columnController.getAllColumnsForQuickFilter();
	        var filterPasses = false;
	        columns.forEach(function (column) {
	            if (filterPasses) {
	                return;
	            }
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils.Utils.exists(part)) {
	                if (part.indexOf(filterPart) >= 0) {
	                    filterPasses = true;
	                }
	            }
	        });
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilterCache = function (node, filterPart) {
	        if (!node.quickFilterAggregateText) {
	            this.aggregateRowForQuickFilter(node);
	        }
	        var filterPasses = node.quickFilterAggregateText.indexOf(filterPart) >= 0;
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilter = function (node) {
	        var _this = this;
	        var filterPasses = true;
	        var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
	        this.quickFilterParts.forEach(function (filterPart) {
	            var partPasses = usingCache ?
	                _this.doesRowPassQuickFilterCache(node, filterPart) : _this.doesRowPassQuickFilterNoCache(node, filterPart);
	            // each part must pass, if any fails, then the whole filter fails
	            if (!partPasses) {
	                filterPasses = false;
	            }
	        });
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassFilter = function (node, filterToSkip) {
	        // the row must pass ALL of the filters, so if any of them fail,
	        // we return true. that means if a row passes the quick filter,
	        // but fails the column filter, it fails overall
	        // first up, check quick filter
	        if (this.isQuickFilterPresent()) {
	            if (!this.doesRowPassQuickFilter(node)) {
	                return false;
	            }
	        }
	        // secondly, give the client a chance to reject this row
	        if (this.externalFilterPresent) {
	            if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {
	                return false;
	            }
	        }
	        // lastly, check our internal advanced filter
	        if (this.advancedFilterPresent) {
	            if (!this.doesFilterPass(node, filterToSkip)) {
	                return false;
	            }
	        }
	        // got this far, all filters pass
	        return true;
	    };
	    FilterManager.prototype.getQuickFilterTextForColumn = function (column, rowNode) {
	        var value = this.valueService.getValue(column, rowNode, true);
	        var valueAfterCallback;
	        var colDef = column.getColDef();
	        if (column.getColDef().getQuickFilterText) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode.data,
	                column: column,
	                colDef: colDef
	            };
	            valueAfterCallback = column.getColDef().getQuickFilterText(params);
	        }
	        else {
	            valueAfterCallback = value;
	        }
	        if (valueAfterCallback && valueAfterCallback !== '') {
	            return valueAfterCallback.toString().toUpperCase();
	        }
	        else {
	            return null;
	        }
	    };
	    FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
	        var _this = this;
	        var stringParts = [];
	        var columns = this.columnController.getAllColumnsForQuickFilter();
	        columns.forEach(function (column) {
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils.Utils.exists(part)) {
	                stringParts.push(part);
	            }
	        });
	        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
	    };
	    FilterManager.prototype.onNewRowsLoaded = function (source) {
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            filterWrapper.filterPromise.then(function (filter) {
	                if (filter.onNewRowsLoaded) {
	                    filter.onNewRowsLoaded();
	                }
	            });
	        });
	        this.updateFilterFlagInColumns(source);
	        this.setAdvancedFilterPresent();
	    };
	    FilterManager.prototype.createValueGetter = function (column) {
	        var _this = this;
	        return function (node) {
	            return _this.valueService.getValue(column, node, true);
	        };
	    };
	    FilterManager.prototype.getFilterComponent = function (column) {
	        var filterWrapper = this.getOrCreateFilterWrapper(column);
	        return filterWrapper.filterPromise;
	    };
	    FilterManager.prototype.getOrCreateFilterWrapper = function (column) {
	        var filterWrapper = this.cachedFilter(column);
	        if (!filterWrapper) {
	            filterWrapper = this.createFilterWrapper(column);
	            this.allFilters[column.getColId()] = filterWrapper;
	        }
	        return filterWrapper;
	    };
	    FilterManager.prototype.cachedFilter = function (column) {
	        return this.allFilters[column.getColId()];
	    };
	    FilterManager.prototype.createFilterInstance = function (column, $scope) {
	        var _this = this;
	        var defaultFilter = 'agTextColumnFilter';
	        if (this.gridOptionsWrapper.isEnterprise()) {
	            defaultFilter = 'agSetColumnFilter';
	        }
	        var sanitisedColDef = utils.Utils.cloneObject(column.getColDef());
	        var event = {
	            type: events$1.Events.EVENT_FILTER_MODIFIED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        var filterChangedCallback = this.onFilterChanged.bind(this);
	        var filterModifiedCallback = function () { return _this.eventService.dispatchEvent(event); };
	        var params = {
	            column: column,
	            colDef: sanitisedColDef,
	            rowModel: this.rowModel,
	            filterChangedCallback: filterChangedCallback,
	            filterModifiedCallback: filterModifiedCallback,
	            valueGetter: this.createValueGetter(column),
	            context: this.gridOptionsWrapper.getContext(),
	            doesRowPassOtherFilter: null,
	            $scope: $scope
	        };
	        return this.componentResolver.createAgGridComponent(sanitisedColDef, params, 'filter', {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            column: column,
	            colDef: sanitisedColDef
	        }, defaultFilter, true, function (params, filter) { return utils.Utils.assign(params, {
	            doesRowPassOtherFilter: _this.doesRowPassOtherFilters.bind(_this, filter),
	        }); });
	    };
	    FilterManager.prototype.createFilterWrapper = function (column) {
	        var filterWrapper = {
	            column: column,
	            filterPromise: null,
	            scope: null,
	            compiledElement: null,
	            guiPromise: utils.Promise.external()
	        };
	        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
	        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
	        this.putIntoGui(filterWrapper);
	        return filterWrapper;
	    };
	    FilterManager.prototype.putIntoGui = function (filterWrapper) {
	        var _this = this;
	        var eFilterGui = document.createElement('div');
	        eFilterGui.className = 'ag-filter';
	        filterWrapper.filterPromise.then(function (filter) {
	            var guiFromFilter = filter.getGui();
	            if (utils.Utils.missing(guiFromFilter)) {
	                console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
	            }
	            // for backwards compatibility with Angular 1 - we
	            // used to allow providing back HTML from getGui().
	            // once we move away from supporting Angular 1
	            // directly, we can change this.
	            if (typeof guiFromFilter === 'string') {
	                guiFromFilter = utils.Utils.loadTemplate(guiFromFilter);
	            }
	            eFilterGui.appendChild(guiFromFilter);
	            if (filterWrapper.scope) {
	                var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);
	                filterWrapper.compiledElement = compiledElement;
	                setTimeout(function () { return filterWrapper.scope.$apply(); }, 0);
	            }
	            filterWrapper.guiPromise.resolve(eFilterGui);
	        });
	    };
	    FilterManager.prototype.onNewColumnsLoaded = function () {
	        this.destroy();
	    };
	    // destroys the filter, so it not longer takes part
	    FilterManager.prototype.destroyFilter = function (column, source) {
	        if (source === void 0) { source = "api"; }
	        var filterWrapper = this.allFilters[column.getColId()];
	        if (filterWrapper) {
	            this.disposeFilterWrapper(filterWrapper, source);
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.disposeFilterWrapper = function (filterWrapper, source) {
	        var _this = this;
	        filterWrapper.filterPromise.then(function (filter) {
	            filter.setModel(null);
	            if (filter.destroy) {
	                filter.destroy();
	            }
	            filterWrapper.column.setFilterActive(false, source);
	            if (filterWrapper.scope) {
	                if (filterWrapper.compiledElement) {
	                    filterWrapper.compiledElement.remove();
	                }
	                filterWrapper.scope.$destroy();
	            }
	            delete _this.allFilters[filterWrapper.column.getColId()];
	        });
	    };
	    FilterManager.prototype.destroy = function () {
	        var _this = this;
	        utils.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
	        });
	    };
	    FilterManager.QUICK_FILTER_SEPARATOR = '\n';
	    __decorate([
	        context.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$compile", void 0);
	    __decorate([
	        context.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FilterManager.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('gridCore'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "gridCore", void 0);
	    __decorate([
	        context.Autowired('popupService'),
	        __metadata("design:type", popupService.PopupService)
	    ], FilterManager.prototype, "popupService", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], FilterManager.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], FilterManager.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], FilterManager.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], FilterManager.prototype, "enterprise", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], FilterManager.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], FilterManager.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], FilterManager.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver.ComponentResolver)
	    ], FilterManager.prototype, "componentResolver", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "init", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "destroy", null);
	    FilterManager = FilterManager_1 = __decorate([
	        context.Bean('filterManager')
	    ], FilterManager);
	    return FilterManager;
	    var FilterManager_1;
	}());
	exports.FilterManager = FilterManager;
	});

	unwrapExports(filterManager);
	var filterManager_1 = filterManager.FilterManager;

	var resizeObserver = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var requestAnimationFrame$1 = (function () {
	    if (typeof requestAnimationFrame === "function") {
	        return requestAnimationFrame.bind(window);
	    }
	    return function (callback) {
	        return setTimeout(function () {
	            return callback(Date.now());
	        }, 1000 / 60);
	    };
	})();
	var trailingTimeout = 2;
	var throttle = function (callback, delay) {
	    var leadingCall = false;
	    var trailingCall = false;
	    var lastCallTime = 0;
	    function resolvePending() {
	        if (leadingCall) {
	            leadingCall = false;
	            callback();
	        }
	        if (trailingCall) {
	            proxy();
	        }
	    }
	    function timeoutCallback() {
	        requestAnimationFrame$1(resolvePending);
	    }
	    function proxy() {
	        var timeStamp = Date.now();
	        if (leadingCall) {
	            if (timeStamp - lastCallTime < trailingTimeout) {
	                return;
	            }
	            trailingCall = true;
	        }
	        else {
	            leadingCall = true;
	            trailingCall = false;
	            setTimeout(timeoutCallback, delay);
	        }
	        lastCallTime = timeStamp;
	    }
	    return proxy;
	};
	var REFRESH_DELAY = 20;
	var mutationObserverSupported = typeof MutationObserver !== "undefined";
	var getWindowOf = function (target) {
	    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	    return ownerGlobal || window;
	};
	var emptyRect = createRectInit(0, 0, 0, 0);
	function toFloat(value) {
	    return parseFloat(value) || 0;
	}
	function getBordersSize(styles, start, end) {
	    var positions = [start, end];
	    return positions.reduce(function (size, position) {
	        var value = styles.getPropertyValue("border-" + position + "-width");
	        return size + toFloat(value);
	    }, 0);
	}
	function getPaddings(styles) {
	    var positions = ["top", "right", "bottom", "left"];
	    var paddings = {
	        top: null,
	        left: null,
	        right: null,
	        bottom: null
	    };
	    for (var i = 0, list = positions; i < list.length; i += 1) {
	        var position = list[i];
	        var value = styles.getPropertyValue("padding-" + position);
	        paddings[position] = toFloat(value);
	    }
	    return paddings;
	}
	function getHTMLElementContentRect(target) {
	    var clientWidth = target.clientWidth;
	    var clientHeight = target.clientHeight;
	    if (!clientWidth && !clientHeight) {
	        return emptyRect;
	    }
	    var styles = getWindowOf(target).getComputedStyle(target);
	    var paddings = getPaddings(styles);
	    var horizPad = paddings.left + paddings.right;
	    var vertPad = paddings.top + paddings.bottom;
	    var width = toFloat(styles.width);
	    var height = toFloat(styles.height);
	    if (styles.boxSizing === "border-box") {
	        if (Math.round(width + horizPad) !== clientWidth) {
	            width -= getBordersSize(styles, "left", "right") + horizPad;
	        }
	        if (Math.round(height + vertPad) !== clientHeight) {
	            height -= getBordersSize(styles, "top", "bottom") + vertPad;
	        }
	    }
	    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	    if (Math.abs(vertScrollbar) !== 1) {
	        width -= vertScrollbar;
	    }
	    if (Math.abs(horizScrollbar) !== 1) {
	        height -= horizScrollbar;
	    }
	    return createRectInit(paddings.left, paddings.top, width, height);
	}
	function getContentRect(target) {
	    return getHTMLElementContentRect(target);
	}
	function createReadOnlyRect(ref) {
	    var x = ref.x;
	    var y = ref.y;
	    var width = ref.width;
	    var height = ref.height;
	    var Constr = window.DOMRectReadOnly ? window.DOMRectReadOnly : Object;
	    var rect = Object.create(Constr.prototype);
	    defineConfigurable(rect, {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        top: y,
	        right: x + width,
	        bottom: height + y,
	        left: x
	    });
	    return rect;
	}
	function createRectInit(x, y, width, height) {
	    return { x: x, y: y, width: width, height: height };
	}
	var ResizeObserverController = (function () {
	    function ResizeObserverController() {
	        this.connected_ = false;
	        this.mutationEventsAdded_ = false;
	        this.mutationsObserver_ = null;
	        this.observers_ = [];
	        this.callback_ = null;
	        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	    }
	    ResizeObserverController.prototype.addObserver = function (observer) {
	        if (this.observers_.indexOf(observer) == -1) {
	            this.observers_.push(observer);
	        }
	        // Add listeners if they haven't been added yet.
	        if (!this.connected_) {
	            this.connect_();
	        }
	    };
	    ResizeObserverController.prototype.removeObserver = function (observer) {
	        var observers = this.observers_;
	        var index = observers.indexOf(observer);
	        if (index > -1) {
	            observers.splice(index, 1);
	        }
	        if (!observers.length && this.connected_) {
	            this.disconnect_();
	        }
	    };
	    ResizeObserverController.prototype.refresh = function () {
	        var changesDetected = this.updateObservers_();
	        if (changesDetected) {
	            this.refresh();
	        }
	    };
	    ResizeObserverController.prototype.updateObservers_ = function () {
	        var activeObservers = this.observers_.filter(function (observer) {
	            return observer.hasActive();
	        });
	        activeObservers.forEach(function (observer) {
	            return observer.broadcastActive();
	        });
	        return activeObservers.length > 0;
	    };
	    ResizeObserverController.prototype.connect_ = function () {
	        if (this.connected_) {
	            return;
	        }
	        window.addEventListener("resize", this.refresh);
	        if (mutationObserverSupported) {
	            this.mutationsObserver_ = new MutationObserver(this.refresh);
	            this.mutationsObserver_.observe(document, {
	                attributes: true,
	                childList: true,
	                characterData: true,
	                subtree: true
	            });
	        }
	        else {
	            document.addEventListener("DOMSubtreeModified", this.refresh);
	            this.mutationEventsAdded_ = true;
	        }
	        this.connected_ = true;
	    };
	    ResizeObserverController.prototype.disconnect_ = function () {
	        if (!this.connected_) {
	            return;
	        }
	        window.removeEventListener("resize", this.refresh);
	        if (this.mutationsObserver_) {
	            this.mutationsObserver_.disconnect();
	        }
	        if (this.mutationEventsAdded_) {
	            document.removeEventListener("DOMSubtreeModified", this.refresh);
	        }
	        this.mutationsObserver_ = null;
	        this.mutationEventsAdded_ = false;
	        this.connected_ = false;
	    };
	    ResizeObserverController.getInstance = function () {
	        if (!this.instance_) {
	            this.instance_ = new ResizeObserverController();
	        }
	        return this.instance_;
	    };
	    ResizeObserverController.instance_ = null;
	    return ResizeObserverController;
	}());
	var defineConfigurable = function (target, props) {
	    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
	        var key = list[i];
	        Object.defineProperty(target, key, {
	            value: props[key],
	            enumerable: false,
	            writable: false,
	            configurable: true
	        });
	    }
	    return target;
	};
	var ResizeObservation = (function () {
	    function ResizeObservation(target) {
	        this.target = target;
	        this.broadcastWidth = 0;
	        this.broadcastHeight = 0;
	        this.contentRect_ = null;
	        this.contentRect_ = createRectInit(0, 0, 0, 0);
	    }
	    ResizeObservation.prototype.isActive = function () {
	        var rect = getContentRect(this.target);
	        this.contentRect_ = rect;
	        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
	    };
	    ResizeObservation.prototype.broadcastRect = function () {
	        var rect = this.contentRect_;
	        this.broadcastWidth = rect.width;
	        this.broadcastHeight = rect.height;
	        return rect;
	    };
	    return ResizeObservation;
	}());
	var ResizeObserverSPI = (function () {
	    function ResizeObserverSPI(callback, controller, callbackCtx) {
	        this.observation = null;
	        this.callback_ = null;
	        this.controller_ = null;
	        this.callbackCtx_ = null;
	        this.observation = null;
	        if (typeof callback !== "function") {
	            throw new TypeError("The callback provided as parameter 1 is not a function.");
	        }
	        this.callback_ = callback;
	        this.controller_ = controller;
	        this.callbackCtx_ = callbackCtx;
	    }
	    ResizeObserverSPI.prototype.observe = function (target) {
	        this.observation = new ResizeObservation(target);
	        this.controller_.addObserver(this);
	        // Force the update of observations.
	        this.controller_.refresh();
	    };
	    ResizeObserverSPI.prototype.disconnect = function () {
	        this.observation = null;
	        this.controller_.removeObserver(this);
	    };
	    ResizeObserverSPI.prototype.broadcastActive = function () {
	        if (!this.hasActive()) {
	            return;
	        }
	        var ctx = this.callbackCtx_;
	        this.callback_.call(ctx, {
	            target: this.observation.target,
	            contentRect: createReadOnlyRect(this.observation.broadcastRect())
	        }, ctx);
	    };
	    ResizeObserverSPI.prototype.hasActive = function () {
	        return this.observation.isActive();
	    };
	    return ResizeObserverSPI;
	}());
	var ResizeObserverFallback = (function () {
	    function ResizeObserverFallback(callback) {
	        var controller = ResizeObserverController.getInstance();
	        var observer = new ResizeObserverSPI(callback, controller, this);
	        this.observer_ = observer;
	    }
	    ResizeObserverFallback.prototype.observe = function (element) {
	        this.observer_.observe(element);
	    };
	    ResizeObserverFallback.prototype.disconnect = function () {
	        this.observer_.disconnect();
	    };
	    return ResizeObserverFallback;
	}());
	function observeResize(element, callback) {
	    if (window.ResizeObserver) {
	        var ro_1 = new window.ResizeObserver(function (entries, observer) {
	            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
	                var entry = entries_1[_i];
	                callback(entry);
	            }
	        });
	        ro_1.observe(element);
	        return function unobserve() {
	            ro_1.disconnect();
	        };
	    }
	    else {
	        var ro_2 = new ResizeObserverFallback(function (entry) {
	            callback(entry);
	        });
	        ro_2.observe(element);
	        return function unobserve() {
	            ro_2.disconnect();
	        };
	    }
	}
	exports.observeResize = observeResize;
	});

	unwrapExports(resizeObserver);
	var resizeObserver_1 = resizeObserver.observeResize;

	var rowContainerComponent = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	/**
	 * There are many instances of this component covering each of the areas a row can be entered
	 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
	 * elements, there is no template. All of the elements are part of the GridPanel.
	 */
	var RowContainerComponent = (function () {
	    function RowContainerComponent(params) {
	        this.childCount = 0;
	        this.rowTemplatesToAdd = [];
	        this.afterGuiAttachedCallbacks = [];
	        this.eContainer = params.eContainer;
	        this.eViewport = params.eViewport;
	        this.hideWhenNoChildren = params.hideWhenNoChildren;
	    }
	    RowContainerComponent.prototype.setVerticalScrollPosition = function (verticalScrollPosition) {
	        this.scrollTop = verticalScrollPosition;
	    };
	    RowContainerComponent.prototype.postConstruct = function () {
	        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.getRowElement = function (compId) {
	        return this.eContainer.querySelector("[comp-id=\"" + compId + "\"]");
	    };
	    RowContainerComponent.prototype.setHeight = function (height) {
	        this.eContainer.style.height = height + "px";
	    };
	    RowContainerComponent.prototype.flushRowTemplates = function () {
	        // if doing dom order, then rowTemplates will be empty,
	        // or if no rows added since last time also empty.
	        if (this.rowTemplatesToAdd.length !== 0) {
	            var htmlToAdd = this.rowTemplatesToAdd.join('');
	            utils.Utils.appendHtml(this.eContainer, htmlToAdd);
	            this.rowTemplatesToAdd.length = 0;
	        }
	        // this only empty if no rows since last time, as when
	        // doing dom order, we still have callbacks to process
	        this.afterGuiAttachedCallbacks.forEach(function (func) { return func(); });
	        this.afterGuiAttachedCallbacks.length = 0;
	        this.lastPlacedElement = null;
	    };
	    RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {
	        if (this.domOrder) {
	            this.lastPlacedElement = utils.Utils.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
	        }
	        else {
	            this.rowTemplatesToAdd.push(rowTemplate);
	        }
	        this.afterGuiAttachedCallbacks.push(callback);
	        // it is important we put items in in order, so that when we open a row group,
	        // the new rows are inserted after the opened group, but before the rows below.
	        // that way, the rows below are over the new rows (as dom renders last in dom over
	        // items previous in dom), otherwise the child rows would cover the row below and
	        // that meant the user doesn't see the rows below slide away.
	        this.childCount++;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.ensureDomOrder = function (eRow) {
	        if (this.domOrder) {
	            utils.Utils.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
	            this.lastPlacedElement = eRow;
	        }
	    };
	    RowContainerComponent.prototype.removeRowElement = function (eRow) {
	        this.eContainer.removeChild(eRow);
	        this.childCount--;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.checkVisibility = function () {
	        if (!this.hideWhenNoChildren) {
	            return;
	        }
	        var eGui = this.eViewport ? this.eViewport : this.eContainer;
	        var visible = this.childCount > 0;
	        if (this.visible !== visible) {
	            this.visible = visible;
	            utils.Utils.setVisible(eGui, visible);
	            // if we are showing the viewport, then the scroll is always zero,
	            // so we need to align with the other sections (ie if this is full
	            // width container, and first time showing a full width row, we need to
	            // scroll it so full width rows are show in right place alongside the
	            // body rows). without this, there was an issue with 'loading rows' for
	            // server side row model, as loading rows are full width, and they were
	            // not getting displayed in the right location when rows were expanded.
	            if (visible && this.eViewport) {
	                this.eViewport.scrollTop = this.scrollTop;
	            }
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], RowContainerComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowContainerComponent.prototype, "postConstruct", null);
	    return RowContainerComponent;
	}());
	exports.RowContainerComponent = RowContainerComponent;
	});

	unwrapExports(rowContainerComponent);
	var rowContainerComponent_1 = rowContainerComponent.RowContainerComponent;

	var alignedGridsService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var context_2 = context;
	var context_3 = context;
	var context_4 = context;
	var AlignedGridsService = (function () {
	    function AlignedGridsService() {
	        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
	        // while processing a master event) we mark this if consuming an event, and if we are, then
	        // we don't fire back any events.
	        this.consuming = false;
	    }
	    AlignedGridsService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('AlignedGridsService');
	    };
	    AlignedGridsService.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    AlignedGridsService.prototype.init = function () {
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
	    };
	    // common logic across all the fire methods
	    AlignedGridsService.prototype.fireEvent = function (callback) {
	        // if we are already consuming, then we are acting on an event from a master,
	        // so we don't cause a cyclic firing of events
	        if (this.consuming) {
	            return;
	        }
	        // iterate through the aligned grids, and pass each aligned grid service to the callback
	        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
	        if (otherGrids) {
	            otherGrids.forEach(function (otherGridOptions) {
	                if (otherGridOptions.api) {
	                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();
	                    callback(alignedGridService);
	                }
	            });
	        }
	    };
	    // common logic across all consume methods. very little common logic, however extracting
	    // guarantees consistency across the methods.
	    AlignedGridsService.prototype.onEvent = function (callback) {
	        this.consuming = true;
	        callback();
	        this.consuming = false;
	    };
	    AlignedGridsService.prototype.fireColumnEvent = function (event) {
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onColumnEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.fireScrollEvent = function (event) {
	        if (event.direction !== 'horizontal') {
	            return;
	        }
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onScrollEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.onScrollEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            _this.gridPanel.setHorizontalScrollPosition(event.left);
	        });
	    };
	    AlignedGridsService.prototype.getMasterColumns = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column);
	            });
	        }
	        else if (event.column) {
	            result.push(event.column);
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.getColumnIds = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column.getColId());
	            });
	        }
	        else if (event.columns) {
	            result.push(event.column.getColId());
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.onColumnEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            switch (event.type) {
	                case events$1.Events.EVENT_COLUMN_MOVED:
	                case events$1.Events.EVENT_COLUMN_VISIBLE:
	                case events$1.Events.EVENT_COLUMN_PINNED:
	                case events$1.Events.EVENT_COLUMN_RESIZED:
	                    var colEvent = event;
	                    _this.processColumnEvent(colEvent);
	                    break;
	                case events$1.Events.EVENT_COLUMN_GROUP_OPENED:
	                    var groupOpenedEvent = event;
	                    _this.processGroupOpenedEvent(groupOpenedEvent);
	                    break;
	                case events$1.Events.EVENT_COLUMN_PIVOT_CHANGED:
	                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the
	                    // grids will have columns created based on the row data of the grid.
	                    console.warn('ag-Grid: pivoting is not supported with aligned grids. ' +
	                        'You can only use one of these features at a time in a grid.');
	                    break;
	            }
	        });
	    };
	    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {
	        // likewise for column group
	        var masterColumnGroup = groupOpenedEvent.columnGroup;
	        var otherColumnGroup;
	        if (masterColumnGroup) {
	            var groupId = masterColumnGroup.getGroupId();
	            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
	        }
	        if (masterColumnGroup && !otherColumnGroup) {
	            return;
	        }
	        this.logger.log('onColumnEvent-> processing ' + event + ' expanded = ' + masterColumnGroup.isExpanded());
	        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
	    };
	    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {
	        var _this = this;
	        // the column in the event is from the master grid. need to
	        // look up the equivalent from this (other) grid
	        var masterColumn = colEvent.column;
	        var otherColumn;
	        if (masterColumn) {
	            otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
	        }
	        // if event was with respect to a master column, that is not present in this
	        // grid, then we ignore the event
	        if (masterColumn && !otherColumn) {
	            return;
	        }
	        // in time, all the methods below should use the column ids, it's a more generic way
	        // of handling columns, and also allows for single or multi column events
	        var columnIds = this.getColumnIds(colEvent);
	        var masterColumns = this.getMasterColumns(colEvent);
	        switch (colEvent.type) {
	            case events$1.Events.EVENT_COLUMN_MOVED:
	                var movedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' toIndex = ' + movedEvent.toIndex);
	                this.columnController.moveColumns(columnIds, movedEvent.toIndex, "alignedGridChanged");
	                break;
	            case events$1.Events.EVENT_COLUMN_VISIBLE:
	                var visibleEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' visible = ' + visibleEvent.visible);
	                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, "alignedGridChanged");
	                break;
	            case events$1.Events.EVENT_COLUMN_PINNED:
	                var pinnedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' pinned = ' + pinnedEvent.pinned);
	                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, "alignedGridChanged");
	                break;
	            case events$1.Events.EVENT_COLUMN_RESIZED:
	                var resizedEvent_1 = colEvent;
	                masterColumns.forEach(function (masterColumn) {
	                    _this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' actualWidth = ' + masterColumn.getActualWidth());
	                    _this.columnController.setColumnWidth(masterColumn.getColId(), masterColumn.getActualWidth(), false, resizedEvent_1.finished, "alignedGridChanged");
	                });
	                break;
	        }
	    };
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], AlignedGridsService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], AlignedGridsService.prototype, "columnController", void 0);
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], AlignedGridsService.prototype, "eventService", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "init", null);
	    AlignedGridsService = __decorate([
	        context.Bean('alignedGridsService')
	    ], AlignedGridsService);
	    return AlignedGridsService;
	}());
	exports.AlignedGridsService = AlignedGridsService;
	});

	unwrapExports(alignedGridsService);
	var alignedGridsService_1 = alignedGridsService.AlignedGridsService;

	var pinnedRowModel = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var context_2 = context;

	var context_3 = context;




	var PinnedRowModel = (function () {
	    function PinnedRowModel() {
	    }
	    PinnedRowModel.prototype.init = function () {
	        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
	        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
	    };
	    PinnedRowModel.prototype.isEmpty = function (floating) {
	        var rows = floating === constants.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        return utils.Utils.missingOrEmpty(rows);
	    };
	    PinnedRowModel.prototype.isRowsToRender = function (floating) {
	        return !this.isEmpty(floating);
	    };
	    PinnedRowModel.prototype.getRowAtPixel = function (pixel, floating) {
	        var rows = floating === constants.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        if (utils.Utils.missingOrEmpty(rows)) {
	            return 0; // this should never happen, just in case, 0 is graceful failure
	        }
	        for (var i = 0; i < rows.length; i++) {
	            var rowNode$$1 = rows[i];
	            var rowTopPixel = rowNode$$1.rowTop + rowNode$$1.rowHeight - 1;
	            // only need to range check against the top pixel, as we are going through the list
	            // in order, first row to hit the pixel wins
	            if (rowTopPixel >= pixel) {
	                return i;
	            }
	        }
	        return rows.length - 1;
	    };
	    PinnedRowModel.prototype.setPinnedTopRowData = function (rowData) {
	        this.pinnedTopRows = this.createNodesFromData(rowData, true);
	        var event = {
	            type: events$1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.setPinnedBottomRowData = function (rowData) {
	        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
	        var event = {
	            type: events$1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.createNodesFromData = function (allData, isTop) {
	        var _this = this;
	        var rowNodes = [];
	        if (allData) {
	            var nextRowTop_1 = 0;
	            allData.forEach(function (dataItem, index) {
	                var rowNode$$1 = new rowNode.RowNode();
	                _this.context.wireBean(rowNode$$1);
	                rowNode$$1.data = dataItem;
	                rowNode$$1.rowPinned = isTop ? constants.Constants.PINNED_TOP : constants.Constants.PINNED_BOTTOM;
	                rowNode$$1.setRowTop(nextRowTop_1);
	                rowNode$$1.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode$$1));
	                rowNode$$1.setRowIndex(index);
	                nextRowTop_1 += rowNode$$1.rowHeight;
	                rowNodes.push(rowNode$$1);
	            });
	        }
	        return rowNodes;
	    };
	    PinnedRowModel.prototype.getPinnedTopRowData = function () {
	        return this.pinnedTopRows;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowData = function () {
	        return this.pinnedBottomRows;
	    };
	    PinnedRowModel.prototype.getPinnedTopTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedTopRows);
	    };
	    PinnedRowModel.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedTopRows[index];
	    };
	    PinnedRowModel.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedBottomRows[index];
	    };
	    PinnedRowModel.prototype.forEachPinnedTopRow = function (callback) {
	        if (utils.Utils.missingOrEmpty(this.pinnedTopRows)) {
	            return;
	        }
	        this.pinnedTopRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.forEachPinnedBottomRow = function (callback) {
	        if (utils.Utils.missingOrEmpty(this.pinnedBottomRows)) {
	            return;
	        }
	        this.pinnedBottomRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.getPinnedBottomTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedBottomRows);
	    };
	    PinnedRowModel.prototype.getTotalHeight = function (rowNodes) {
	        if (!rowNodes || rowNodes.length === 0) {
	            return 0;
	        }
	        else {
	            var lastNode = rowNodes[rowNodes.length - 1];
	            return lastNode.rowTop + lastNode.rowHeight;
	        }
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PinnedRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], PinnedRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], PinnedRowModel.prototype, "context", void 0);
	    __decorate([
	        context_2.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], PinnedRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_2.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], PinnedRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_3.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PinnedRowModel.prototype, "init", null);
	    PinnedRowModel = __decorate([
	        context.Bean('pinnedRowModel')
	    ], PinnedRowModel);
	    return PinnedRowModel;
	}());
	exports.PinnedRowModel = PinnedRowModel;
	});

	unwrapExports(pinnedRowModel);
	var pinnedRowModel_1 = pinnedRowModel.PinnedRowModel;

	var navigationService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var NavigationService = (function () {
	    function NavigationService() {
	        this.timeLastPageEventProcessed = 0;
	    }
	    NavigationService.prototype.init = function () {
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	    };
	    NavigationService.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    NavigationService.prototype.handlePageScrollingKey = function (event) {
	        var key = event.which || event.keyCode;
	        var alt = event.altKey;
	        var ctrl = event.ctrlKey;
	        var currentCell = this.mouseEventService.getGridCellForEvent(event).getGridCellDef();
	        if (!currentCell) {
	            return false;
	        }
	        var processed = false;
	        switch (key) {
	            case constants.Constants.KEY_PAGE_HOME:
	            case constants.Constants.KEY_PAGE_END:
	                // handle home and end when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onHomeOrEndKey(key);
	                    processed = true;
	                }
	                break;
	            case constants.Constants.KEY_LEFT:
	            case constants.Constants.KEY_RIGHT:
	                // handle left and right when ctrl is pressed only
	                if (ctrl && !alt) {
	                    this.onCtrlLeftOrRight(key, currentCell);
	                    processed = true;
	                }
	                break;
	            case constants.Constants.KEY_UP:
	            case constants.Constants.KEY_DOWN:
	                // handle up and down when ctrl is pressed only
	                if (ctrl && !alt) {
	                    this.onCtrlUpOrDown(key, currentCell);
	                    processed = true;
	                }
	                break;
	            case constants.Constants.KEY_PAGE_DOWN:
	                // handle page up and page down when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onPageDown(currentCell);
	                    processed = true;
	                }
	                break;
	            case constants.Constants.KEY_PAGE_UP:
	                // handle page up and page down when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onPageUp(currentCell);
	                    processed = true;
	                }
	                break;
	        }
	        if (processed) {
	            event.preventDefault();
	        }
	        return processed;
	    };
	    // the page up/down keys caused a problem, in that if the user
	    // held the page up/down key down, lots of events got generated,
	    // which clogged up the event queue (as they take time to process)
	    // which in turn froze the grid. Logic below makes sure we wait 100ms
	    // between processing the page up/down events, so when user has finger
	    // held down on key, we ignore page up/down events until 100ms has passed,
	    // which effectively empties the queue of page up/down events.
	    NavigationService.prototype.isTimeSinceLastPageEventToRecent = function () {
	        var now = new Date().getTime();
	        var diff = now - this.timeLastPageEventProcessed;
	        return (diff < 100);
	    };
	    NavigationService.prototype.setTimeLastPageEventProcessed = function () {
	        this.timeLastPageEventProcessed = new Date().getTime();
	    };
	    NavigationService.prototype.onPageDown = function (gridCell$$1) {
	        if (this.isTimeSinceLastPageEventToRecent()) {
	            return;
	        }
	        var scrollPosition = this.gridPanel.getVScrollPosition();
	        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
	        if (this.gridPanel.isHorizontalScrollShowing()) {
	            pixelsInOnePage -= this.scrollWidth;
	        }
	        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
	        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
	        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
	        var scrollIndex = currentPageBottomRow;
	        var currentCellPixel = this.paginationProxy.getRow(gridCell$$1.rowIndex).rowTop;
	        var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
	        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
	        var pageLastRow = this.paginationProxy.getPageLastRow();
	        if (focusIndex > pageLastRow) {
	            focusIndex = pageLastRow;
	        }
	        if (scrollIndex > pageLastRow) {
	            scrollIndex = pageLastRow;
	        }
	        this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell$$1.column);
	        this.setTimeLastPageEventProcessed();
	    };
	    NavigationService.prototype.onPageUp = function (gridCell$$1) {
	        if (this.isTimeSinceLastPageEventToRecent()) {
	            return;
	        }
	        var scrollPosition = this.gridPanel.getVScrollPosition();
	        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
	        if (this.gridPanel.isHorizontalScrollShowing()) {
	            pixelsInOnePage -= this.scrollWidth;
	        }
	        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
	        var currentPageTopPixel = scrollPosition.top;
	        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
	        var scrollIndex = currentPageTopRow;
	        var currentRowNode = this.paginationProxy.getRow(gridCell$$1.rowIndex);
	        var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
	        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
	        var firstRow = this.paginationProxy.getPageFirstRow();
	        if (focusIndex < firstRow) {
	            focusIndex = firstRow;
	        }
	        if (scrollIndex < firstRow) {
	            scrollIndex = firstRow;
	        }
	        this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell$$1.column);
	        this.setTimeLastPageEventProcessed();
	    };
	    // common logic to navigate. takes parameters:
	    // scrollIndex - what row to vertically scroll to
	    // scrollType - what position to put scroll index ie top/bottom
	    // scrollColumn - what column to horizontally scroll to
	    // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another
	    NavigationService.prototype.navigateTo = function (scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {
	        if (utils._.exists(scrollColumn)) {
	            this.gridPanel.ensureColumnVisible(scrollColumn);
	        }
	        if (utils._.exists(scrollIndex)) {
	            this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);
	        }
	        // make sure the cell is rendered, needed if we are to focus
	        this.animationFrameService.flushAllFrames();
	        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell
	        // highlighted.
	        this.focusedCellController.setFocusedCell(focusIndex, focusColumn, null, true);
	        if (this.rangeController) {
	            var gridCell$$1 = new gridCell.GridCell({ rowIndex: focusIndex, floating: null, column: focusColumn });
	            this.rangeController.setRangeToCell(gridCell$$1);
	        }
	    };
	    // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.
	    NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell$$1) {
	        var upKey = key === constants.Constants.KEY_UP;
	        var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();
	        this.navigateTo(rowIndexToScrollTo, null, gridCell$$1.column, rowIndexToScrollTo, gridCell$$1.column);
	    };
	    // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.
	    NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell$$1) {
	        var leftKey = key === constants.Constants.KEY_LEFT;
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = leftKey ? allColumns[0] : allColumns[allColumns.length - 1];
	        this.navigateTo(gridCell$$1.rowIndex, null, columnToSelect, gridCell$$1.rowIndex, columnToSelect);
	    };
	    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
	    // same cell into view (which means either scroll all the way up, or all the way down).
	    NavigationService.prototype.onHomeOrEndKey = function (key) {
	        var homeKey = key === constants.Constants.KEY_PAGE_HOME;
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = homeKey ? allColumns[0] : allColumns[allColumns.length - 1];
	        var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();
	        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);
	    };
	    __decorate([
	        context.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService.MouseEventService)
	    ], NavigationService.prototype, "mouseEventService", void 0);
	    __decorate([
	        context.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], NavigationService.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], NavigationService.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService.AnimationFrameService)
	    ], NavigationService.prototype, "animationFrameService", void 0);
	    __decorate([
	        context.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], NavigationService.prototype, "rangeController", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], NavigationService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], NavigationService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], NavigationService.prototype, "init", null);
	    NavigationService = __decorate([
	        context.Bean('navigationService')
	    ], NavigationService);
	    return NavigationService;
	}());
	exports.NavigationService = NavigationService;
	});

	unwrapExports(navigationService);
	var navigationService_1 = navigationService.NavigationService;

	var rowDragFeature = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var RowDragFeature = (function () {
	    function RowDragFeature(eContainer, gridPanel) {
	        this.eContainer = eContainer;
	        this.gridPanel = gridPanel;
	    }
	    RowDragFeature.prototype.postConstruct = function () {
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            this.clientSideRowModel = this.rowModel;
	        }
	    };
	    RowDragFeature.prototype.getContainer = function () {
	        return this.eContainer;
	    };
	    RowDragFeature.prototype.isInterestedIn = function (type) {
	        return type === dragAndDropService.DragSourceType.RowDrag;
	    };
	    RowDragFeature.prototype.getIconName = function () {
	        return dragAndDropService.DragAndDropService.ICON_MOVE;
	    };
	    RowDragFeature.prototype.onDragEnter = function (draggingEvent) {
	        // when entering, we fire the enter event, then in onEnterOrDragging,
	        // we also fire the move event. so we get both events when entering.
	        this.dispatchEvent(eventKeys.Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
	        this.dragAndDropService.setGhostIcon(dragAndDropService.DragAndDropService.ICON_MOVE);
	        draggingEvent.dragItem.rowNode.setDragging(true);
	        this.onEnterOrDragging(draggingEvent);
	    };
	    RowDragFeature.prototype.onDragging = function (draggingEvent) {
	        this.onEnterOrDragging(draggingEvent);
	    };
	    RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {
	        // this event is fired for enter and move
	        this.dispatchEvent(eventKeys.Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
	        this.lastDraggingEvent = draggingEvent;
	        var pixel = this.normaliseForScroll(draggingEvent.y);
	        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
	        if (managedDrag) {
	            this.doManagedDrag(draggingEvent, pixel);
	        }
	        this.checkCenterForScrolling(pixel);
	    };
	    RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {
	        var rowNode = draggingEvent.dragItem.rowNode;
	        var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);
	        if (rowWasMoved) {
	            this.focusedCellController.clearFocusedCell();
	            if (this.rangeController) {
	                this.rangeController.clearSelection();
	            }
	        }
	    };
	    RowDragFeature.prototype.normaliseForScroll = function (pixel) {
	        var gridPanelHasScrolls = !this.gridOptionsWrapper.isGridAutoHeight();
	        if (gridPanelHasScrolls) {
	            var pixelRange = this.gridPanel.getVScrollPosition();
	            return pixel + pixelRange.top;
	        }
	        else {
	            return pixel;
	        }
	    };
	    RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {
	        // scroll if the mouse is within 50px of the grid edge
	        var pixelRange = this.gridPanel.getVScrollPosition();
	        // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);
	        this.needToMoveUp = pixel < (pixelRange.top + 50);
	        this.needToMoveDown = pixel > (pixelRange.bottom - 50);
	        // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
	        // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
	        if (this.needToMoveUp || this.needToMoveDown) {
	            this.ensureIntervalStarted();
	        }
	        else {
	            this.ensureIntervalCleared();
	        }
	    };
	    RowDragFeature.prototype.ensureIntervalStarted = function () {
	        if (!this.movingIntervalId) {
	            this.intervalCount = 0;
	            this.movingIntervalId = setInterval(this.moveInterval.bind(this), 100);
	        }
	    };
	    RowDragFeature.prototype.ensureIntervalCleared = function () {
	        if (this.moveInterval) {
	            clearInterval(this.movingIntervalId);
	            this.movingIntervalId = null;
	        }
	    };
	    RowDragFeature.prototype.moveInterval = function () {
	        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
	        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
	        var pixelsToMove;
	        this.intervalCount++;
	        pixelsToMove = 10 + (this.intervalCount * 5);
	        if (pixelsToMove > 100) {
	            pixelsToMove = 100;
	        }
	        var pixelsMoved;
	        if (this.needToMoveDown) {
	            pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);
	        }
	        else if (this.needToMoveUp) {
	            pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);
	        }
	        if (pixelsMoved !== 0) {
	            this.onDragging(this.lastDraggingEvent);
	        }
	    };
	    // i tried using generics here with this:
	    //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {
	    // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)
	    RowDragFeature.prototype.dispatchEvent = function (type, draggingEvent) {
	        var yNormalised = this.normaliseForScroll(draggingEvent.y);
	        var overIndex = -1;
	        var overNode = null;
	        var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();
	        if (!mouseIsPastLastRow) {
	            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
	            overNode = this.rowModel.getRow(overIndex);
	        }
	        var vDirectionString;
	        switch (draggingEvent.vDirection) {
	            case dragAndDropService.VDirection.Down:
	                vDirectionString = 'down';
	                break;
	            case dragAndDropService.VDirection.Up:
	                vDirectionString = 'up';
	                break;
	            default:
	                vDirectionString = null;
	                break;
	        }
	        var event = {
	            type: type,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            event: draggingEvent.event,
	            node: draggingEvent.dragItem.rowNode,
	            overIndex: overIndex,
	            overNode: overNode,
	            y: yNormalised,
	            vDirection: vDirectionString
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    RowDragFeature.prototype.onDragLeave = function (draggingEvent) {
	        this.dispatchEvent(eventKeys.Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
	        this.stopDragging(draggingEvent);
	    };
	    RowDragFeature.prototype.onDragStop = function (draggingEvent) {
	        this.dispatchEvent(eventKeys.Events.EVENT_ROW_DRAG_END, draggingEvent);
	        this.stopDragging(draggingEvent);
	    };
	    RowDragFeature.prototype.stopDragging = function (draggingEvent) {
	        this.ensureIntervalCleared();
	        draggingEvent.dragItem.rowNode.setDragging(false);
	    };
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], RowDragFeature.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], RowDragFeature.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], RowDragFeature.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], RowDragFeature.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], RowDragFeature.prototype, "rangeController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], RowDragFeature.prototype, "eventService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowDragFeature.prototype, "postConstruct", null);
	    return RowDragFeature;
	}());
	exports.RowDragFeature = RowDragFeature;
	});

	unwrapExports(rowDragFeature);
	var rowDragFeature_1 = rowDragFeature.RowDragFeature;

	var autoHeightCalculator = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var AutoHeightCalculator = (function () {
	    function AutoHeightCalculator() {
	    }
	    AutoHeightCalculator.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {
	        var _this = this;
	        if (!this.eDummyContainer) {
	            this.eDummyContainer = document.createElement('div');
	            // so any styles on row also get applied in dummy, otherwise
	            // the content in dummy may differ to the real
	            utils._.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');
	        }
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        var eBodyContainer = this.gridPanel.getBodyContainer();
	        eBodyContainer.appendChild(this.eDummyContainer);
	        var cellComps = [];
	        var cols = this.columnController.getAllAutoRowHeightCols();
	        console.log();
	        cols.forEach(function (col) {
	            var cellComp$$1 = new cellComp.CellComp(_this.$scope, _this.beans, col, rowNode, null, true);
	            cellComp$$1.setParentRow(_this.eDummyContainer);
	            cellComps.push(cellComp$$1);
	        });
	        var template = cellComps.map(function (cellComp$$1) { return cellComp$$1.getCreateTemplate(); }).join(' ');
	        this.eDummyContainer.innerHTML = template;
	        // this gets any cellComps that are using components to put the components in
	        cellComps.forEach(function (cellComp$$1) { return cellComp$$1.afterAttached(); });
	        // we should be able to just take the height of the row at this point, however
	        // the row isn't expanding to cover the cell heights, i don't know why, i couldn't
	        // figure it out so instead looking at the individual cells instead
	        var maxCellHeight = 0;
	        for (var i = 0; i < this.eDummyContainer.children.length; i++) {
	            var child = this.eDummyContainer.children[i];
	            if (child.offsetHeight > maxCellHeight) {
	                maxCellHeight = child.offsetHeight;
	            }
	        }
	        // we are finished with the dummy container, so get rid of it
	        eBodyContainer.removeChild(this.eDummyContainer);
	        cellComps.forEach(function (cellComp$$1) {
	            // dunno why we need to detach first, doing it here to be consistent with code in RowComp
	            cellComp$$1.detach();
	            cellComp$$1.destroy();
	        });
	        // in case anything left over from last time
	        utils._.removeAllChildren(this.eDummyContainer);
	        return maxCellHeight;
	    };
	    __decorate([
	        context.Autowired('beans'),
	        __metadata("design:type", beans.Beans)
	    ], AutoHeightCalculator.prototype, "beans", void 0);
	    __decorate([
	        context.Autowired("$scope"),
	        __metadata("design:type", Object)
	    ], AutoHeightCalculator.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired("columnController"),
	        __metadata("design:type", columnController.ColumnController)
	    ], AutoHeightCalculator.prototype, "columnController", void 0);
	    AutoHeightCalculator = __decorate([
	        context.Bean('autoHeightCalculator')
	    ], AutoHeightCalculator);
	    return AutoHeightCalculator;
	}());
	exports.AutoHeightCalculator = AutoHeightCalculator;
	});

	unwrapExports(autoHeightCalculator);
	var autoHeightCalculator_1 = autoHeightCalculator.AutoHeightCalculator;

	var horizontalResizeService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var HorizontalResizeService = (function () {
	    function HorizontalResizeService() {
	    }
	    HorizontalResizeService.prototype.addResizeBar = function (params) {
	        var _this = this;
	        var dragSource = {
	            dragStartPixels: 0,
	            eElement: params.eResizeBar,
	            onDragStart: this.onDragStart.bind(this, params),
	            onDragStop: this.onDragStop.bind(this, params),
	            onDragging: this.onDragging.bind(this, params)
	        };
	        this.dragService.addDragSource(dragSource, true);
	        // we pass remove func back to the caller, so call can tell us when they
	        // are finished, and then we remove the listener from the drag source
	        var finishedWithResizeFunc = function () { return _this.dragService.removeDragSource(dragSource); };
	        return finishedWithResizeFunc;
	    };
	    HorizontalResizeService.prototype.onDragStart = function (params, mouseEvent) {
	        this.draggingStarted = true;
	        this.dragStartX = mouseEvent.clientX;
	        this.setResizeIcons();
	        var shiftKey = mouseEvent instanceof MouseEvent ? mouseEvent.shiftKey === true : false;
	        params.onResizeStart(shiftKey);
	    };
	    HorizontalResizeService.prototype.setResizeIcons = function () {
	        this.oldBodyCursor = this.eGridDiv.style.cursor;
	        this.oldMsUserSelect = this.eGridDiv.style.msUserSelect;
	        this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect;
	        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'
	        this.eGridDiv.style.cursor = 'col-resize';
	        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
	        this.eGridDiv.style.msUserSelect = 'none';
	        this.eGridDiv.style.webkitUserSelect = 'none';
	    };
	    HorizontalResizeService.prototype.onDragStop = function (params, mouseEvent) {
	        params.onResizeEnd(this.resizeAmount);
	        this.resetIcons();
	    };
	    HorizontalResizeService.prototype.resetIcons = function () {
	        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
	        this.eGridDiv.style.cursor = this.oldBodyCursor;
	        this.eGridDiv.style.msUserSelect = this.oldMsUserSelect;
	        this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
	    };
	    HorizontalResizeService.prototype.onDragging = function (params, mouseEvent) {
	        this.resizeAmount = mouseEvent.clientX - this.dragStartX;
	        params.onResizing(this.resizeAmount);
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HorizontalResizeService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('dragService'),
	        __metadata("design:type", dragService.DragService)
	    ], HorizontalResizeService.prototype, "dragService", void 0);
	    __decorate([
	        context.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], HorizontalResizeService.prototype, "eGridDiv", void 0);
	    HorizontalResizeService = __decorate([
	        context.Bean('horizontalResizeService')
	    ], HorizontalResizeService);
	    return HorizontalResizeService;
	}());
	exports.HorizontalResizeService = HorizontalResizeService;
	});

	unwrapExports(horizontalResizeService);
	var horizontalResizeService_1 = horizontalResizeService.HorizontalResizeService;

	var cssClassApplier = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var CssClassApplier = (function () {
	    function CssClassApplier() {
	    }
	    CssClassApplier.addHeaderClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addToolPanelClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addColumnClassesFromCollDef = function (classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils.Utils.missing(classesOrFunc)) {
	            return;
	        }
	        var classToUse;
	        if (typeof classesOrFunc === 'function') {
	            var params = {
	                // bad naming, as colDef here can be a group or a column,
	                // however most people won't appreciate the difference,
	                // so keeping it as colDef to avoid confusion.
	                colDef: abstractColDef,
	                column: column,
	                columnGroup: columnGroup,
	                context: gridOptionsWrapper.getContext(),
	                api: gridOptionsWrapper.getApi()
	            };
	            var headerClassFunc = classesOrFunc;
	            classToUse = headerClassFunc(params);
	        }
	        else {
	            classToUse = classesOrFunc;
	        }
	        if (typeof classToUse === 'string') {
	            utils.Utils.addCssClass(eHeaderCell, classToUse);
	        }
	        else if (Array.isArray(classToUse)) {
	            classToUse.forEach(function (cssClassItem) {
	                utils.Utils.addCssClass(eHeaderCell, cssClassItem);
	            });
	        }
	    };
	    return CssClassApplier;
	}());
	exports.CssClassApplier = CssClassApplier;
	});

	unwrapExports(cssClassApplier);
	var cssClassApplier_1 = cssClassApplier.CssClassApplier;

	var agCheckbox = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var AgCheckbox = (function (_super) {
	    __extends(AgCheckbox, _super);
	    function AgCheckbox() {
	        var _this = _super.call(this) || this;
	        _this.selected = false;
	        _this.readOnly = false;
	        _this.passive = false;
	        return _this;
	    }
	    AgCheckbox.prototype.preConstruct = function () {
	        this.setTemplate(AgCheckbox.TEMPLATE);
	    };
	    AgCheckbox.prototype.postConstruct = function () {
	        this.loadIcons();
	        this.updateIcons();
	        if (this.props.label) {
	            this.eLabel.innerText = this.props.label;
	        }
	    };
	    AgCheckbox.prototype.loadIcons = function () {
	        utils.Utils.removeAllChildren(this.eChecked);
	        utils.Utils.removeAllChildren(this.eUnchecked);
	        utils.Utils.removeAllChildren(this.eIndeterminate);
	        if (this.readOnly) {
	            this.eChecked.appendChild(utils.Utils.createIconNoSpan('checkboxCheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils.Utils.createIconNoSpan('checkboxUncheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils.Utils.createIconNoSpan('checkboxIndeterminateReadOnly', this.gridOptionsWrapper, null));
	        }
	        else {
	            this.eChecked.appendChild(utils.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, null));
	        }
	    };
	    AgCheckbox.prototype.onClick = function (event) {
	        // if we don't set the path, then won't work in Edge, as once the <span> is removed from the dom,
	        // it's not possible to calculate the path by following the parent's chain. in other browser (eg
	        // chrome) there is event.path for this purpose, but missing in Edge.
	        utils.Utils.addAgGridEventPath(event);
	        if (!this.readOnly) {
	            this.toggle();
	        }
	    };
	    AgCheckbox.prototype.getNextValue = function () {
	        if (this.selected === undefined) {
	            return true;
	        }
	        else {
	            return !this.selected;
	        }
	    };
	    AgCheckbox.prototype.setPassive = function (passive) {
	        this.passive = passive;
	    };
	    AgCheckbox.prototype.setReadOnly = function (readOnly) {
	        this.readOnly = readOnly;
	        this.loadIcons();
	    };
	    AgCheckbox.prototype.isReadOnly = function () {
	        return this.readOnly;
	    };
	    AgCheckbox.prototype.isSelected = function () {
	        return this.selected;
	    };
	    AgCheckbox.prototype.toggle = function () {
	        var nextValue = this.getNextValue();
	        if (this.passive) {
	            var event_1 = {
	                type: AgCheckbox.EVENT_CHANGED,
	                selected: nextValue
	            };
	            this.dispatchEvent(event_1);
	        }
	        else {
	            this.setSelected(nextValue);
	        }
	    };
	    AgCheckbox.prototype.setSelected = function (selected) {
	        if (this.selected === selected) {
	            return;
	        }
	        if (selected === true) {
	            this.selected = true;
	        }
	        else if (selected === false) {
	            this.selected = false;
	        }
	        else {
	            this.selected = undefined;
	        }
	        this.updateIcons();
	        var event = {
	            type: AgCheckbox.EVENT_CHANGED,
	            selected: this.selected
	        };
	        this.dispatchEvent(event);
	    };
	    AgCheckbox.prototype.updateIcons = function () {
	        utils.Utils.setVisible(this.eChecked, this.selected === true);
	        utils.Utils.setVisible(this.eUnchecked, this.selected === false);
	        utils.Utils.setVisible(this.eIndeterminate, this.selected === undefined);
	    };
	    AgCheckbox.EVENT_CHANGED = 'change';
	    AgCheckbox.TEMPLATE = '<span class="ag-checkbox" role="presentation">' +
	        '  <span class="ag-checkbox-checked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-unchecked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-indeterminate" role="presentation"></span>' +
	        '  <span class="ag-checkbox-label" role="presentation"></span>' +
	        '</span>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], AgCheckbox.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('.ag-checkbox-checked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eChecked", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('.ag-checkbox-unchecked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eUnchecked", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('.ag-checkbox-indeterminate'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eIndeterminate", void 0);
	    __decorate([
	        componentAnnotations.QuerySelector('.ag-checkbox-label'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eLabel", void 0);
	    __decorate([
	        context.PreConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "preConstruct", null);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "postConstruct", null);
	    __decorate([
	        componentAnnotations.Listener('click'),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [MouseEvent]),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "onClick", null);
	    return AgCheckbox;
	}(component.Component));
	exports.AgCheckbox = AgCheckbox;
	});

	unwrapExports(agCheckbox);
	var agCheckbox_1 = agCheckbox.AgCheckbox;

	var selectAllFeature = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });










	var SelectAllFeature = (function (_super) {
	    __extends(SelectAllFeature, _super);
	    function SelectAllFeature(cbSelectAll, column) {
	        var _this = _super.call(this) || this;
	        _this.cbSelectAllVisible = false;
	        _this.processingEventFromCheckbox = false;
	        _this.cbSelectAll = cbSelectAll;
	        _this.column = column;
	        var colDef = column.getColDef();
	        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
	        return _this;
	    }
	    SelectAllFeature.prototype.postConstruct = function () {
	        this.showOrHideSelectAll();
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
	        this.addDestroyableEventListener(this.cbSelectAll, agCheckbox.AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
	    };
	    SelectAllFeature.prototype.showOrHideSelectAll = function () {
	        this.cbSelectAllVisible = this.isCheckboxSelection();
	        this.cbSelectAll.setVisible(this.cbSelectAllVisible);
	        if (this.cbSelectAllVisible) {
	            // in case user is trying this feature with the wrong model type
	            this.checkRightRowModelType();
	            // make sure checkbox is showing the right state
	            this.updateStateOfCheckbox();
	        }
	    };
	    SelectAllFeature.prototype.onModelChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.onSelectionChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.getNextCheckboxState = function (selectionCount) {
	        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
	            // if no rows, always have it unselected
	            return false;
	        }
	        else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
	            // if mix of selected and unselected, this is the tri-state
	            return null;
	        }
	        else if (selectionCount.selected > 0) {
	            // only selected
	            return true;
	        }
	        else {
	            // nothing selected
	            return false;
	        }
	    };
	    SelectAllFeature.prototype.updateStateOfCheckbox = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        this.processingEventFromCheckbox = true;
	        var selectionCount = this.getSelectionCount();
	        var allSelected = this.getNextCheckboxState(selectionCount);
	        this.cbSelectAll.setSelected(allSelected);
	        this.processingEventFromCheckbox = false;
	    };
	    SelectAllFeature.prototype.getSelectionCount = function () {
	        var selectedCount = 0;
	        var notSelectedCount = 0;
	        var callback = function (node) {
	            if (node.isSelected()) {
	                selectedCount++;
	            }
	            else if (!node.selectable) ;
	            else {
	                notSelectedCount++;
	            }
	        };
	        if (this.filteredOnly) {
	            this.gridApi.forEachNodeAfterFilter(callback);
	        }
	        else {
	            this.gridApi.forEachNode(callback);
	        }
	        return {
	            notSelected: notSelectedCount,
	            selected: selectedCount
	        };
	    };
	    SelectAllFeature.prototype.checkRightRowModelType = function () {
	        var rowModelType = this.rowModel.getType();
	        var rowModelMatches = rowModelType === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
	        if (!rowModelMatches) {
	            console.log("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
	        }
	    };
	    SelectAllFeature.prototype.onCbSelectAll = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        var value = this.cbSelectAll.isSelected();
	        if (value) {
	            this.selectionController.selectAllRowNodes(this.filteredOnly);
	        }
	        else {
	            this.selectionController.deselectAllRowNodes(this.filteredOnly);
	        }
	    };
	    SelectAllFeature.prototype.isCheckboxSelection = function () {
	        var result = this.column.getColDef().headerCheckboxSelection;
	        if (typeof result === 'function') {
	            var func = result;
	            result = func({
	                column: this.column,
	                colDef: this.column.getColDef(),
	                columnApi: this.columnApi,
	                api: this.gridApi
	            });
	        }
	        if (result) {
	            if (this.gridOptionsWrapper.isRowModelServerSide()) {
	                console.warn('headerCheckboxSelection is not supported for Server Side Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelInfinite()) {
	                console.warn('headerCheckboxSelection is not supported for Infinite Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelViewport()) {
	                console.warn('headerCheckboxSelection is not supported for Viewport Row Model');
	                return false;
	            }
	            // otherwise the row model is compatible, so return true
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], SelectAllFeature.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], SelectAllFeature.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], SelectAllFeature.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectAllFeature.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], SelectAllFeature.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SelectAllFeature.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectAllFeature.prototype, "postConstruct", null);
	    return SelectAllFeature;
	}(beanStub.BeanStub));
	exports.SelectAllFeature = SelectAllFeature;
	});

	unwrapExports(selectAllFeature);
	var selectAllFeature_1 = selectAllFeature.SelectAllFeature;

	var headerWrapperComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });























	var HeaderWrapperComp = (function (_super) {
	    __extends(HeaderWrapperComp, _super);
	    function HeaderWrapperComp(column$$1, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;
	        _this.column = column$$1;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderWrapperComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    HeaderWrapperComp.prototype.init = function () {
	        this.instantiate(this.context);
	        var displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
	        var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	        var enableMenu = this.menuFactory.isMenuEnabled(this.column) && !this.column.getColDef().suppressMenu;
	        this.appendHeaderComp(displayName, enableSorting, enableMenu);
	        this.setupWidth();
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.setupResize();
	        this.setupMenuClass();
	        this.setupSortableClass(enableSorting);
	        this.addColumnHoverListener();
	        this.addFeature(this.context, new hoverFeature.HoverFeature([this.column], this.getGui()));
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	        this.addFeature(this.context, new selectAllFeature.SelectAllFeature(this.cbSelectAll, this.column));
	        var setLeftFeature$$1 = new setLeftFeature.SetLeftFeature(this.column, this.getGui(), this.beans);
	        setLeftFeature$$1.init();
	        this.addDestroyFunc(setLeftFeature$$1.destroy.bind(setLeftFeature$$1));
	        this.addAttributes();
	        cssClassApplier.CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
	    };
	    HeaderWrapperComp.prototype.addColumnHoverListener = function () {
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.onColumnHover();
	    };
	    HeaderWrapperComp.prototype.onColumnHover = function () {
	        var isHovered = this.columnHoverService.isHovered(this.column);
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
	    };
	    HeaderWrapperComp.prototype.setupSortableClass = function (enableSorting) {
	        if (enableSorting) {
	            var element = this.getGui();
	            utils.Utils.addCssClass(element, 'ag-header-cell-sortable');
	        }
	    };
	    HeaderWrapperComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.column.isFilterActive();
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-filtered', filterPresent);
	    };
	    HeaderWrapperComp.prototype.appendHeaderComp = function (displayName, enableSorting, enableMenu) {
	        var _this = this;
	        var params = {
	            column: this.column,
	            displayName: displayName,
	            enableSorting: enableSorting,
	            enableMenu: enableMenu,
	            showColumnMenu: function (source) {
	                _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
	            },
	            progressSort: function (multiSort) {
	                _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
	            },
	            setSort: function (sort, multiSort) {
	                _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        var callback = this.afterHeaderCompCreated.bind(this, displayName);
	        this.componentRecipes.newHeaderComponent(params).then(callback);
	    };
	    HeaderWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerComp) {
	        this.appendChild(headerComp);
	        this.setupMove(headerComp.getGui(), displayName);
	        if (headerComp.destroy) {
	            this.addDestroyFunc(headerComp.destroy.bind(headerComp));
	        }
	    };
	    HeaderWrapperComp.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.column.isMoving()) {
	            utils.Utils.addCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	        else {
	            utils.Utils.removeCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	    };
	    HeaderWrapperComp.prototype.setupMove = function (eHeaderCellLabel, displayName) {
	        var _this = this;
	        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.column.getColDef().suppressMovable
	            || this.column.isLockPosition();
	        if (suppressMove) {
	            return;
	        }
	        if (eHeaderCellLabel) {
	            var dragSource_1 = {
	                type: dragAndDropService.DragSourceType.HeaderCell,
	                eElement: eHeaderCellLabel,
	                dragItemCallback: function () { return _this.createDragItem(); },
	                dragItemName: displayName,
	                dragSourceDropTarget: this.dragSourceDropTarget,
	                dragStarted: function () { return _this.column.setMoving(true, "uiColumnMoved"); },
	                dragStopped: function () { return _this.column.setMoving(false, "uiColumnMoved"); }
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    HeaderWrapperComp.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    HeaderWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        var colDef = this.column.getColDef();
	        // if no eResize in template, do nothing
	        if (!this.eResize) {
	            return;
	        }
	        if (!this.column.isResizable()) {
	            utils.Utils.removeFromParent(this.eResize);
	            return;
	        }
	        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
	            eResizeBar: this.eResize,
	            onResizeStart: this.onResizeStart.bind(this),
	            onResizing: this.onResizing.bind(this, false),
	            onResizeEnd: this.onResizing.bind(this, true)
	        });
	        this.addDestroyFunc(finishedWithResizeFunc);
	        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	        if (weWantAutoSize) {
	            this.addDestroyableEventListener(this.eResize, 'dblclick', function () {
	                _this.columnController.autoSizeColumn(_this.column, "uiColumnResized");
	            });
	            var touchListener$$1 = new touchListener.TouchListener(this.eResize);
	            this.addDestroyableEventListener(touchListener$$1, touchListener.TouchListener.EVENT_DOUBLE_TAP, function () {
	                _this.columnController.autoSizeColumn(_this.column, "uiColumnResized");
	            });
	            this.addDestroyFunc(touchListener$$1.destroy.bind(touchListener$$1));
	        }
	    };
	    HeaderWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
	        var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
	        var newWidth = this.resizeStartWidth + resizeAmountNormalised;
	        this.columnController.setColumnWidth(this.column, newWidth, this.resizeWithShiftKey, finished, "uiColumnDragged");
	    };
	    HeaderWrapperComp.prototype.onResizeStart = function (shiftKey) {
	        this.resizeStartWidth = this.column.getActualWidth();
	        this.resizeWithShiftKey = shiftKey;
	    };
	    HeaderWrapperComp.prototype.setupTooltip = function () {
	        var colDef = this.column.getColDef();
	        // add tooltip if exists
	        if (colDef.headerTooltip) {
	            this.getGui().title = colDef.headerTooltip;
	        }
	    };
	    HeaderWrapperComp.prototype.setupMovingCss = function () {
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
	        this.onColumnMovingChanged();
	    };
	    HeaderWrapperComp.prototype.addAttributes = function () {
	        this.getGui().setAttribute("col-id", this.column.getColId());
	    };
	    HeaderWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.setupMenuClass = function () {
	        this.addDestroyableEventListener(this.column, column.Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.onMenuVisible = function () {
	        this.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());
	    };
	    HeaderWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getGui().style.width = this.column.getActualWidth() + 'px';
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
	    HeaderWrapperComp.prototype.normaliseResizeAmount = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderWrapperComp.TEMPLATE = '<div class="ag-header-cell" role="presentation" >' +
	        '<div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>' +
	        '<ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox>' +
	        // <inner component goes here>
	        '</div>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], HeaderWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('horizontalResizeService'),
	        __metadata("design:type", horizontalResizeService.HorizontalResizeService)
	    ], HeaderWrapperComp.prototype, "horizontalResizeService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], HeaderWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], HeaderWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], HeaderWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], HeaderWrapperComp.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeaderWrapperComp.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], HeaderWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService.ColumnHoverService)
	    ], HeaderWrapperComp.prototype, "columnHoverService", void 0);
	    __decorate([
	        context.Autowired('beans'),
	        __metadata("design:type", beans.Beans)
	    ], HeaderWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eResize'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderWrapperComp.prototype, "eResize", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('cbSelectAll'),
	        __metadata("design:type", agCheckbox.AgCheckbox)
	    ], HeaderWrapperComp.prototype, "cbSelectAll", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderWrapperComp.prototype, "init", null);
	    return HeaderWrapperComp;
	}(component.Component));
	exports.HeaderWrapperComp = HeaderWrapperComp;
	});

	unwrapExports(headerWrapperComp);
	var headerWrapperComp_1 = headerWrapperComp.HeaderWrapperComp;

	var headerGroupWrapperComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
















	var HeaderGroupWrapperComp = (function (_super) {
	    __extends(HeaderGroupWrapperComp, _super);
	    function HeaderGroupWrapperComp(columnGroup$$1, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;
	        // the children can change, we keep destroy functions related to listening to the children here
	        _this.childColumnsDestroyFuncs = [];
	        _this.columnGroup = columnGroup$$1;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderGroupWrapperComp.prototype.postConstruct = function () {
	        cssClassApplier.CssClassApplier.addHeaderClassesFromColDef(this.columnGroup.getColGroupDef(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);
	        var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');
	        this.appendHeaderGroupComp(displayName);
	        this.setupResize();
	        this.addClasses();
	        this.setupWidth();
	        this.addAttributes();
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.addFeature(this.context, new hoverFeature.HoverFeature(this.columnGroup.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
	        var setLeftFeature$$1 = new setLeftFeature.SetLeftFeature(this.columnGroup, this.getGui(), this.beans);
	        setLeftFeature$$1.init();
	        this.addDestroyFunc(setLeftFeature$$1.destroy.bind(setLeftFeature$$1));
	    };
	    HeaderGroupWrapperComp.prototype.setupMovingCss = function () {
	        var _this = this;
	        var originalColumnGroup = this.columnGroup.getOriginalColumnGroup();
	        var leafColumns = originalColumnGroup.getLeafColumns();
	        leafColumns.forEach(function (col) {
	            _this.addDestroyableEventListener(col, column.Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));
	        });
	        this.onColumnMovingChanged();
	    };
	    HeaderGroupWrapperComp.prototype.setupTooltip = function () {
	        var colGroupDef = this.columnGroup.getColGroupDef();
	        // add tooltip if exists
	        if (colGroupDef && colGroupDef.headerTooltip) {
	            this.getGui().title = colGroupDef.headerTooltip;
	        }
	    };
	    HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.columnGroup.isMoving()) {
	            utils.Utils.addCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	        else {
	            utils.Utils.removeCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	    };
	    HeaderGroupWrapperComp.prototype.addAttributes = function () {
	        this.getGui().setAttribute("col-id", this.columnGroup.getUniqueId());
	    };
	    HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {
	        var _this = this;
	        var params = {
	            displayName: displayName,
	            columnGroup: this.columnGroup,
	            setExpanded: function (expanded) {
	                _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, "gridInitializing");
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        if (!displayName) {
	            var leafCols = this.columnGroup.getLeafColumns();
	            displayName = leafCols ? leafCols[0].getColDef().headerName : '';
	        }
	        var callback = this.afterHeaderCompCreated.bind(this, displayName);
	        this.componentRecipes.newHeaderGroupComponent(params).then(callback);
	    };
	    HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {
	        this.appendChild(headerGroupComp);
	        this.setupMove(headerGroupComp.getGui(), displayName);
	        if (headerGroupComp.destroy) {
	            this.addDestroyFunc(headerGroupComp.destroy.bind(headerGroupComp));
	        }
	    };
	    HeaderGroupWrapperComp.prototype.addClasses = function () {
	        // having different classes below allows the style to not have a bottom border
	        // on the group header, if no group is specified
	        // columnGroup.getColGroupDef
	        if (this.columnGroup.isPadding()) {
	            this.addCssClass('ag-header-group-cell-no-group');
	        }
	        else {
	            this.addCssClass('ag-header-group-cell-with-group');
	        }
	    };
	    HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {
	        var _this = this;
	        if (!eHeaderGroup) {
	            return;
	        }
	        if (this.isSuppressMoving()) {
	            return;
	        }
	        var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
	        if (eHeaderGroup) {
	            var dragSource_1 = {
	                type: dragAndDropService.DragSourceType.HeaderCell,
	                eElement: eHeaderGroup,
	                dragItemName: displayName,
	                // we add in the original group leaf columns, so we move both visible and non-visible items
	                dragItemCallback: this.getDragItemForGroup.bind(this),
	                dragSourceDropTarget: this.dragSourceDropTarget,
	                dragStarted: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(true, "uiColumnDragged"); }); },
	                dragStopped: function () { return allLeafColumns.forEach(function (col) { return col.setMoving(false, "uiColumnDragged"); }); }
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
	    // and in the order they are currently in the screen.
	    HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {
	        var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
	        // capture visible state, used when reentering grid to dictate which columns should be visible
	        var visibleState = {};
	        allColumnsOriginalOrder.forEach(function (column$$1) { return visibleState[column$$1.getId()] = column$$1.isVisible(); });
	        var allColumnsCurrentOrder = [];
	        this.columnController.getAllDisplayedColumns().forEach(function (column$$1) {
	            if (allColumnsOriginalOrder.indexOf(column$$1) >= 0) {
	                allColumnsCurrentOrder.push(column$$1);
	                utils.Utils.removeFromArray(allColumnsOriginalOrder, column$$1);
	            }
	        });
	        // we are left with non-visible columns, stick these in at the end
	        allColumnsOriginalOrder.forEach(function (column$$1) { return allColumnsCurrentOrder.push(column$$1); });
	        // create and return dragItem
	        return {
	            columns: allColumnsCurrentOrder,
	            visibleState: visibleState
	        };
	    };
	    HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {
	        // if any child is fixed, then don't allow moving
	        var childSuppressesMoving = false;
	        this.columnGroup.getLeafColumns().forEach(function (column$$1) {
	            if (column$$1.getColDef().suppressMovable || column$$1.isLockPosition()) {
	                childSuppressesMoving = true;
	            }
	        });
	        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
	        return result;
	    };
	    HeaderGroupWrapperComp.prototype.setupWidth = function () {
	        // we need to listen to changes in child columns, as they impact our width
	        this.addListenersToChildrenColumns();
	        // the children belonging to this group can change, so we need to add and remove listeners as they change
	        this.addDestroyableEventListener(this.columnGroup, columnGroup.ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
	        this.onWidthChanged();
	        // the child listeners are not tied to this components lifecycle, as children can get added and removed
	        // to the group - hence they are on a different lifecycle. so we must make sure the existing children
	        // listeners are removed when we finally get destroyed
	        this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));
	    };
	    HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {
	        this.addListenersToChildrenColumns();
	        this.onWidthChanged();
	    };
	    HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {
	        var _this = this;
	        // first destroy any old listeners
	        this.destroyListenersOnChildrenColumns();
	        // now add new listeners to the new set of children
	        var widthChangedListener = this.onWidthChanged.bind(this);
	        this.columnGroup.getLeafColumns().forEach(function (column$$1) {
	            column$$1.addEventListener(column.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	            column$$1.addEventListener(column.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            _this.childColumnsDestroyFuncs.push(function () {
	                column$$1.removeEventListener(column.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	                column$$1.removeEventListener(column.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            });
	        });
	    };
	    HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function () {
	        this.childColumnsDestroyFuncs.forEach(function (func) { return func(); });
	        this.childColumnsDestroyFuncs = [];
	    };
	    HeaderGroupWrapperComp.prototype.onWidthChanged = function () {
	        this.getGui().style.width = this.columnGroup.getActualWidth() + 'px';
	    };
	    HeaderGroupWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        this.eHeaderCellResize = this.getRefElement('agResize');
	        if (!this.columnGroup.isResizable()) {
	            utils.Utils.removeFromParent(this.eHeaderCellResize);
	            return;
	        }
	        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
	            eResizeBar: this.eHeaderCellResize,
	            onResizeStart: this.onResizeStart.bind(this),
	            onResizing: this.onResizing.bind(this, false),
	            onResizeEnd: this.onResizing.bind(this, true)
	        });
	        this.addDestroyFunc(finishedWithResizeFunc);
	        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
	            this.eHeaderCellResize.addEventListener('dblclick', function (event) {
	                // get list of all the column keys we are responsible for
	                var keys = [];
	                _this.columnGroup.getDisplayedLeafColumns().forEach(function (column$$1) {
	                    // not all cols in the group may be participating with auto-resize
	                    if (!column$$1.getColDef().suppressAutoSize) {
	                        keys.push(column$$1.getColId());
	                    }
	                });
	                if (keys.length > 0) {
	                    _this.columnController.autoSizeColumns(keys, "uiColumnResized");
	                }
	            });
	        }
	    };
	    HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {
	        var _this = this;
	        var leafCols = this.columnGroup.getDisplayedLeafColumns();
	        this.resizeCols = utils.Utils.filter(leafCols, function (col) { return col.isResizable(); });
	        this.resizeStartWidth = 0;
	        this.resizeCols.forEach(function (col) { return _this.resizeStartWidth += col.getActualWidth(); });
	        this.resizeRatios = [];
	        this.resizeCols.forEach(function (col) { return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth); });
	        var takeFromGroup = null;
	        if (shiftKey) {
	            takeFromGroup = this.columnController.getDisplayedGroupAfter(this.columnGroup);
	        }
	        if (takeFromGroup) {
	            var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
	            this.resizeTakeFromCols = utils.Utils.filter(takeFromLeafCols, function (col) { return col.isResizable(); });
	            this.resizeTakeFromStartWidth = 0;
	            this.resizeTakeFromCols.forEach(function (col) { return _this.resizeTakeFromStartWidth += col.getActualWidth(); });
	            this.resizeTakeFromRatios = [];
	            this.resizeTakeFromCols.forEach(function (col) { return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth); });
	        }
	        else {
	            this.resizeTakeFromCols = null;
	            this.resizeTakeFromStartWidth = null;
	            this.resizeTakeFromRatios = null;
	        }
	    };
	    HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
	        var resizeSets = [];
	        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
	        resizeSets.push({
	            columns: this.resizeCols,
	            ratios: this.resizeRatios,
	            width: this.resizeStartWidth + resizeAmountNormalised
	        });
	        if (this.resizeTakeFromCols) {
	            resizeSets.push({
	                columns: this.resizeTakeFromCols,
	                ratios: this.resizeTakeFromRatios,
	                width: this.resizeTakeFromStartWidth - resizeAmountNormalised
	            });
	        }
	        this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderCell - should refactor out?
	    HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderGroupWrapperComp.TEMPLATE = '<div class="ag-header-group-cell">' +
	        '<div ref="agResize" class="ag-header-cell-resize"></div>' +
	        '</div>';
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderGroupWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderGroupWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('horizontalResizeService'),
	        __metadata("design:type", horizontalResizeService.HorizontalResizeService)
	    ], HeaderGroupWrapperComp.prototype, "horizontalResizeService", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], HeaderGroupWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], HeaderGroupWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], HeaderGroupWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], HeaderGroupWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('beans'),
	        __metadata("design:type", beans.Beans)
	    ], HeaderGroupWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderGroupWrapperComp.prototype, "postConstruct", null);
	    return HeaderGroupWrapperComp;
	}(component.Component));
	exports.HeaderGroupWrapperComp = HeaderGroupWrapperComp;
	});

	unwrapExports(headerGroupWrapperComp);
	var headerGroupWrapperComp_1 = headerGroupWrapperComp.HeaderGroupWrapperComp;

	var headerRowComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });













	var HeaderRowType;
	(function (HeaderRowType) {
	    HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
	    HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
	    HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
	})(HeaderRowType = exports.HeaderRowType || (exports.HeaderRowType = {}));
	var HeaderRowComp = (function (_super) {
	    __extends(HeaderRowComp, _super);
	    function HeaderRowComp(dept, type, pinned, dropTarget) {
	        var _this = _super.call(this, "<div class=\"ag-header-row\" role=\"presentation\"/>") || this;
	        _this.headerComps = {};
	        _this.dept = dept;
	        _this.type = type;
	        _this.pinned = pinned;
	        _this.dropTarget = dropTarget;
	        return _this;
	    }
	    HeaderRowComp.prototype.forEachHeaderElement = function (callback) {
	        var _this = this;
	        Object.keys(this.headerComps).forEach(function (key) {
	            callback(_this.headerComps[key]);
	        });
	    };
	    HeaderRowComp.prototype.destroy = function () {
	        var idsOfAllChildren = Object.keys(this.headerComps);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	        _super.prototype.destroy.call(this);
	    };
	    HeaderRowComp.prototype.removeAndDestroyChildComponents = function (idsToDestroy) {
	        var _this = this;
	        idsToDestroy.forEach(function (id) {
	            var childHeaderComp = _this.headerComps[id];
	            _this.getGui().removeChild(childHeaderComp.getGui());
	            if (childHeaderComp.destroy) {
	                childHeaderComp.destroy();
	            }
	            delete _this.headerComps[id];
	        });
	    };
	    HeaderRowComp.prototype.onRowHeightChanged = function () {
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var sizes = [];
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        for (var i = 0; i < numberOfGroups; i++) {
	            sizes.push(groupHeight);
	        }
	        sizes.push(headerHeight);
	        for (var i = 0; i < numberOfFloating; i++) {
	            sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
	        }
	        var rowHeight = 0;
	        for (var i = 0; i < this.dept; i++) {
	            rowHeight += sizes[i];
	        }
	        this.getGui().style.top = rowHeight + 'px';
	        this.getGui().style.height = sizes[this.dept] + 'px';
	    };
	    //noinspection JSUnusedLocalSymbols
	    HeaderRowComp.prototype.init = function () {
	        this.onRowHeightChanged();
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    HeaderRowComp.prototype.onColumnResized = function () {
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.setWidth = function () {
	        var mainRowWidth = this.columnController.getContainerWidth(this.pinned) + 'px';
	        this.getGui().style.width = mainRowWidth;
	    };
	    HeaderRowComp.prototype.onGridColumnsChanged = function () {
	        this.removeAndDestroyAllChildComponents();
	    };
	    HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function () {
	        var idsOfAllChildren = Object.keys(this.headerComps);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	    };
	    HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.onVirtualColumnsChanged = function () {
	        var _this = this;
	        var currentChildIds = Object.keys(this.headerComps);
	        var itemsAtDepth = this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ?
	            this.dept - 1 :
	            this.dept);
	        var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
	        var eBefore;
	        itemsAtDepth.forEach(function (child) {
	            // skip groups that have no displayed children. this can happen when the group is broken,
	            // and this section happens to have nothing to display for the open / closed state.
	            // (a broken group is one that is split, ie columns in the group have a non-group column
	            // in between them)
	            if (child.isEmptyGroup()) {
	                return;
	            }
	            var idOfChild = child.getUniqueId();
	            var eParentContainer = _this.getGui();
	            // if we already have this cell rendered, do nothing
	            var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;
	            var headerComp;
	            var eHeaderCompGui;
	            if (colAlreadyInDom) {
	                utils.Utils.removeFromArray(currentChildIds, idOfChild);
	                headerComp = _this.headerComps[idOfChild];
	                eHeaderCompGui = headerComp.getGui();
	                if (ensureDomOrder) {
	                    utils.Utils.ensureDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                }
	                eBefore = eHeaderCompGui;
	            }
	            else {
	                headerComp = _this.createHeaderComp(child);
	                _this.headerComps[idOfChild] = headerComp;
	                eHeaderCompGui = headerComp.getGui();
	                if (ensureDomOrder) {
	                    utils.Utils.insertWithDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                }
	                else {
	                    eParentContainer.appendChild(eHeaderCompGui);
	                }
	                eBefore = eHeaderCompGui;
	            }
	        });
	        // at this point, anything left in currentChildIds is an element that is no longer in the viewport
	        this.removeAndDestroyChildComponents(currentChildIds);
	    };
	    HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {
	        var result;
	        switch (this.type) {
	            case HeaderRowType.COLUMN:
	                result = new headerWrapperComp.HeaderWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
	                break;
	            case HeaderRowType.COLUMN_GROUP:
	                result = new headerGroupWrapperComp.HeaderGroupWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
	                break;
	            case HeaderRowType.FLOATING_FILTER:
	                var column$$1 = columnGroupChild;
	                result = this.createFloatingFilterWrapper(column$$1);
	                break;
	        }
	        this.context.wireBean(result);
	        return result;
	    };
	    HeaderRowComp.prototype.createFloatingFilterWrapper = function (column$$1) {
	        var _this = this;
	        var floatingFilterParams = this.createFloatingFilterParams(column$$1);
	        var floatingFilterWrapper = this.componentRecipes.newFloatingFilterWrapperComponent(column$$1, floatingFilterParams);
	        this.addDestroyableEventListener(column$$1, column.Column.EVENT_FILTER_CHANGED, function () {
	            var filterComponentPromise = _this.filterManager.getFilterComponent(column$$1);
	            floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));
	        });
	        var cachedFilter = this.filterManager.cachedFilter(column$$1);
	        if (cachedFilter) {
	            var filterComponentPromise = this.filterManager.getFilterComponent(column$$1);
	            floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));
	        }
	        return floatingFilterWrapper;
	    };
	    HeaderRowComp.prototype.createFloatingFilterParams = function (column$$1) {
	        var _this = this;
	        // We always get the freshest reference to the baseFilter because the filters get sometimes created
	        // and destroyed between calls
	        //
	        // let filterComponent:BaseFilter<any, any, any> = <any>this.filterManager.getFilterComponent(column);
	        //
	        var baseParams = {
	            api: this.gridApi,
	            column: column$$1,
	            currentParentModel: function () {
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column$$1);
	                var wholeParentFilter = filterComponentPromise.resolveNow(null, function (filter) {
	                    return (filter.getNullableModel) ?
	                        filter.getNullableModel() :
	                        filter.getModel();
	                });
	                return wholeParentFilter.operator != null ? wholeParentFilter.condition1 : wholeParentFilter;
	            },
	            onFloatingFilterChanged: function (change) {
	                var captureModelChangedResolveFunc;
	                var modelChanged = new utils.Promise(function (resolve) {
	                    captureModelChangedResolveFunc = resolve;
	                });
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column$$1);
	                filterComponentPromise.then(function (filterComponent) {
	                    if (filterComponent.onFloatingFilterChanged) {
	                        //If going through this branch of code the user MUST
	                        //be passing an object of type change that contains
	                        //a model propery inside and some other stuff
	                        var result = filterComponent.onFloatingFilterChanged(change);
	                        captureModelChangedResolveFunc(result);
	                    }
	                    else {
	                        //If going through this branch of code the user MUST
	                        //be passing the plain model and delegating to ag-Grid
	                        //the responsibility to set the parent model and refresh
	                        //the filters
	                        filterComponent.setModel(change);
	                        _this.filterManager.onFilterChanged();
	                        captureModelChangedResolveFunc(true);
	                    }
	                });
	                return modelChanged.resolveNow(true, function (modelChanged) { return modelChanged; });
	            },
	            //This one might be overriden from the colDef
	            suppressFilterButton: false
	        };
	        return baseParams;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderRowComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], HeaderRowComp.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderRowComp.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], HeaderRowComp.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeaderRowComp.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], HeaderRowComp.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], HeaderRowComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRowComp.prototype, "init", null);
	    return HeaderRowComp;
	}(component.Component));
	exports.HeaderRowComp = HeaderRowComp;
	});

	unwrapExports(headerRowComp);
	var headerRowComp_1 = headerRowComp.HeaderRowType;
	var headerRowComp_2 = headerRowComp.HeaderRowComp;

	var moveColumnController = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var MoveColumnController = (function () {
	    function MoveColumnController(pinned, eContainer) {
	        this.needToMoveLeft = false;
	        this.needToMoveRight = false;
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	        this.centerContainer = !utils.Utils.exists(pinned);
	    }
	    MoveColumnController.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    MoveColumnController.prototype.init = function () {
	        this.logger = this.loggerFactory.create('MoveColumnController');
	    };
	    MoveColumnController.prototype.getIconName = function () {
	        return this.pinned ? dragAndDropService.DragAndDropService.ICON_PINNED : dragAndDropService.DragAndDropService.ICON_MOVE;
	    };
	    MoveColumnController.prototype.onDragEnter = function (draggingEvent) {
	        // we do dummy drag, so make sure column appears in the right location when first placed
	        var columns = draggingEvent.dragItem.columns;
	        var dragCameFromToolPanel = draggingEvent.dragSource.type === dragAndDropService.DragSourceType.ToolPanel;
	        if (dragCameFromToolPanel) {
	            // the if statement doesn't work if drag leaves grid, then enters again
	            this.setColumnsVisible(columns, true, "uiColumnDragged");
	        }
	        else {
	            // restore previous state of visible columns upon re-entering. this means if the user drags
	            // a group out, and then drags the group back in, only columns that were originally visible
	            // will be visible again. otherwise a group with three columns (but only two visible) could
	            // be dragged out, then when it's dragged in again, all three are visible. this stops that.
	            var visibleState_1 = draggingEvent.dragItem.visibleState;
	            var visibleColumns = columns.filter(function (column$$1) { return visibleState_1[column$$1.getId()]; });
	            this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
	        }
	        this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
	        this.onDragging(draggingEvent, true);
	    };
	    MoveColumnController.prototype.onDragLeave = function (draggingEvent) {
	        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
	        if (hideColumnOnExit) {
	            var dragItem = draggingEvent.dragSource.dragItemCallback();
	            var columns = dragItem.columns;
	            this.setColumnsVisible(columns, false, "uiColumnDragged");
	        }
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.setColumnsVisible = function (columns, visible, source) {
	        if (source === void 0) { source = "api"; }
	        if (columns) {
	            var allowedCols = columns.filter(function (c) { return !c.isLockVisible(); });
	            this.columnController.setColumnsVisible(allowedCols, visible, source);
	        }
	    };
	    MoveColumnController.prototype.setColumnsPinned = function (columns, pinned, source) {
	        if (source === void 0) { source = "api"; }
	        if (columns) {
	            var allowedCols = columns.filter(function (c) { return !c.isLockPinned(); });
	            this.columnController.setColumnsPinned(allowedCols, pinned, source);
	        }
	    };
	    MoveColumnController.prototype.onDragStop = function () {
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.normaliseX = function (x) {
	        // flip the coordinate if doing RTL
	        var flipHorizontallyForRtl = this.gridOptionsWrapper.isEnableRtl();
	        if (flipHorizontallyForRtl) {
	            var clientWidth = this.eContainer.clientWidth;
	            x = clientWidth - x;
	        }
	        // adjust for scroll only if centre container (the pinned containers dont scroll)
	        var adjustForScroll = this.centerContainer;
	        if (adjustForScroll) {
	            x += this.gridPanel.getBodyViewportScrollLeft();
	        }
	        return x;
	    };
	    MoveColumnController.prototype.checkCenterForScrolling = function (xAdjustedForScroll) {
	        if (this.centerContainer) {
	            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
	            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
	            var firstVisiblePixel = this.gridPanel.getBodyViewportScrollLeft();
	            var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            else {
	                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            if (this.needToMoveLeft || this.needToMoveRight) {
	                this.ensureIntervalStarted();
	            }
	            else {
	                this.ensureIntervalCleared();
	            }
	        }
	    };
	    MoveColumnController.prototype.onDragging = function (draggingEvent, fromEnter) {
	        var _this = this;
	        if (fromEnter === void 0) { fromEnter = false; }
	        this.lastDraggingEvent = draggingEvent;
	        // if moving up or down (ie not left or right) then do nothing
	        if (utils.Utils.missing(draggingEvent.hDirection)) {
	            return;
	        }
	        var xNormalised = this.normaliseX(draggingEvent.x);
	        // if the user is dragging into the panel, ie coming from the side panel into the main grid,
	        // we don't want to scroll the grid this time, it would appear like the table is jumping
	        // each time a column is dragged in.
	        if (!fromEnter) {
	            this.checkCenterForScrolling(xNormalised);
	        }
	        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
	        var dragSourceType = draggingEvent.dragSource.type;
	        var columnsToMove = draggingEvent.dragSource.dragItemCallback().columns;
	        columnsToMove = columnsToMove.filter(function (col) {
	            if (col.isLockPinned()) {
	                // if locked return true only if both col and container are same pin type.
	                // double equals (==) here on purpose so that null==undefined is true (for not pinned options)
	                return col.getPinned() == _this.pinned;
	            }
	            else {
	                // if not pin locked, then always allowed to be in this container
	                return true;
	            }
	        });
	        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, xNormalised, fromEnter);
	    };
	    MoveColumnController.prototype.normaliseDirection = function (hDirection) {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            switch (hDirection) {
	                case dragAndDropService.HDirection.Left: return dragAndDropService.HDirection.Right;
	                case dragAndDropService.HDirection.Right: return dragAndDropService.HDirection.Left;
	                default: console.error("ag-Grid: Unknown direction " + hDirection);
	            }
	        }
	        else {
	            return hDirection;
	        }
	    };
	    // returns the index of the first column in the list ONLY if the cols are all beside
	    // each other. if the cols are not beside each other, then returns null
	    MoveColumnController.prototype.calculateOldIndex = function (movingCols) {
	        var gridCols = this.columnController.getAllGridColumns();
	        var indexes = [];
	        movingCols.forEach(function (col) { return indexes.push(gridCols.indexOf(col)); });
	        utils.Utils.sortNumberArray(indexes);
	        var firstIndex = indexes[0];
	        var lastIndex = indexes[indexes.length - 1];
	        var spread = lastIndex - firstIndex;
	        var gapsExist = spread !== indexes.length - 1;
	        return gapsExist ? null : firstIndex;
	    };
	    MoveColumnController.prototype.attemptMoveColumns = function (dragSourceType, allMovingColumns, hDirection, xAdjusted, fromEnter) {
	        var draggingLeft = hDirection === dragAndDropService.HDirection.Left;
	        var draggingRight = hDirection === dragAndDropService.HDirection.Right;
	        var validMoves = this.calculateValidMoves(allMovingColumns, draggingRight, xAdjusted);
	        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
	        // (ie left or right) to the mouse direction. however
	        var oldIndex = this.calculateOldIndex(allMovingColumns);
	        // fromEnter = false;
	        for (var i = 0; i < validMoves.length; i++) {
	            var newIndex = validMoves[i];
	            // the two check below stop an error when the user grabs a group my a middle column, then
	            // it is possible the mouse pointer is to the right of a column while been dragged left.
	            // so we need to make sure that the mouse pointer is actually left of the left most column
	            // if moving left, and right of the right most column if moving right
	            // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
	            // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
	            // place the column to the RHS even if the mouse is moving left and the column is already on
	            // the LHS. otherwise we stick to the rule described above.
	            var constrainDirection = oldIndex !== null && !fromEnter;
	            // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag
	            if (dragSourceType == dragAndDropService.DragSourceType.HeaderCell) {
	                constrainDirection = oldIndex !== null;
	            }
	            if (constrainDirection) {
	                // only allow left drag if this column is moving left
	                if (draggingLeft && newIndex >= oldIndex) {
	                    continue;
	                }
	                // only allow right drag if this column is moving right
	                if (draggingRight && newIndex <= oldIndex) {
	                    continue;
	                }
	            }
	            if (!this.columnController.doesMovePassRules(allMovingColumns, newIndex)) {
	                continue;
	            }
	            this.columnController.moveColumns(allMovingColumns, newIndex, "uiColumnDragged");
	            // important to return here, so once we do the first valid move, we don't try do any more
	            return;
	        }
	    };
	    MoveColumnController.prototype.calculateValidMoves = function (movingCols, draggingRight, x) {
	        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
	        var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
	        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
	        // so the result we return has to be and index location for this list
	        var allGridCols = this.columnController.getAllGridColumns();
	        var colIsMovingFunc = function (col) { return movingCols.indexOf(col) >= 0; };
	        var colIsNotMovingFunc = function (col) { return movingCols.indexOf(col) < 0; };
	        var movingDisplayedCols = allDisplayedCols.filter(colIsMovingFunc);
	        var otherDisplayedCols = allDisplayedCols.filter(colIsNotMovingFunc);
	        var otherGridCols = allGridCols.filter(colIsNotMovingFunc);
	        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
	        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
	        // col between b and c (so that it is under the mouse position).
	        var displayIndex = 0;
	        var availableWidth = x;
	        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
	        // include the width of the moving columns
	        if (draggingRight) {
	            var widthOfMovingDisplayedCols_1 = 0;
	            movingDisplayedCols.forEach(function (col) { return widthOfMovingDisplayedCols_1 += col.getActualWidth(); });
	            availableWidth -= widthOfMovingDisplayedCols_1;
	        }
	        // now count how many of the displayed columns will fit to the left
	        for (var i = 0; i < otherDisplayedCols.length; i++) {
	            var col = otherDisplayedCols[i];
	            availableWidth -= col.getActualWidth();
	            if (availableWidth < 0) {
	                break;
	            }
	            displayIndex++;
	        }
	        // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works
	        if (draggingRight) {
	            displayIndex++;
	        }
	        // the display index is with respect to all the showing columns, however when we move, it's with
	        // respect to all grid columns, so we need to translate from display index to grid index
	        var gridColIndex;
	        if (displayIndex > 0) {
	            var leftColumn = otherDisplayedCols[displayIndex - 1];
	            gridColIndex = otherGridCols.indexOf(leftColumn) + 1;
	        }
	        else {
	            gridColIndex = 0;
	        }
	        var validMoves = [gridColIndex];
	        // add in all adjacent empty columns as other valid moves. this allows us to try putting the new
	        // column in any place of a hidden column, to try different combinations so that we don't break
	        // married children. in other words, maybe the new index breaks a group, but only because some
	        // columns are hidden, maybe we can reshuffle the hidden columns to find a place that works.
	        var nextCol = allGridCols[gridColIndex];
	        while (utils.Utils.exists(nextCol) && this.isColumnHidden(allDisplayedCols, nextCol)) {
	            gridColIndex++;
	            validMoves.push(gridColIndex);
	            nextCol = allGridCols[gridColIndex];
	        }
	        return validMoves;
	    };
	    // isHidden takes into account visible=false and group=closed, ie it is not displayed
	    MoveColumnController.prototype.isColumnHidden = function (displayedColumns, col) {
	        return displayedColumns.indexOf(col) < 0;
	    };
	    MoveColumnController.prototype.ensureIntervalStarted = function () {
	        if (!this.movingIntervalId) {
	            this.intervalCount = 0;
	            this.failedMoveAttempts = 0;
	            this.movingIntervalId = setInterval(this.moveInterval.bind(this), 100);
	            if (this.needToMoveLeft) {
	                this.dragAndDropService.setGhostIcon(dragAndDropService.DragAndDropService.ICON_LEFT, true);
	            }
	            else {
	                this.dragAndDropService.setGhostIcon(dragAndDropService.DragAndDropService.ICON_RIGHT, true);
	            }
	        }
	    };
	    MoveColumnController.prototype.ensureIntervalCleared = function () {
	        if (this.moveInterval) {
	            clearInterval(this.movingIntervalId);
	            this.movingIntervalId = null;
	            this.dragAndDropService.setGhostIcon(dragAndDropService.DragAndDropService.ICON_MOVE);
	        }
	    };
	    MoveColumnController.prototype.moveInterval = function () {
	        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
	        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
	        var pixelsToMove;
	        this.intervalCount++;
	        pixelsToMove = 10 + (this.intervalCount * 5);
	        if (pixelsToMove > 100) {
	            pixelsToMove = 100;
	        }
	        var pixelsMoved;
	        if (this.needToMoveLeft) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
	        }
	        else if (this.needToMoveRight) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
	        }
	        if (pixelsMoved !== 0) {
	            this.onDragging(this.lastDraggingEvent);
	            this.failedMoveAttempts = 0;
	        }
	        else {
	            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.
	            // this is how we achieve pining by dragging the column to the edge of the grid.
	            this.failedMoveAttempts++;
	            var columns = this.lastDraggingEvent.dragItem.columns;
	            var columnsThatCanPin = columns.filter(function (c) { return !c.isLockPinned(); });
	            if (columnsThatCanPin.length > 0) {
	                this.dragAndDropService.setGhostIcon(dragAndDropService.DragAndDropService.ICON_PINNED);
	                if (this.failedMoveAttempts > 7) {
	                    var pinType = this.needToMoveLeft ? column.Column.PINNED_LEFT : column.Column.PINNED_RIGHT;
	                    this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
	                    this.dragAndDropService.nudge();
	                }
	            }
	        }
	    };
	    __decorate([
	        context.Autowired('loggerFactory'),
	        __metadata("design:type", logger.LoggerFactory)
	    ], MoveColumnController.prototype, "loggerFactory", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], MoveColumnController.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], MoveColumnController.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], MoveColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MoveColumnController.prototype, "init", null);
	    return MoveColumnController;
	}());
	exports.MoveColumnController = MoveColumnController;
	});

	unwrapExports(moveColumnController);
	var moveColumnController_1 = moveColumnController.MoveColumnController;

	var bodyDropPivotTarget = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var BodyDropPivotTarget = (function () {
	    function BodyDropPivotTarget(pinned) {
	        this.columnsToAggregate = [];
	        this.columnsToGroup = [];
	        this.columnsToPivot = [];
	        this.pinned = pinned;
	    }
	    /** Callback for when drag enters */
	    BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {
	        var _this = this;
	        this.clearColumnsList();
	        // in pivot mode, we don't accept any drops if functions are read only
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return;
	        }
	        var dragColumns = draggingEvent.dragItem.columns;
	        dragColumns.forEach(function (column) {
	            // we don't allow adding secondary columns
	            if (!column.isPrimary()) {
	                return;
	            }
	            if (column.isAnyFunctionActive()) {
	                return;
	            }
	            if (column.isAllowValue()) {
	                _this.columnsToAggregate.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToGroup.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToPivot.push(column);
	            }
	        });
	    };
	    BodyDropPivotTarget.prototype.getIconName = function () {
	        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
	        if (totalColumns > 0) {
	            return this.pinned ? dragAndDropService.DragAndDropService.ICON_PINNED : dragAndDropService.DragAndDropService.ICON_MOVE;
	        }
	        else {
	            return null;
	        }
	    };
	    /** Callback for when drag leaves */
	    BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {
	        // if we are taking columns out of the center, then we remove them from the report
	        this.clearColumnsList();
	    };
	    BodyDropPivotTarget.prototype.clearColumnsList = function () {
	        this.columnsToAggregate.length = 0;
	        this.columnsToGroup.length = 0;
	        this.columnsToPivot.length = 0;
	    };
	    /** Callback for when dragging */
	    BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {
	    };
	    /** Callback for when drag stops */
	    BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {
	        if (this.columnsToAggregate.length > 0) {
	            this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
	        }
	        if (this.columnsToGroup.length > 0) {
	            this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
	        }
	        if (this.columnsToPivot.length > 0) {
	            this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
	        }
	    };
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], BodyDropPivotTarget.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);
	    return BodyDropPivotTarget;
	}());
	exports.BodyDropPivotTarget = BodyDropPivotTarget;
	});

	unwrapExports(bodyDropPivotTarget);
	var bodyDropPivotTarget_1 = bodyDropPivotTarget.BodyDropPivotTarget;

	var bodyDropTarget = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var DropType;
	(function (DropType) {
	    DropType[DropType["ColumnMove"] = 0] = "ColumnMove";
	    DropType[DropType["Pivot"] = 1] = "Pivot";
	})(DropType || (DropType = {}));
	var BodyDropTarget = (function () {
	    function BodyDropTarget(pinned, eContainer) {
	        this.dropListeners = {};
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	    }
	    BodyDropTarget.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	        this.moveColumnController.registerGridComp(gridPanel);
	        switch (this.pinned) {
	            case column.Column.PINNED_LEFT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
	                break;
	            case column.Column.PINNED_RIGHT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();
	                break;
	            default:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
	                break;
	        }
	    };
	    BodyDropTarget.prototype.isInterestedIn = function (type) {
	        // not interested in row drags
	        return type === dragAndDropService.DragSourceType.HeaderCell || type === dragAndDropService.DragSourceType.ToolPanel;
	    };
	    BodyDropTarget.prototype.getSecondaryContainers = function () {
	        return this.eSecondaryContainers;
	    };
	    BodyDropTarget.prototype.getContainer = function () {
	        return this.eContainer;
	    };
	    BodyDropTarget.prototype.init = function () {
	        this.moveColumnController = new moveColumnController.MoveColumnController(this.pinned, this.eContainer);
	        this.context.wireBean(this.moveColumnController);
	        var bodyDropPivotTarget$$1 = new bodyDropPivotTarget.BodyDropPivotTarget(this.pinned);
	        this.context.wireBean(bodyDropPivotTarget$$1);
	        this.dropListeners[DropType.ColumnMove] = this.moveColumnController;
	        this.dropListeners[DropType.Pivot] = bodyDropPivotTarget$$1;
	        this.dragAndDropService.addDropTarget(this);
	    };
	    BodyDropTarget.prototype.getIconName = function () {
	        return this.currentDropListener.getIconName();
	    };
	    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
	    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
	    // dropped into the grid's body.
	    BodyDropTarget.prototype.getDropType = function (draggingEvent) {
	        if (this.columnController.isPivotMode()) {
	            // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's
	            // a standard column move, however if it came from teh toolpanel, then we are introducing
	            // dimensions or values to the grid
	            if (draggingEvent.dragSource.type === dragAndDropService.DragSourceType.ToolPanel) {
	                return DropType.Pivot;
	            }
	            else {
	                return DropType.ColumnMove;
	            }
	        }
	        else {
	            // it's a column, and not pivot mode, so always moving
	            return DropType.ColumnMove;
	        }
	    };
	    BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {
	        // we pick the drop listener depending on whether we are in pivot mode are not. if we are
	        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
	        // we change visibility state and position.
	        // if (this.columnController.isPivotMode()) {
	        var dropType = this.getDropType(draggingEvent);
	        this.currentDropListener = this.dropListeners[dropType];
	        this.currentDropListener.onDragEnter(draggingEvent);
	    };
	    BodyDropTarget.prototype.onDragLeave = function (params) {
	        this.currentDropListener.onDragLeave(params);
	    };
	    BodyDropTarget.prototype.onDragging = function (params) {
	        this.currentDropListener.onDragging(params);
	    };
	    BodyDropTarget.prototype.onDragStop = function (params) {
	        this.currentDropListener.onDragStop(params);
	    };
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], BodyDropTarget.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], BodyDropTarget.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], BodyDropTarget.prototype, "columnController", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], BodyDropTarget.prototype, "init", null);
	    return BodyDropTarget;
	}());
	exports.BodyDropTarget = BodyDropTarget;
	});

	unwrapExports(bodyDropTarget);
	var bodyDropTarget_1 = bodyDropTarget.BodyDropTarget;

	var headerContainer = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });











	var HeaderContainer = (function () {
	    function HeaderContainer(eContainer, eViewport, pinned) {
	        this.headerRowComps = [];
	        this.eContainer = eContainer;
	        this.pinned = pinned;
	        this.eViewport = eViewport;
	    }
	    HeaderContainer.prototype.registerGridComp = function (gridPanel) {
	        this.setupDragAndDrop(gridPanel);
	    };
	    HeaderContainer.prototype.forEachHeaderElement = function (callback) {
	        this.headerRowComps.forEach(function (headerRowComp$$1) { return headerRowComp$$1.forEachHeaderElement(callback); });
	    };
	    HeaderContainer.prototype.init = function () {
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
	        // if pivoting, then the columns have changed
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.eventService.addEventListener(events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	    };
	    // if row group changes, that means we may need to add aggFunc's to the column headers,
	    // if the grid goes from no aggregation (ie no grouping) to grouping
	    HeaderContainer.prototype.onColumnRowGroupChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    // if the agg func of a column changes, then we may need to update the agg func in columns header
	    HeaderContainer.prototype.onColumnValueChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.onColumnResized = function () {
	        this.setWidthOfPinnedContainer();
	    };
	    HeaderContainer.prototype.onDisplayedColumnsChanged = function () {
	        this.setWidthOfPinnedContainer();
	    };
	    HeaderContainer.prototype.onScrollVisibilityChanged = function () {
	        this.setWidthOfPinnedContainer();
	    };
	    HeaderContainer.prototype.setWidthOfPinnedContainer = function () {
	        var pinningLeft = this.pinned === column.Column.PINNED_LEFT;
	        var pinningRight = this.pinned === column.Column.PINNED_RIGHT;
	        if (pinningLeft || pinningRight) {
	            // size to fit all columns
	            var width = pinningLeft ?
	                this.columnController.getPinnedLeftContainerWidth()
	                : this.columnController.getPinnedRightContainerWidth();
	            // if there is a scroll showing (and taking up space, so Windows, and not iOS)
	            // in the body, then we add extra space to keep header aligned with the body,
	            // as body width fits the cols and the scrollbar
	            var addPaddingForScrollbar = pinningLeft ?
	                this.scrollVisibleService.isLeftVerticalScrollShowing()
	                : this.scrollVisibleService.isRightVerticalScrollShowing();
	            if (addPaddingForScrollbar) {
	                width += this.scrollWidth;
	            }
	            this.eContainer.style.width = width + 'px';
	        }
	    };
	    HeaderContainer.prototype.destroy = function () {
	        this.removeHeaderRowComps();
	    };
	    // grid cols have changed - this also means the number of rows in the header can have
	    // changed. so we remove all the old rows and insert new ones for a complete refresh
	    HeaderContainer.prototype.onGridColumnsChanged = function () {
	        this.removeHeaderRowComps();
	        this.createHeaderRowComps();
	    };
	    // we expose this for gridOptions.api.refreshHeader() to call
	    HeaderContainer.prototype.refresh = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.setupDragAndDrop = function (gridComp) {
	        var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
	        var bodyDropTarget$$1 = new bodyDropTarget.BodyDropTarget(this.pinned, dropContainer);
	        this.context.wireBean(bodyDropTarget$$1);
	        bodyDropTarget$$1.registerGridComp(gridComp);
	    };
	    HeaderContainer.prototype.removeHeaderRowComps = function () {
	        this.headerRowComps.forEach(function (headerRowComp$$1) {
	            headerRowComp$$1.destroy();
	        });
	        this.headerRowComps.length = 0;
	        utils.Utils.removeAllChildren(this.eContainer);
	    };
	    HeaderContainer.prototype.createHeaderRowComps = function () {
	        // if we are displaying header groups, then we have many rows here.
	        // go through each row of the header, one by one.
	        var rowCount = this.columnController.getHeaderRowCount();
	        for (var dept = 0; dept < rowCount; dept++) {
	            var groupRow = dept !== (rowCount - 1);
	            var type = groupRow ? headerRowComp.HeaderRowType.COLUMN_GROUP : headerRowComp.HeaderRowType.COLUMN;
	            var headerRowComp$$1 = new headerRowComp.HeaderRowComp(dept, type, this.pinned, this.dropTarget);
	            this.context.wireBean(headerRowComp$$1);
	            this.headerRowComps.push(headerRowComp$$1);
	            this.eContainer.appendChild(headerRowComp$$1.getGui());
	        }
	        var includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();
	        if (includeFloatingFilterRow) {
	            var headerRowComp$$1 = new headerRowComp.HeaderRowComp(rowCount, headerRowComp.HeaderRowType.FLOATING_FILTER, this.pinned, this.dropTarget);
	            this.context.wireBean(headerRowComp$$1);
	            this.headerRowComps.push(headerRowComp$$1);
	            this.eContainer.appendChild(headerRowComp$$1.getGui());
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderContainer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], HeaderContainer.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], HeaderContainer.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], HeaderContainer.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderContainer.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeaderContainer.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService.ScrollVisibleService)
	    ], HeaderContainer.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderContainer.prototype, "init", null);
	    return HeaderContainer;
	}());
	exports.HeaderContainer = HeaderContainer;
	});

	unwrapExports(headerContainer);
	var headerContainer_1 = headerContainer.HeaderContainer;

	var headerRootComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });













	var HeaderRootComp = (function (_super) {
	    __extends(HeaderRootComp, _super);
	    function HeaderRootComp() {
	        return _super.call(this, HeaderRootComp.TEMPLATE) || this;
	    }
	    HeaderRootComp.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	        this.centerContainer.registerGridComp(gridPanel);
	        this.pinnedLeftContainer.registerGridComp(gridPanel);
	        this.pinnedRightContainer.registerGridComp(gridPanel);
	    };
	    HeaderRootComp.prototype.postConstruct = function () {
	        var _this = this;
	        this.gridApi.registerHeaderRootComp(this);
	        this.autoWidthCalculator.registerHeaderRootComp(this);
	        this.centerContainer = new headerContainer.HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null);
	        this.childContainers = [this.centerContainer];
	        this.pinnedLeftContainer = new headerContainer.HeaderContainer(this.ePinnedLeftHeader, null, column.Column.PINNED_LEFT);
	        this.pinnedRightContainer = new headerContainer.HeaderContainer(this.ePinnedRightHeader, null, column.Column.PINNED_RIGHT);
	        this.childContainers.push(this.pinnedLeftContainer);
	        this.childContainers.push(this.pinnedRightContainer);
	        this.childContainers.forEach(function (container) { return _this.context.wireBean(container); });
	        // shotgun way to get labels to change, eg from sum(amount) to avg(amount)
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));
	        // for setting ag-pivot-on / ag-pivot-off CSS classes
	        this.eventService.addEventListener(events$1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
	        this.addPreventHeaderScroll();
	        if (this.columnController.isReady()) {
	            this.refreshHeader();
	        }
	    };
	    HeaderRootComp.prototype.setHorizontalScroll = function (offset) {
	        this.eHeaderContainer.style.left = offset + 'px';
	    };
	    HeaderRootComp.prototype.forEachHeaderElement = function (callback) {
	        this.childContainers.forEach(function (childContainer) { return childContainer.forEachHeaderElement(callback); });
	    };
	    HeaderRootComp.prototype.destroy = function () {
	        this.childContainers.forEach(function (container) { return container.destroy(); });
	    };
	    HeaderRootComp.prototype.refreshHeader = function () {
	        this.childContainers.forEach(function (container) { return container.refresh(); });
	    };
	    HeaderRootComp.prototype.onPivotModeChanged = function () {
	        var pivotMode = this.columnController.isPivotMode();
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-pivot-on', pivotMode);
	        utils.Utils.addOrRemoveCssClass(this.getGui(), 'ag-pivot-off', !pivotMode);
	    };
	    HeaderRootComp.prototype.setHeight = function (height) {
	        this.getGui().style.height = height + 'px';
	        this.getGui().style.minHeight = height + 'px';
	    };
	    // if the user is in floating filter and hits tab a few times, the header can
	    // end up scrolling to show items off the screen, leaving the grid and header
	    // and the grid columns no longer in sync.
	    HeaderRootComp.prototype.addPreventHeaderScroll = function () {
	        var _this = this;
	        this.addDestroyableEventListener(this.eHeaderViewport, 'scroll', function () {
	            // if the header scrolls, the header will be out of sync. so we reset the
	            // header scroll, and then scroll the body, which will in turn set the offset
	            // on the header, giving the impression that the header scrolled as expected.
	            var scrollLeft = _this.eHeaderViewport.scrollLeft;
	            if (scrollLeft !== 0) {
	                _this.gridPanel.scrollHorizontally(scrollLeft);
	                _this.eHeaderViewport.scrollLeft = 0;
	            }
	        });
	    };
	    HeaderRootComp.prototype.setLeftVisible = function (visible) {
	        utils.Utils.setVisible(this.ePinnedLeftHeader, visible);
	    };
	    HeaderRootComp.prototype.setRightVisible = function (visible) {
	        utils.Utils.setVisible(this.ePinnedRightHeader, visible);
	    };
	    HeaderRootComp.TEMPLATE = "<div class=\"ag-header\" role=\"row\">\n            <div class=\"ag-pinned-left-header\" ref=\"ePinnedLeftHeader\" role=\"presentation\"></div>\n            <div class=\"ag-header-viewport\" ref=\"eHeaderViewport\" role=\"presentation\">\n                <div class=\"ag-header-container\" ref=\"eHeaderContainer\" role=\"presentation\"></div>\n            </div>\n            <div class=\"ag-pinned-right-header\" ref=\"ePinnedRightHeader\" role=\"presentation\"></div>\n        </div>";
	    __decorate([
	        componentAnnotations.RefSelector('ePinnedLeftHeader'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderRootComp.prototype, "ePinnedLeftHeader", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('ePinnedRightHeader'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderRootComp.prototype, "ePinnedRightHeader", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eHeaderContainer'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderRootComp.prototype, "eHeaderContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eHeaderViewport'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderRootComp.prototype, "eHeaderViewport", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], HeaderRootComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], HeaderRootComp.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], HeaderRootComp.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], HeaderRootComp.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService.ScrollVisibleService)
	    ], HeaderRootComp.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], HeaderRootComp.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('autoWidthCalculator'),
	        __metadata("design:type", autoWidthCalculator.AutoWidthCalculator)
	    ], HeaderRootComp.prototype, "autoWidthCalculator", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRootComp.prototype, "postConstruct", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRootComp.prototype, "destroy", null);
	    return HeaderRootComp;
	}(component.Component));
	exports.HeaderRootComp = HeaderRootComp;
	});

	unwrapExports(headerRootComp);
	var headerRootComp_1 = headerRootComp.HeaderRootComp;

	var gridPanel = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






































	// in the html below, it is important that there are no white space between some of the divs, as if there is white space,
	// it won't render correctly in safari, as safari renders white space as a gap
	var GRID_PANEL_NORMAL_TEMPLATE = "<div class=\"ag-root ag-font-style\" role=\"grid\">\n        <ag-header-root ref=\"headerRoot\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\">\n            <div class=\"ag-pinned-left-floating-top\" ref=\"eLeftTop\" role=\"presentation\"></div>\n            <div class=\"ag-floating-top-viewport\" ref=\"eTopViewport\" role=\"presentation\">\n                <div class=\"ag-floating-top-container\" ref=\"eTopContainer\" role=\"presentation\"></div>\n            </div>\n            <div class=\"ag-pinned-right-floating-top\" ref=\"eRightTop\" role=\"presentation\"></div>\n            <div class=\"ag-floating-top-full-width-container\" ref=\"eTopFullWidthContainer\" role=\"presentation\"></div>\n        </div>\n        <div class=\"ag-body\" ref=\"eBody\" role=\"presentation\">\n            <div class=\"ag-pinned-left-cols-viewport-wrapper\" ref=\"eLeftViewportWrapper\" role=\"presentation\">\n                <div class=\"ag-pinned-left-cols-viewport\" ref=\"eLeftViewport\" role=\"presentation\">\n                    <div class=\"ag-pinned-left-cols-container\" ref=\"eLeftContainer\" role=\"presentation\"></div>\n                </div>\n            </div>\n            <div class=\"ag-body-viewport-wrapper\" role=\"presentation\">\n                <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n                    <div class=\"ag-body-container\" ref=\"eBodyContainer\" role=\"presentation\"></div>\n                </div>\n            </div>\n            <div class=\"ag-pinned-right-cols-viewport-wrapper\" ref=\"eRightViewportWrapper\" role=\"presentation\">\n                <div class=\"ag-pinned-right-cols-viewport\" ref=\"eRightViewport\" role=\"presentation\">\n                    <div class=\"ag-pinned-right-cols-container\" ref=\"eRightContainer\" role=\"presentation\"></div>\n                </div>\n            </div>\n            <div class=\"ag-full-width-viewport-wrapper\" ref=\"eFullWidthViewportWrapper\" role=\"presentation\">\n                <div class=\"ag-full-width-viewport\" ref=\"eFullWidthViewport\" role=\"presentation\">\n                    <div class=\"ag-full-width-container\" ref=\"eFullWidthContainer\" role=\"presentation\"></div>\n                </div>\n            </div>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\">\n            <div class=\"ag-pinned-left-floating-bottom\" ref=\"eLeftBottom\" role=\"presentation\"></div>\n            <div class=\"ag-floating-bottom-viewport\" ref=\"eBottomViewport\" role=\"presentation\">\n                <div class=\"ag-floating-bottom-container\" ref=\"eBottomContainer\" role=\"presentation\"></div>\n            </div>\n            <div class=\"ag-pinned-right-floating-bottom\" ref=\"eRightBottom\" role=\"presentation\"></div>\n            <div class=\"ag-floating-bottom-full-width-container\" ref=\"eBottomFullWidthContainer\" role=\"presentation\"></div>\n        </div>\n        <div class=\"ag-overlay\" ref=\"eOverlay\"></div>\n    </div>";
	var GridPanel = (function (_super) {
	    __extends(GridPanel, _super);
	    function GridPanel() {
	        var _this = _super.call(this, GRID_PANEL_NORMAL_TEMPLATE) || this;
	        _this.scrollLeft = -1;
	        _this.nextScrollLeft = -1;
	        _this.scrollTop = -1;
	        _this.nextScrollTop = -1;
	        _this.verticalRedrawNeeded = false;
	        return _this;
	    }
	    GridPanel.prototype.getVScrollPosition = function () {
	        var result = {
	            top: this.eBodyViewport.scrollTop,
	            bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
	        };
	        return result;
	    };
	    // used by range controller
	    GridPanel.prototype.getHScrollPosition = function () {
	        var result = {
	            left: this.eBodyViewport.scrollLeft,
	            right: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetWidth
	        };
	        return result;
	    };
	    // we override this, as the base class is missing the annotation
	    GridPanel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    GridPanel.prototype.onRowDataChanged = function () {
	        this.showOrHideOverlay();
	    };
	    GridPanel.prototype.showOrHideOverlay = function () {
	        if (this.paginationProxy.isEmpty() && !this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.showNoRowsOverlay();
	        }
	        else {
	            this.hideOverlay();
	        }
	    };
	    GridPanel.prototype.onNewColumnsLoaded = function () {
	        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.
	        // this problem exists before of the race condition between the services (column controller in this case)
	        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,
	        // this race condition would not happen.
	        if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) {
	            this.hideOverlay();
	        }
	    };
	    GridPanel.prototype.init = function () {
	        this.instantiate(this.context);
	        // makes code below more readable if we pull 'forPrint' out
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
	        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        // if the browser is Windows based, then the scrollbars take up space, and we clip by
	        // the width of the scrollbar. however if the scroll bars do not take up space (iOS)
	        // then they overlay on top of the div, so we clip some extra blank space instead.
	        this.scrollClipWidth = this.scrollWidth > 0 ? this.scrollWidth : 20;
	        // all of these element have different CSS when layout changes
	        this.gridOptionsWrapper.addLayoutElement(this.getGui());
	        this.gridOptionsWrapper.addLayoutElement(this.eBody);
	        this.gridOptionsWrapper.addLayoutElement(this.eBodyViewport);
	        this.gridOptionsWrapper.addLayoutElement(this.eTopViewport);
	        this.gridOptionsWrapper.addLayoutElement(this.eBodyContainer);
	        this.suppressScrollOnFloatingRow();
	        this.setupRowAnimationCssClass();
	        this.buildRowContainerComponents();
	        this.addEventListeners();
	        this.addDragListeners();
	        this.addScrollListener();
	        if (this.gridOptionsWrapper.isSuppressHorizontalScroll()) {
	            this.eBodyViewport.style.overflowX = 'hidden';
	        }
	        this.setupOverlay();
	        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
	            this.showLoadingOverlay();
	        }
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.disableBrowserDragging();
	        this.addShortcutKeyListeners();
	        this.addMouseListeners();
	        this.addKeyboardEvents();
	        this.addBodyViewportListener();
	        this.addStopEditingWhenGridLosesFocus();
	        this.mockContextMenuForIPad();
	        this.addRowDragListener();
	        if (this.$scope) {
	            this.addAngularApplyCheck();
	        }
	        this.onDisplayedColumnsWidthChanged();
	        // this.addWindowResizeListener();
	        this.gridApi.registerGridComp(this);
	        this.alignedGridsService.registerGridComp(this);
	        this.headerRootComp.registerGridComp(this);
	        this.animationFrameService.registerGridComp(this);
	        this.navigationService.registerGridComp(this);
	        this.heightScaler.registerGridComp(this);
	        this.autoHeightCalculator.registerGridComp(this);
	        this.columnAnimationService.registerGridComp(this);
	        this.autoWidthCalculator.registerGridComp(this);
	        this.paginationAutoPageSizeService.registerGridComp(this);
	        this.beans.registerGridComp(this);
	        this.rowRenderer.registerGridComp(this);
	        if (this.rangeController) {
	            this.rangeController.registerGridComp(this);
	        }
	        var unsubscribeFromResize = resizeObserver.observeResize(this.eBodyViewport, this.onBodyViewportResized.bind(this));
	        this.addDestroyFunc(function () { return unsubscribeFromResize(); });
	    };
	    GridPanel.prototype.onBodyViewportResized = function () {
	        this.checkViewportAndScrolls();
	    };
	    // used by ColumnAnimationService
	    GridPanel.prototype.setColumnMovingCss = function (moving) {
	        this.addOrRemoveCssClass('ag-column-moving', moving);
	    };
	    GridPanel.prototype.setupOverlay = function () {
	        this.overlayWrapper = this.componentRecipes.newOverlayWrapperComponent();
	        this.eOverlay = this.queryForHtmlElement('[ref="eOverlay"]');
	        this.overlayWrapper.hideOverlay(this.eOverlay);
	    };
	    GridPanel.prototype.addRowDragListener = function () {
	        var rowDragFeature$$1 = new rowDragFeature.RowDragFeature(this.eBody, this);
	        this.context.wireBean(rowDragFeature$$1);
	        this.dragAndDropService.addDropTarget(rowDragFeature$$1);
	    };
	    GridPanel.prototype.addStopEditingWhenGridLosesFocus = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) {
	            this.addDestroyableEventListener(this.eBody, 'focusout', function (event) {
	                // this is the element the focus is moving to
	                var elementWithFocus = event.relatedTarget;
	                // see if the element the focus is going to is part of the grid
	                var clickInsideGrid = false;
	                var pointer = elementWithFocus;
	                while (utils.Utils.exists(pointer) && !clickInsideGrid) {
	                    var isPopup = !!_this.gridOptionsWrapper.getDomData(pointer, popupEditorWrapper.PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER);
	                    var isBody = _this.eBody == pointer;
	                    clickInsideGrid = isPopup || isBody;
	                    pointer = pointer.parentNode;
	                }
	                if (!clickInsideGrid) {
	                    _this.rowRenderer.stopEditing();
	                }
	            });
	        }
	    };
	    GridPanel.prototype.addAngularApplyCheck = function () {
	        var _this = this;
	        // this makes sure if we queue up requests, we only execute oe
	        var applyTriggered = false;
	        var listener = function () {
	            // only need to do one apply at a time
	            if (applyTriggered) {
	                return;
	            }
	            applyTriggered = true; // mark 'need apply' to true
	            setTimeout(function () {
	                applyTriggered = false;
	                _this.$scope.$apply();
	            }, 0);
	        };
	        // these are the events we need to do an apply after - these are the ones that can end up
	        // with columns added or removed
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
	    };
	    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
	    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
	    GridPanel.prototype.disableBrowserDragging = function () {
	        this.getGui().addEventListener('dragstart', function (event) {
	            if (event.target instanceof HTMLImageElement) {
	                event.preventDefault();
	                return false;
	            }
	        });
	    };
	    GridPanel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	    };
	    GridPanel.prototype.addDragListeners = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isEnableRangeSelection() // no range selection if no property
	            || utils.Utils.missing(this.rangeController)) {
	            return;
	        }
	        var containers = [this.eLeftContainer, this.eRightContainer, this.eBodyContainer,
	            this.eTop, this.eBottom];
	        containers.forEach(function (container) {
	            var params = {
	                eElement: container,
	                onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
	                onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
	                onDragging: _this.rangeController.onDragging.bind(_this.rangeController),
	                // for range selection by dragging the mouse, we want to ignore the event if shift key is pressed,
	                // as shift key click is another type of range selection
	                skipMouseEvent: function (mouseEvent) { return mouseEvent.shiftKey; }
	            };
	            _this.dragService.addDragSource(params);
	            _this.addDestroyFunc(function () { return _this.dragService.removeDragSource(params); });
	        });
	    };
	    GridPanel.prototype.addMouseListeners = function () {
	        var _this = this;
	        var eventNames = ['click', 'mousedown', 'dblclick', 'contextmenu', 'mouseover', 'mouseout'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processMouseEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                return _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addKeyboardEvents = function () {
	        var _this = this;
	        var eventNames = ['keydown', 'keypress'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processKeyboardEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addBodyViewportListener = function () {
	        var _this = this;
	        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
	        // the context menu if no rows are displayed, or user simply clicks outside of a cell
	        var listener = function (mouseEvent) {
	            var target = utils.Utils.getTarget(mouseEvent);
	            if (target === _this.eBodyViewport || target === _this.eLeftViewport || target === _this.eRightViewport) {
	                // show it
	                _this.onContextMenu(mouseEvent, null, null, null, null);
	                _this.preventDefaultOnContextMenu(mouseEvent);
	            }
	        };
	        //For some reason listening only to this.eBody doesnt work... Maybe because the event is consumed somewhere else?
	        //In any case, not expending much time on this, if anyome comes accross this and knows how to make this work with
	        //one listener please go ahead and change it...
	        this.addDestroyableEventListener(this.eBodyViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.eRightViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.eLeftViewport, 'contextmenu', listener);
	    };
	    // + rangeController
	    GridPanel.prototype.getBodyClientRect = function () {
	        if (this.eBody) {
	            return this.eBody.getBoundingClientRect();
	        }
	    };
	    GridPanel.prototype.getRowForEvent = function (event) {
	        var sourceElement = utils.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, rowComp.RowComp.DOM_DATA_KEY_RENDERED_ROW);
	            if (renderedRow) {
	                return renderedRow;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    GridPanel.prototype.processKeyboardEvent = function (eventName, keyboardEvent) {
	        var renderedCell = this.mouseEventService.getRenderedCellForEvent(keyboardEvent);
	        if (!renderedCell) {
	            return;
	        }
	        switch (eventName) {
	            case 'keydown':
	                // first see if it's a scroll key, page up / down, home / end etc
	                var wasScrollKey = this.navigationService.handlePageScrollingKey(keyboardEvent);
	                // if not a scroll key, then we pass onto cell
	                if (!wasScrollKey) {
	                    renderedCell.onKeyDown(keyboardEvent);
	                }
	                break;
	            case 'keypress':
	                renderedCell.onKeyPress(keyboardEvent);
	                break;
	        }
	    };
	    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top
	    GridPanel.prototype.scrollToTop = function () {
	        this.eBodyViewport.scrollTop = 0;
	    };
	    GridPanel.prototype.processMouseEvent = function (eventName, mouseEvent) {
	        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent)) {
	            return;
	        }
	        if (utils.Utils.isStopPropagationForAgGrid(mouseEvent)) {
	            return;
	        }
	        var rowComp$$1 = this.getRowForEvent(mouseEvent);
	        var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
	        if (eventName === "contextmenu") {
	            this.handleContextMenuMouseEvent(mouseEvent, null, rowComp$$1, cellComp);
	        }
	        else {
	            if (cellComp) {
	                cellComp.onMouseEvent(eventName, mouseEvent);
	            }
	            if (rowComp$$1) {
	                rowComp$$1.onMouseEvent(eventName, mouseEvent);
	            }
	        }
	        this.preventDefaultOnContextMenu(mouseEvent);
	    };
	    GridPanel.prototype.mockContextMenuForIPad = function () {
	        var _this = this;
	        // we do NOT want this when not in ipad, otherwise we will be doing
	        if (!utils.Utils.isUserAgentIPad()) {
	            return;
	        }
	        this.eAllCellContainers.forEach(function (container) {
	            var touchListener$$1 = new touchListener.TouchListener(container);
	            var longTapListener = function (event) {
	                var rowComp$$1 = _this.getRowForEvent(event.touchEvent);
	                var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
	                _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp$$1, cellComp);
	            };
	            _this.addDestroyableEventListener(touchListener$$1, touchListener.TouchListener.EVENT_LONG_TAP, longTapListener);
	            _this.addDestroyFunc(function () { return touchListener$$1.destroy(); });
	        });
	    };
	    GridPanel.prototype.handleContextMenuMouseEvent = function (mouseEvent, touchEvent, rowComp$$1, cellComp) {
	        var rowNode = rowComp$$1 ? rowComp$$1.getRowNode() : null;
	        var column = cellComp ? cellComp.getColumn() : null;
	        var value = null;
	        if (column) {
	            var event_1 = mouseEvent ? mouseEvent : touchEvent;
	            cellComp.dispatchCellContextMenuEvent(event_1);
	            value = this.valueService.getValue(column, rowNode);
	        }
	        this.onContextMenu(mouseEvent, touchEvent, rowNode, column, value);
	    };
	    GridPanel.prototype.onContextMenu = function (mouseEvent, touchEvent, rowNode, column, value) {
	        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
	        // not everyone wants this, so first 'if' below allows to turn this hack off.
	        if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
	            // then do the check
	            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {
	                return;
	            }
	        }
	        if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
	            var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
	            this.contextMenuFactory.showMenu(rowNode, column, value, eventOrTouch);
	            var event_2 = mouseEvent ? mouseEvent : touchEvent;
	            event_2.preventDefault();
	        }
	    };
	    GridPanel.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
	        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
	        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
	        // button in the browser). so this property allows the user to receive middle button clicks if
	        // they want.
	        if (this.gridOptionsWrapper.isSuppressMiddleClickScrolls() && mouseEvent.which === 2) {
	            mouseEvent.preventDefault();
	        }
	    };
	    GridPanel.prototype.addShortcutKeyListeners = function () {
	        var _this = this;
	        this.eAllCellContainers.forEach(function (container) {
	            container.addEventListener('keydown', function (event) {
	                // if the cell the event came from is editing, then we do not
	                // want to do the default shortcut keys, otherwise the editor
	                // (eg a text field) would not be able to do the normal cut/copy/paste
	                var renderedCell = _this.mouseEventService.getRenderedCellForEvent(event);
	                if (renderedCell && renderedCell.isEditing()) {
	                    return;
	                }
	                // for copy / paste, we don't want to execute when the event
	                // was from a child grid (happens in master detail)
	                if (!_this.mouseEventService.isEventFromThisGrid(event)) {
	                    return;
	                }
	                if (event.ctrlKey || event.metaKey) {
	                    switch (event.which) {
	                        case constants.Constants.KEY_A: return _this.onCtrlAndA(event);
	                        case constants.Constants.KEY_C: return _this.onCtrlAndC(event);
	                        case constants.Constants.KEY_V: return _this.onCtrlAndV(event);
	                        case constants.Constants.KEY_D: return _this.onCtrlAndD(event);
	                    }
	                }
	            });
	        });
	    };
	    GridPanel.prototype.onCtrlAndA = function (event) {
	        if (this.rangeController && this.paginationProxy.isRowsToRender()) {
	            var rowEnd = void 0;
	            var floatingStart = void 0;
	            var floatingEnd = void 0;
	            if (this.pinnedRowModel.isEmpty(constants.Constants.PINNED_TOP)) {
	                floatingStart = null;
	            }
	            else {
	                floatingStart = constants.Constants.PINNED_TOP;
	            }
	            if (this.pinnedRowModel.isEmpty(constants.Constants.PINNED_BOTTOM)) {
	                floatingEnd = null;
	                rowEnd = this.paginationProxy.getTotalRowCount() - 1;
	            }
	            else {
	                floatingEnd = constants.Constants.PINNED_BOTTOM;
	                rowEnd = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
	            }
	            var allDisplayedColumns = this.columnController.getAllDisplayedColumns();
	            if (utils.Utils.missingOrEmpty(allDisplayedColumns)) {
	                return;
	            }
	            this.rangeController.setRange({
	                rowStart: 0,
	                floatingStart: floatingStart,
	                rowEnd: rowEnd,
	                floatingEnd: floatingEnd,
	                columnStart: allDisplayedColumns[0],
	                columnEnd: allDisplayedColumns[allDisplayedColumns.length - 1]
	            });
	        }
	        event.preventDefault();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndC = function (event) {
	        if (!this.clipboardService) {
	            return;
	        }
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        this.clipboardService.copyToClipboard();
	        event.preventDefault();
	        // the copy operation results in loosing focus on the cell,
	        // because of the trickery the copy logic uses with a temporary
	        // widget. so we set it back again.
	        if (focusedCell) {
	            this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.floating, true);
	        }
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndV = function (event) {
	        if (!this.enterprise) {
	            return;
	        }
	        if (this.gridOptionsWrapper.isSuppressClipboardPaste()) {
	            return;
	        }
	        this.clipboardService.pasteFromClipboard();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndD = function (event) {
	        if (!this.enterprise) {
	            return;
	        }
	        this.clipboardService.copyRangeDown();
	        event.preventDefault();
	        return false;
	    };
	    // Valid values for position are bottom, middle and top
	    // position should be {'top','middle','bottom', or undefined/null}.
	    // if undefined/null, then the grid will to the minimal amount of scrolling,
	    // eg if grid needs to scroll up, it scrolls until row is on top,
	    //    if grid needs to scroll down, it scrolls until row is on bottom,
	    //    if row is already in view, grid does not scroll
	    GridPanel.prototype.ensureIndexVisible = function (index, position) {
	        // if for print or auto height, everything is always visible
	        if (this.gridOptionsWrapper.isGridAutoHeight()) {
	            return;
	        }
	        var rowCount = this.paginationProxy.getTotalRowCount();
	        if (typeof index !== 'number' || index < 0 || index >= rowCount) {
	            console.warn('invalid row index for ensureIndexVisible: ' + index);
	            return;
	        }
	        this.paginationProxy.goToPageWithIndex(index);
	        var rowNode = this.paginationProxy.getRow(index);
	        var paginationOffset = this.paginationProxy.getPixelOffset();
	        var rowTopPixel = rowNode.rowTop - paginationOffset;
	        var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
	        var scrollPosition = this.getVScrollPosition();
	        var heightOffset = this.heightScaler.getOffset();
	        var vScrollTop = scrollPosition.top + heightOffset;
	        var vScrollBottom = scrollPosition.bottom + heightOffset;
	        if (this.isHorizontalScrollShowing()) {
	            vScrollBottom -= this.scrollWidth;
	        }
	        var viewportHeight = vScrollBottom - vScrollTop;
	        var newScrollPosition = null;
	        // work out the pixels for top, middle and bottom up front,
	        // make the if/else below easier to read
	        var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
	        var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
	        var pxMiddle = (pxTop + pxBottom) / 2;
	        // make sure if middle, the row is not outside the top of the grid
	        if (pxMiddle > rowTopPixel) {
	            pxMiddle = rowTopPixel;
	        }
	        var rowBelowViewport = vScrollTop > rowTopPixel;
	        var rowAboveViewport = vScrollBottom < rowBottomPixel;
	        if (position === 'top') {
	            newScrollPosition = pxTop;
	        }
	        else if (position === 'bottom') {
	            newScrollPosition = pxBottom;
	        }
	        else if (position === 'middle') {
	            newScrollPosition = pxMiddle;
	        }
	        else if (rowBelowViewport) {
	            // if row is before, scroll up with row at top
	            newScrollPosition = pxTop;
	        }
	        else if (rowAboveViewport) {
	            // if row is below, scroll down with row at bottom
	            newScrollPosition = pxBottom;
	        }
	        if (newScrollPosition !== null) {
	            this.eBodyViewport.scrollTop = newScrollPosition;
	            this.rowRenderer.redrawAfterScroll();
	        }
	    };
	    // + moveColumnController
	    GridPanel.prototype.getCenterWidth = function () {
	        return this.eBodyViewport.clientWidth;
	    };
	    GridPanel.prototype.isHorizontalScrollShowing = function () {
	        return utils.Utils.isHorizontalScrollShowing(this.eBodyViewport);
	    };
	    GridPanel.prototype.isVerticalScrollShowing = function () {
	        return utils.Utils.isVerticalScrollShowing(this.eBodyViewport);
	    };
	    // gets called every time the viewport size changes. we use this to check visibility of scrollbars
	    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.
	    GridPanel.prototype.checkViewportAndScrolls = function () {
	        // results in updating anything that depends on scroll showing
	        this.updateScrollVisibleService();
	        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer
	        this.checkBodyHeight();
	        // check for virtual columns for ColumnController
	        this.onHorizontalViewportChanged();
	        this.setPinnedLeftWidth();
	        this.setPinnedRightWidth();
	        this.setBottomPaddingOnPinned();
	        this.hideVerticalScrollOnCenter();
	        this.hideFullWidthViewportScrollbars();
	    };
	    GridPanel.prototype.updateScrollVisibleService = function () {
	        var params = {
	            bodyHorizontalScrollShowing: false,
	            leftVerticalScrollShowing: false,
	            rightVerticalScrollShowing: false
	        };
	        if (this.enableRtl && this.columnController.isPinningLeft()) {
	            params.leftVerticalScrollShowing = utils.Utils.isVerticalScrollShowing(this.eLeftViewport);
	        }
	        if (!this.enableRtl && this.columnController.isPinningRight()) {
	            params.rightVerticalScrollShowing = utils.Utils.isVerticalScrollShowing(this.eRightViewport);
	        }
	        params.bodyHorizontalScrollShowing = this.isHorizontalScrollShowing();
	        this.scrollVisibleService.setScrollsVisible(params);
	    };
	    // the pinned container needs extra space at the bottom, some blank space, otherwise when
	    // vertically scrolled all the way down, the last row will be hidden behind the scrolls.
	    // this extra padding allows the last row to be lifted above the bottom scrollbar.
	    GridPanel.prototype.setBottomPaddingOnPinned = function () {
	        // no need for padding if the scrollbars are not taking up any space
	        if (this.scrollWidth <= 0) {
	            return;
	        }
	        if (this.isHorizontalScrollShowing()) {
	            this.eRightContainer.style.marginBottom = this.scrollWidth + 'px';
	            this.eLeftContainer.style.marginBottom = this.scrollWidth + 'px';
	        }
	        else {
	            this.eRightContainer.style.marginBottom = '';
	            this.eLeftContainer.style.marginBottom = '';
	        }
	    };
	    GridPanel.prototype.hideFullWidthViewportScrollbars = function () {
	        // if browser does not have scrollbars that take up space (eg iOS) then we don't need
	        // to adjust the sizes of the container for scrollbars
	        // if (this.scrollWidth <= 0) { return; }
	        var scrollWidthPx = this.scrollClipWidth > 0 ? this.scrollWidth + 'px' : '';
	        // if horizontal scroll is showing, we add padding to bottom so
	        // fullWidth container is not spreading over the scroll
	        this.eFullWidthViewportWrapper.style.paddingBottom = this.isHorizontalScrollShowing() ? scrollWidthPx : '';
	        // if vertical scroll is showing on full width viewport, then we clip it away, otherwise
	        // it competes with the main vertical scroll. this is done by getting the viewport to be
	        // bigger than the wrapper, the wrapper then ends up clipping the viewport.
	        var takeOutVScroll = this.isVerticalScrollShowing();
	        if (this.enableRtl) {
	            this.eFullWidthViewportWrapper.style.marginLeft = takeOutVScroll ? scrollWidthPx : '';
	            this.eFullWidthViewport.style.marginLeft = takeOutVScroll ? ('-' + scrollWidthPx) : '';
	        }
	        else {
	            this.eFullWidthViewportWrapper.style.width = takeOutVScroll ? "calc(100% - " + scrollWidthPx + ")" : '';
	            this.eFullWidthViewport.style.width = takeOutVScroll ? "calc(100% + " + scrollWidthPx + ")" : '';
	        }
	    };
	    GridPanel.prototype.ensureColumnVisible = function (key) {
	        var column = this.columnController.getGridColumn(key);
	        if (!column) {
	            return;
	        }
	        if (column.isPinned()) {
	            console.warn('calling ensureIndexVisible on a ' + column.getPinned() + ' pinned column doesn\'t make sense for column ' + column.getColId());
	            return;
	        }
	        if (!this.columnController.isColumnDisplayed(column)) {
	            console.warn('column is not currently visible');
	            return;
	        }
	        var colLeftPixel = column.getLeft();
	        var colRightPixel = colLeftPixel + column.getActualWidth();
	        var viewportWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        var bodyWidth = this.columnController.getBodyContainerWidth();
	        var viewportLeftPixel;
	        var viewportRightPixel;
	        // the logic of working out left and right viewport px is both here and in the ColumnController,
	        // need to refactor it out to one place
	        if (this.enableRtl) {
	            viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
	            viewportRightPixel = bodyWidth - scrollPosition;
	        }
	        else {
	            viewportLeftPixel = scrollPosition;
	            viewportRightPixel = viewportWidth + scrollPosition;
	        }
	        var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
	        var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
	        var colToSmallForViewport = viewportWidth < column.getActualWidth();
	        var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
	        var alignColToRight = viewportScrolledBeforeCol;
	        if (alignColToLeft) {
	            // if viewport's left side is after col's left side, scroll left to pull col into viewport at left
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - viewportWidth - colLeftPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                this.setBodyViewportScrollLeft(colLeftPixel);
	            }
	        }
	        else if (alignColToRight) {
	            // if viewport's right side is before col's right side, scroll right to pull col into viewport at right
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - colRightPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                var newScrollPosition = colRightPixel - viewportWidth;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	        }
	        // this will happen anyway, as the move will cause a 'scroll' event on the body, however
	        // it is possible that the ensureColumnVisible method is called from within ag-Grid and
	        // the caller will need to have the columns rendered to continue, which will be before
	        // the event has been worked on (which is the case for cell navigation).
	        this.onHorizontalViewportChanged();
	    };
	    GridPanel.prototype.showLoadingOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
	            this.overlayWrapper.showLoadingOverlay(this.eOverlay);
	        }
	    };
	    GridPanel.prototype.showNoRowsOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.overlayWrapper.showNoRowsOverlay(this.eOverlay);
	        }
	    };
	    GridPanel.prototype.hideOverlay = function () {
	        this.overlayWrapper.hideOverlay(this.eOverlay);
	    };
	    GridPanel.prototype.getWidthForSizeColsToFit = function () {
	        var availableWidth = this.eBody.clientWidth;
	        // if pinning right, then the scroll bar can show, however for some reason
	        // it overlays the grid and doesn't take space. so we are only interested
	        // in the body scroll showing.
	        var removeVerticalScrollWidth = this.isVerticalScrollShowing();
	        if (removeVerticalScrollWidth) {
	            availableWidth -= this.scrollWidth;
	        }
	        return availableWidth;
	    };
	    // method will call itself if no available width. this covers if the grid
	    // isn't visible, but is just about to be visible.
	    GridPanel.prototype.sizeColumnsToFit = function (nextTimeout) {
	        var _this = this;
	        var availableWidth = this.getWidthForSizeColsToFit();
	        if (availableWidth > 0) {
	            this.columnController.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
	        }
	        else {
	            if (nextTimeout === undefined) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(100);
	                }, 0);
	            }
	            else if (nextTimeout === 100) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(500);
	                }, 100);
	            }
	            else if (nextTimeout === 500) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(-1);
	                }, 500);
	            }
	            else {
	                console.log('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +
	                    'zero width, maybe the grid is not visible yet on the screen?');
	            }
	        }
	    };
	    GridPanel.prototype.getBodyContainer = function () {
	        return this.eBodyContainer;
	    };
	    GridPanel.prototype.getDropTargetBodyContainers = function () {
	        return [this.eBodyViewport, this.eTopViewport, this.eBottomViewport];
	    };
	    GridPanel.prototype.getDropTargetLeftContainers = function () {
	        return [this.eLeftViewport, this.eLeftBottom, this.eLeftTop];
	    };
	    GridPanel.prototype.getDropTargetRightContainers = function () {
	        return [this.eRightViewport, this.eRightBottom, this.eRightTop];
	    };
	    GridPanel.prototype.buildRowContainerComponents = function () {
	        var _this = this;
	        this.eAllCellContainers = [
	            this.eLeftContainer, this.eRightContainer, this.eBodyContainer,
	            this.eTop, this.eBottom, this.eFullWidthContainer
	        ];
	        this.rowContainerComponents = {
	            body: new rowContainerComponent.RowContainerComponent({ eContainer: this.eBodyContainer, eViewport: this.eBodyViewport }),
	            fullWidth: new rowContainerComponent.RowContainerComponent({ eContainer: this.eFullWidthContainer, hideWhenNoChildren: true, eViewport: this.eFullWidthViewport }),
	            pinnedLeft: new rowContainerComponent.RowContainerComponent({ eContainer: this.eLeftContainer, eViewport: this.eLeftViewport }),
	            pinnedRight: new rowContainerComponent.RowContainerComponent({ eContainer: this.eRightContainer, eViewport: this.eRightViewport }),
	            floatingTop: new rowContainerComponent.RowContainerComponent({ eContainer: this.eTopContainer }),
	            floatingTopPinnedLeft: new rowContainerComponent.RowContainerComponent({ eContainer: this.eLeftTop }),
	            floatingTopPinnedRight: new rowContainerComponent.RowContainerComponent({ eContainer: this.eRightTop }),
	            floatingTopFullWidth: new rowContainerComponent.RowContainerComponent({ eContainer: this.eTopFullWidthContainer, hideWhenNoChildren: true }),
	            floatingBottom: new rowContainerComponent.RowContainerComponent({ eContainer: this.eBottomContainer }),
	            floatingBottomPinnedLeft: new rowContainerComponent.RowContainerComponent({ eContainer: this.eLeftBottom }),
	            floatingBottomPinnedRight: new rowContainerComponent.RowContainerComponent({ eContainer: this.eRightBottom }),
	            floatingBottomFullWith: new rowContainerComponent.RowContainerComponent({ eContainer: this.eBottomFullWidthContainer, hideWhenNoChildren: true }),
	        };
	        utils.Utils.iterateObject(this.rowContainerComponents, function (key, container) {
	            if (container) {
	                _this.context.wireBean(container);
	            }
	        });
	    };
	    GridPanel.prototype.setupRowAnimationCssClass = function () {
	        var _this = this;
	        var listener = function () {
	            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,
	            // when scaling and doing row animation.
	            var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.heightScaler.isScaling();
	            utils.Utils.addOrRemoveCssClass(_this.eBody, 'ag-row-animation', animateRows);
	            utils.Utils.addOrRemoveCssClass(_this.eBody, 'ag-row-no-animation', !animateRows);
	        };
	        listener();
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
	    };
	    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can
	    // scroll the column into view. we do not want this, the pinned sections should never scroll.
	    // so we listen to scrolls on these containers and reset the scroll if we find one.
	    GridPanel.prototype.suppressScrollOnFloatingRow = function () {
	        var _this = this;
	        var resetTopScroll = function () { return _this.eTopViewport.scrollLeft = 0; };
	        var resetBottomScroll = function () { return _this.eTopViewport.scrollLeft = 0; };
	        this.addDestroyableEventListener(this.eTopViewport, 'scroll', resetTopScroll);
	        this.addDestroyableEventListener(this.eBottomViewport, 'scroll', resetBottomScroll);
	    };
	    GridPanel.prototype.getRowContainers = function () {
	        return this.rowContainerComponents;
	    };
	    GridPanel.prototype.onDisplayedColumnsChanged = function () {
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.onHorizontalViewportChanged();
	    };
	    GridPanel.prototype.onDisplayedColumnsWidthChanged = function () {
	        this.setWidthsOfContainers();
	        this.onHorizontalViewportChanged();
	        if (this.enableRtl) {
	            // because RTL is all backwards, a change in the width of the row
	            // can cause a change in the scroll position, without a scroll event,
	            // because the scroll position in RTL is a function that depends on
	            // the width. to be convinced of this, take out this line, enable RTL,
	            // scroll all the way to the left and then resize a column
	            this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        }
	    };
	    GridPanel.prototype.setWidthsOfContainers = function () {
	        this.setCenterWidth();
	        this.setPinnedLeftWidth();
	        this.setPinnedRightWidth();
	    };
	    GridPanel.prototype.setCenterWidth = function () {
	        var widthPx = this.columnController.getBodyContainerWidth() + 'px';
	        this.eBodyContainer.style.width = widthPx;
	        this.eBottomContainer.style.width = widthPx;
	        this.eTopContainer.style.width = widthPx;
	    };
	    GridPanel.prototype.setPinnedLeftWidth = function () {
	        var widthOfCols = this.columnController.getPinnedLeftContainerWidth();
	        var widthOfColsAndScroll = widthOfCols + this.scrollWidth;
	        var widthOfColsAndClippedScroll = widthOfCols + this.scrollClipWidth;
	        var viewportWidth;
	        var wrapperWidth;
	        if (utils.Utils.isVerticalScrollShowing(this.eLeftViewport)) {
	            if (this.enableRtl) {
	                // show the scroll
	                viewportWidth = widthOfColsAndScroll;
	                wrapperWidth = widthOfColsAndScroll;
	            }
	            else {
	                // hide the scroll
	                viewportWidth = widthOfColsAndClippedScroll;
	                wrapperWidth = widthOfCols;
	            }
	        }
	        else {
	            // no scroll
	            viewportWidth = widthOfCols;
	            wrapperWidth = widthOfCols;
	        }
	        this.setElementWidth(this.eLeftViewportWrapper, wrapperWidth);
	        this.setElementWidth(this.eLeftViewport, viewportWidth);
	        this.setElementWidth(this.eLeftContainer, widthOfCols);
	        this.setElementWidth(this.eLeftBottom, wrapperWidth);
	        this.setElementWidth(this.eLeftTop, wrapperWidth);
	    };
	    GridPanel.prototype.setPinnedRightWidth = function () {
	        var widthOfCols = this.columnController.getPinnedRightContainerWidth();
	        var widthOfColsAndScroll = widthOfCols + this.scrollWidth;
	        var widthOfColsAndClippedScroll = widthOfCols + this.scrollClipWidth;
	        var viewportWidth;
	        var wrapperWidth;
	        if (utils.Utils.isVerticalScrollShowing(this.eRightViewport)) {
	            if (!this.enableRtl) {
	                // show the scroll
	                viewportWidth = widthOfColsAndScroll;
	                wrapperWidth = widthOfColsAndScroll;
	            }
	            else {
	                // hide the scroll
	                viewportWidth = widthOfColsAndClippedScroll;
	                wrapperWidth = widthOfCols;
	            }
	        }
	        else {
	            // no scroll
	            viewportWidth = widthOfCols;
	            wrapperWidth = widthOfCols;
	        }
	        this.setElementWidth(this.eRightViewportWrapper, wrapperWidth);
	        this.setElementWidth(this.eRightViewport, viewportWidth);
	        this.setElementWidth(this.eRightContainer, widthOfCols);
	        this.setElementWidth(this.eRightBottom, wrapperWidth);
	        this.setElementWidth(this.eRightTop, wrapperWidth);
	    };
	    GridPanel.prototype.setElementWidth = function (element, width) {
	        // .width didn't do the trick in firefox, so needed .minWidth also
	        element.style.width = width + 'px';
	        element.style.minWidth = width + 'px';
	    };
	    GridPanel.prototype.setPinnedContainersVisible = function () {
	        var changeDetected = false;
	        var showLeftPinned = this.columnController.isPinningLeft();
	        if (showLeftPinned !== this.pinningLeft) {
	            this.pinningLeft = showLeftPinned;
	            this.headerRootComp.setLeftVisible(showLeftPinned);
	            utils.Utils.setVisible(this.eLeftViewportWrapper, showLeftPinned);
	            changeDetected = true;
	            if (showLeftPinned) {
	                // because the viewport was not visible, it was not keeping previous scrollTop values
	                this.eLeftViewport.scrollTop = this.eBodyViewport.scrollTop;
	            }
	        }
	        var showRightPinned = this.columnController.isPinningRight();
	        if (showRightPinned !== this.pinningRight) {
	            this.pinningRight = showRightPinned;
	            this.headerRootComp.setRightVisible(showRightPinned);
	            utils.Utils.setVisible(this.eRightViewportWrapper, showRightPinned);
	            if (showRightPinned) {
	                // because the viewport was not visible, it was not keeping previous scrollTop values
	                this.eRightViewport.scrollTop = this.eBodyViewport.scrollTop;
	            }
	            changeDetected = true;
	        }
	        if (changeDetected) {
	            this.hideVerticalScrollOnCenter();
	            this.setPinnedLeftWidth();
	            this.setPinnedRightWidth();
	        }
	    };
	    GridPanel.prototype.hideVerticalScrollOnCenter = function () {
	        var neverShowScroll = this.enableRtl ?
	            this.columnController.isPinningLeft()
	            : this.columnController.isPinningRight();
	        var scrollActive = utils.Utils.isVerticalScrollShowing(this.eBodyViewport);
	        var hideScroll = neverShowScroll && scrollActive;
	        var margin = hideScroll ? '-' + this.scrollClipWidth + 'px' : '';
	        if (this.enableRtl) {
	            this.eBodyViewport.style.marginLeft = margin;
	        }
	        else {
	            this.eBodyViewport.style.marginRight = margin;
	        }
	    };
	    GridPanel.prototype.checkBodyHeight = function () {
	        var bodyHeight = this.eBody.clientHeight;
	        if (this.bodyHeight !== bodyHeight) {
	            this.bodyHeight = bodyHeight;
	            var event_3 = {
	                type: events$1.Events.EVENT_BODY_HEIGHT_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_3);
	        }
	    };
	    GridPanel.prototype.setBodyAndHeaderHeights = function () {
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var totalHeaderHeight;
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        totalHeaderHeight = numberOfFloating * this.gridOptionsWrapper.getFloatingFiltersHeight();
	        totalHeaderHeight += numberOfGroups * groupHeight;
	        totalHeaderHeight += headerHeight;
	        this.headerRootComp.setHeight(totalHeaderHeight);
	        var floatingTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
	        var floatingBottomHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
	        this.eTop.style.minHeight = floatingTopHeight + 'px';
	        this.eTop.style.height = floatingTopHeight + 'px';
	        this.eBottom.style.minHeight = floatingBottomHeight + 'px';
	        this.eBottom.style.height = floatingBottomHeight + 'px';
	        this.checkBodyHeight();
	    };
	    GridPanel.prototype.getBodyHeight = function () {
	        return this.bodyHeight;
	    };
	    GridPanel.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
	        this.eBodyViewport.scrollLeft = hScrollPosition;
	        // we need to manually do the event handling (rather than wait for the event)
	        // for the alignedGridsService, as if we don't, the aligned grid service gets
	        // notified async, and then it's 'consuming' flag doesn't get used right, and
	        // we can end up with an infinite loop
	        if (this.nextScrollLeft !== hScrollPosition) {
	            this.nextScrollLeft = hScrollPosition;
	            this.doHorizontalScroll();
	        }
	    };
	    GridPanel.prototype.setVerticalScrollPosition = function (vScrollPosition) {
	        this.eBodyViewport.scrollTop = vScrollPosition;
	    };
	    // tries to scroll by pixels, but returns what the result actually was
	    GridPanel.prototype.scrollHorizontally = function (pixels) {
	        var oldScrollPosition = this.eBodyViewport.scrollLeft;
	        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
	        var newScrollPosition = this.eBodyViewport.scrollLeft;
	        return newScrollPosition - oldScrollPosition;
	    };
	    // tries to scroll by pixels, but returns what the result actually was
	    GridPanel.prototype.scrollVertically = function (pixels) {
	        var oldScrollPosition = this.eBodyViewport.scrollTop;
	        this.setVerticalScrollPosition(oldScrollPosition + pixels);
	        var newScrollPosition = this.eBodyViewport.scrollTop;
	        return newScrollPosition - oldScrollPosition;
	    };
	    GridPanel.prototype.addScrollListener = function () {
	        var _this = this;
	        this.addDestroyableEventListener(this.eBodyViewport, 'scroll', function () {
	            _this.onBodyHorizontalScroll();
	            _this.onAnyBodyScroll(_this.eBodyViewport);
	        });
	        this.addDestroyableEventListener(this.eRightViewport, 'scroll', this.onAnyBodyScroll.bind(this, this.eRightViewport));
	        this.addDestroyableEventListener(this.eLeftViewport, 'scroll', this.onAnyBodyScroll.bind(this, this.eLeftViewport));
	        this.addDestroyableEventListener(this.eFullWidthViewport, 'scroll', this.onAnyBodyScroll.bind(this, this.eFullWidthViewport));
	    };
	    GridPanel.prototype.onAnyBodyScroll = function (source) {
	        var now = new Date().getTime();
	        var diff = now - this.lastVScrollTime;
	        var elementIsNotControllingTheScroll = source !== this.lastVScrollElement && diff < 500;
	        if (elementIsNotControllingTheScroll) {
	            return;
	        }
	        this.lastVScrollElement = source;
	        this.lastVScrollTime = now;
	        var scrollTop = source.scrollTop;
	        if (this.useAnimationFrame) {
	            if (this.nextScrollTop !== scrollTop) {
	                this.nextScrollTop = scrollTop;
	                this.animationFrameService.schedule();
	            }
	        }
	        else {
	            if (scrollTop !== this.scrollTop) {
	                this.scrollTop = scrollTop;
	                this.synchroniseVerticalScrollPositions(scrollTop);
	                this.redrawRowsAfterScroll();
	            }
	        }
	    };
	    GridPanel.prototype.onBodyHorizontalScroll = function () {
	        var scrollLeft = this.eBodyViewport.scrollLeft;
	        if (this.nextScrollLeft !== scrollLeft) {
	            this.nextScrollLeft = scrollLeft;
	            if (this.useAnimationFrame) {
	                this.animationFrameService.schedule();
	            }
	            else {
	                this.doHorizontalScroll();
	            }
	        }
	    };
	    GridPanel.prototype.doHorizontalScroll = function () {
	        this.scrollLeft = this.nextScrollLeft;
	        var event = {
	            type: events$1.Events.EVENT_BODY_SCROLL,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            direction: 'horizontal',
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	        this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        this.onHorizontalViewportChanged();
	    };
	    GridPanel.prototype.executeFrame = function () {
	        if (this.scrollLeft !== this.nextScrollLeft) {
	            this.doHorizontalScroll();
	            return true;
	        }
	        else if (this.scrollTop !== this.nextScrollTop) {
	            this.scrollTop = this.nextScrollTop;
	            this.synchroniseVerticalScrollPositions(this.scrollTop);
	            this.verticalRedrawNeeded = true;
	            return true;
	        }
	        else if (this.verticalRedrawNeeded) {
	            this.redrawRowsAfterScroll();
	            this.verticalRedrawNeeded = false;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    GridPanel.prototype.redrawRowsAfterScroll = function () {
	        var event = {
	            type: events$1.Events.EVENT_BODY_SCROLL,
	            direction: 'vertical',
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // this gets called whenever a change in the viewport, so we can inform column controller it has to work
	    // out the virtual columns again. gets called from following locations:
	    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)
	    GridPanel.prototype.onHorizontalViewportChanged = function () {
	        var scrollWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
	    };
	    GridPanel.prototype.getBodyViewportScrollLeft = function () {
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        return utils.Utils.getScrollLeft(this.eBodyViewport, this.enableRtl);
	    };
	    GridPanel.prototype.setBodyViewportScrollLeft = function (value) {
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        utils.Utils.setScrollLeft(this.eBodyViewport, value, this.enableRtl);
	    };
	    GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function () {
	        var scrollLeft = this.getBodyViewportScrollLeft();
	        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
	        this.headerRootComp.setHorizontalScroll(offset);
	        this.eBottomContainer.style.left = offset + 'px';
	        this.eTopContainer.style.left = offset + 'px';
	    };
	    GridPanel.prototype.synchroniseVerticalScrollPositions = function (position) {
	        if (this.lastVScrollElement !== this.eBodyViewport) {
	            this.eBodyViewport.scrollTop = position;
	        }
	        if (this.lastVScrollElement !== this.eLeftViewport && this.pinningLeft) {
	            this.eLeftViewport.scrollTop = position;
	        }
	        if (this.lastVScrollElement !== this.eRightViewport && this.pinningRight) {
	            this.eRightViewport.scrollTop = position;
	        }
	        if (this.lastVScrollElement !== this.eFullWidthViewport) {
	            this.eFullWidthViewport.scrollTop = position;
	        }
	        // the row containers need to remember the scroll position, as if they are made
	        // hidden / shown, the scroll position is lost
	        this.rowContainerComponents.body.setVerticalScrollPosition(position);
	        this.rowContainerComponents.pinnedLeft.setVerticalScrollPosition(position);
	        this.rowContainerComponents.pinnedRight.setVerticalScrollPosition(position);
	        this.rowContainerComponents.fullWidth.setVerticalScrollPosition(position);
	        this.redrawRowsAfterScroll();
	    };
	    GridPanel.prototype.addScrollEventListener = function (listener) {
	        this.eBodyViewport.addEventListener('scroll', listener);
	    };
	    GridPanel.prototype.removeScrollEventListener = function (listener) {
	        this.eBodyViewport.removeEventListener('scroll', listener);
	    };
	    __decorate([
	        context.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService.AlignedGridsService)
	    ], GridPanel.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], GridPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GridPanel.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], GridPanel.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel.PinnedRowModel)
	    ], GridPanel.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], GridPanel.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], GridPanel.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService.AnimationFrameService)
	    ], GridPanel.prototype, "animationFrameService", void 0);
	    __decorate([
	        context.Autowired('navigationService'),
	        __metadata("design:type", navigationService.NavigationService)
	    ], GridPanel.prototype, "navigationService", void 0);
	    __decorate([
	        context.Autowired('autoHeightCalculator'),
	        __metadata("design:type", autoHeightCalculator.AutoHeightCalculator)
	    ], GridPanel.prototype, "autoHeightCalculator", void 0);
	    __decorate([
	        context.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService.ColumnAnimationService)
	    ], GridPanel.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context.Autowired('autoWidthCalculator'),
	        __metadata("design:type", autoWidthCalculator.AutoWidthCalculator)
	    ], GridPanel.prototype, "autoWidthCalculator", void 0);
	    __decorate([
	        context.Autowired('paginationAutoPageSizeService'),
	        __metadata("design:type", paginationProxy.PaginationAutoPageSizeService)
	    ], GridPanel.prototype, "paginationAutoPageSizeService", void 0);
	    __decorate([
	        context.Autowired('beans'),
	        __metadata("design:type", beans.Beans)
	    ], GridPanel.prototype, "beans", void 0);
	    __decorate([
	        context.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], GridPanel.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], GridPanel.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], GridPanel.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('dragService'),
	        __metadata("design:type", dragService.DragService)
	    ], GridPanel.prototype, "dragService", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], GridPanel.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator.CsvCreator)
	    ], GridPanel.prototype, "csvCreator", void 0);
	    __decorate([
	        context.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService.MouseEventService)
	    ], GridPanel.prototype, "mouseEventService", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], GridPanel.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService.ScrollVisibleService)
	    ], GridPanel.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], GridPanel.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes.ComponentRecipes)
	    ], GridPanel.prototype, "componentRecipes", void 0);
	    __decorate([
	        context.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService.DragAndDropService)
	    ], GridPanel.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context.Autowired('heightScaler'),
	        __metadata("design:type", heightScaler.HeightScaler)
	    ], GridPanel.prototype, "heightScaler", void 0);
	    __decorate([
	        context.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], GridPanel.prototype, "enterprise", void 0);
	    __decorate([
	        context.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "rangeController", void 0);
	    __decorate([
	        context.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "clipboardService", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBody'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBody", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBodyViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBodyViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBodyContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBodyContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLeftContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eLeftContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eRightContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eRightContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eFullWidthViewportWrapper'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eFullWidthViewportWrapper", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eFullWidthViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eFullWidthViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eFullWidthContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eFullWidthContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLeftViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eLeftViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLeftViewportWrapper'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eLeftViewportWrapper", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eRightViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eRightViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eRightViewportWrapper'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eRightViewportWrapper", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eTop'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eTop", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLeftTop'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eLeftTop", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eRightTop'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eRightTop", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eTopContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eTopContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eTopViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eTopViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eTopFullWidthContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eTopFullWidthContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBottom'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBottom", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eLeftBottom'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eLeftBottom", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eRightBottom'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eRightBottom", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBottomContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBottomContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBottomViewport'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBottomViewport", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eBottomFullWidthContainer'),
	        __metadata("design:type", HTMLElement)
	    ], GridPanel.prototype, "eBottomFullWidthContainer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('headerRoot'),
	        __metadata("design:type", headerRootComp.HeaderRootComp)
	    ], GridPanel.prototype, "headerRootComp", void 0);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "destroy", null);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "init", null);
	    return GridPanel;
	}(component.Component));
	exports.GridPanel = GridPanel;
	});

	unwrapExports(gridPanel);
	var gridPanel_1 = gridPanel.GridPanel;

	var gridCore = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });

















	var GridCore = (function (_super) {
	    __extends(GridCore, _super);
	    function GridCore() {
	        return _super.call(this) || this;
	    }
	    GridCore_1 = GridCore;
	    GridCore.prototype.init = function () {
	        var _this = this;
	        this.logger = this.loggerFactory.create('GridCore');
	        var template = this.enterprise ? GridCore_1.TEMPLATE_ENTERPRISE : GridCore_1.TEMPLATE_NORMAL;
	        this.setTemplate(template);
	        this.instantiate(this.context);
	        if (this.enterprise) {
	            this.toolPanelComp.registerGridComp(this.gridPanel);
	            this.statusBar.registerGridPanel(this.gridPanel);
	        }
	        this.gridOptionsWrapper.addLayoutElement(this.getGui());
	        // see what the grid options are for default of toolbar
	        this.showToolPanel(this.gridOptionsWrapper.isShowToolPanel());
	        this.eGridDiv.appendChild(this.getGui());
	        this.addDestroyFunc(function () {
	            _this.eGridDiv.removeChild(_this.getGui());
	        });
	        // if using angular, watch for quickFilter changes
	        if (this.$scope) {
	            var quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, function (newFilter) { return _this.filterManager.setQuickFilter(newFilter); });
	            this.addDestroyFunc(quickFilterUnregisterFn);
	        }
	        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
	        // which doLayout indirectly depends on
	        this.addRtlSupport();
	        this.finished = false;
	        this.addDestroyFunc(function () { return _this.finished = true; });
	        this.logger.log('ready');
	        this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);
	        var unsubscribeFromResize = resizeObserver.observeResize(this.eGridDiv, this.onGridSizeChanged.bind(this));
	        this.addDestroyFunc(function () { return unsubscribeFromResize(); });
	    };
	    GridCore.prototype.onGridSizeChanged = function () {
	        var event = {
	            type: events$1.Events.EVENT_GRID_SIZE_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            clientWidth: this.eGridDiv.clientWidth,
	            clientHeight: this.eGridDiv.clientHeight
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    GridCore.prototype.getPreferredWidth = function () {
	        var widthForCols = this.columnController.getBodyContainerWidth()
	            + this.columnController.getPinnedLeftContainerWidth()
	            + this.columnController.getPinnedRightContainerWidth();
	        var widthForToolpanel = this.toolPanelComp ? this.toolPanelComp.getPreferredWidth() : 0;
	        return widthForCols + widthForToolpanel;
	    };
	    GridCore.prototype.addRtlSupport = function () {
	        var cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';
	        utils.Utils.addCssClass(this.getGui(), cssClass);
	    };
	    GridCore.prototype.getRootGui = function () {
	        return this.getGui();
	    };
	    GridCore.prototype.showToolPanel = function (show) {
	        if (!this.toolPanelComp) {
	            if (show) {
	                console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
	            }
	            return;
	        }
	        this.toolPanelComp.showToolPanel(show);
	    };
	    GridCore.prototype.isToolPanelShowing = function () {
	        return this.toolPanelComp.isToolPanelShowing();
	    };
	    // need to override, as parent class isn't marked with PreDestroy
	    GridCore.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.logger.log('Grid DOM removed');
	    };
	    // Valid values for position are bottom, middle and top
	    GridCore.prototype.ensureNodeVisible = function (comparator, position) {
	        if (position === void 0) { position = 'top'; }
	        if (this.doingVirtualPaging) {
	            throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
	        }
	        // look for the node index we want to display
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var comparatorIsAFunction = typeof comparator === 'function';
	        var indexToSelect = -1;
	        // go through all the nodes, find the one we want to show
	        for (var i = 0; i < rowCount; i++) {
	            var node = this.rowModel.getRow(i);
	            if (comparatorIsAFunction) {
	                if (comparator(node)) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	            else {
	                // check object equality against node and data
	                if (comparator === node || comparator === node.data) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	        }
	        if (indexToSelect >= 0) {
	            this.gridPanel.ensureIndexVisible(indexToSelect, position);
	        }
	    };
	    GridCore.TEMPLATE_NORMAL = "<div class=\"ag-root-wrapper\">\n            <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                <ag-grid-comp ref=\"gridPanel\"></ag-grid-comp>\n            </div>\n            <ag-pagination></ag-pagination>\n        </div>";
	    GridCore.TEMPLATE_ENTERPRISE = "<div class=\"ag-root-wrapper\">\n            <ag-header-column-drop></ag-header-column-drop>\n            <div ref=\"rootWrapperBody\" class=\"ag-root-wrapper-body\">\n                <ag-grid-comp ref=\"gridPanel\"></ag-grid-comp>\n                <ag-tool-panel ref=\"toolPanel\"></ag-tool-panel>\n            </div>\n            <ag-status-bar ref=\"statusBar\"></ag-status-bar>\n            <ag-pagination></ag-pagination>\n        </div>";
	    __decorate([
	        context.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], GridCore.prototype, "enterprise", void 0);
	    __decorate([
	        context.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "gridOptions", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], GridCore.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GridCore.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], GridCore.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], GridCore.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], GridCore.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], GridCore.prototype, "eGridDiv", void 0);
	    __decorate([
	        context.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired('quickFilterOnScope'),
	        __metadata("design:type", String)
	    ], GridCore.prototype, "quickFilterOnScope", void 0);
	    __decorate([
	        context.Autowired('popupService'),
	        __metadata("design:type", popupService.PopupService)
	    ], GridCore.prototype, "popupService", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], GridCore.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], GridCore.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('loggerFactory'),
	        __metadata("design:type", logger.LoggerFactory)
	    ], GridCore.prototype, "loggerFactory", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], GridCore.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], GridCore.prototype, "gridApi", void 0);
	    __decorate([
	        context.Optional('rowGroupCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowGroupCompFactory", void 0);
	    __decorate([
	        context.Optional('pivotCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "pivotCompFactory", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('statusBar'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "statusBar", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('gridPanel'),
	        __metadata("design:type", gridPanel.GridPanel)
	    ], GridCore.prototype, "gridPanel", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('toolPanel'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "toolPanelComp", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('rootWrapperBody'),
	        __metadata("design:type", HTMLElement)
	    ], GridCore.prototype, "eRootWrapperBody", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "init", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "destroy", null);
	    GridCore = GridCore_1 = __decorate([
	        context.Bean('gridCore'),
	        __metadata("design:paramtypes", [])
	    ], GridCore);
	    return GridCore;
	    var GridCore_1;
	}(component.Component));
	exports.GridCore = GridCore;
	});

	unwrapExports(gridCore);
	var gridCore_1 = gridCore.GridCore;

	var cellNavigationService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var CellNavigationService = (function () {
	    function CellNavigationService() {
	    }
	    // returns null if no cell to focus on, ie at the end of the grid
	    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
	        // starting with the provided cell, we keep moving until we find a cell we can
	        // focus on.
	        var pointer = lastCellToFocus;
	        var finished = false;
	        // finished will be true when either:
	        // a) cell found that we can focus on
	        // b) run out of cells (ie the method returns null)
	        while (!finished) {
	            switch (key) {
	                case constants.Constants.KEY_UP:
	                    pointer = this.getCellAbove(pointer);
	                    break;
	                case constants.Constants.KEY_DOWN:
	                    pointer = this.getCellBelow(pointer);
	                    break;
	                case constants.Constants.KEY_RIGHT:
	                    if (this.gridOptionsWrapper.isEnableRtl()) {
	                        pointer = this.getCellToLeft(pointer);
	                    }
	                    else {
	                        pointer = this.getCellToRight(pointer);
	                    }
	                    break;
	                case constants.Constants.KEY_LEFT:
	                    if (this.gridOptionsWrapper.isEnableRtl()) {
	                        pointer = this.getCellToRight(pointer);
	                    }
	                    else {
	                        pointer = this.getCellToLeft(pointer);
	                    }
	                    break;
	                default:
	                    console.log('ag-Grid: unknown key for navigation ' + key);
	                    pointer = null;
	                    break;
	            }
	            if (pointer) {
	                finished = this.isCellGoodToFocusOn(pointer);
	            }
	            else {
	                finished = true;
	            }
	        }
	        return pointer;
	    };
	    CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell$$1) {
	        var column = gridCell$$1.column;
	        var rowNode;
	        switch (gridCell$$1.floating) {
	            case constants.Constants.PINNED_TOP:
	                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell$$1.rowIndex);
	                break;
	            case constants.Constants.PINNED_BOTTOM:
	                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell$$1.rowIndex);
	                break;
	            default:
	                rowNode = this.rowModel.getRow(gridCell$$1.rowIndex);
	                break;
	        }
	        var suppressNavigable = column.isSuppressNavigable(rowNode);
	        return !suppressNavigable;
	    };
	    CellNavigationService.prototype.getCellToLeft = function (lastCell) {
	        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
	        if (!colToLeft) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToLeft, floating: lastCell.floating };
	            return new gridCell.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getCellToRight = function (lastCell) {
	        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
	        // if already on right, do nothing
	        if (!colToRight) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToRight, floating: lastCell.floating };
	            return new gridCell.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getRowBelow = function (lastRow) {
	        // if already on top row, do nothing
	        if (this.isLastRowInContainer(lastRow)) {
	            if (lastRow.isFloatingBottom()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants.Constants.PINNED_BOTTOM)) {
	                    return new gridRow.GridRow(0, constants.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                if (this.rowModel.isRowsToRender()) {
	                    return new gridRow.GridRow(0, null);
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants.Constants.PINNED_BOTTOM)) {
	                    return new gridRow.GridRow(0, constants.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow.GridRow(lastRow.rowIndex + 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellBelow = function (lastCell) {
	        var rowBelow = this.getRowBelow(lastCell.getGridRow());
	        if (rowBelow) {
	            var gridCellDef = { rowIndex: rowBelow.rowIndex, column: lastCell.column, floating: rowBelow.floating };
	            return new gridCell.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.isLastRowInContainer = function (gridRow$$1) {
	        if (gridRow$$1.isFloatingTop()) {
	            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	            return lastTopIndex <= gridRow$$1.rowIndex;
	        }
	        else if (gridRow$$1.isFloatingBottom()) {
	            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
	            return lastBottomIndex <= gridRow$$1.rowIndex;
	        }
	        else {
	            var lastBodyIndex = this.rowModel.getPageLastRow();
	            return lastBodyIndex <= gridRow$$1.rowIndex;
	        }
	    };
	    CellNavigationService.prototype.getRowAbove = function (lastRow) {
	        // if already on top row, do nothing
	        if (lastRow.rowIndex === 0) {
	            if (lastRow.isFloatingTop()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                // last floating bottom
	                if (this.rowModel.isRowsToRender()) {
	                    return this.getLastBodyCell();
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow.GridRow(lastRow.rowIndex - 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellAbove = function (lastCell) {
	        var rowAbove = this.getRowAbove(lastCell.getGridRow());
	        if (rowAbove) {
	            var gridCellDef = { rowIndex: rowAbove.rowIndex, column: lastCell.column, floating: rowAbove.floating };
	            return new gridCell.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.getLastBodyCell = function () {
	        var lastBodyRow = this.rowModel.getPageLastRow();
	        return new gridRow.GridRow(lastBodyRow, null);
	    };
	    CellNavigationService.prototype.getLastFloatingTopRow = function () {
	        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	        return new gridRow.GridRow(lastFloatingRow, constants.Constants.PINNED_TOP);
	    };
	    CellNavigationService.prototype.getNextTabbedCell = function (gridCell$$1, backwards) {
	        if (backwards) {
	            return this.getNextTabbedCellBackwards(gridCell$$1);
	        }
	        else {
	            return this.getNextTabbedCellForwards(gridCell$$1);
	        }
	    };
	    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell$$1) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell$$1.rowIndex;
	        var newFloating = gridCell$$1.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColAfter(gridCell$$1.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[0];
	            var rowBelow = this.getRowBelow(gridCell$$1.getGridRow());
	            if (utils.Utils.missing(rowBelow)) {
	                return;
	            }
	            newRowIndex = rowBelow.rowIndex;
	            newFloating = rowBelow.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell.GridCell(gridCellDef);
	    };
	    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell$$1) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell$$1.rowIndex;
	        var newFloating = gridCell$$1.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColBefore(gridCell$$1.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[displayedColumns.length - 1];
	            var rowAbove = this.getRowAbove(gridCell$$1.getGridRow());
	            if (utils.Utils.missing(rowAbove)) {
	                return;
	            }
	            newRowIndex = rowAbove.rowIndex;
	            newFloating = rowAbove.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell.GridCell(gridCellDef);
	    };
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], CellNavigationService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], CellNavigationService.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel.PinnedRowModel)
	    ], CellNavigationService.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CellNavigationService.prototype, "gridOptionsWrapper", void 0);
	    CellNavigationService = __decorate([
	        context.Bean('cellNavigationService')
	    ], CellNavigationService);
	    return CellNavigationService;
	}());
	exports.CellNavigationService = CellNavigationService;
	});

	unwrapExports(cellNavigationService);
	var cellNavigationService_1 = cellNavigationService.CellNavigationService;

	var rowRenderer = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });

























	var RowRenderer = (function (_super) {
	    __extends(RowRenderer, _super);
	    function RowRenderer() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        // map of row ids to row objects. keeps track of which elements
	        // are rendered for which rows in the dom.
	        _this.rowCompsByIndex = {};
	        _this.floatingTopRowComps = [];
	        _this.floatingBottomRowComps = [];
	        // we only allow one refresh at a time, otherwise the internal memory structure here
	        // will get messed up. this can happen if the user has a cellRenderer, and inside the
	        // renderer they call an API method that results in another pass of the refresh,
	        // then it will be trying to draw rows in the middle of a refresh.
	        _this.refreshInProgress = false;
	        return _this;
	    }
	    RowRenderer.prototype.agWire = function (loggerFactory) {
	        this.logger = loggerFactory.create("RowRenderer");
	    };
	    RowRenderer.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	        this.rowContainers = this.gridPanel.getRowContainers();
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
	        this.redrawAfterModelUpdate();
	    };
	    RowRenderer.prototype.onPageLoaded = function (refreshEvent) {
	        if (utils.Utils.missing(refreshEvent)) {
	            refreshEvent = {
	                type: events$1.Events.EVENT_MODEL_UPDATED,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                animate: false,
	                keepRenderedRows: false,
	                newData: false,
	                newPage: false
	            };
	        }
	        this.onModelUpdated(refreshEvent);
	    };
	    RowRenderer.prototype.getAllCellsForColumn = function (column) {
	        var eCells = [];
	        utils.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils.Utils.iterateObject(this.floatingBottomRowComps, callback);
	        utils.Utils.iterateObject(this.floatingTopRowComps, callback);
	        function callback(key, rowComp$$1) {
	            var eCell = rowComp$$1.getCellForCol(column);
	            if (eCell) {
	                eCells.push(eCell);
	            }
	        }
	        return eCells;
	    };
	    RowRenderer.prototype.refreshFloatingRowComps = function () {
	        this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
	        this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);
	    };
	    RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
	        var _this = this;
	        rowComps.forEach(function (row) {
	            row.destroy();
	        });
	        rowComps.length = 0;
	        if (rowNodes) {
	            rowNodes.forEach(function (node) {
	                var rowComp$$1 = new rowComp.RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false);
	                rowComp$$1.init();
	                rowComps.push(rowComp$$1);
	            });
	        }
	        this.flushContainers(rowComps);
	    };
	    RowRenderer.prototype.onPinnedRowDataChanged = function () {
	        // recycling rows in order to ensure cell editing is not cancelled
	        var params = {
	            recycleRows: true
	        };
	        this.redrawAfterModelUpdate(params);
	    };
	    RowRenderer.prototype.onModelUpdated = function (refreshEvent) {
	        var params = {
	            recycleRows: refreshEvent.keepRenderedRows,
	            animate: refreshEvent.animate,
	            newData: refreshEvent.newData,
	            newPage: refreshEvent.newPage,
	            // because this is a model updated event (not pinned rows), we
	            // can skip updating the pinned rows. this is needed so that if user
	            // is doing transaction updates, the pinned rows are not getting constantly
	            // trashed - or editing cells in pinned rows are not refreshed and put into read mode
	            onlyBody: true
	        };
	        this.redrawAfterModelUpdate(params);
	    };
	    // if the row nodes are not rendered, no index is returned
	    RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {
	        var result = [];
	        if (utils.Utils.missing(rowNodes)) {
	            return result;
	        }
	        utils.Utils.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
	            var rowNode = renderedRow.getRowNode();
	            if (rowNodes.indexOf(rowNode) >= 0) {
	                result.push(index);
	            }
	        });
	        return result;
	    };
	    RowRenderer.prototype.redrawRows = function (rowNodes) {
	        if (!rowNodes || rowNodes.length == 0) {
	            return;
	        }
	        // we only need to be worried about rendered rows, as this method is
	        // called to whats rendered. if the row isn't rendered, we don't care
	        var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
	        // remove the rows
	        this.removeRowComps(indexesToRemove);
	        // add draw them again
	        this.redrawAfterModelUpdate({
	            recycleRows: true
	        });
	    };
	    RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {
	        var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();
	        if (utils.Utils.missing(focusedCell)) {
	            return null;
	        }
	        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
	        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
	        // cell itself, then the cell can be registered as having focus, however it's the text field that
	        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
	        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
	        // the focus is lost from the text field. we do not want this.
	        var activeElement = document.activeElement;
	        var domData = this.gridOptionsWrapper.getDomData(activeElement, cellComp.CellComp.DOM_DATA_KEY_CELL_COMP);
	        var elementIsNotACellDev = utils.Utils.missing(domData);
	        if (elementIsNotACellDev) {
	            return null;
	        }
	        return focusedCell;
	    };
	    // gets called after changes to the model.
	    RowRenderer.prototype.redrawAfterModelUpdate = function (params) {
	        if (params === void 0) { params = {}; }
	        this.getLockOnRefresh();
	        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
	        this.sizeContainerToPageHeight();
	        this.scrollToTopIfNewData(params);
	        var recycleRows = params.recycleRows;
	        var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
	        var rowsToRecycle = this.binRowComps(recycleRows);
	        this.redraw(rowsToRecycle, animate);
	        if (!params.onlyBody) {
	            this.refreshFloatingRowComps();
	        }
	        this.restoreFocusedCell(focusedCell);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.scrollToTopIfNewData = function (params) {
	        var scrollToTop = params.newData || params.newPage;
	        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
	        if (scrollToTop && !suppressScrollToTop) {
	            this.gridPanel.scrollToTop();
	        }
	    };
	    RowRenderer.prototype.sizeContainerToPageHeight = function () {
	        var containerHeight = this.paginationProxy.getCurrentPageHeight();
	        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
	        // we still want the scroll to be present, otherwise there would be no way to access the columns
	        // on the RHS - and if that was where the filter was that cause no rows to be presented, there
	        // is no way to remove the filter.
	        if (containerHeight === 0) {
	            containerHeight = 1;
	        }
	        this.heightScaler.setModelHeight(containerHeight);
	        var realHeight = this.heightScaler.getUiContainerHeight();
	        this.rowContainers.body.setHeight(realHeight);
	        this.rowContainers.fullWidth.setHeight(realHeight);
	        this.rowContainers.pinnedLeft.setHeight(realHeight);
	        this.rowContainers.pinnedRight.setHeight(realHeight);
	    };
	    RowRenderer.prototype.getLockOnRefresh = function () {
	        if (this.refreshInProgress) {
	            throw new Error("ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. " +
	                "Your code probably called a grid API method while the grid was in the render stage. To overcome " +
	                "this, put the API call into a timeout, eg instead of api.refreshView(), " +
	                "call setTimeout(function(){api.refreshView(),0}). To see what part of your code " +
	                "that caused the refresh check this stacktrace.");
	        }
	        this.refreshInProgress = true;
	    };
	    RowRenderer.prototype.releaseLockOnRefresh = function () {
	        this.refreshInProgress = false;
	    };
	    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
	    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
	    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
	    // edited cell).
	    RowRenderer.prototype.restoreFocusedCell = function (gridCell$$1) {
	        if (gridCell$$1) {
	            this.focusedCellController.setFocusedCell(gridCell$$1.rowIndex, gridCell$$1.column, gridCell$$1.floating, true);
	        }
	    };
	    RowRenderer.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachRowComp(function (key, rowComp$$1) {
	            rowComp$$1.stopEditing(cancel);
	        });
	    };
	    RowRenderer.prototype.forEachCellComp = function (callback) {
	        this.forEachRowComp(function (key, rowComp$$1) { return rowComp$$1.forEachCellComp(callback); });
	    };
	    RowRenderer.prototype.forEachRowComp = function (callback) {
	        utils.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils.Utils.iterateObject(this.floatingTopRowComps, callback);
	        utils.Utils.iterateObject(this.floatingBottomRowComps, callback);
	    };
	    RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        var rowComp$$1 = this.rowCompsByIndex[rowIndex];
	        if (rowComp$$1) {
	            rowComp$$1.addEventListener(eventName, callback);
	        }
	    };
	    RowRenderer.prototype.flashCells = function (params) {
	        if (params === void 0) { params = {}; }
	        this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp$$1) { return cellComp$$1.flashCell(); });
	    };
	    RowRenderer.prototype.refreshCells = function (params) {
	        if (params === void 0) { params = {}; }
	        var refreshCellParams = {
	            forceRefresh: params.force,
	            newData: false
	        };
	        this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp$$1) { return cellComp$$1.refreshCell(refreshCellParams); });
	    };
	    RowRenderer.prototype.getCellRendererInstances = function (params) {
	        var res = [];
	        this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp$$1) {
	            var cellRenderer = cellComp$$1.getCellRenderer();
	            if (cellRenderer) {
	                res.push(cellRenderer);
	            }
	        });
	        return res;
	    };
	    RowRenderer.prototype.getCellEditorInstances = function (params) {
	        var res = [];
	        this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp$$1) {
	            var cellEditor = cellComp$$1.getCellEditor();
	            if (cellEditor) {
	                res.push(cellEditor);
	            }
	        });
	        return res;
	    };
	    RowRenderer.prototype.getEditingCells = function () {
	        var res = [];
	        this.forEachCellComp(function (cellComp$$1) {
	            if (cellComp$$1.isEditing()) {
	                var gridCellDef = cellComp$$1.getGridCell().getGridCellDef();
	                res.push(gridCellDef);
	            }
	        });
	        return res;
	    };
	    // calls the callback for each cellComp that match the provided rowNodes and columns. eg if one row node
	    // and two columns provided, that identifies 4 cells, so callback gets called 4 times, once for each cell.
	    RowRenderer.prototype.forEachCellCompFiltered = function (rowNodes, columns, callback) {
	        var _this = this;
	        var rowIdsMap;
	        if (utils.Utils.exists(rowNodes)) {
	            rowIdsMap = {
	                top: {},
	                bottom: {},
	                normal: {}
	            };
	            rowNodes.forEach(function (rowNode) {
	                if (rowNode.rowPinned === constants.Constants.PINNED_TOP) {
	                    rowIdsMap.top[rowNode.id] = true;
	                }
	                else if (rowNode.rowPinned === constants.Constants.PINNED_BOTTOM) {
	                    rowIdsMap.bottom[rowNode.id] = true;
	                }
	                else {
	                    rowIdsMap.normal[rowNode.id] = true;
	                }
	            });
	        }
	        var colIdsMap;
	        if (utils.Utils.exists(columns)) {
	            colIdsMap = {};
	            columns.forEach(function (colKey) {
	                var column = _this.columnController.getGridColumn(colKey);
	                if (utils.Utils.exists(column)) {
	                    colIdsMap[column.getId()] = true;
	                }
	            });
	        }
	        var processRow = function (rowComp$$1) {
	            var rowNode = rowComp$$1.getRowNode();
	            var id = rowNode.id;
	            var floating = rowNode.rowPinned;
	            // skip this row if it is missing from the provided list
	            if (utils.Utils.exists(rowIdsMap)) {
	                if (floating === constants.Constants.PINNED_BOTTOM) {
	                    if (!rowIdsMap.bottom[id]) {
	                        return;
	                    }
	                }
	                else if (floating === constants.Constants.PINNED_TOP) {
	                    if (!rowIdsMap.top[id]) {
	                        return;
	                    }
	                }
	                else {
	                    if (!rowIdsMap.normal[id]) {
	                        return;
	                    }
	                }
	            }
	            rowComp$$1.forEachCellComp(function (cellComp$$1) {
	                var colId = cellComp$$1.getColumn().getId();
	                var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
	                if (excludeColFromRefresh) {
	                    return;
	                }
	                callback(cellComp$$1);
	            });
	        };
	        utils.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp$$1) {
	            processRow(rowComp$$1);
	        });
	        if (this.floatingTopRowComps) {
	            this.floatingTopRowComps.forEach(processRow);
	        }
	        if (this.floatingBottomRowComps) {
	            this.floatingBottomRowComps.forEach(processRow);
	        }
	    };
	    RowRenderer.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
	        this.removeRowComps(rowIndexesToRemove);
	    };
	    RowRenderer.prototype.binRowComps = function (recycleRows) {
	        var _this = this;
	        var indexesToRemove;
	        var rowsToRecycle = {};
	        if (recycleRows) {
	            indexesToRemove = [];
	            utils.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp$$1) {
	                var rowNode = rowComp$$1.getRowNode();
	                if (utils.Utils.exists(rowNode.id)) {
	                    rowsToRecycle[rowNode.id] = rowComp$$1;
	                    delete _this.rowCompsByIndex[index];
	                }
	                else {
	                    indexesToRemove.push(index);
	                }
	            });
	        }
	        else {
	            indexesToRemove = Object.keys(this.rowCompsByIndex);
	        }
	        this.removeRowComps(indexesToRemove);
	        return rowsToRecycle;
	    };
	    // takes array of row indexes
	    RowRenderer.prototype.removeRowComps = function (rowsToRemove) {
	        var _this = this;
	        // if no fromIndex then set to -1, which will refresh everything
	        // let realFromIndex = -1;
	        rowsToRemove.forEach(function (indexToRemove) {
	            var renderedRow = _this.rowCompsByIndex[indexToRemove];
	            renderedRow.destroy();
	            delete _this.rowCompsByIndex[indexToRemove];
	        });
	    };
	    // gets called when rows don't change, but viewport does, so after:
	    // 1) height of grid body changes, ie number of displayed rows has changed
	    // 2) grid scrolled to new position
	    // 3) ensure index visible (which is a scroll)
	    RowRenderer.prototype.redrawAfterScroll = function () {
	        this.getLockOnRefresh();
	        this.redraw(null, false, true);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {
	        // for speedy lookup, dump into map
	        var indexesToDrawMap = {};
	        indexesToDraw.forEach(function (index) { return (indexesToDrawMap[index] = true); });
	        var existingIndexes = Object.keys(this.rowCompsByIndex);
	        var indexesNotToDraw = utils.Utils.filter(existingIndexes, function (index) { return !indexesToDrawMap[index]; });
	        this.removeRowComps(indexesNotToDraw);
	    };
	    RowRenderer.prototype.calculateIndexesToDraw = function () {
	        var _this = this;
	        // all in all indexes in the viewport
	        var indexesToDraw = utils.Utils.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
	        // add in indexes of rows we want to keep, because they are currently editing
	        utils.Utils.iterateObject(this.rowCompsByIndex, function (indexStr, rowComp$$1) {
	            var index = Number(indexStr);
	            if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
	                if (_this.keepRowBecauseEditing(rowComp$$1)) {
	                    indexesToDraw.push(index);
	                }
	            }
	        });
	        indexesToDraw.sort(function (a, b) { return a - b; });
	        return indexesToDraw;
	    };
	    RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {
	        var _this = this;
	        if (animate === void 0) { animate = false; }
	        if (afterScroll === void 0) { afterScroll = false; }
	        this.heightScaler.update();
	        this.workOutFirstAndLastRowsToRender();
	        // the row can already exist and be in the following:
	        // rowsToRecycle -> if model change, then the index may be different, however row may
	        //                         exist here from previous time (mapped by id).
	        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
	        // this is all the indexes we want, including those that already exist, so this method
	        // will end up going through each index and drawing only if the row doesn't already exist
	        var indexesToDraw = this.calculateIndexesToDraw();
	        this.removeRowCompsNotToDraw(indexesToDraw);
	        // add in new rows
	        var nextVmTurnFunctions = [];
	        var rowComps = [];
	        indexesToDraw.forEach(function (rowIndex) {
	            var rowComp$$1 = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
	            if (utils.Utils.exists(rowComp$$1)) {
	                rowComps.push(rowComp$$1);
	                utils.Utils.pushAll(nextVmTurnFunctions, rowComp$$1.getAndClearNextVMTurnFunctions());
	            }
	        });
	        this.flushContainers(rowComps);
	        utils.Utils.executeNextVMTurn(nextVmTurnFunctions);
	        if (afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.beans.taskQueue.addP2Task(this.destroyRowComps.bind(this, rowsToRecycle, animate));
	        }
	        else {
	            this.destroyRowComps(rowsToRecycle, animate);
	        }
	        this.checkAngularCompile();
	    };
	    RowRenderer.prototype.flushContainers = function (rowComps) {
	        utils.Utils.iterateObject(this.rowContainers, function (key, rowContainerComp) {
	            if (rowContainerComp) {
	                rowContainerComp.flushRowTemplates();
	            }
	        });
	        rowComps.forEach(function (rowComp$$1) { return rowComp$$1.afterFlush(); });
	    };
	    RowRenderer.prototype.onDisplayedColumnsChanged = function () {
	        var pinningLeft = this.columnController.isPinningLeft();
	        var pinningRight = this.columnController.isPinningRight();
	        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
	        if (atLeastOneChanged) {
	            this.pinningLeft = pinningLeft;
	            this.pinningRight = pinningRight;
	            if (this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	                this.redrawFullWidthEmbeddedRows();
	            }
	        }
	    };
	    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
	    // then it should go into the pinned left area if pinning left, or the center area if not pinning.
	    RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {
	        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
	        // embedded, as what appears in each section depends on whether we are pinned or not
	        var rowsToRemove = [];
	        utils.Utils.iterateObject(this.rowCompsByIndex, function (id, rowComp$$1) {
	            if (rowComp$$1.isFullWidth()) {
	                var rowIndex = rowComp$$1.getRowNode().rowIndex;
	                rowsToRemove.push(rowIndex.toString());
	            }
	        });
	        this.refreshFloatingRowComps();
	        this.removeRowComps(rowsToRemove);
	        this.redrawAfterScroll();
	    };
	    RowRenderer.prototype.createOrUpdateRowComp = function (rowIndex, rowsToRecycle, animate, afterScroll) {
	        var rowNode;
	        var rowComp$$1 = this.rowCompsByIndex[rowIndex];
	        // if no row comp, see if we can get it from the previous rowComps
	        if (!rowComp$$1) {
	            rowNode = this.paginationProxy.getRow(rowIndex);
	            if (utils.Utils.exists(rowNode) && utils.Utils.exists(rowsToRecycle) && rowsToRecycle[rowNode.id]) {
	                rowComp$$1 = rowsToRecycle[rowNode.id];
	                rowsToRecycle[rowNode.id] = null;
	            }
	        }
	        var creatingNewRowComp = !rowComp$$1;
	        if (creatingNewRowComp) {
	            // create a new one
	            if (!rowNode) {
	                rowNode = this.paginationProxy.getRow(rowIndex);
	            }
	            if (utils.Utils.exists(rowNode)) {
	                rowComp$$1 = this.createRowComp(rowNode, animate, afterScroll);
	            }
	            else {
	                // this should never happen - if somehow we are trying to create
	                // a row for a rowNode that does not exist.
	                return;
	            }
	        }
	        else {
	            // ensure row comp is in right position in DOM
	            rowComp$$1.ensureDomOrder();
	        }
	        this.rowCompsByIndex[rowIndex] = rowComp$$1;
	        return rowComp$$1;
	    };
	    RowRenderer.prototype.destroyRowComps = function (rowCompsMap, animate) {
	        var delayedFuncs = [];
	        utils.Utils.iterateObject(rowCompsMap, function (nodeId, rowComp$$1) {
	            // if row was used, then it's null
	            if (!rowComp$$1) {
	                return;
	            }
	            rowComp$$1.destroy(animate);
	            utils.Utils.pushAll(delayedFuncs, rowComp$$1.getAndClearDelayedDestroyFunctions());
	        });
	        utils.Utils.executeInAWhile(delayedFuncs);
	    };
	    RowRenderer.prototype.checkAngularCompile = function () {
	        var _this = this;
	        // if we are doing angular compiling, then do digest the scope here
	        if (this.gridOptionsWrapper.isAngularCompileRows()) {
	            // we do it in a timeout, in case we are already in an apply
	            setTimeout(function () {
	                _this.$scope.$apply();
	            }, 0);
	        }
	    };
	    RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
	        var newFirst;
	        var newLast;
	        if (!this.paginationProxy.isRowsToRender()) {
	            newFirst = 0;
	            newLast = -1; // setting to -1 means nothing in range
	        }
	        else {
	            var pageFirstRow = this.paginationProxy.getPageFirstRow();
	            var pageLastRow = this.paginationProxy.getPageLastRow();
	            var pixelOffset = this.paginationProxy ? this.paginationProxy.getPixelOffset() : 0;
	            var heightOffset = this.heightScaler.getOffset();
	            var bodyVRange = this.gridPanel.getVScrollPosition();
	            var topPixel = bodyVRange.top;
	            var bottomPixel = bodyVRange.bottom;
	            var realPixelTop = topPixel + pixelOffset + heightOffset;
	            var realPixelBottom = bottomPixel + pixelOffset + heightOffset;
	            var first = this.paginationProxy.getRowIndexAtPixel(realPixelTop);
	            var last = this.paginationProxy.getRowIndexAtPixel(realPixelBottom);
	            //add in buffer
	            var buffer = this.gridOptionsWrapper.getRowBuffer();
	            first = first - buffer;
	            last = last + buffer;
	            // adjust, in case buffer extended actual size
	            if (first < pageFirstRow) {
	                first = pageFirstRow;
	            }
	            if (last > pageLastRow) {
	                last = pageLastRow;
	            }
	            newFirst = first;
	            newLast = last;
	        }
	        var firstDiffers = newFirst !== this.firstRenderedRow;
	        var lastDiffers = newLast !== this.lastRenderedRow;
	        if (firstDiffers || lastDiffers) {
	            this.firstRenderedRow = newFirst;
	            this.lastRenderedRow = newLast;
	            var event_1 = {
	                type: events$1.Events.EVENT_VIEWPORT_CHANGED,
	                firstRow: newFirst,
	                lastRow: newLast,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
	        return this.firstRenderedRow;
	    };
	    RowRenderer.prototype.getLastVirtualRenderedRow = function () {
	        return this.lastRenderedRow;
	    };
	    // check that none of the rows to remove are editing or focused as:
	    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
	    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
	    //    the edit is reset - so we want to keep it rendered.
	    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
	    //    otherwise the user can range select and drag (with focus cell going out of the viewport)
	    //    and then ctrl+c, nothing will happen if cell is removed from dom.
	    RowRenderer.prototype.keepRowBecauseEditing = function (rowComp$$1) {
	        var REMOVE_ROW = false;
	        var KEEP_ROW = true;
	        var rowNode = rowComp$$1.getRowNode();
	        var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);
	        var rowIsEditing = rowComp$$1.isEditing();
	        var mightWantToKeepRow = rowHasFocus || rowIsEditing;
	        // if we deffo don't want to keep it,
	        if (!mightWantToKeepRow) {
	            return REMOVE_ROW;
	        }
	        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
	        // the reason we want to keep is if user is scrolling up and down, we don't want to loose
	        // the context of the editing in process.
	        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
	        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
	    };
	    RowRenderer.prototype.createRowComp = function (rowNode, animate, afterScroll) {
	        var useAnimationFrameForCreate = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        var rowComp$$1 = new rowComp.RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate);
	        rowComp$$1.init();
	        return rowComp$$1;
	    };
	    RowRenderer.prototype.getRenderedNodes = function () {
	        var renderedRows = this.rowCompsByIndex;
	        return Object.keys(renderedRows).map(function (key) {
	            return renderedRows[key].getRowNode();
	        });
	    };
	    // we use index for rows, but column object for columns, as the next column (by index) might not
	    // be visible (header grouping) so it's not reliable, so using the column object instead.
	    RowRenderer.prototype.navigateToNextCell = function (event, key, previousCell, allowUserOverride) {
	        var nextCell = previousCell;
	        // we keep searching for a next cell until we find one. this is how the group rows get skipped
	        while (true) {
	            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
	            if (utils.Utils.missing(nextCell)) {
	                break;
	            }
	            var skipGroupRows = this.gridOptionsWrapper.isGroupUseEntireRow();
	            if (skipGroupRows) {
	                var rowNode = this.paginationProxy.getRow(nextCell.rowIndex);
	                if (!rowNode.group) {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)
	        // we allow this, however if processing 'enter after edit' we don't allow override
	        if (allowUserOverride) {
	            var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
	            if (utils.Utils.exists(userFunc)) {
	                var params = {
	                    key: key,
	                    previousCellDef: previousCell,
	                    nextCellDef: nextCell ? nextCell.getGridCellDef() : null,
	                    event: event
	                };
	                var nextCellDef = userFunc(params);
	                if (utils.Utils.exists(nextCellDef)) {
	                    nextCell = new gridCell.GridCell(nextCellDef);
	                }
	                else {
	                    nextCell = null;
	                }
	            }
	        }
	        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
	        if (!nextCell) {
	            return;
	        }
	        this.ensureCellVisible(nextCell);
	        this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.floating, true);
	        if (this.rangeController) {
	            var gridCell$$1 = new gridCell.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	            this.rangeController.setRangeToCell(gridCell$$1);
	        }
	    };
	    RowRenderer.prototype.ensureCellVisible = function (gridCell$$1) {
	        // this scrolls the row into view
	        if (utils.Utils.missing(gridCell$$1.floating)) {
	            this.gridPanel.ensureIndexVisible(gridCell$$1.rowIndex);
	        }
	        if (!gridCell$$1.column.isPinned()) {
	            this.gridPanel.ensureColumnVisible(gridCell$$1.column);
	        }
	        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	        // floating cell, the scrolls get out of sync
	        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	        // need to flush frames, to make sure the correct cells are rendered
	        this.animationFrameService.flushAllFrames();
	    };
	    RowRenderer.prototype.startEditingCell = function (gridCell$$1, keyPress, charPress) {
	        var cell = this.getComponentForCell(gridCell$$1);
	        if (cell) {
	            cell.startRowOrCellEdit(keyPress, charPress);
	        }
	    };
	    RowRenderer.prototype.getComponentForCell = function (gridCell$$1) {
	        var rowComponent;
	        switch (gridCell$$1.floating) {
	            case constants.Constants.PINNED_TOP:
	                rowComponent = this.floatingTopRowComps[gridCell$$1.rowIndex];
	                break;
	            case constants.Constants.PINNED_BOTTOM:
	                rowComponent = this.floatingBottomRowComps[gridCell$$1.rowIndex];
	                break;
	            default:
	                rowComponent = this.rowCompsByIndex[gridCell$$1.rowIndex];
	                break;
	        }
	        if (!rowComponent) {
	            return null;
	        }
	        var cellComponent = rowComponent.getRenderedCellForColumn(gridCell$$1.column);
	        return cellComponent;
	    };
	    RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {
	        var backwards = keyboardEvent.shiftKey;
	        var success = this.moveToCellAfter(previousRenderedCell, backwards);
	        if (success) {
	            keyboardEvent.preventDefault();
	        }
	    };
	    RowRenderer.prototype.tabToNextCell = function (backwards) {
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        // if no focus, then cannot navigate
	        if (utils.Utils.missing(focusedCell)) {
	            return false;
	        }
	        var renderedCell = this.getComponentForCell(focusedCell);
	        // if cell is not rendered, means user has scrolled away from the cell
	        if (utils.Utils.missing(renderedCell)) {
	            return false;
	        }
	        var result = this.moveToCellAfter(renderedCell, backwards);
	        return result;
	    };
	    RowRenderer.prototype.moveToCellAfter = function (previousRenderedCell, backwards) {
	        var editing = previousRenderedCell.isEditing();
	        var res;
	        if (editing) {
	            if (this.gridOptionsWrapper.isFullRowEdit()) {
	                res = this.moveToNextEditingRow(previousRenderedCell, backwards);
	            }
	            else {
	                res = this.moveToNextEditingCell(previousRenderedCell, backwards);
	            }
	        }
	        else {
	            res = this.moveToNextCellNotEditing(previousRenderedCell, backwards);
	        }
	        return res;
	    };
	    RowRenderer.prototype.moveToNextEditingCell = function (previousRenderedCell, backwards) {
	        var gridCell$$1 = previousRenderedCell.getGridCell();
	        // need to do this before getting next cell to edit, in case the next cell
	        // has editable function (eg colDef.editable=func() ) and it depends on the
	        // result of this cell, so need to save updates from the first edit, in case
	        // the value is referenced in the function.
	        previousRenderedCell.stopEditing();
	        // find the next cell to start editing
	        var nextRenderedCell = this.findNextCellToFocusOn(gridCell$$1, backwards, true);
	        var foundCell = utils.Utils.exists(nextRenderedCell);
	        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
	        // to the normal tabbing so user can exit the grid.
	        if (foundCell) {
	            nextRenderedCell.startEditingIfEnabled(null, null, true);
	            nextRenderedCell.focusCell(false);
	        }
	        return foundCell;
	    };
	    RowRenderer.prototype.moveToNextEditingRow = function (previousRenderedCell, backwards) {
	        var gridCell$$1 = previousRenderedCell.getGridCell();
	        // find the next cell to start editing
	        var nextRenderedCell = this.findNextCellToFocusOn(gridCell$$1, backwards, true);
	        var foundCell = utils.Utils.exists(nextRenderedCell);
	        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
	        // to the normal tabbing so user can exit the grid.
	        if (foundCell) {
	            this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
	        }
	        return foundCell;
	    };
	    RowRenderer.prototype.moveToNextCellNotEditing = function (previousRenderedCell, backwards) {
	        var gridCell$$1 = previousRenderedCell.getGridCell();
	        // find the next cell to start editing
	        var nextRenderedCell = this.findNextCellToFocusOn(gridCell$$1, backwards, false);
	        var foundCell = utils.Utils.exists(nextRenderedCell);
	        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
	        // to the normal tabbing so user can exit the grid.
	        if (foundCell) {
	            nextRenderedCell.focusCell(true);
	        }
	        return foundCell;
	    };
	    RowRenderer.prototype.moveEditToNextCellOrRow = function (previousRenderedCell, nextRenderedCell) {
	        var pGridCell = previousRenderedCell.getGridCell();
	        var nGridCell = nextRenderedCell.getGridCell();
	        var rowsMatch = pGridCell.rowIndex === nGridCell.rowIndex && pGridCell.floating === nGridCell.floating;
	        if (rowsMatch) {
	            // same row, so we don't start / stop editing, we just move the focus along
	            previousRenderedCell.setFocusOutOnEditor();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        else {
	            var pRow = previousRenderedCell.getRenderedRow();
	            var nRow = nextRenderedCell.getRenderedRow();
	            previousRenderedCell.setFocusOutOnEditor();
	            pRow.stopEditing();
	            nRow.startRowEditing();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        nextRenderedCell.focusCell();
	    };
	    // called by the cell, when tab is pressed while editing.
	    // @return: RenderedCell when navigation successful, otherwise null
	    RowRenderer.prototype.findNextCellToFocusOn = function (gridCell$$1, backwards, startEditing) {
	        var nextCell = gridCell$$1;
	        while (true) {
	            nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
	            // allow user to override what cell to go to next
	            var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
	            if (utils.Utils.exists(userFunc)) {
	                var params = {
	                    backwards: backwards,
	                    editing: startEditing,
	                    previousCellDef: gridCell$$1.getGridCellDef(),
	                    nextCellDef: nextCell ? nextCell.getGridCellDef() : null
	                };
	                var nextCellDef = userFunc(params);
	                if (utils.Utils.exists(nextCellDef)) {
	                    nextCell = new gridCell.GridCell(nextCellDef);
	                }
	                else {
	                    nextCell = null;
	                }
	            }
	            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
	            // so bottom right cell going forwards, or top left going backwards
	            if (!nextCell) {
	                return null;
	            }
	            // if editing, but cell not editable, skip cell. we do this before we do all of
	            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping
	            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless
	            // (except for the last one) which causes grid to stall for a while.
	            if (startEditing) {
	                var rowNode = this.paginationProxy.getRow(nextCell.rowIndex);
	                var cellIsEditable = nextCell.column.isCellEditable(rowNode);
	                if (!cellIsEditable) {
	                    continue;
	                }
	            }
	            // this scrolls the row into view
	            var cellIsNotFloating = utils.Utils.missing(nextCell.floating);
	            if (cellIsNotFloating) {
	                this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
	            }
	            // pinned columns don't scroll, so no need to ensure index visible
	            if (!nextCell.column.isPinned()) {
	                this.gridPanel.ensureColumnVisible(nextCell.column);
	            }
	            // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	            // floating cell, the scrolls get out of sync
	            this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	            // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp
	            // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.
	            this.animationFrameService.flushAllFrames();
	            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
	            // or row that is not currently in view, hence the renderedCell would not exist
	            var nextCellComp = this.getComponentForCell(nextCell);
	            // if next cell is fullWidth row, then no rendered cell,
	            // as fullWidth rows have no cells, so we skip it
	            if (utils.Utils.missing(nextCellComp)) {
	                continue;
	            }
	            if (nextCellComp.isSuppressNavigable()) {
	                continue;
	            }
	            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
	            // consistent, we set into range here also.
	            if (this.rangeController) {
	                var gridCell_2 = new gridCell.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	                this.rangeController.setRangeToCell(gridCell_2);
	            }
	            // we successfully tabbed onto a grid cell, so return true
	            return nextCellComp;
	        }
	    };
	    __decorate([
	        context.Autowired("paginationProxy"),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], RowRenderer.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired("columnController"),
	        __metadata("design:type", columnController.ColumnController)
	    ], RowRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], RowRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired("gridCore"),
	        __metadata("design:type", gridCore.GridCore)
	    ], RowRenderer.prototype, "gridCore", void 0);
	    __decorate([
	        context.Autowired("$scope"),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired("expressionService"),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], RowRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired("templateService"),
	        __metadata("design:type", templateService.TemplateService)
	    ], RowRenderer.prototype, "templateService", void 0);
	    __decorate([
	        context.Autowired("valueService"),
	        __metadata("design:type", valueService.ValueService)
	    ], RowRenderer.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired("eventService"),
	        __metadata("design:type", eventService.EventService)
	    ], RowRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired("pinnedRowModel"),
	        __metadata("design:type", pinnedRowModel.PinnedRowModel)
	    ], RowRenderer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context.Autowired("context"),
	        __metadata("design:type", context.Context)
	    ], RowRenderer.prototype, "context", void 0);
	    __decorate([
	        context.Autowired("loggerFactory"),
	        __metadata("design:type", logger.LoggerFactory)
	    ], RowRenderer.prototype, "loggerFactory", void 0);
	    __decorate([
	        context.Autowired("focusedCellController"),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], RowRenderer.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Autowired("cellNavigationService"),
	        __metadata("design:type", cellNavigationService.CellNavigationService)
	    ], RowRenderer.prototype, "cellNavigationService", void 0);
	    __decorate([
	        context.Autowired("columnApi"),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], RowRenderer.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired("gridApi"),
	        __metadata("design:type", gridApi.GridApi)
	    ], RowRenderer.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired("beans"),
	        __metadata("design:type", beans.Beans)
	    ], RowRenderer.prototype, "beans", void 0);
	    __decorate([
	        context.Autowired("heightScaler"),
	        __metadata("design:type", heightScaler.HeightScaler)
	    ], RowRenderer.prototype, "heightScaler", void 0);
	    __decorate([
	        context.Autowired("animationFrameService"),
	        __metadata("design:type", animationFrameService.AnimationFrameService)
	    ], RowRenderer.prototype, "animationFrameService", void 0);
	    __decorate([
	        context.Optional("rangeController"),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "rangeController", void 0);
	    __decorate([
	        __param(0, context.Qualifier("loggerFactory")),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "agWire", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "destroy", null);
	    RowRenderer = __decorate([
	        context.Bean("rowRenderer")
	    ], RowRenderer);
	    return RowRenderer;
	}(beanStub.BeanStub));
	exports.RowRenderer = RowRenderer;
	});

	unwrapExports(rowRenderer);
	var rowRenderer_1 = rowRenderer.RowRenderer;

	var autoWidthCalculator = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var AutoWidthCalculator = (function () {
	    function AutoWidthCalculator() {
	    }
	    AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {
	        this.headerRootComp = headerRootComp;
	    };
	    // this is the trick: we create a dummy container and clone all the cells
	    // into the dummy, then check the dummy's width. then destroy the dummy
	    // as we don't need it any more.
	    // drawback: only the cells visible on the screen are considered
	    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {
	        var eHeaderCell = this.getHeaderCellForColumn(column);
	        // cell isn't visible
	        if (!eHeaderCell) {
	            return -1;
	        }
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        var eBodyContainer = this.gridPanel.getBodyContainer();
	        eBodyContainer.appendChild(eDummyContainer);
	        // get all the cells that are currently displayed (this only brings back
	        // rendered cells, rows not rendered due to row visualisation will not be here)
	        this.putRowCellsIntoDummyContainer(column, eDummyContainer);
	        // also put header cell in
	        // we only consider the lowest level cell, not the group cell. in 99% of the time, this
	        // will be enough. if we consider groups, then it gets to complicated for what it's worth,
	        // as the groups can span columns and this class only considers one column at a time.
	        this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
	        // at this point, all the clones are lined up vertically with natural widths. the dummy
	        // container will have a width wide enough just to fit the largest.
	        var dummyContainerWidth = eDummyContainer.offsetWidth;
	        // we are finished with the dummy container, so get rid of it
	        eBodyContainer.removeChild(eDummyContainer);
	        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the
	        // user can configure the grid to add a few more pixels after the calculated width
	        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
	        return dummyContainerWidth + autoSizePadding;
	    };
	    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {
	        var comp = null;
	        // find the rendered header cell
	        this.headerRootComp.forEachHeaderElement(function (headerElement) {
	            if (headerElement instanceof headerWrapperComp.HeaderWrapperComp) {
	                var headerWrapperComp$$1 = headerElement;
	                if (headerWrapperComp$$1.getColumn() === column) {
	                    comp = headerWrapperComp$$1;
	                }
	            }
	        });
	        return comp ? comp.getGui() : null;
	    };
	    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {
	        var _this = this;
	        var eCells = this.rowRenderer.getAllCellsForColumn(column);
	        eCells.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });
	    };
	    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {
	        // make a deep clone of the cell
	        var eCellClone = eCell.cloneNode(true);
	        // the original has a fixed width, we remove this to allow the natural width based on content
	        eCellClone.style.width = '';
	        // the original has position = absolute, we need to remove this so it's positioned normally
	        eCellClone.style.position = 'static';
	        eCellClone.style.left = '';
	        // we put the cell into a containing div, as otherwise the cells would just line up
	        // on the same line, standard flow layout, by putting them into divs, they are laid
	        // out one per line
	        var eCloneParent = document.createElement('div');
	        // table-row, so that each cell is on a row. i also tried display='block', but this
	        // didn't work in IE
	        eCloneParent.style.display = 'table-row';
	        // the twig on the branch, the branch on the tree, the tree in the hole,
	        // the hole in the bog, the bog in the clone, the clone in the parent,
	        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
	        eCloneParent.appendChild(eCellClone);
	        eDummyContainer.appendChild(eCloneParent);
	    };
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], AutoWidthCalculator.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], AutoWidthCalculator.prototype, "gridOptionsWrapper", void 0);
	    AutoWidthCalculator = __decorate([
	        context.Bean('autoWidthCalculator')
	    ], AutoWidthCalculator);
	    return AutoWidthCalculator;
	}());
	exports.AutoWidthCalculator = AutoWidthCalculator;
	});

	unwrapExports(autoWidthCalculator);
	var autoWidthCalculator_1 = autoWidthCalculator.AutoWidthCalculator;

	var groupInstanceIdCreator = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns unique instance id's for columns.
	// eg, the following calls (in this order) will result in:
	//
	// getInstanceIdForKey('country') => 0
	// getInstanceIdForKey('country') => 1
	// getInstanceIdForKey('country') => 2
	// getInstanceIdForKey('country') => 3
	// getInstanceIdForKey('age') => 0
	// getInstanceIdForKey('age') => 1
	// getInstanceIdForKey('country') => 4
	var GroupInstanceIdCreator = (function () {
	    function GroupInstanceIdCreator() {
	        // this map contains keys to numbers, so we remember what the last call was
	        this.existingIds = {};
	    }
	    GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
	        var lastResult = this.existingIds[key];
	        var result;
	        if (typeof lastResult !== 'number') {
	            // first time this key
	            result = 0;
	        }
	        else {
	            result = lastResult + 1;
	        }
	        this.existingIds[key] = result;
	        return result;
	    };
	    return GroupInstanceIdCreator;
	}());
	exports.GroupInstanceIdCreator = GroupInstanceIdCreator;
	});

	unwrapExports(groupInstanceIdCreator);
	var groupInstanceIdCreator_1 = groupInstanceIdCreator.GroupInstanceIdCreator;

	var autoGroupColService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var AutoGroupColService = (function () {
	    function AutoGroupColService() {
	    }
	    AutoGroupColService_1 = AutoGroupColService;
	    AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {
	        var _this = this;
	        var groupAutoColumns = [];
	        var doingTreeData = this.gridOptionsWrapper.isTreeData();
	        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
	        if (doingTreeData && doingMultiAutoColumn) {
	            console.log('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');
	            doingMultiAutoColumn = false;
	        }
	        // if doing groupMultiAutoColumn, then we call the method multiple times, once
	        // for each column we are grouping by
	        if (doingMultiAutoColumn) {
	            rowGroupColumns.forEach(function (rowGroupCol, index) {
	                groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
	            });
	        }
	        else {
	            groupAutoColumns.push(this.createOneAutoGroupColumn(null));
	        }
	        return groupAutoColumns;
	    };
	    // rowGroupCol and index are missing if groupMultiAutoColumn=false
	    AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {
	        // if one provided by user, use it, otherwise create one
	        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
	        // if doing multi, set the field
	        var colId;
	        if (rowGroupCol) {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
	        }
	        else {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
	        }
	        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
	        utils._.mergeDeep(defaultAutoColDef, userAutoColDef);
	        defaultAutoColDef = this.balancedColumnTreeBuilder.mergeColDefs(defaultAutoColDef);
	        defaultAutoColDef.colId = colId;
	        // For tree data the filter is always allowed
	        if (!this.gridOptionsWrapper.isTreeData()) {
	            // we would only allow filter if the user has provided field or value getter. otherwise the filter
	            // would not be able to work.
	            var noFieldOrValueGetter = utils._.missing(defaultAutoColDef.field) && utils._.missing(defaultAutoColDef.valueGetter) && utils._.missing(defaultAutoColDef.filterValueGetter);
	            if (noFieldOrValueGetter) {
	                defaultAutoColDef.suppressFilter = true;
	            }
	        }
	        // if showing many cols, we don't want to show more than one with a checkbox for selection
	        if (index > 0) {
	            defaultAutoColDef.headerCheckboxSelection = false;
	        }
	        var newCol = new column.Column(defaultAutoColDef, colId, true);
	        this.context.wireBean(newCol);
	        return newCol;
	    };
	    AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var defaultAutoColDef = {
	            headerName: localeTextFunc('group', 'Group'),
	            cellRenderer: 'agGroupCellRenderer'
	        };
	        // we never allow moving the group column
	        // defaultAutoColDef.suppressMovable = true;
	        if (rowGroupCol) {
	            var rowGroupColDef = rowGroupCol.getColDef();
	            utils._.assign(defaultAutoColDef, {
	                // cellRendererParams.groupKey: colDefToCopy.field;
	                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),
	                headerValueGetter: rowGroupColDef.headerValueGetter
	            });
	            if (rowGroupColDef.cellRenderer) {
	                utils._.assign(defaultAutoColDef, {
	                    cellRendererParams: {
	                        innerRenderer: rowGroupColDef.cellRenderer,
	                        innerRendererParams: rowGroupColDef.cellRendererParams
	                    }
	                });
	            }
	            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
	        }
	        else {
	            defaultAutoColDef.showRowGroup = true;
	        }
	        return defaultAutoColDef;
	    };
	    AutoGroupColService.GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';
	    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID;
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], AutoGroupColService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], AutoGroupColService.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], AutoGroupColService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder.BalancedColumnTreeBuilder)
	    ], AutoGroupColService.prototype, "balancedColumnTreeBuilder", void 0);
	    AutoGroupColService = AutoGroupColService_1 = __decorate([
	        context.Bean('autoGroupColService')
	    ], AutoGroupColService);
	    return AutoGroupColService;
	    var AutoGroupColService_1;
	}());
	exports.AutoGroupColService = AutoGroupColService;
	});

	unwrapExports(autoGroupColService);
	var autoGroupColService_1 = autoGroupColService.AutoGroupColService;

	var columnController = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });




















	var ColumnController = (function () {
	    function ColumnController() {
	        // header row count, based on user provided columns
	        this.primaryHeaderRowCount = 0;
	        this.secondaryHeaderRowCount = 0;
	        this.secondaryColumnsPresent = false;
	        // header row count, either above, or based on pivoting if we are pivoting
	        this.gridHeaderRowCount = 0;
	        // these are the lists used by the rowRenderer to render nodes. almost the leaf nodes of the above
	        // displayed trees, however it also takes into account if the groups are open or not.
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        // all three lists above combined
	        this.allDisplayedColumns = [];
	        // same as above, except trimmed down to only columns within the viewport
	        this.allDisplayedVirtualColumns = [];
	        this.allDisplayedCenterVirtualColumns = [];
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        this.ready = false;
	        this.autoGroupsNeedBuilding = false;
	        this.pivotMode = false;
	        this.bodyWidth = 0;
	        this.leftWidth = 0;
	        this.rightWidth = 0;
	        this.bodyWidthDirty = true;
	    }
	    ColumnController.prototype.init = function () {
	        var pivotMode = this.gridOptionsWrapper.isPivotMode();
	        this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
	        if (this.isPivotSettingAllowed(pivotMode)) {
	            this.pivotMode = pivotMode;
	        }
	        this.usingTreeData = this.gridOptionsWrapper.isTreeData();
	    };
	    ColumnController.prototype.isAutoRowHeightActive = function () {
	        return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
	    };
	    ColumnController.prototype.getAllAutoRowHeightCols = function () {
	        return this.autoRowHeightColumns;
	    };
	    ColumnController.prototype.setVirtualViewportLeftAndRight = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
	            this.viewportRight = this.bodyWidth - this.scrollPosition;
	        }
	        else {
	            this.viewportLeft = this.scrollPosition;
	            this.viewportRight = this.scrollWidth + this.scrollPosition;
	        }
	    };
	    // used by clipboard service, to know what columns to paste into
	    ColumnController.prototype.getDisplayedColumnsStartingAt = function (column$$1) {
	        var currentColumn = column$$1;
	        var result = [];
	        while (utils.Utils.exists(currentColumn)) {
	            result.push(currentColumn);
	            currentColumn = this.getDisplayedColAfter(currentColumn);
	        }
	        return result;
	    };
	    // checks what columns are currently displayed due to column virtualisation. fires an event
	    // if the list of columns has changed.
	    // + setColumnWidth(), setVirtualViewportPosition(), setColumnDefs(), sizeColumnsToFit()
	    ColumnController.prototype.checkDisplayedVirtualColumns = function () {
	        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
	        if (utils.Utils.exists(this.displayedCenterColumns)) {
	            var hashBefore = this.allDisplayedVirtualColumns.map(function (column$$1) { return column$$1.getId(); }).join('#');
	            this.updateVirtualSets();
	            var hashAfter = this.allDisplayedVirtualColumns.map(function (column$$1) { return column$$1.getId(); }).join('#');
	            if (hashBefore !== hashAfter) {
	                var event_1 = {
	                    type: events$1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	            }
	        }
	    };
	    ColumnController.prototype.setVirtualViewportPosition = function (scrollWidth, scrollPosition) {
	        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
	            this.scrollWidth = scrollWidth;
	            this.scrollPosition = scrollPosition;
	            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
	            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
	            // virtual columns again
	            this.bodyWidthDirty = true;
	            this.setVirtualViewportLeftAndRight();
	            if (this.ready) {
	                this.checkDisplayedVirtualColumns();
	            }
	        }
	    };
	    ColumnController.prototype.isPivotMode = function () {
	        return this.pivotMode;
	    };
	    ColumnController.prototype.isPivotSettingAllowed = function (pivot) {
	        if (pivot) {
	            if (this.gridOptionsWrapper.isTreeData()) {
	                console.warn("ag-Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
	                return false;
	            }
	            else {
	                return true;
	            }
	        }
	        else {
	            return true;
	        }
	    };
	    ColumnController.prototype.setPivotMode = function (pivotMode, source) {
	        if (source === void 0) { source = "api"; }
	        if (pivotMode === this.pivotMode) {
	            return;
	        }
	        if (!this.isPivotSettingAllowed(this.pivotMode)) {
	            return;
	        }
	        this.pivotMode = pivotMode;
	        this.updateDisplayedColumns(source);
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
	        if (!this.secondaryColumnsPresent) {
	            return null;
	        }
	        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
	        var foundColumn = null;
	        this.secondaryColumns.forEach(function (column$$1) {
	            var thisPivotKeys = column$$1.getColDef().pivotKeys;
	            var pivotValueColumn = column$$1.getColDef().pivotValueColumn;
	            var pivotKeyMatches = utils.Utils.compareArrays(thisPivotKeys, pivotKeys);
	            var pivotValueMatches = pivotValueColumn === valueColumnToFind;
	            if (pivotKeyMatches && pivotValueMatches) {
	                foundColumn = column$$1;
	            }
	        });
	        return foundColumn;
	    };
	    ColumnController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ColumnController');
	    };
	    ColumnController.prototype.setFirstRightAndLastLeftPinned = function (source) {
	        var lastLeft;
	        var firstRight;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[this.displayedRightColumns.length - 1] : null;
	        }
	        else {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[this.displayedLeftColumns.length - 1] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
	        }
	        this.gridColumns.forEach(function (column$$1) {
	            column$$1.setLastLeftPinned(column$$1 === lastLeft, source);
	            column$$1.setFirstRightPinned(column$$1 === firstRight, source);
	        });
	    };
	    ColumnController.prototype.autoSizeColumns = function (keys, source) {
	        // because of column virtualisation, we can only do this function on columns that are
	        // actually rendered, as non-rendered columns (outside the viewport and not rendered
	        // due to column virtualisation) are not present. this can result in all rendered columns
	        // getting narrowed, which in turn introduces more rendered columns on the RHS which
	        // did not get autosized in the original run, leaving the visible grid with columns on
	        // the LHS sized, but RHS no. so we keep looping through teh visible columns until
	        // no more cols are available (rendered) to be resized
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        // keep track of which cols we have resized in here
	        var columnsAutosized = [];
	        // initialise with anything except 0 so that while loop executs at least once
	        var changesThisTimeAround = -1;
	        while (changesThisTimeAround !== 0) {
	            changesThisTimeAround = 0;
	            this.actionOnGridColumns(keys, function (column$$1) {
	                // if already autosized, skip it
	                if (columnsAutosized.indexOf(column$$1) >= 0) {
	                    return;
	                }
	                // get how wide this col should be
	                var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column$$1);
	                // preferredWidth = -1 if this col is not on the screen
	                if (preferredWidth > 0) {
	                    var newWidth = _this.normaliseColumnWidth(column$$1, preferredWidth);
	                    column$$1.setActualWidth(newWidth, source);
	                    columnsAutosized.push(column$$1);
	                    changesThisTimeAround++;
	                }
	                return true;
	            }, source);
	        }
	        if (columnsAutosized.length > 0) {
	            var event_2 = {
	                type: events$1.Events.EVENT_COLUMN_RESIZED,
	                columns: columnsAutosized,
	                column: columnsAutosized.length === 1 ? columnsAutosized[0] : null,
	                finished: true,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                source: "autosizeColumns"
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	    };
	    ColumnController.prototype.autoSizeColumn = function (key, source) {
	        if (source === void 0) { source = "api"; }
	        this.autoSizeColumns([key], source);
	    };
	    ColumnController.prototype.autoSizeAllColumns = function (source) {
	        if (source === void 0) { source = "api"; }
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        this.autoSizeColumns(allDisplayedColumns, source);
	    };
	    ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
	        var result = [];
	        recursiveFindColumns(rootColumns);
	        return result;
	        function recursiveFindColumns(childColumns) {
	            for (var i = 0; i < childColumns.length; i++) {
	                var child = childColumns[i];
	                if (child instanceof column.Column) {
	                    result.push(child);
	                }
	                else if (child instanceof originalColumnGroup.OriginalColumnGroup) {
	                    recursiveFindColumns(child.getChildren());
	                }
	            }
	        }
	    };
	    ColumnController.prototype.getAllDisplayedColumnGroups = function () {
	        if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
	            return this.displayedLeftColumnTree
	                .concat(this.displayedCentreColumnTree)
	                .concat(this.displayedRightColumnTree);
	        }
	        else {
	            return null;
	        }
	    };
	    // + columnSelectPanel
	    ColumnController.prototype.getPrimaryColumnTree = function () {
	        return this.primaryBalancedTree;
	    };
	    // + gridPanel -> for resizing the body and setting top margin
	    ColumnController.prototype.getHeaderRowCount = function () {
	        return this.gridHeaderRowCount;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getLeftDisplayedColumnGroups = function () {
	        return this.displayedLeftColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getRightDisplayedColumnGroups = function () {
	        return this.displayedRightColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getCenterDisplayedColumnGroups = function () {
	        return this.displayedCentreColumnTree;
	    };
	    ColumnController.prototype.getDisplayedColumnGroups = function (type) {
	        switch (type) {
	            case column.Column.PINNED_LEFT: return this.getLeftDisplayedColumnGroups();
	            case column.Column.PINNED_RIGHT: return this.getRightDisplayedColumnGroups();
	            default: return this.getCenterDisplayedColumnGroups();
	        }
	    };
	    // gridPanel -> ensureColumnVisible
	    ColumnController.prototype.isColumnDisplayed = function (column$$1) {
	        return this.getAllDisplayedColumns().indexOf(column$$1) >= 0;
	    };
	    // + csvCreator
	    ColumnController.prototype.getAllDisplayedColumns = function () {
	        return this.allDisplayedColumns;
	    };
	    ColumnController.prototype.getAllDisplayedVirtualColumns = function () {
	        return this.allDisplayedVirtualColumns;
	    };
	    ColumnController.prototype.getDisplayedLeftColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedLeftColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedRightColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedRightColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedColumnsForRow = function (rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
	        var result = [];
	        var lastConsideredCol = null;
	        var _loop_1 = function (i) {
	            var col = displayedColumns[i];
	            var colSpan = col.getColSpan(rowNode);
	            var columnsToCheckFilter = [col];
	            if (colSpan > 1) {
	                var colsToRemove = colSpan - 1;
	                for (var j = 1; j <= colsToRemove; j++) {
	                    columnsToCheckFilter.push(displayedColumns[i + j]);
	                }
	                i += colsToRemove;
	            }
	            // see which cols we should take out for column virtualisation
	            var filterPasses;
	            if (filterCallback) {
	                // if user provided a callback, means some columns may not be in the viewport.
	                // the user will NOT provide a callback if we are talking about pinned areas,
	                // as pinned areas have no horizontal scroll and do not virtualise the columns.
	                // if lots of columns, that means column spanning, and we set filterPasses = true
	                // if one or more of the columns spanned pass the filter.
	                filterPasses = false;
	                columnsToCheckFilter.forEach(function (colForFilter) {
	                    if (filterCallback(colForFilter))
	                        filterPasses = true;
	                });
	            }
	            else {
	                filterPasses = true;
	            }
	            if (filterPasses) {
	                if (result.length === 0 && lastConsideredCol) {
	                    var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
	                    if (gapBeforeColumn) {
	                        result.push(lastConsideredCol);
	                    }
	                }
	                result.push(col);
	            }
	            lastConsideredCol = col;
	            out_i_1 = i;
	        };
	        var out_i_1;
	        for (var i = 0; i < displayedColumns.length; i++) {
	            _loop_1(i);
	            i = out_i_1;
	        }
	        return result;
	    };
	    // + rowRenderer
	    // if we are not column spanning, this just returns back the virtual centre columns,
	    // however if we are column spanning, then different rows can have different virtual
	    // columns, so we have to work out the list for each individual row.
	    ColumnController.prototype.getAllDisplayedCenterVirtualColumnsForRow = function (rowNode) {
	        var _this = this;
	        if (!this.colSpanActive) {
	            return this.allDisplayedCenterVirtualColumns;
	        }
	        var emptySpaceBeforeColumn = function (col) { return col.getLeft() > _this.viewportLeft; };
	        // if doing column virtualisation, then we filter based on the viewport.
	        var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
	        return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, filterCallback, emptySpaceBeforeColumn);
	    };
	    ColumnController.prototype.isColumnInViewport = function (col) {
	        var columnLeft = col.getLeft();
	        var columnRight = col.getLeft() + col.getActualWidth();
	        var columnToMuchLeft = columnLeft < this.viewportLeft && columnRight < this.viewportLeft;
	        var columnToMuchRight = columnLeft > this.viewportRight && columnRight > this.viewportRight;
	        return !columnToMuchLeft && !columnToMuchRight;
	    };
	    // used by:
	    // + angularGrid -> setting pinned body width
	    // note: this should be cached
	    ColumnController.prototype.getPinnedLeftContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedLeftColumns);
	    };
	    // note: this should be cached
	    ColumnController.prototype.getPinnedRightContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedRightColumns);
	    };
	    ColumnController.prototype.updatePrimaryColumnList = function (keys, masterList, actionIsAdd, columnCallback, eventType, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        if (utils.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var atLeastOne = false;
	        keys.forEach(function (key) {
	            var columnToAdd = _this.getPrimaryColumn(key);
	            if (!columnToAdd) {
	                return;
	            }
	            if (actionIsAdd) {
	                if (masterList.indexOf(columnToAdd) >= 0) {
	                    return;
	                }
	                masterList.push(columnToAdd);
	            }
	            else {
	                if (masterList.indexOf(columnToAdd) < 0) {
	                    return;
	                }
	                utils.Utils.removeFromArray(masterList, columnToAdd);
	            }
	            columnCallback(columnToAdd);
	            atLeastOne = true;
	        });
	        if (!atLeastOne) {
	            return;
	        }
	        if (this.autoGroupsNeedBuilding) {
	            this.updateGridColumns();
	        }
	        this.updateDisplayedColumns(source);
	        var event = {
	            type: eventType,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setRowGroupColumns = function (colKeys, source) {
	        if (source === void 0) { source = "api"; }
	        this.autoGroupsNeedBuilding = true;
	        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
	    };
	    ColumnController.prototype.setRowGroupActive = function (active, column$$1, source) {
	        if (active === column$$1.isRowGroupActive()) {
	            return;
	        }
	        column$$1.setRowGroupActive(active, source);
	        if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
	            column$$1.setVisible(true, source);
	        }
	    };
	    ColumnController.prototype.addRowGroupColumn = function (key, source) {
	        if (source === void 0) { source = "api"; }
	        this.addRowGroupColumns([key], source);
	    };
	    ColumnController.prototype.addRowGroupColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
	    };
	    ColumnController.prototype.removeRowGroupColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
	    };
	    ColumnController.prototype.removeRowGroupColumn = function (key, source) {
	        if (source === void 0) { source = "api"; }
	        this.removeRowGroupColumns([key], source);
	    };
	    ColumnController.prototype.addPivotColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.updatePrimaryColumnList(keys, this.pivotColumns, true, function (column$$1) { return column$$1.setPivotActive(true, source); }, events$1.Events.EVENT_COLUMN_PIVOT_CHANGED, source);
	    };
	    ColumnController.prototype.setPivotColumns = function (colKeys, source) {
	        if (source === void 0) { source = "api"; }
	        this.setPrimaryColumnList(colKeys, this.pivotColumns, events$1.Events.EVENT_COLUMN_PIVOT_CHANGED, function (added, column$$1) {
	            column$$1.setPivotActive(added, source);
	        }, source);
	    };
	    ColumnController.prototype.addPivotColumn = function (key, source) {
	        if (source === void 0) { source = "api"; }
	        this.addPivotColumns([key], source);
	    };
	    ColumnController.prototype.removePivotColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.updatePrimaryColumnList(keys, this.pivotColumns, false, function (column$$1) { return column$$1.setPivotActive(false, source); }, events$1.Events.EVENT_COLUMN_PIVOT_CHANGED, source);
	    };
	    ColumnController.prototype.removePivotColumn = function (key, source) {
	        if (source === void 0) { source = "api"; }
	        this.removePivotColumns([key], source);
	    };
	    ColumnController.prototype.setPrimaryColumnList = function (colKeys, masterList, eventName, columnCallback, source) {
	        var _this = this;
	        masterList.length = 0;
	        if (utils.Utils.exists(colKeys)) {
	            colKeys.forEach(function (key) {
	                var column$$1 = _this.getPrimaryColumn(key);
	                masterList.push(column$$1);
	            });
	        }
	        this.primaryColumns.forEach(function (column$$1) {
	            var added = masterList.indexOf(column$$1) >= 0;
	            columnCallback(added, column$$1);
	        });
	        if (this.autoGroupsNeedBuilding) {
	            this.updateGridColumns();
	        }
	        this.updateDisplayedColumns(source);
	        var event = {
	            type: eventName,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setValueColumns = function (colKeys, source) {
	        if (source === void 0) { source = "api"; }
	        this.setPrimaryColumnList(colKeys, this.valueColumns, events$1.Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
	    };
	    ColumnController.prototype.setValueActive = function (active, column$$1, source) {
	        if (active === column$$1.isValueActive()) {
	            return;
	        }
	        column$$1.setValueActive(active, source);
	        if (active && !column$$1.getAggFunc()) {
	            var defaultAggFunc = this.aggFuncService.getDefaultAggFunc(column$$1);
	            column$$1.setAggFunc(defaultAggFunc);
	        }
	    };
	    ColumnController.prototype.addValueColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), events$1.Events.EVENT_COLUMN_VALUE_CHANGED, source);
	    };
	    ColumnController.prototype.addValueColumn = function (colKey, source) {
	        if (source === void 0) { source = "api"; }
	        this.addValueColumns([colKey], source);
	    };
	    ColumnController.prototype.removeValueColumn = function (colKey, source) {
	        if (source === void 0) { source = "api"; }
	        this.removeValueColumns([colKey], source);
	    };
	    ColumnController.prototype.removeValueColumns = function (keys, source) {
	        if (source === void 0) { source = "api"; }
	        this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), events$1.Events.EVENT_COLUMN_VALUE_CHANGED, source);
	    };
	    // returns the width we can set to this col, taking into consideration min and max widths
	    ColumnController.prototype.normaliseColumnWidth = function (column$$1, newWidth) {
	        if (newWidth < column$$1.getMinWidth()) {
	            newWidth = column$$1.getMinWidth();
	        }
	        if (column$$1.isGreaterThanMax(newWidth)) {
	            newWidth = column$$1.getMaxWidth();
	        }
	        return newWidth;
	    };
	    ColumnController.prototype.getPrimaryOrGridColumn = function (key) {
	        var column$$1 = this.getPrimaryColumn(key);
	        if (column$$1) {
	            return column$$1;
	        }
	        else {
	            return this.getGridColumn(key);
	        }
	    };
	    ColumnController.prototype.setColumnWidth = function (key, // @key - the column who's size we want to change
	        newWidth, // @newWidth - width in pixels
	        shiftKey, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column
	        finished, // @finished - ends up in the event, tells the user if more events are to come
	        source) {
	        if (source === void 0) { source = "api"; }
	        var col = this.getPrimaryOrGridColumn(key);
	        if (!col) {
	            return;
	        }
	        var sets = [];
	        sets.push({
	            width: newWidth,
	            ratios: [1],
	            columns: [col]
	        });
	        // if user wants to do shift resize by default, then we invert the shift operation
	        var defaultIsShift = this.gridOptionsWrapper.getColResizeDefault() === 'shift';
	        if (defaultIsShift) {
	            shiftKey = !shiftKey;
	        }
	        if (shiftKey) {
	            var otherCol = this.getDisplayedColAfter(col);
	            if (!otherCol) {
	                return;
	            }
	            var widthDiff = col.getActualWidth() - newWidth;
	            var otherColWidth = otherCol.getActualWidth() + widthDiff;
	            sets.push({
	                width: otherColWidth,
	                ratios: [1],
	                columns: [otherCol]
	            });
	        }
	        this.resizeColumnSets(sets, finished, source);
	    };
	    ColumnController.prototype.checkMinAndMaxWidthsForSet = function (columnResizeSet) {
	        var columns = columnResizeSet.columns, width = columnResizeSet.width;
	        // every col has a min width, so sum them all up and see if we have enough room
	        // for all the min widths
	        var minWidthAccumulated = 0;
	        var maxWidthAccumulated = 0;
	        var maxWidthActive = true;
	        columns.forEach(function (col) {
	            minWidthAccumulated += col.getMinWidth();
	            if (col.getMaxWidth() > 0) {
	                maxWidthAccumulated += col.getMaxWidth();
	            }
	            else {
	                // if at least one columns has no max width, it means the group of columns
	                // then has no max width, as at least one column can take as much width as possible
	                maxWidthActive = false;
	            }
	        });
	        var minWidthPasses = width >= minWidthAccumulated;
	        var maxWidthPasses = !maxWidthActive || (width <= maxWidthAccumulated);
	        return minWidthPasses && maxWidthPasses;
	    };
	    // method takes sets of columns and resizes them. either all sets will be resized, or nothing
	    // be resized. this is used for example when user tries to resize a group and holds shift key,
	    // then both the current group (grows), and the adjacent group (shrinks), will get resized,
	    // so that's two sets for this method.
	    ColumnController.prototype.resizeColumnSets = function (resizeSets, finished, source) {
	        var passMinMaxCheck = utils.Utils.every(resizeSets, this.checkMinAndMaxWidthsForSet.bind(this));
	        if (!passMinMaxCheck) {
	            return;
	        }
	        var changedCols = [];
	        var allCols = [];
	        resizeSets.forEach(function (set) {
	            var width = set.width, columns = set.columns, ratios = set.ratios;
	            // keep track of pixels used, and last column gets the remaining,
	            // to cater for rounding errors, and min width adjustments
	            var newWidths = {};
	            var finishedCols = {};
	            columns.forEach(function (col) { return allCols.push(col); });
	            // the loop below goes through each col. if a col exceeds it's min/max width,
	            // it then gets set to its min/max width and the column is removed marked as 'finished'
	            // and the calculation is done again leaving this column out. take for example columns
	            // {A, width: 50, maxWidth: 100}
	            // {B, width: 50}
	            // {C, width: 50}
	            // and then the set is set to width 600 - on the first pass the grid tries to set each column
	            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked
	            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up
	            // splitting the remaining 500 pixels.
	            var finishedColsGrew = true;
	            var loopCount = 0;
	            var _loop_2 = function () {
	                loopCount++;
	                if (loopCount > 1000) {
	                    // this should never happen, but in the future, someone might introduce a bug here,
	                    // so we stop the browser from hanging and report bug properly
	                    console.error('ag-Grid: infinite loop in resizeColumnSets');
	                    return "break";
	                }
	                finishedColsGrew = false;
	                var subsetCols = [];
	                var subsetRatioTotal = 0;
	                var pixelsToDistribute = width;
	                columns.forEach(function (col, index) {
	                    var thisColFinished = finishedCols[col.getId()];
	                    if (thisColFinished) {
	                        pixelsToDistribute -= newWidths[col.getId()];
	                    }
	                    else {
	                        subsetCols.push(col);
	                        var ratioThisCol = ratios[index];
	                        subsetRatioTotal += ratioThisCol;
	                    }
	                });
	                // because we are not using all of the ratios (cols can be missing),
	                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,
	                // and so the ratioScale will be 1.
	                var ratioScale = 1 / subsetRatioTotal;
	                subsetCols.forEach(function (col, index) {
	                    var lastCol = index === (subsetCols.length - 1);
	                    var colNewWidth;
	                    if (lastCol) {
	                        colNewWidth = pixelsToDistribute;
	                    }
	                    else {
	                        colNewWidth = Math.round(ratios[index] * width * ratioScale);
	                        pixelsToDistribute -= colNewWidth;
	                    }
	                    if (colNewWidth < col.getMinWidth()) {
	                        colNewWidth = col.getMinWidth();
	                        finishedCols[col.getId()] = true;
	                        finishedColsGrew = true;
	                    }
	                    else if (col.getMaxWidth() > 0 && colNewWidth > col.getMaxWidth()) {
	                        colNewWidth = col.getMaxWidth();
	                        finishedCols[col.getId()] = true;
	                        finishedColsGrew = true;
	                    }
	                    newWidths[col.getId()] = colNewWidth;
	                });
	            };
	            while (finishedColsGrew) {
	                var state_1 = _loop_2();
	                if (state_1 === "break")
	                    break;
	            }
	            columns.forEach(function (col) {
	                var newWidth = newWidths[col.getId()];
	                if (col.getActualWidth() !== newWidth) {
	                    col.setActualWidth(newWidth);
	                    changedCols.push(col);
	                }
	            });
	        });
	        // if no cols changed, then no need to update more or send event.
	        var atLeastOneColChanged = changedCols.length > 0;
	        if (atLeastOneColChanged) {
	            this.setLeftValues(source);
	            this.updateBodyWidths();
	            this.checkDisplayedVirtualColumns();
	        }
	        // check for change first, to avoid unnecessary firing of events
	        // however we always fire 'finished' events. this is important
	        // when groups are resized, as if the group is changing slowly,
	        // eg 1 pixel at a time, then each change will fire change events
	        // in all the columns in the group, but only one with get the pixel.
	        if (atLeastOneColChanged || finished) {
	            var event_3 = {
	                type: events$1.Events.EVENT_COLUMN_RESIZED,
	                columns: allCols,
	                column: allCols.length === 1 ? allCols[0] : null,
	                finished: finished,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                source: source
	            };
	            this.eventService.dispatchEvent(event_3);
	        }
	    };
	    ColumnController.prototype.setColumnAggFunc = function (column$$1, aggFunc, source) {
	        if (source === void 0) { source = "api"; }
	        column$$1.setAggFunc(aggFunc);
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_VALUE_CHANGED,
	            columns: [column$$1],
	            column: column$$1,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex, source) {
	        if (source === void 0) { source = "api"; }
	        var column$$1 = this.rowGroupColumns[fromIndex];
	        this.rowGroupColumns.splice(fromIndex, 1);
	        this.rowGroupColumns.splice(toIndex, 0, column$$1);
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
	            columns: this.rowGroupColumns,
	            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveColumns = function (columnsToMoveKeys, toIndex, source) {
	        if (source === void 0) { source = "api"; }
	        this.columnAnimationService.start();
	        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
	            console.warn('ag-Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);
	            console.warn('ag-Grid: remember that you should not count the moving columns when calculating the new index');
	            return;
	        }
	        // we want to pull all the columns out first and put them into an ordered list
	        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
	        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
	        if (failedRules) {
	            return;
	        }
	        utils.Utils.moveInArray(this.gridColumns, columnsToMove, toIndex);
	        this.updateDisplayedColumns(source);
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_MOVED,
	            columns: columnsToMove,
	            column: columnsToMove.length === 1 ? columnsToMove[0] : null,
	            toIndex: toIndex,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.doesMovePassRules = function (columnsToMove, toIndex) {
	        // make a copy of what the grid columns would look like after the move
	        var proposedColumnOrder = this.gridColumns.slice();
	        utils.Utils.moveInArray(proposedColumnOrder, columnsToMove, toIndex);
	        // then check that the new proposed order of the columns passes all rules
	        if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {
	            return false;
	        }
	        if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {
	            return false;
	        }
	        return true;
	    };
	    ColumnController.prototype.doesMovePassLockedPositions = function (proposedColumnOrder) {
	        var foundNonLocked = false;
	        var rulePassed = true;
	        // go though the cols, see if any non-locked appear before any locked
	        proposedColumnOrder.forEach(function (col) {
	            if (col.isLockPosition()) {
	                if (foundNonLocked) {
	                    rulePassed = false;
	                }
	            }
	            else {
	                foundNonLocked = true;
	            }
	        });
	        return rulePassed;
	    };
	    ColumnController.prototype.doesMovePassMarryChildren = function (allColumnsCopy) {
	        var rulePassed = true;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (child) {
	            if (!(child instanceof originalColumnGroup.OriginalColumnGroup)) {
	                return;
	            }
	            var columnGroup$$1 = child;
	            var marryChildren = columnGroup$$1.getColGroupDef() && columnGroup$$1.getColGroupDef().marryChildren;
	            if (!marryChildren) {
	                return;
	            }
	            var newIndexes = [];
	            columnGroup$$1.getLeafColumns().forEach(function (col) {
	                var newColIndex = allColumnsCopy.indexOf(col);
	                newIndexes.push(newColIndex);
	            });
	            var maxIndex = Math.max.apply(Math, newIndexes);
	            var minIndex = Math.min.apply(Math, newIndexes);
	            // spread is how far the first column in this group is away from the last column
	            var spread = maxIndex - minIndex;
	            var maxSpread = columnGroup$$1.getLeafColumns().length - 1;
	            // if the columns
	            if (spread > maxSpread) {
	                rulePassed = false;
	            }
	            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
	            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));
	        });
	        return rulePassed;
	    };
	    ColumnController.prototype.moveColumn = function (key, toIndex, source) {
	        if (source === void 0) { source = "api"; }
	        this.moveColumns([key], toIndex, source);
	    };
	    ColumnController.prototype.moveColumnByIndex = function (fromIndex, toIndex, source) {
	        if (source === void 0) { source = "api"; }
	        var column$$1 = this.gridColumns[fromIndex];
	        this.moveColumn(column$$1, toIndex, source);
	    };
	    // used by:
	    // + angularGrid -> for setting body width
	    // + rowController -> setting main row widths (when inserting and resizing)
	    // need to cache this
	    ColumnController.prototype.getBodyContainerWidth = function () {
	        return this.bodyWidth;
	    };
	    ColumnController.prototype.getContainerWidth = function (pinned) {
	        switch (pinned) {
	            case column.Column.PINNED_LEFT: return this.leftWidth;
	            case column.Column.PINNED_RIGHT: return this.rightWidth;
	            default: return this.bodyWidth;
	        }
	    };
	    // after setColumnWidth or updateGroupsAndDisplayedColumns
	    ColumnController.prototype.updateBodyWidths = function () {
	        var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
	        var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
	        var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns);
	        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
	        // columns, due to RTL inverting the y coordinates
	        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
	        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
	        if (atLeastOneChanged) {
	            this.bodyWidth = newBodyWidth;
	            this.leftWidth = newLeftWidth;
	            this.rightWidth = newRightWidth;
	            // when this fires, it is picked up by the gridPanel, which ends up in
	            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setVirtualViewportPosition()
	            var event_4 = {
	                type: events$1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_4);
	        }
	    };
	    // + rowController
	    ColumnController.prototype.getValueColumns = function () {
	        return this.valueColumns ? this.valueColumns : [];
	    };
	    // + rowController
	    ColumnController.prototype.getPivotColumns = function () {
	        return this.pivotColumns ? this.pivotColumns : [];
	    };
	    // + clientSideRowModel
	    ColumnController.prototype.isPivotActive = function () {
	        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
	    };
	    // + toolPanel
	    ColumnController.prototype.getRowGroupColumns = function () {
	        return this.rowGroupColumns ? this.rowGroupColumns : [];
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedCenterColumns = function () {
	        return this.displayedCenterColumns;
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedLeftColumns = function () {
	        return this.displayedLeftColumns;
	    };
	    ColumnController.prototype.getDisplayedRightColumns = function () {
	        return this.displayedRightColumns;
	    };
	    ColumnController.prototype.getDisplayedColumns = function (type) {
	        switch (type) {
	            case column.Column.PINNED_LEFT: return this.getDisplayedLeftColumns();
	            case column.Column.PINNED_RIGHT: return this.getDisplayedRightColumns();
	            default: return this.getDisplayedCenterColumns();
	        }
	    };
	    // used by:
	    // + clientSideRowController -> sorting, building quick filter text
	    // + headerRenderer -> sorting (clearing icon)
	    ColumnController.prototype.getAllPrimaryColumns = function () {
	        return this.primaryColumns;
	    };
	    ColumnController.prototype.getAllColumnsForQuickFilter = function () {
	        return this.columnsForQuickFilter;
	    };
	    // + moveColumnController
	    ColumnController.prototype.getAllGridColumns = function () {
	        return this.gridColumns;
	    };
	    ColumnController.prototype.isEmpty = function () {
	        return utils.Utils.missingOrEmpty(this.gridColumns);
	    };
	    ColumnController.prototype.isRowGroupEmpty = function () {
	        return utils.Utils.missingOrEmpty(this.rowGroupColumns);
	    };
	    ColumnController.prototype.setColumnVisible = function (key, visible, source) {
	        if (source === void 0) { source = "api"; }
	        this.setColumnsVisible([key], visible, source);
	    };
	    ColumnController.prototype.setColumnsVisible = function (keys, visible, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        this.columnAnimationService.start();
	        this.actionOnGridColumns(keys, function (column$$1) {
	            if (column$$1.isVisible() !== visible) {
	                column$$1.setVisible(visible, source);
	                return true;
	            }
	            else {
	                return false;
	            }
	        }, source, function () {
	            var event = {
	                type: events$1.Events.EVENT_COLUMN_VISIBLE,
	                visible: visible,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi,
	                source: source
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.setColumnPinned = function (key, pinned, source) {
	        if (source === void 0) { source = "api"; }
	        this.setColumnsPinned([key], pinned, source);
	    };
	    ColumnController.prototype.setColumnsPinned = function (keys, pinned, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        this.columnAnimationService.start();
	        var actualPinned;
	        if (pinned === true || pinned === column.Column.PINNED_LEFT) {
	            actualPinned = column.Column.PINNED_LEFT;
	        }
	        else if (pinned === column.Column.PINNED_RIGHT) {
	            actualPinned = column.Column.PINNED_RIGHT;
	        }
	        else {
	            actualPinned = null;
	        }
	        this.actionOnGridColumns(keys, function (col) {
	            if (col.getPinned() !== actualPinned) {
	                col.setPinned(actualPinned);
	                return true;
	            }
	            else {
	                return false;
	            }
	        }, source, function () {
	            var event = {
	                type: events$1.Events.EVENT_COLUMN_PINNED,
	                pinned: actualPinned,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi,
	                source: source
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    // does an action on a set of columns. provides common functionality for looking up the
	    // columns based on key, getting a list of effected columns, and then updated the event
	    // with either one column (if it was just one col) or a list of columns
	    // used by: autoResize, setVisible, setPinned
	    ColumnController.prototype.actionOnGridColumns = function (// the column keys this action will be on
	        keys, 
	        // the action to do - if this returns false, the column was skipped
	        // and won't be included in the event
	        action, 
	        // should return back a column event of the right type
	        source, createEvent) {
	        var _this = this;
	        if (utils.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var updatedColumns = [];
	        keys.forEach(function (key) {
	            var column$$1 = _this.getGridColumn(key);
	            if (!column$$1) {
	                return;
	            }
	            // need to check for false with type (ie !== instead of !=)
	            // as not returning anything (undefined) would also be false
	            var resultOfAction = action(column$$1);
	            if (resultOfAction !== false) {
	                updatedColumns.push(column$$1);
	            }
	        });
	        if (updatedColumns.length === 0) {
	            return;
	        }
	        this.updateDisplayedColumns(source);
	        if (utils.Utils.exists(createEvent)) {
	            var event_5 = createEvent();
	            event_5.columns = updatedColumns;
	            event_5.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
	            this.eventService.dispatchEvent(event_5);
	        }
	    };
	    ColumnController.prototype.getDisplayedColBefore = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex > 0) {
	            return allDisplayedColumns[oldIndex - 1];
	        }
	        else {
	            return null;
	        }
	    };
	    // used by:
	    // + rowRenderer -> for navigation
	    ColumnController.prototype.getDisplayedColAfter = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex < (allDisplayedColumns.length - 1)) {
	            return allDisplayedColumns[oldIndex + 1];
	        }
	        else {
	            return null;
	        }
	    };
	    ColumnController.prototype.getDisplayedGroupAfter = function (columnGroup$$1) {
	        // pick one col in this group at random
	        var col = columnGroup$$1.getDisplayedLeafColumns()[0];
	        var requiredLevel = columnGroup$$1.getOriginalColumnGroup().getLevel();
	        while (true) {
	            // keep moving to the next col, until we get to another group
	            col = this.getDisplayedColAfter(col);
	            // if no col after, means no group after
	            if (!col) {
	                return null;
	            }
	            // get group at same level as the one we are looking for
	            var groupPointer = col.getParent();
	            while (groupPointer.getOriginalColumnGroup().getLevel() !== requiredLevel) {
	                groupPointer = groupPointer.getParent();
	            }
	            if (groupPointer !== columnGroup$$1) {
	                return groupPointer;
	            }
	        }
	    };
	    ColumnController.prototype.isPinningLeft = function () {
	        return this.displayedLeftColumns.length > 0;
	    };
	    ColumnController.prototype.isPinningRight = function () {
	        return this.displayedRightColumns.length > 0;
	    };
	    ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
	        var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
	        if (utils.Utils.exists(this.groupAutoColumns)) {
	            this.groupAutoColumns.forEach(function (col) { return result.push(col); });
	        }
	        if (this.secondaryColumnsPresent) {
	            this.secondaryColumns.forEach(function (column$$1) { return result.push(column$$1); });
	        }
	        return result;
	    };
	    ColumnController.prototype.createStateItemFromColumn = function (column$$1) {
	        var rowGroupIndex = column$$1.isRowGroupActive() ? this.rowGroupColumns.indexOf(column$$1) : null;
	        var pivotIndex = column$$1.isPivotActive() ? this.pivotColumns.indexOf(column$$1) : null;
	        var aggFunc = column$$1.isValueActive() ? column$$1.getAggFunc() : null;
	        return {
	            colId: column$$1.getColId(),
	            hide: !column$$1.isVisible(),
	            aggFunc: aggFunc,
	            width: column$$1.getActualWidth(),
	            pivotIndex: pivotIndex,
	            pinned: column$$1.getPinned(),
	            rowGroupIndex: rowGroupIndex
	        };
	    };
	    ColumnController.prototype.getColumnState = function () {
	        if (utils.Utils.missing(this.primaryColumns)) {
	            return [];
	        }
	        var columnStateList = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
	        if (!this.pivotMode) {
	            this.orderColumnStateList(columnStateList);
	        }
	        return columnStateList;
	    };
	    ColumnController.prototype.orderColumnStateList = function (columnStateList) {
	        var gridColumnIds = this.gridColumns.map(function (column$$1) { return column$$1.getColId(); });
	        columnStateList.sort(function (itemA, itemB) {
	            var posA = gridColumnIds.indexOf(itemA.colId);
	            var posB = gridColumnIds.indexOf(itemB.colId);
	            return posA - posB;
	        });
	    };
	    ColumnController.prototype.resetColumnState = function (source) {
	        if (source === void 0) { source = "api"; }
	        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list
	        var primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        var state = [];
	        if (primaryColumns) {
	            primaryColumns.forEach(function (column$$1) {
	                state.push({
	                    colId: column$$1.getColId(),
	                    aggFunc: column$$1.getColDef().aggFunc,
	                    hide: column$$1.getColDef().hide,
	                    pinned: column$$1.getColDef().pinned,
	                    rowGroupIndex: column$$1.getColDef().rowGroupIndex,
	                    pivotIndex: column$$1.getColDef().pivotIndex,
	                    width: column$$1.getColDef().width
	                });
	            });
	        }
	        this.setColumnState(state, source);
	    };
	    ColumnController.prototype.setColumnState = function (columnState, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        if (utils.Utils.missingOrEmpty(this.primaryColumns)) {
	            return false;
	        }
	        this.autoGroupsNeedBuilding = true;
	        // at the end below, this list will have all columns we got no state for
	        var columnsWithNoState = this.primaryColumns.slice();
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        var success = true;
	        var rowGroupIndexes = {};
	        var pivotIndexes = {};
	        if (columnState) {
	            columnState.forEach(function (stateItem) {
	                var column$$1 = _this.getPrimaryColumn(stateItem.colId);
	                if (!column$$1) {
	                    console.warn('ag-grid: column ' + stateItem.colId + ' not found');
	                    success = false;
	                }
	                else {
	                    _this.syncColumnWithStateItem(column$$1, stateItem, rowGroupIndexes, pivotIndexes, source);
	                    utils.Utils.removeFromArray(columnsWithNoState, column$$1);
	                }
	            });
	        }
	        // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
	        columnsWithNoState.forEach(this.syncColumnWithNoState.bind(this));
	        // sort the lists according to the indexes that were provided
	        this.rowGroupColumns.sort(this.sortColumnListUsingIndexes.bind(this, rowGroupIndexes));
	        this.pivotColumns.sort(this.sortColumnListUsingIndexes.bind(this, pivotIndexes));
	        this.updateGridColumns();
	        if (columnState) {
	            var orderOfColIds_1 = columnState.map(function (stateItem) { return stateItem.colId; });
	            this.gridColumns.sort(function (colA, colB) {
	                var indexA = orderOfColIds_1.indexOf(colA.getId());
	                var indexB = orderOfColIds_1.indexOf(colB.getId());
	                return indexA - indexB;
	            });
	        }
	        this.updateDisplayedColumns(source);
	        var event = {
	            type: events$1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(event);
	        return success;
	    };
	    ColumnController.prototype.sortColumnListUsingIndexes = function (indexes, colA, colB) {
	        var indexA = indexes[colA.getId()];
	        var indexB = indexes[colB.getId()];
	        return indexA - indexB;
	    };
	    ColumnController.prototype.syncColumnWithNoState = function (column$$1, source) {
	        column$$1.setVisible(false, source);
	        column$$1.setAggFunc(null);
	        column$$1.setPinned(null);
	        column$$1.setRowGroupActive(false, source);
	        column$$1.setPivotActive(false, source);
	        column$$1.setValueActive(false, source);
	    };
	    ColumnController.prototype.syncColumnWithStateItem = function (column$$1, stateItem, rowGroupIndexes, pivotIndexes, source) {
	        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
	        column$$1.setVisible(!stateItem.hide, source);
	        // sets pinned to 'left' or 'right'
	        column$$1.setPinned(stateItem.pinned);
	        // if width provided and valid, use it, otherwise stick with the old width
	        if (stateItem.width >= this.gridOptionsWrapper.getMinColWidth()) {
	            column$$1.setActualWidth(stateItem.width, source);
	        }
	        if (typeof stateItem.aggFunc === 'string') {
	            column$$1.setAggFunc(stateItem.aggFunc);
	            column$$1.setValueActive(true, source);
	            this.valueColumns.push(column$$1);
	        }
	        else {
	            if (utils.Utils.exists(stateItem.aggFunc)) {
	                console.warn('ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +
	                    'functions, register the functions first before using them in get/set state. This is because it is' +
	                    'intended for the column state to be stored and retrieved as simple JSON.');
	            }
	            column$$1.setAggFunc(null);
	            column$$1.setValueActive(false, source);
	        }
	        if (typeof stateItem.rowGroupIndex === 'number') {
	            this.rowGroupColumns.push(column$$1);
	            column$$1.setRowGroupActive(true, source);
	            rowGroupIndexes[column$$1.getId()] = stateItem.rowGroupIndex;
	        }
	        else {
	            column$$1.setRowGroupActive(false, source);
	        }
	        if (typeof stateItem.pivotIndex === 'number') {
	            this.pivotColumns.push(column$$1);
	            column$$1.setPivotActive(true, source);
	            pivotIndexes[column$$1.getId()] = stateItem.pivotIndex;
	        }
	        else {
	            column$$1.setPivotActive(false, source);
	        }
	    };
	    ColumnController.prototype.getGridColumns = function (keys) {
	        return this.getColumns(keys, this.getGridColumn.bind(this));
	    };
	    ColumnController.prototype.getColumns = function (keys, columnLookupCallback) {
	        var foundColumns = [];
	        if (keys) {
	            keys.forEach(function (key) {
	                var column$$1 = columnLookupCallback(key);
	                if (column$$1) {
	                    foundColumns.push(column$$1);
	                }
	            });
	        }
	        return foundColumns;
	    };
	    // used by growGroupPanel
	    ColumnController.prototype.getColumnWithValidation = function (key) {
	        var column$$1 = this.getPrimaryColumn(key);
	        if (!column$$1) {
	            console.warn('ag-Grid: could not find column ' + column$$1);
	        }
	        return column$$1;
	    };
	    ColumnController.prototype.getPrimaryColumn = function (key) {
	        return this.getColumn(key, this.primaryColumns);
	    };
	    ColumnController.prototype.getGridColumn = function (key) {
	        return this.getColumn(key, this.gridColumns);
	    };
	    ColumnController.prototype.getColumn = function (key, columnList) {
	        if (!key) {
	            return null;
	        }
	        for (var i = 0; i < columnList.length; i++) {
	            if (this.columnsMatch(columnList[i], key)) {
	                return columnList[i];
	            }
	        }
	        return this.getAutoColumn(key);
	    };
	    ColumnController.prototype.getAutoColumn = function (key) {
	        var _this = this;
	        if (!utils.Utils.exists(this.groupAutoColumns) || utils.Utils.missing(this.groupAutoColumns)) {
	            return null;
	        }
	        return utils.Utils.find(this.groupAutoColumns, function (groupCol) {
	            return _this.columnsMatch(groupCol, key);
	        });
	    };
	    ColumnController.prototype.columnsMatch = function (column$$1, key) {
	        var columnMatches = column$$1 === key;
	        var colDefMatches = column$$1.getColDef() === key;
	        var idMatches = column$$1.getColId() == key;
	        return columnMatches || colDefMatches || idMatches;
	    };
	    ColumnController.prototype.getDisplayNameForColumn = function (column$$1, location, includeAggFunc) {
	        if (includeAggFunc === void 0) { includeAggFunc = false; }
	        var headerName = this.getHeaderName(column$$1.getColDef(), column$$1, null, null, location);
	        if (includeAggFunc) {
	            return this.wrapHeaderNameWithAggFunc(column$$1, headerName);
	        }
	        else {
	            return headerName;
	        }
	    };
	    ColumnController.prototype.getDisplayNameForOriginalColumnGroup = function (columnGroup$$1, originalColumnGroup$$1, location) {
	        var colGroupDef = originalColumnGroup$$1.getColGroupDef();
	        if (colGroupDef) {
	            return this.getHeaderName(colGroupDef, null, columnGroup$$1, originalColumnGroup$$1, location);
	        }
	        else {
	            return null;
	        }
	    };
	    ColumnController.prototype.getDisplayNameForColumnGroup = function (columnGroup$$1, location) {
	        return this.getDisplayNameForOriginalColumnGroup(columnGroup$$1, columnGroup$$1.getOriginalColumnGroup(), location);
	    };
	    // location is where the column is going to appear, ie who is calling us
	    ColumnController.prototype.getHeaderName = function (colDef, column$$1, columnGroup$$1, originalColumnGroup$$1, location) {
	        var headerValueGetter = colDef.headerValueGetter;
	        if (headerValueGetter) {
	            var params = {
	                colDef: colDef,
	                column: column$$1,
	                columnGroup: columnGroup$$1,
	                originalColumnGroup: originalColumnGroup$$1,
	                location: location,
	                api: this.gridOptionsWrapper.getApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            if (typeof headerValueGetter === 'function') {
	                // valueGetter is a function, so just call it
	                return headerValueGetter(params);
	            }
	            else if (typeof headerValueGetter === 'string') {
	                // valueGetter is an expression, so execute the expression
	                return this.expressionService.evaluate(headerValueGetter, params);
	            }
	            else {
	                console.warn('ag-grid: headerValueGetter must be a function or a string');
	                return '';
	            }
	        }
	        else if (colDef.headerName != null) {
	            return colDef.headerName;
	        }
	        else if (colDef.field) {
	            return utils.Utils.camelCaseToHumanText(colDef.field);
	        }
	        else {
	            return '';
	        }
	    };
	    /*
	        private getHeaderGroupName(columnGroup: ColumnGroup): string {
	            let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
	            let headerValueGetter = colGroupDef.headerValueGetter;

	            if (headerValueGetter) {
	                let params = {
	                    columnGroup: columnGroup,
	                    colDef: colGroupDef,
	                    api: this.gridOptionsWrapper.getApi(),
	                    context: this.gridOptionsWrapper.getContext()
	                };

	                if (typeof headerValueGetter === 'function') {
	                    // valueGetter is a function, so just call it
	                    return headerValueGetter(params);
	                } else if (typeof headerValueGetter === 'string') {
	                    // valueGetter is an expression, so execute the expression
	                    return this.expressionService.evaluate(headerValueGetter, params);
	                } else {
	                    console.warn('ag-grid: headerValueGetter must be a function or a string');
	                    return '';
	                }
	            } else {
	                return colGroupDef.headerName;
	            }
	        }
	    */
	    ColumnController.prototype.wrapHeaderNameWithAggFunc = function (column$$1, headerName) {
	        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
	            return headerName;
	        }
	        // only columns with aggregation active can have aggregations
	        var pivotValueColumn = column$$1.getColDef().pivotValueColumn;
	        var pivotActiveOnThisColumn = utils.Utils.exists(pivotValueColumn);
	        var aggFunc = null;
	        var aggFuncFound;
	        // otherwise we have a measure that is active, and we are doing aggregation on it
	        if (pivotActiveOnThisColumn) {
	            aggFunc = pivotValueColumn.getAggFunc();
	            aggFuncFound = true;
	        }
	        else {
	            var measureActive = column$$1.isValueActive();
	            var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
	            if (measureActive && aggregationPresent) {
	                aggFunc = column$$1.getAggFunc();
	                aggFuncFound = true;
	            }
	            else {
	                aggFuncFound = false;
	            }
	        }
	        if (aggFuncFound) {
	            var aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';
	            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
	            return aggFuncStringTranslated + "(" + headerName + ")";
	        }
	        else {
	            return headerName;
	        }
	    };
	    // returns the group with matching colId and instanceId. If instanceId is missing,
	    // matches only on the colId.
	    ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
	        if (!colId) {
	            return null;
	        }
	        if (colId instanceof columnGroup.ColumnGroup) {
	            return colId;
	        }
	        var allColumnGroups = this.getAllDisplayedColumnGroups();
	        var checkInstanceId = typeof instanceId === 'number';
	        var result = null;
	        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
	            if (child instanceof columnGroup.ColumnGroup) {
	                var columnGroup$$1 = child;
	                var matched = void 0;
	                if (checkInstanceId) {
	                    matched = colId === columnGroup$$1.getGroupId() && instanceId === columnGroup$$1.getInstanceId();
	                }
	                else {
	                    matched = colId === columnGroup$$1.getGroupId();
	                }
	                if (matched) {
	                    result = columnGroup$$1;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.setColumnDefs = function (columnDefs, source) {
	        if (source === void 0) { source = "api"; }
	        // always invalidate cache on changing columns, as the column id's for the new columns
	        // could overlap with the old id's, so the cache would return old values for new columns.
	        this.valueCache.expire();
	        // NOTE ==================
	        // we should be destroying the existing columns and groups if they exist, for example, the original column
	        // group adds a listener to the columns, it should be also removing the listeners
	        this.autoGroupsNeedBuilding = true;
	        var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(columnDefs, true);
	        this.primaryBalancedTree = balancedTreeResult.balancedTree;
	        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	        this.primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        this.autoRowHeightColumns = this.primaryColumns.filter(function (col) { return col.getColDef().autoHeight; });
	        this.extractRowGroupColumns(source);
	        this.extractPivotColumns(source);
	        this.createValueColumns(source);
	        this.updateGridColumns();
	        this.updateDisplayedColumns(source);
	        this.checkDisplayedVirtualColumns();
	        this.ready = true;
	        var eventEverythingChanged = {
	            type: events$1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            source: source
	        };
	        this.eventService.dispatchEvent(eventEverythingChanged);
	        var newColumnsLoadedEvent = {
	            type: events$1.Events.EVENT_NEW_COLUMNS_LOADED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(newColumnsLoadedEvent);
	    };
	    ColumnController.prototype.isReady = function () {
	        return this.ready;
	    };
	    ColumnController.prototype.extractRowGroupColumns = function (source) {
	        var _this = this;
	        this.rowGroupColumns.forEach(function (column$$1) { return column$$1.setRowGroupActive(false, source); });
	        this.rowGroupColumns = [];
	        // pull out items with rowGroupIndex
	        this.primaryColumns.forEach(function (column$$1) {
	            if (typeof column$$1.getColDef().rowGroupIndex === 'number') {
	                _this.rowGroupColumns.push(column$$1);
	                column$$1.setRowGroupActive(true, source);
	            }
	        });
	        // then sort them
	        this.rowGroupColumns.sort(function (colA, colB) {
	            return colA.getColDef().rowGroupIndex - colB.getColDef().rowGroupIndex;
	        });
	        // now just pull out items rowGroup, they will be added at the end
	        // after the indexed ones, but in the order the columns appear
	        this.primaryColumns.forEach(function (column$$1) {
	            if (column$$1.getColDef().rowGroup) {
	                // if user already specified rowGroupIndex then we skip it as this col already included
	                if (_this.rowGroupColumns.indexOf(column$$1) >= 0) {
	                    return;
	                }
	                _this.rowGroupColumns.push(column$$1);
	                column$$1.setRowGroupActive(true, source);
	            }
	        });
	    };
	    ColumnController.prototype.extractPivotColumns = function (source) {
	        var _this = this;
	        this.pivotColumns.forEach(function (column$$1) { return column$$1.setPivotActive(false, source); });
	        this.pivotColumns = [];
	        // pull out items with pivotIndex
	        this.primaryColumns.forEach(function (column$$1) {
	            if (typeof column$$1.getColDef().pivotIndex === 'number') {
	                _this.pivotColumns.push(column$$1);
	                column$$1.setPivotActive(true, source);
	            }
	        });
	        // then sort them
	        this.pivotColumns.sort(function (colA, colB) {
	            return colA.getColDef().pivotIndex - colB.getColDef().pivotIndex;
	        });
	        // now check the boolean equivalent
	        this.primaryColumns.forEach(function (column$$1) {
	            if (column$$1.getColDef().pivot) {
	                // if user already specified pivotIndex then we skip it as this col already included
	                if (_this.pivotColumns.indexOf(column$$1) >= 0) {
	                    return;
	                }
	                _this.pivotColumns.push(column$$1);
	                column$$1.setPivotActive(true, source);
	            }
	        });
	    };
	    ColumnController.prototype.resetColumnGroupState = function (source) {
	        if (source === void 0) { source = "api"; }
	        var stateItems = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.primaryBalancedTree, function (child) {
	            if (child instanceof originalColumnGroup.OriginalColumnGroup) {
	                var groupState = {
	                    groupId: child.getGroupId(),
	                    open: child.getColGroupDef().openByDefault
	                };
	                stateItems.push(groupState);
	            }
	        });
	        this.setColumnGroupState(stateItems, source);
	    };
	    ColumnController.prototype.getColumnGroupState = function () {
	        var columnGroupState = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup.OriginalColumnGroup) {
	                var originalColumnGroup$$1 = node;
	                columnGroupState.push({
	                    groupId: originalColumnGroup$$1.getGroupId(),
	                    open: originalColumnGroup$$1.isExpanded()
	                });
	            }
	        });
	        return columnGroupState;
	    };
	    ColumnController.prototype.setColumnGroupState = function (stateItems, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        this.columnAnimationService.start();
	        var impactedGroups = [];
	        stateItems.forEach(function (stateItem) {
	            var groupKey = stateItem.groupId;
	            var newValue = stateItem.open;
	            var originalColumnGroup$$1 = _this.getOriginalColumnGroup(groupKey);
	            if (!originalColumnGroup$$1) {
	                return;
	            }
	            if (originalColumnGroup$$1.isExpanded() === newValue) {
	                return;
	            }
	            _this.logger.log('columnGroupOpened(' + originalColumnGroup$$1.getGroupId() + ',' + newValue + ')');
	            originalColumnGroup$$1.setExpanded(newValue);
	            impactedGroups.push(originalColumnGroup$$1);
	        });
	        this.updateGroupsAndDisplayedColumns(source);
	        impactedGroups.forEach(function (originalColumnGroup$$1) {
	            var event = {
	                type: events$1.Events.EVENT_COLUMN_GROUP_OPENED,
	                columnGroup: originalColumnGroup$$1,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        this.columnAnimationService.finish();
	    };
	    // called by headerRenderer - when a header is opened or closed
	    ColumnController.prototype.setColumnGroupOpened = function (key, newValue, source) {
	        if (source === void 0) { source = "api"; }
	        var keyAsString;
	        if (key instanceof originalColumnGroup.OriginalColumnGroup) {
	            keyAsString = key.getId();
	        }
	        else {
	            keyAsString = key;
	        }
	        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
	    };
	    ColumnController.prototype.getOriginalColumnGroup = function (key) {
	        if (key instanceof originalColumnGroup.OriginalColumnGroup) {
	            return key;
	        }
	        if (typeof key !== 'string') {
	            console.error('ag-Grid: group key must be a string');
	        }
	        // otherwise, search for the column group by id
	        var res = null;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup.OriginalColumnGroup) {
	                var originalColumnGroup$$1 = node;
	                if (originalColumnGroup$$1.getId() === key) {
	                    res = originalColumnGroup$$1;
	                }
	            }
	        });
	        return res;
	    };
	    ColumnController.prototype.calculateColumnsForDisplay = function () {
	        var _this = this;
	        var columnsForDisplay;
	        if (this.pivotMode && !this.secondaryColumnsPresent) {
	            // pivot mode is on, but we are not pivoting, so we only
	            // show columns we are aggregating on
	            columnsForDisplay = utils.Utils.filter(this.gridColumns, function (column$$1) {
	                var isAutoGroupCol = _this.groupAutoColumns && _this.groupAutoColumns.indexOf(column$$1) >= 0;
	                var isValueCol = _this.valueColumns && _this.valueColumns.indexOf(column$$1) >= 0;
	                return isAutoGroupCol || isValueCol;
	            });
	        }
	        else {
	            // otherwise continue as normal. this can be working on the primary
	            // or secondary columns, whatever the gridColumns are set to
	            columnsForDisplay = utils.Utils.filter(this.gridColumns, function (column$$1) {
	                // keep col if a) it's auto-group or b) it's visible
	                var isAutoGroupCol = _this.groupAutoColumns && _this.groupAutoColumns.indexOf(column$$1) >= 0;
	                return isAutoGroupCol || column$$1.isVisible();
	            });
	        }
	        return columnsForDisplay;
	    };
	    ColumnController.prototype.checkColSpanActiveInCols = function (columns) {
	        var result = false;
	        columns.forEach(function (col) {
	            if (utils.Utils.exists(col.getColDef().colSpan)) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.calculateColumnsForGroupDisplay = function () {
	        var _this = this;
	        this.groupDisplayColumns = [];
	        var checkFunc = function (col) {
	            var colDef = col.getColDef();
	            if (colDef && utils.Utils.exists(colDef.showRowGroup)) {
	                _this.groupDisplayColumns.push(col);
	            }
	        };
	        this.gridColumns.forEach(checkFunc);
	        if (this.groupAutoColumns) {
	            this.groupAutoColumns.forEach(checkFunc);
	        }
	    };
	    ColumnController.prototype.getGroupDisplayColumns = function () {
	        return this.groupDisplayColumns;
	    };
	    ColumnController.prototype.updateDisplayedColumns = function (source) {
	        var columnsForDisplay = this.calculateColumnsForDisplay();
	        this.buildDisplayedTrees(columnsForDisplay);
	        this.calculateColumnsForGroupDisplay();
	        // this is also called when a group is opened or closed
	        this.updateGroupsAndDisplayedColumns(source);
	        this.setFirstRightAndLastLeftPinned(source);
	    };
	    ColumnController.prototype.isSecondaryColumnsPresent = function () {
	        return this.secondaryColumnsPresent;
	    };
	    ColumnController.prototype.setSecondaryColumns = function (colDefs, source) {
	        if (source === void 0) { source = "api"; }
	        var newColsPresent = colDefs && colDefs.length > 0;
	        // if not cols passed, and we had to cols anyway, then do nothing
	        if (!newColsPresent && !this.secondaryColumnsPresent) {
	            return;
	        }
	        if (newColsPresent) {
	            this.processSecondaryColumnDefinitions(colDefs);
	            var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(colDefs, false);
	            this.secondaryBalancedTree = balancedTreeResult.balancedTree;
	            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
	            this.secondaryColumnsPresent = true;
	        }
	        else {
	            this.secondaryBalancedTree = null;
	            this.secondaryHeaderRowCount = -1;
	            this.secondaryColumns = null;
	            this.secondaryColumnsPresent = false;
	        }
	        this.updateGridColumns();
	        this.updateDisplayedColumns(source);
	    };
	    ColumnController.prototype.processSecondaryColumnDefinitions = function (colDefs) {
	        var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
	        var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
	        if (!columnCallback && !groupCallback) {
	            return;
	        }
	        searchForColDefs(colDefs);
	        function searchForColDefs(colDefs2) {
	            colDefs2.forEach(function (abstractColDef) {
	                var isGroup = utils.Utils.exists(abstractColDef.children);
	                if (isGroup) {
	                    var colGroupDef = abstractColDef;
	                    if (groupCallback) {
	                        groupCallback(colGroupDef);
	                    }
	                    searchForColDefs(colGroupDef.children);
	                }
	                else {
	                    var colDef = abstractColDef;
	                    if (columnCallback) {
	                        columnCallback(colDef);
	                    }
	                }
	            });
	        }
	    };
	    // called from: setColumnState, setColumnDefs, setSecondaryColumns
	    ColumnController.prototype.updateGridColumns = function () {
	        if (this.gridColsArePrimary) {
	            this.lastPrimaryOrder = this.gridColumns;
	        }
	        if (this.secondaryColumns) {
	            this.gridBalancedTree = this.secondaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.secondaryHeaderRowCount;
	            this.gridColumns = this.secondaryColumns.slice();
	            this.gridColsArePrimary = false;
	        }
	        else {
	            this.gridBalancedTree = this.primaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.primaryHeaderRowCount;
	            this.gridColumns = this.primaryColumns.slice();
	            this.gridColsArePrimary = true;
	            // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns
	            // when this happens (eg if user moved a column) rather than revert back to the original column order.
	            // likewise if changing in/out of pivot mode, we want to maintain the order of the primary cols
	            this.orderGridColsLikeLastPrimary();
	        }
	        this.addAutoGroupToGridColumns();
	        this.putFixedColumnsFirst();
	        this.setupQuickFilterColumns();
	        this.clearDisplayedColumns();
	        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
	        var event = {
	            type: events$1.Events.EVENT_GRID_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.orderGridColsLikeLastPrimary = function () {
	        var _this = this;
	        if (utils.Utils.missing(this.lastPrimaryOrder)) {
	            return;
	        }
	        // only do the sort if all columns are accounted for. columns will be not accounted for
	        // if changing from secondary to primary columns
	        var oneMissing = false;
	        this.gridColumns.forEach(function (col) {
	            if (_this.lastPrimaryOrder.indexOf(col) < 0) {
	                oneMissing = true;
	            }
	        });
	        if (oneMissing) {
	            return;
	        }
	        this.gridColumns.sort(function (colA, colB) {
	            var indexA = _this.lastPrimaryOrder.indexOf(colA);
	            var indexB = _this.lastPrimaryOrder.indexOf(colB);
	            return indexA - indexB;
	        });
	    };
	    ColumnController.prototype.isPrimaryColumnGroupsPresent = function () {
	        return this.primaryHeaderRowCount > 1;
	    };
	    // if we are using autoGroupCols, then they should be included for quick filter. this covers the
	    // following scenarios:
	    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on
	    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this
	    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)
	    ColumnController.prototype.setupQuickFilterColumns = function () {
	        if (this.groupAutoColumns) {
	            this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
	        }
	        else {
	            this.columnsForQuickFilter = this.primaryColumns;
	        }
	    };
	    ColumnController.prototype.putFixedColumnsFirst = function () {
	        var locked = this.gridColumns.filter(function (c) { return c.isLockPosition(); });
	        var unlocked = this.gridColumns.filter(function (c) { return !c.isLockPosition(); });
	        this.gridColumns = locked.concat(unlocked);
	    };
	    ColumnController.prototype.addAutoGroupToGridColumns = function () {
	        // add in auto-group here
	        this.createGroupAutoColumnsIfNeeded();
	        if (utils.Utils.missing(this.groupAutoColumns)) {
	            return;
	        }
	        this.gridColumns = this.groupAutoColumns.concat(this.gridColumns);
	        var autoColBalancedTree = this.balancedColumnTreeBuilder.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
	        this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
	    };
	    // gets called after we copy down grid columns, to make sure any part of the gui
	    // that tries to draw, eg the header, it will get empty lists of columns rather
	    // than stale columns. for example, the header will received gridColumnsChanged
	    // event, so will try and draw, but it will draw successfully when it acts on the
	    // virtualColumnsChanged event
	    ColumnController.prototype.clearDisplayedColumns = function () {
	        this.displayedLeftColumnTree = [];
	        this.displayedRightColumnTree = [];
	        this.displayedCentreColumnTree = [];
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        this.allDisplayedColumns = [];
	        this.allDisplayedVirtualColumns = [];
	    };
	    ColumnController.prototype.updateGroupsAndDisplayedColumns = function (source) {
	        this.updateOpenClosedVisibilityInColumnGroups();
	        this.updateDisplayedColumnsFromTrees(source);
	        this.updateVirtualSets();
	        this.updateBodyWidths();
	        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display
	        var event = {
	            type: events$1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.updateDisplayedColumnsFromTrees = function (source) {
	        this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
	        this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
	        this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
	        this.setupAllDisplayedColumns();
	        this.setLeftValues(source);
	    };
	    ColumnController.prototype.setupAllDisplayedColumns = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.allDisplayedColumns = this.displayedRightColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedLeftColumns);
	        }
	        else {
	            this.allDisplayedColumns = this.displayedLeftColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedRightColumns);
	        }
	    };
	    // sets the left pixel position of each column
	    ColumnController.prototype.setLeftValues = function (source) {
	        this.setLeftValuesOfColumns(source);
	        this.setLeftValuesOfGroups();
	    };
	    ColumnController.prototype.setLeftValuesOfColumns = function (source) {
	        var _this = this;
	        // go through each list of displayed columns
	        var allColumns = this.primaryColumns.slice(0);
	        // let totalColumnWidth = this.getWidthOfColsInList()
	        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
	        [this.displayedLeftColumns, this.displayedRightColumns, this.displayedCenterColumns].forEach(function (columns) {
	            if (doingRtl) {
	                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
	                var left_1 = _this.getWidthOfColsInList(columns);
	                columns.forEach(function (column$$1) {
	                    left_1 -= column$$1.getActualWidth();
	                    column$$1.setLeft(left_1, source);
	                });
	            }
	            else {
	                // otherwise normal LTR, we start at zero
	                var left_2 = 0;
	                columns.forEach(function (column$$1) {
	                    column$$1.setLeft(left_2, source);
	                    left_2 += column$$1.getActualWidth();
	                });
	            }
	            utils.Utils.removeAllFromArray(allColumns, columns);
	        });
	        // items left in allColumns are columns not displayed, so remove the left position. this is
	        // important for the rows, as if a col is made visible, then taken out, then made visible again,
	        // we don't want the animation of the cell floating in from the old position, whatever that was.
	        allColumns.forEach(function (column$$1) {
	            column$$1.setLeft(null, source);
	        });
	    };
	    ColumnController.prototype.setLeftValuesOfGroups = function () {
	        // a groups left value is the lest left value of it's children
	        [this.displayedLeftColumnTree, this.displayedRightColumnTree, this.displayedCentreColumnTree].forEach(function (columns) {
	            columns.forEach(function (column$$1) {
	                if (column$$1 instanceof columnGroup.ColumnGroup) {
	                    var columnGroup$$1 = column$$1;
	                    columnGroup$$1.checkLeft();
	                }
	            });
	        });
	    };
	    ColumnController.prototype.addToDisplayedColumns = function (displayedColumnTree, displayedColumns) {
	        displayedColumns.length = 0;
	        this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function (child) {
	            if (child instanceof column.Column) {
	                displayedColumns.push(child);
	            }
	        });
	    };
	    ColumnController.prototype.updateDisplayedCenterVirtualColumns = function () {
	        if (this.suppressColumnVirtualisation) {
	            // no virtualisation, so don't filter
	            this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
	        }
	        else {
	            // filter out what should be visible
	            this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
	        }
	        this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns
	            .concat(this.displayedLeftColumns)
	            .concat(this.displayedRightColumns);
	        // return map of virtual col id's, for easy lookup when building the groups.
	        // the map will be colId=>true, ie col id's mapping to 'true'.
	        var result = {};
	        this.allDisplayedVirtualColumns.forEach(function (col) {
	            result[col.getId()] = true;
	        });
	        return result;
	    };
	    ColumnController.prototype.getVirtualHeaderGroupRow = function (type, dept) {
	        var result;
	        switch (type) {
	            case column.Column.PINNED_LEFT:
	                result = this.displayedLeftHeaderRows[dept];
	                break;
	            case column.Column.PINNED_RIGHT:
	                result = this.displayedRightHeaderRows[dept];
	                break;
	            default:
	                result = this.displayedCentreHeaderRows[dept];
	                break;
	        }
	        if (utils.Utils.missing(result)) {
	            result = [];
	        }
	        return result;
	    };
	    ColumnController.prototype.updateDisplayedVirtualGroups = function (virtualColIds) {
	        // go through each group, see if any of it's cols are displayed, and if yes,
	        // then this group is included
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
	        testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
	        testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);
	        function testGroup(children, result, dept) {
	            var returnValue = false;
	            for (var i = 0; i < children.length; i++) {
	                // see if this item is within viewport
	                var child = children[i];
	                var addThisItem = void 0;
	                if (child instanceof column.Column) {
	                    // for column, test if column is included
	                    addThisItem = virtualColIds[child.getId()] === true;
	                }
	                else {
	                    // if group, base decision on children
	                    var columnGroup$$1 = child;
	                    addThisItem = testGroup(columnGroup$$1.getDisplayedChildren(), result, dept + 1);
	                }
	                if (addThisItem) {
	                    returnValue = true;
	                    if (!result[dept]) {
	                        result[dept] = [];
	                    }
	                    result[dept].push(child);
	                }
	            }
	            return returnValue;
	        }
	    };
	    ColumnController.prototype.updateVirtualSets = function () {
	        var virtualColIds = this.updateDisplayedCenterVirtualColumns();
	        this.updateDisplayedVirtualGroups(virtualColIds);
	    };
	    ColumnController.prototype.filterOutColumnsWithinViewport = function () {
	        return utils.Utils.filter(this.displayedCenterColumns, this.isColumnInViewport.bind(this));
	    };
	    // called from api
	    ColumnController.prototype.sizeColumnsToFit = function (gridWidth, source) {
	        var _this = this;
	        if (source === void 0) { source = "api"; }
	        // avoid divide by zero
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        if (gridWidth <= 0 || allDisplayedColumns.length === 0) {
	            return;
	        }
	        var colsToNotSpread = utils.Utils.filter(allDisplayedColumns, function (column$$1) {
	            return column$$1.getColDef().suppressSizeToFit === true;
	        });
	        var colsToSpread = utils.Utils.filter(allDisplayedColumns, function (column$$1) {
	            return column$$1.getColDef().suppressSizeToFit !== true;
	        });
	        // make a copy of the cols that are going to be resized
	        var colsToFireEventFor = colsToSpread.slice(0);
	        var finishedResizing = false;
	        while (!finishedResizing) {
	            finishedResizing = true;
	            var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
	            if (availablePixels <= 0) {
	                // no width, set everything to minimum
	                colsToSpread.forEach(function (column$$1) {
	                    column$$1.setMinimum(source);
	                });
	            }
	            else {
	                var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
	                // we set the pixels for the last col based on what's left, as otherwise
	                // we could be a pixel or two short or extra because of rounding errors.
	                var pixelsForLastCol = availablePixels;
	                // backwards through loop, as we are removing items as we go
	                for (var i = colsToSpread.length - 1; i >= 0; i--) {
	                    var column$$1 = colsToSpread[i];
	                    var newWidth = Math.round(column$$1.getActualWidth() * scale);
	                    if (newWidth < column$$1.getMinWidth()) {
	                        column$$1.setMinimum(source);
	                        moveToNotSpread(column$$1);
	                        finishedResizing = false;
	                    }
	                    else if (column$$1.isGreaterThanMax(newWidth)) {
	                        column$$1.setActualWidth(column$$1.getMaxWidth(), source);
	                        moveToNotSpread(column$$1);
	                        finishedResizing = false;
	                    }
	                    else {
	                        var onLastCol = i === 0;
	                        if (onLastCol) {
	                            column$$1.setActualWidth(pixelsForLastCol, source);
	                        }
	                        else {
	                            column$$1.setActualWidth(newWidth, source);
	                        }
	                    }
	                    pixelsForLastCol -= newWidth;
	                }
	            }
	        }
	        this.setLeftValues(source);
	        this.updateBodyWidths();
	        colsToFireEventFor.forEach(function (column$$1) {
	            var event = {
	                type: events$1.Events.EVENT_COLUMN_RESIZED,
	                column: column$$1,
	                columns: [column$$1],
	                finished: true,
	                api: _this.gridApi,
	                columnApi: _this.columnApi,
	                source: "sizeColumnsToFit"
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        function moveToNotSpread(column$$1) {
	            utils.Utils.removeFromArray(colsToSpread, column$$1);
	            colsToNotSpread.push(column$$1);
	        }
	    };
	    ColumnController.prototype.buildDisplayedTrees = function (visibleColumns) {
	        var leftVisibleColumns = utils.Utils.filter(visibleColumns, function (column$$1) {
	            return column$$1.getPinned() === 'left';
	        });
	        var rightVisibleColumns = utils.Utils.filter(visibleColumns, function (column$$1) {
	            return column$$1.getPinned() === 'right';
	        });
	        var centerVisibleColumns = utils.Utils.filter(visibleColumns, function (column$$1) {
	            return column$$1.getPinned() !== 'left' && column$$1.getPinned() !== 'right';
	        });
	        var groupInstanceIdCreator$$1 = new groupInstanceIdCreator.GroupInstanceIdCreator();
	        this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator$$1, this.displayedLeftColumnTree);
	        this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator$$1, this.displayedRightColumnTree);
	        this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator$$1, this.displayedCentreColumnTree);
	    };
	    ColumnController.prototype.updateOpenClosedVisibilityInColumnGroups = function () {
	        var allColumnGroups = this.getAllDisplayedColumnGroups();
	        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
	            if (child instanceof columnGroup.ColumnGroup) {
	                var columnGroup$$1 = child;
	                columnGroup$$1.calculateDisplayedColumns();
	            }
	        });
	    };
	    ColumnController.prototype.getGroupAutoColumns = function () {
	        return this.groupAutoColumns;
	    };
	    ColumnController.prototype.createGroupAutoColumnsIfNeeded = function () {
	        if (!this.autoGroupsNeedBuilding) {
	            return;
	        }
	        this.autoGroupsNeedBuilding = false;
	        // see if we need to insert the default grouping column
	        var needAutoColumns = (this.rowGroupColumns.length > 0 || this.usingTreeData)
	            && !this.gridOptionsWrapper.isGroupSuppressAutoColumn()
	            && !this.gridOptionsWrapper.isGroupUseEntireRow()
	            && !this.gridOptionsWrapper.isGroupSuppressRow();
	        if (needAutoColumns) {
	            this.groupAutoColumns = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
	        }
	        else {
	            this.groupAutoColumns = null;
	        }
	    };
	    ColumnController.prototype.createValueColumns = function (source) {
	        this.valueColumns.forEach(function (column$$1) { return column$$1.setValueActive(false, source); });
	        this.valueColumns = [];
	        // override with columns that have the aggFunc specified explicitly
	        for (var i = 0; i < this.primaryColumns.length; i++) {
	            var column$$1 = this.primaryColumns[i];
	            if (column$$1.getColDef().aggFunc) {
	                column$$1.setAggFunc(column$$1.getColDef().aggFunc);
	                this.valueColumns.push(column$$1);
	                column$$1.setValueActive(true, source);
	            }
	        }
	    };
	    ColumnController.prototype.getWidthOfColsInList = function (columnList) {
	        var result = 0;
	        for (var i = 0; i < columnList.length; i++) {
	            result += columnList[i].getActualWidth();
	        }
	        return result;
	    };
	    ColumnController.prototype.getGridBalancedTree = function () {
	        return this.gridBalancedTree;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('expressionService'),
	        __metadata("design:type", expressionService.ExpressionService)
	    ], ColumnController.prototype, "expressionService", void 0);
	    __decorate([
	        context.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder.BalancedColumnTreeBuilder)
	    ], ColumnController.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator.DisplayedGroupCreator)
	    ], ColumnController.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context.Autowired('autoWidthCalculator'),
	        __metadata("design:type", autoWidthCalculator.AutoWidthCalculator)
	    ], ColumnController.prototype, "autoWidthCalculator", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ColumnController.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils.ColumnUtils)
	    ], ColumnController.prototype, "columnUtils", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], ColumnController.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService.ColumnAnimationService)
	    ], ColumnController.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context.Autowired('autoGroupColService'),
	        __metadata("design:type", autoGroupColService.AutoGroupColService)
	    ], ColumnController.prototype, "autoGroupColService", void 0);
	    __decorate([
	        context.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], ColumnController.prototype, "aggFuncService", void 0);
	    __decorate([
	        context.Optional('valueCache'),
	        __metadata("design:type", valueCache.ValueCache)
	    ], ColumnController.prototype, "valueCache", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ColumnController.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], ColumnController.prototype, "gridApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "init", null);
	    __decorate([
	        __param(0, context.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "setBeans", null);
	    ColumnController = __decorate([
	        context.Bean('columnController')
	    ], ColumnController);
	    return ColumnController;
	}());
	exports.ColumnController = ColumnController;
	});

	unwrapExports(columnController);
	var columnController_1 = columnController.ColumnController;

	var gridSerializer = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });











	var BaseGridSerializingSession = (function () {
	    function BaseGridSerializingSession(columnController$$1, valueService, gridOptionsWrapper$$1, processCellCallback, processHeaderCallback, cellAndHeaderEscaper) {
	        this.columnController = columnController$$1;
	        this.valueService = valueService;
	        this.gridOptionsWrapper = gridOptionsWrapper$$1;
	        this.processCellCallback = processCellCallback;
	        this.processHeaderCallback = processHeaderCallback;
	        this.cellAndHeaderEscaper = cellAndHeaderEscaper;
	    }
	    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
	        var nameForCol = this.getHeaderName(this.processHeaderCallback, column);
	        if (nameForCol === null || nameForCol === undefined) {
	            nameForCol = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;
	    };
	    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {
	        var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;
	        var valueForCell;
	        if (node.group && isRowGrouping && index === 0) {
	            valueForCell = this.createValueForGroupNode(node);
	        }
	        else {
	            valueForCell = this.valueService.getValue(column, node);
	        }
	        valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);
	        if (valueForCell === null || valueForCell === undefined) {
	            valueForCell = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;
	    };
	    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
	        if (callback) {
	            return callback({
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            });
	        }
	        else {
	            return this.columnController.getDisplayNameForColumn(column, 'csv', true);
	        }
	    };
	    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
	        var keys = [node.key];
	        while (node.parent) {
	            node = node.parent;
	            keys.push(node.key);
	        }
	        return keys.reverse().join(' -> ');
	    };
	    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {
	        if (processCellCallback) {
	            return processCellCallback({
	                column: column,
	                node: rowNode,
	                value: value,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext(),
	                type: type
	            });
	        }
	        else {
	            return value;
	        }
	    };
	    return BaseGridSerializingSession;
	}());
	exports.BaseGridSerializingSession = BaseGridSerializingSession;
	var GridSerializer = (function () {
	    function GridSerializer() {
	    }
	    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
	        var dontSkipRows = function () { return false; };
	        var skipGroups = params && params.skipGroups;
	        var skipHeader = params && params.skipHeader;
	        var columnGroups = params && params.columnGroups;
	        var skipFooters = params && params.skipFooters;
	        var skipPinnedTop = params && params.skipPinnedTop;
	        var skipPinnedBottom = params && params.skipPinnedBottom;
	        var includeCustomHeader = params && params.customHeader;
	        var includeCustomFooter = params && params.customFooter;
	        var allColumns = params && params.allColumns;
	        var onlySelected = params && params.onlySelected;
	        var columnKeys = params && params.columnKeys;
	        var onlySelectedAllPages = params && params.onlySelectedAllPages;
	        var rowSkipper = (params && params.shouldRowBeSkipped) || dontSkipRows;
	        var api = this.gridOptionsWrapper.getApi();
	        var context$$1 = this.gridOptionsWrapper.getContext();
	        // when in pivot mode, we always render cols on screen, never 'all columns'
	        var isPivotMode = this.columnController.isPivotMode();
	        var rowModelNormal = this.rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
	        var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;
	        var columnsToExport;
	        if (utils.Utils.existsAndNotEmpty(columnKeys)) {
	            columnsToExport = this.columnController.getGridColumns(columnKeys);
	        }
	        else if (allColumns && !isPivotMode) {
	            columnsToExport = this.columnController.getAllPrimaryColumns();
	        }
	        else {
	            columnsToExport = this.columnController.getAllDisplayedColumns();
	        }
	        if (!columnsToExport || columnsToExport.length === 0) {
	            return '';
	        }
	        gridSerializingSession.prepare(columnsToExport);
	        if (includeCustomHeader) {
	            gridSerializingSession.addCustomHeader(params.customHeader);
	        }
	        // first pass, put in the header names of the cols
	        if (columnGroups) {
	            var groupInstanceIdCreator$$1 = new groupInstanceIdCreator.GroupInstanceIdCreator();
	            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator$$1);
	            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);
	        }
	        if (!skipHeader) {
	            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
	            columnsToExport.forEach(function (column, index) {
	                gridRowIterator_1.onColumn(column, index, null);
	            });
	        }
	        this.pinnedRowModel.forEachPinnedTopRow(processRow);
	        if (isPivotMode) {
	            if (this.rowModel.forEachPivotNode) {
	                this.rowModel.forEachPivotNode(processRow);
	            }
	            else {
	                //Must be enterprise, so we can just loop through all the nodes
	                this.rowModel.forEachNode(processRow);
	            }
	        }
	        else {
	            // onlySelectedAllPages: user doing pagination and wants selected items from
	            // other pages, so cannot use the standard row model as it won't have rows from
	            // other pages.
	            // onlySelectedNonStandardModel: if user wants selected in non standard row model
	            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.
	            if (onlySelectedAllPages || onlySelectedNonStandardModel) {
	                var selectedNodes = this.selectionController.getSelectedNodes();
	                selectedNodes.forEach(function (node) {
	                    processRow(node);
	                });
	            }
	            else {
	                // here is everything else - including standard row model and selected. we don't use
	                // the selection model even when just using selected, so that the result is the order
	                // of the rows appearing on the screen.
	                if (rowModelNormal) {
	                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);
	                }
	                else {
	                    this.rowModel.forEachNode(processRow);
	                }
	            }
	        }
	        this.pinnedRowModel.forEachPinnedBottomRow(processRow);
	        if (includeCustomFooter) {
	            gridSerializingSession.addCustomFooter(params.customFooter);
	        }
	        function processRow(node) {
	            if (skipGroups && node.group) {
	                return;
	            }
	            if (skipFooters && node.footer) {
	                return;
	            }
	            if (onlySelected && !node.isSelected()) {
	                return;
	            }
	            if (skipPinnedTop && node.rowPinned === 'top') {
	                return;
	            }
	            if (skipPinnedBottom && node.rowPinned === 'bottom') {
	                return;
	            }
	            // if we are in pivotMode, then the grid will show the root node only
	            // if it's not a leaf group
	            var nodeIsRootNode = node.level === -1;
	            if (nodeIsRootNode && !node.leafGroup) {
	                return;
	            }
	            var shouldRowBeSkipped = rowSkipper({
	                node: node,
	                api: api,
	                context: context$$1
	            });
	            if (shouldRowBeSkipped)
	                return;
	            var rowAccumulator = gridSerializingSession.onNewBodyRow();
	            columnsToExport.forEach(function (column, index) {
	                rowAccumulator.onColumn(column, index, node);
	            });
	        }
	        return gridSerializingSession.parse();
	    };
	    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {
	        var directChildrenHeaderGroups = [];
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup$$1 = columnGroupChild;
	            if (!columnGroup$$1.getChildren)
	                return;
	            columnGroup$$1.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });
	        });
	        if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup.ColumnGroup) {
	            this.doAddHeaderHeader(gridSerializingSession, displayedGroups);
	        }
	        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
	            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);
	        }
	    };
	    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {
	        var _this = this;
	        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
	        var columnIndex = 0;
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup$$1 = columnGroupChild;
	            var colDef = columnGroup$$1.getDefinition();
	            var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup$$1, 'header');
	            gridRowIterator.onColumn(columnName, columnIndex++, columnGroup$$1.getLeafColumns().length - 1);
	        });
	    };
	    __decorate([
	        context.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator.DisplayedGroupCreator)
	    ], GridSerializer.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GridSerializer.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridSerializer.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel.PinnedRowModel)
	    ], GridSerializer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], GridSerializer.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder.BalancedColumnTreeBuilder)
	    ], GridSerializer.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], GridSerializer.prototype, "gridOptionsWrapper", void 0);
	    GridSerializer = __decorate([
	        context.Bean("gridSerializer")
	    ], GridSerializer);
	    return GridSerializer;
	}());
	exports.GridSerializer = GridSerializer;
	var RowType;
	(function (RowType) {
	    RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
	    RowType[RowType["HEADER"] = 1] = "HEADER";
	    RowType[RowType["BODY"] = 2] = "BODY";
	})(RowType = exports.RowType || (exports.RowType = {}));
	});

	unwrapExports(gridSerializer);
	var gridSerializer_1 = gridSerializer.BaseGridSerializingSession;
	var gridSerializer_2 = gridSerializer.GridSerializer;
	var gridSerializer_3 = gridSerializer.RowType;

	var downloader = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var Downloader = (function () {
	    function Downloader() {
	    }
	    Downloader.prototype.download = function (fileName, content, mimeType) {
	        // for Excel, we need \ufeff at the start
	        // http://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob
	        var blobObject = new Blob(["\ufeff", content], {
	            type: mimeType
	        });
	        // Internet Explorer
	        if (window.navigator.msSaveOrOpenBlob) {
	            window.navigator.msSaveOrOpenBlob(blobObject, fileName);
	        }
	        else {
	            // Chrome
	            var downloadLink = document.createElement("a");
	            downloadLink.href = window.URL.createObjectURL(blobObject);
	            downloadLink.download = fileName;
	            document.body.appendChild(downloadLink);
	            downloadLink.click();
	            document.body.removeChild(downloadLink);
	        }
	    };
	    Downloader = __decorate([
	        context.Bean('downloader')
	    ], Downloader);
	    return Downloader;
	}());
	exports.Downloader = Downloader;
	});

	unwrapExports(downloader);
	var downloader_1 = downloader.Downloader;

	var csvCreator = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var LINE_SEPARATOR = '\r\n';
	var CsvSerializingSession = (function (_super) {
	    __extends(CsvSerializingSession, _super);
	    function CsvSerializingSession(columnController$$1, valueService$$1, gridOptionsWrapper$$1, processCellCallback, processHeaderCallback, suppressQuotes, columnSeparator) {
	        var _this = _super.call(this, columnController$$1, valueService$$1, gridOptionsWrapper$$1, processCellCallback, processHeaderCallback) || this;
	        _this.suppressQuotes = suppressQuotes;
	        _this.columnSeparator = columnSeparator;
	        _this.result = '';
	        _this.lineOpened = false;
	        return _this;
	    }
	    CsvSerializingSession.prototype.prepare = function (columnsToExport) {
	    };
	    CsvSerializingSession.prototype.addCustomHeader = function (customHeader) {
	        if (!customHeader)
	            return;
	        this.result += customHeader + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.addCustomFooter = function (customFooter) {
	        if (!customFooter)
	            return;
	        this.result += customFooter + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += header;
	        for (var i = 1; i <= span; i++) {
	            this.result += this.columnSeparator + this.putInQuotes("", this.suppressQuotes);
	        }
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewHeaderRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractHeaderValue(column), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewBodyRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewBodyRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractRowCellValue(column, index, constants.Constants.EXPORT_TYPE_CSV, node), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.putInQuotes = function (value, suppressQuotes) {
	        if (suppressQuotes) {
	            return value;
	        }
	        if (value === null || value === undefined) {
	            return '""';
	        }
	        var stringValue;
	        if (typeof value === 'string') {
	            stringValue = value;
	        }
	        else if (typeof value.toString === 'function') {
	            stringValue = value.toString();
	        }
	        else {
	            console.warn('unknown value type during csv conversion');
	            stringValue = '';
	        }
	        // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
	        var valueEscaped = stringValue.replace(/"/g, "\"\"");
	        return '"' + valueEscaped + '"';
	    };
	    CsvSerializingSession.prototype.parse = function () {
	        return this.result;
	    };
	    return CsvSerializingSession;
	}(gridSerializer.BaseGridSerializingSession));
	exports.CsvSerializingSession = CsvSerializingSession;
	var BaseCreator = (function () {
	    function BaseCreator() {
	    }
	    BaseCreator.prototype.setBeans = function (beans) {
	        this.beans = beans;
	    };
	    BaseCreator.prototype.export = function (userParams) {
	        if (this.isExportSuppressed()) {
	            console.warn("ag-grid: Export canceled. Export is not allowed as per your configuration.");
	            return "";
	        }
	        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;
	        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
	        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();
	        if (fileName.indexOf(".") === -1) {
	            fileName = fileName + "." + this.getDefaultFileExtension();
	        }
	        this.beans.downloader.download(fileName, data, this.getMimeType());
	        return data;
	    };
	    BaseCreator.prototype.getData = function (params) {
	        return this.getMergedParamsAndData(params).data;
	    };
	    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
	        var mergedParams = this.mergeDefaultParams(userParams);
	        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
	        return { mergedParams: mergedParams, data: data };
	    };
	    BaseCreator.prototype.mergeDefaultParams = function (userParams) {
	        var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();
	        var params = {};
	        utils._.assign(params, baseParams);
	        utils._.assign(params, userParams);
	        return params;
	    };
	    return BaseCreator;
	}());
	exports.BaseCreator = BaseCreator;
	var CsvCreator = (function (_super) {
	    __extends(CsvCreator, _super);
	    function CsvCreator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CsvCreator.prototype.postConstruct = function () {
	        this.setBeans({
	            downloader: this.downloader,
	            gridSerializer: this.gridSerializer,
	            gridOptionsWrapper: this.gridOptionsWrapper
	        });
	    };
	    CsvCreator.prototype.exportDataAsCsv = function (params) {
	        return this.export(params);
	    };
	    CsvCreator.prototype.getDataAsCsv = function (params) {
	        return this.getData(params);
	    };
	    CsvCreator.prototype.getMimeType = function () {
	        return "text/csv;charset=utf-8;";
	    };
	    CsvCreator.prototype.getDefaultFileName = function () {
	        return 'export.csv';
	    };
	    CsvCreator.prototype.getDefaultFileExtension = function () {
	        return 'csv';
	    };
	    CsvCreator.prototype.createSerializingSession = function (params) {
	        return new CsvSerializingSession(this.columnController, this.valueService, this.gridOptionsWrapper, params ? params.processCellCallback : null, params ? params.processHeaderCallback : null, params && params.suppressQuotes, (params && params.columnSeparator) || ',');
	    };
	    CsvCreator.prototype.isExportSuppressed = function () {
	        return this.gridOptionsWrapper.isSuppressCsvExport();
	    };
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], CsvCreator.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], CsvCreator.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('downloader'),
	        __metadata("design:type", downloader.Downloader)
	    ], CsvCreator.prototype, "downloader", void 0);
	    __decorate([
	        context.Autowired('gridSerializer'),
	        __metadata("design:type", gridSerializer.GridSerializer)
	    ], CsvCreator.prototype, "gridSerializer", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], CsvCreator.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CsvCreator.prototype, "postConstruct", null);
	    CsvCreator = __decorate([
	        context.Bean('csvCreator')
	    ], CsvCreator);
	    return CsvCreator;
	}(BaseCreator));
	exports.CsvCreator = CsvCreator;
	});

	unwrapExports(csvCreator);
	var csvCreator_1 = csvCreator.CsvSerializingSession;
	var csvCreator_2 = csvCreator.BaseCreator;
	var csvCreator_3 = csvCreator.CsvCreator;

	var immutableService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var ImmutableService = (function () {
	    function ImmutableService() {
	    }
	    ImmutableService.prototype.postConstruct = function () {
	        if (this.rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            this.clientSideRowModel = this.rowModel;
	        }
	    };
	    // converts the setRowData() command to a transaction
	    ImmutableService.prototype.createTransactionForRowData = function (data) {
	        if (utils._.missing(this.clientSideRowModel)) {
	            console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');
	            return;
	        }
	        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (utils._.missing(getRowNodeIdFunc)) {
	            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');
	            return;
	        }
	        // convert the data into a transaction object by working out adds, removes and updates
	        var transaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
	        var orderMap = {};
	        if (utils._.exists(data)) {
	            // split all the new data in the following:
	            // if new, push to 'add'
	            // if update, push to 'update'
	            // if not changed, do not include in the transaction
	            data.forEach(function (dataItem, index) {
	                var id = getRowNodeIdFunc(dataItem);
	                var existingNode = existingNodesMap[id];
	                orderMap[id] = index;
	                if (existingNode) {
	                    var dataHasChanged = existingNode.data !== dataItem;
	                    if (dataHasChanged) {
	                        transaction.update.push(dataItem);
	                    }
	                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
	                    // remove from list, so we know the item is not to be removed
	                    existingNodesMap[id] = undefined;
	                }
	                else {
	                    transaction.add.push(dataItem);
	                }
	            });
	        }
	        // at this point, all rows that are left, should be removed
	        utils._.iterateObject(existingNodesMap, function (id, rowNode) {
	            if (rowNode) {
	                transaction.remove.push(rowNode.data);
	            }
	        });
	        return [transaction, orderMap];
	    };
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ImmutableService.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ImmutableService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ImmutableService.prototype, "postConstruct", null);
	    ImmutableService = __decorate([
	        context.Bean('immutableService')
	    ], ImmutableService);
	    return ImmutableService;
	}());
	exports.ImmutableService = ImmutableService;
	});

	unwrapExports(immutableService);
	var immutableService_1 = immutableService.ImmutableService;

	var gridApi = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });























	var GridApi = (function () {
	    function GridApi() {
	        this.detailGridInfoMap = {};
	        /*
	        Taking these out, as we want to reconsider how we register components
	    
	        public addCellRenderer(key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc): void {
	            this.cellRendererFactory.addCellRenderer(key, cellRenderer);
	        }
	    
	        public addCellEditor(key: string, cellEditor: {new(): ICellEditor}): void {
	            this.cellEditorFactory.addCellEditor(key, cellEditor);
	        }*/
	    }
	    GridApi.prototype.registerGridComp = function (gridPanel) {
	        this.gridPanel = gridPanel;
	    };
	    GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {
	        this.headerRootComp = headerRootComp;
	    };
	    GridApi.prototype.init = function () {
	        switch (this.rowModel.getType()) {
	            case constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
	                this.clientSideRowModel = this.rowModel;
	                break;
	            case constants.Constants.ROW_MODEL_TYPE_INFINITE:
	                this.infinitePageRowModel = this.rowModel;
	                break;
	            case constants.Constants.ROW_MODEL_TYPE_SERVER_SIDE:
	                this.serverSideRowModel = this.rowModel;
	                break;
	        }
	    };
	    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
	    GridApi.prototype.__getAlignedGridService = function () {
	        return this.alignedGridsService;
	    };
	    GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {
	        this.detailGridInfoMap[id] = gridInfo;
	    };
	    GridApi.prototype.removeDetailGridInfo = function (id) {
	        this.detailGridInfoMap[id] = undefined;
	    };
	    GridApi.prototype.getDetailGridInfo = function (id) {
	        return this.detailGridInfoMap[id];
	    };
	    GridApi.prototype.forEachDetailGridInfo = function (callback) {
	        var index = 0;
	        utils.Utils.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {
	            // check for undefined, as old references will still be lying around
	            if (utils.Utils.exists(gridInfo)) {
	                callback(gridInfo, index);
	                index++;
	            }
	        });
	    };
	    GridApi.prototype.getDataAsCsv = function (params) {
	        return this.csvCreator.getDataAsCsv(params);
	    };
	    GridApi.prototype.exportDataAsCsv = function (params) {
	        this.csvCreator.exportDataAsCsv(params);
	    };
	    GridApi.prototype.getDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        return this.excelCreator.getDataAsExcelXml(params);
	    };
	    GridApi.prototype.exportDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        this.excelCreator.exportDataAsExcel(params);
	    };
	    // DEPRECATED
	    GridApi.prototype.setEnterpriseDatasource = function (datasource) {
	        console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
	        this.setServerSideDatasource(datasource);
	    };
	    GridApi.prototype.setServerSideDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelServerSide()) {
	            // should really have an IEnterpriseRowModel interface, so we are not casting to any
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + constants.Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
	        }
	    };
	    GridApi.prototype.setDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + constants.Constants.ROW_MODEL_TYPE_INFINITE + "'");
	        }
	    };
	    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {
	        if (this.gridOptionsWrapper.isRowModelViewport()) {
	            // this is bad coding, because it's using an interface that's exposed in the enterprise.
	            // really we should create an interface in the core for viewportDatasource and let
	            // the enterprise implement it, rather than casting to 'any' here
	            this.rowModel.setViewportDatasource(viewportDatasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + constants.Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
	        }
	    };
	    GridApi.prototype.setRowData = function (rowData) {
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {
	                var _a = this.immutableService.createTransactionForRowData(rowData), transaction = _a[0], orderIdMap = _a[1];
	                this.clientSideRowModel.updateRowData(transaction, orderIdMap);
	            }
	            else {
	                this.selectionController.reset();
	                this.clientSideRowModel.setRowData(rowData);
	            }
	        }
	        else {
	            console.log('cannot call setRowData unless using normal row model');
	        }
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingTopRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');
	        this.setPinnedTopRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingBottomRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');
	        this.setPinnedBottomRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');
	        return this.getPinnedTopRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');
	        return this.getPinnedBottomRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');
	        return this.getPinnedTopRow(index);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');
	        return this.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setPinnedTopRowData = function (rows) {
	        this.pinnedRowModel.setPinnedTopRowData(rows);
	    };
	    GridApi.prototype.setPinnedBottomRowData = function (rows) {
	        this.pinnedRowModel.setPinnedBottomRowData(rows);
	    };
	    GridApi.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedRowModel.getPinnedTopRowCount();
	    };
	    GridApi.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedRowModel.getPinnedBottomRowCount();
	    };
	    GridApi.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedRowModel.getPinnedTopRow(index);
	    };
	    GridApi.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedRowModel.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setColumnDefs = function (colDefs, source) {
	        if (source === void 0) { source = "api"; }
	        this.columnController.setColumnDefs(colDefs, source);
	    };
	    GridApi.prototype.expireValueCache = function () {
	        this.valueCache.expire();
	    };
	    GridApi.prototype.getVerticalPixelRange = function () {
	        return this.gridPanel.getVScrollPosition();
	    };
	    GridApi.prototype.refreshToolPanel = function () {
	        if (this.toolPanelComp) {
	            this.toolPanelComp.refresh();
	        }
	    };
	    GridApi.prototype.refreshCells = function (params) {
	        if (params === void 0) { params = {}; }
	        if (Array.isArray(params)) {
	            // the old version of refreshCells() took an array of rowNodes for the first argument
	            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');
	            return;
	        }
	        this.rowRenderer.refreshCells(params);
	    };
	    GridApi.prototype.flashCells = function (params) {
	        if (params === void 0) { params = {}; }
	        this.rowRenderer.flashCells(params);
	    };
	    GridApi.prototype.redrawRows = function (params) {
	        if (params === void 0) { params = {}; }
	        if (params && params.rowNodes) {
	            this.rowRenderer.redrawRows(params.rowNodes);
	        }
	        else {
	            this.rowRenderer.redrawAfterModelUpdate();
	        }
	    };
	    GridApi.prototype.timeFullRedraw = function (count) {
	        if (count === void 0) { count = 1; }
	        var iterationCount = 0;
	        var totalProcessing = 0;
	        var totalReflow = 0;
	        var that = this;
	        doOneIteration();
	        function doOneIteration() {
	            var start = (new Date()).getTime();
	            that.rowRenderer.redrawAfterModelUpdate();
	            var endProcessing = (new Date()).getTime();
	            setTimeout(function () {
	                var endReflow = (new Date()).getTime();
	                var durationProcessing = endProcessing - start;
	                var durationReflow = endReflow - endProcessing;
	                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');
	                iterationCount++;
	                totalProcessing += durationProcessing;
	                totalReflow += durationReflow;
	                if (iterationCount < count) {
	                    // wait for 1s between tests
	                    setTimeout(doOneIteration, 1000);
	                }
	                else {
	                    finish();
	                }
	            }, 0);
	        }
	        function finish() {
	            console.log('tests complete. iteration count = ' + iterationCount);
	            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');
	            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');
	        }
	    };
	    // *** deprecated
	    GridApi.prototype.refreshView = function () {
	        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.refreshRows = function (rowNodes) {
	        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');
	        this.refreshCells({ rowNodes: rowNodes });
	    };
	    // *** deprecated
	    GridApi.prototype.rowDataChanged = function (rows) {
	        console.log('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.softRefreshView = function () {
	        console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');
	    };
	    // *** deprecated
	    GridApi.prototype.refreshGroupRows = function () {
	        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +
	            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +
	            'not be necessary to only refresh the group rows.');
	        this.refreshCells();
	    };
	    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {
	        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);
	    };
	    GridApi.prototype.refreshHeader = function () {
	        this.headerRootComp.refreshHeader();
	        this.gridPanel.setBodyAndHeaderHeights();
	    };
	    GridApi.prototype.isAnyFilterPresent = function () {
	        return this.filterManager.isAnyFilterPresent();
	    };
	    GridApi.prototype.isAdvancedFilterPresent = function () {
	        return this.filterManager.isAdvancedFilterPresent();
	    };
	    GridApi.prototype.isQuickFilterPresent = function () {
	        return this.filterManager.isQuickFilterPresent();
	    };
	    GridApi.prototype.getModel = function () {
	        return this.rowModel;
	    };
	    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.log('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');
	        }
	        if (utils.Utils.exists(deprecated_refreshFromIndex)) {
	            console.log('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');
	        }
	        // we don't really want the user calling this if one one rowNode was expanded, instead they should be
	        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
	        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
	        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.
	        this.clientSideRowModel.refreshModel({ step: constants.Constants.STEP_MAP });
	    };
	    GridApi.prototype.refreshInMemoryRowModel = function (step) {
	        console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
	        this.refreshClientSideRowModel(step);
	    };
	    GridApi.prototype.refreshClientSideRowModel = function (step) {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.log('cannot call refreshClientSideRowModel unless using normal row model');
	        }
	        var paramsStep = constants.Constants.STEP_EVERYTHING;
	        var stepsMapped = {
	            group: constants.Constants.STEP_EVERYTHING,
	            filter: constants.Constants.STEP_FILTER,
	            map: constants.Constants.STEP_MAP,
	            aggregate: constants.Constants.STEP_AGGREGATE,
	            sort: constants.Constants.STEP_SORT,
	            pivot: constants.Constants.STEP_PIVOT
	        };
	        if (utils.Utils.exists(step)) {
	            paramsStep = stepsMapped[step];
	        }
	        if (utils.Utils.missing(paramsStep)) {
	            console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(', '));
	            return;
	        }
	        var modelParams = {
	            step: paramsStep,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        };
	        this.clientSideRowModel.refreshModel(modelParams);
	    };
	    GridApi.prototype.isAnimationFrameQueueEmpty = function () {
	        return this.animationFrameService.isQueueEmpty();
	    };
	    GridApi.prototype.getRowNode = function (id) {
	        return this.rowModel.getRowNode(id);
	    };
	    GridApi.prototype.expandAll = function () {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.warn('ag-Grid: cannot call expandAll unless using normal row model');
	            return;
	        }
	        this.clientSideRowModel.expandOrCollapseAll(true);
	    };
	    GridApi.prototype.collapseAll = function () {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');
	            return;
	        }
	        this.clientSideRowModel.expandOrCollapseAll(false);
	    };
	    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {
	        if (typeof eventName !== 'string') {
	            console.log('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');
	        }
	        this.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        if (eventName === 'virtualRowSelected') {
	            console.log('ag-Grid: event virtualRowSelected is deprecated, to register for individual row ' +
	                'selection events, add a listener directly to the row node.');
	        }
	        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.setQuickFilter = function (newFilter) {
	        this.filterManager.setQuickFilter(newFilter);
	    };
	    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.selectIndex(index, tryMulti);
	    };
	    GridApi.prototype.deselectIndex = function (index, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.deselectIndex(index);
	    };
	    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
	        if (tryMulti === void 0) { tryMulti = false; }
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    GridApi.prototype.deselectNode = function (node, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: false });
	    };
	    GridApi.prototype.selectAll = function () {
	        this.selectionController.selectAllRowNodes();
	    };
	    GridApi.prototype.deselectAll = function () {
	        this.selectionController.deselectAllRowNodes();
	    };
	    GridApi.prototype.selectAllFiltered = function () {
	        this.selectionController.selectAllRowNodes(true);
	    };
	    GridApi.prototype.deselectAllFiltered = function () {
	        this.selectionController.deselectAllRowNodes(true);
	    };
	    GridApi.prototype.recomputeAggregates = function () {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.warn('cannot call recomputeAggregates unless using normal row model');
	        }
	        console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
	        this.clientSideRowModel.refreshModel({ step: constants.Constants.STEP_AGGREGATE });
	    };
	    GridApi.prototype.sizeColumnsToFit = function () {
	        this.gridPanel.sizeColumnsToFit();
	    };
	    GridApi.prototype.showLoadingOverlay = function () {
	        this.gridPanel.showLoadingOverlay();
	    };
	    GridApi.prototype.showNoRowsOverlay = function () {
	        this.gridPanel.showNoRowsOverlay();
	    };
	    GridApi.prototype.hideOverlay = function () {
	        this.gridPanel.hideOverlay();
	    };
	    GridApi.prototype.isNodeSelected = function (node) {
	        console.log('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');
	        return node.isSelected();
	    };
	    GridApi.prototype.getSelectedNodesById = function () {
	        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');
	        return null;
	    };
	    GridApi.prototype.getSelectedNodes = function () {
	        return this.selectionController.getSelectedNodes();
	    };
	    GridApi.prototype.getSelectedRows = function () {
	        return this.selectionController.getSelectedRows();
	    };
	    GridApi.prototype.getBestCostNodeSelection = function () {
	        return this.selectionController.getBestCostNodeSelection();
	    };
	    GridApi.prototype.getRenderedNodes = function () {
	        return this.rowRenderer.getRenderedNodes();
	    };
	    GridApi.prototype.ensureColIndexVisible = function (index) {
	        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');
	    };
	    GridApi.prototype.ensureColumnVisible = function (key) {
	        this.gridPanel.ensureColumnVisible(key);
	    };
	    // Valid values for position are bottom, middle and top
	    GridApi.prototype.ensureIndexVisible = function (index, position) {
	        this.gridPanel.ensureIndexVisible(index, position);
	    };
	    // Valid values for position are bottom, middle and top
	    GridApi.prototype.ensureNodeVisible = function (comparator, position) {
	        this.gridCore.ensureNodeVisible(comparator, position);
	    };
	    GridApi.prototype.forEachLeafNode = function (callback) {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.log('cannot call forEachNode unless using normal row model');
	        }
	        this.clientSideRowModel.forEachLeafNode(callback);
	    };
	    GridApi.prototype.forEachNode = function (callback) {
	        this.rowModel.forEachNode(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilter = function (callback) {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.log('cannot call forEachNodeAfterFilter unless using normal row model');
	        }
	        this.clientSideRowModel.forEachNodeAfterFilter(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        if (utils.Utils.missing(this.clientSideRowModel)) {
	            console.log('cannot call forEachNodeAfterFilterAndSort unless using normal row model');
	        }
	        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
	    };
	    GridApi.prototype.getFilterApiForColDef = function (colDef) {
	        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
	        return this.getFilterInstance(colDef);
	    };
	    GridApi.prototype.getFilterInstance = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.getFilterComponent(column).resolveNow(null, function (filterComp) { return filterComp; });
	        }
	    };
	    GridApi.prototype.getFilterApi = function (key) {
	        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');
	        return this.getFilterInstance(key);
	    };
	    GridApi.prototype.destroyFilter = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.destroyFilter(column, "filterDestroyed");
	        }
	    };
	    GridApi.prototype.getColumnDef = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return column.getColDef();
	        }
	        else {
	            return null;
	        }
	    };
	    GridApi.prototype.onFilterChanged = function () {
	        this.filterManager.onFilterChanged();
	    };
	    GridApi.prototype.onSortChanged = function () {
	        this.sortController.onSortChanged();
	    };
	    GridApi.prototype.setSortModel = function (sortModel, source) {
	        if (source === void 0) { source = "api"; }
	        this.sortController.setSortModel(sortModel, source);
	    };
	    GridApi.prototype.getSortModel = function () {
	        return this.sortController.getSortModel();
	    };
	    GridApi.prototype.setFilterModel = function (model) {
	        this.filterManager.setFilterModel(model);
	    };
	    GridApi.prototype.getFilterModel = function () {
	        return this.filterManager.getFilterModel();
	    };
	    GridApi.prototype.getFocusedCell = function () {
	        return this.focusedCellController.getFocusedCell();
	    };
	    GridApi.prototype.clearFocusedCell = function () {
	        return this.focusedCellController.clearFocusedCell();
	    };
	    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {
	        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);
	    };
	    GridApi.prototype.setSuppressRowDrag = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
	    };
	    GridApi.prototype.setHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_GRID_AUTO_HEIGHT, gridAutoHeight);
	    };
	    GridApi.prototype.getPreferredWidth = function () {
	        return this.gridCore.getPreferredWidth();
	    };
	    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.showToolPanel = function (show) {
	        this.gridCore.showToolPanel(show);
	    };
	    GridApi.prototype.setSuppressClipboardPaste = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
	    };
	    GridApi.prototype.isToolPanelShowing = function () {
	        return this.gridCore.isToolPanelShowing();
	    };
	    GridApi.prototype.doLayout = function () {
	        this.gridPanel.checkViewportAndScrolls();
	    };
	    GridApi.prototype.resetRowHeights = function () {
	        if (utils.Utils.exists(this.clientSideRowModel)) {
	            this.clientSideRowModel.resetRowHeights();
	        }
	    };
	    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
	    };
	    GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
	    };
	    GridApi.prototype.onRowHeightChanged = function () {
	        if (utils.Utils.exists(this.clientSideRowModel)) {
	            this.clientSideRowModel.onRowHeightChanged();
	        }
	    };
	    GridApi.prototype.getValue = function (colKey, rowNode) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (utils.Utils.missing(column)) {
	            column = this.columnController.getGridColumn(colKey);
	        }
	        if (utils.Utils.missing(column)) {
	            return null;
	        }
	        else {
	            return this.valueService.getValue(column, rowNode);
	        }
	    };
	    GridApi.prototype.addEventListener = function (eventType, listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addEventListener(eventType, listener, async);
	    };
	    GridApi.prototype.addGlobalListener = function (listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addGlobalListener(listener, async);
	    };
	    GridApi.prototype.removeEventListener = function (eventType, listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.removeEventListener(eventType, listener, async);
	    };
	    GridApi.prototype.removeGlobalListener = function (listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.removeGlobalListener(listener, async);
	    };
	    GridApi.prototype.dispatchEvent = function (event) {
	        this.eventService.dispatchEvent(event);
	    };
	    GridApi.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    GridApi.prototype.resetQuickFilter = function () {
	        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });
	    };
	    GridApi.prototype.getRangeSelections = function () {
	        if (this.rangeController) {
	            return this.rangeController.getCellRanges();
	        }
	        else {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	            return null;
	        }
	    };
	    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {
	        return utils.Utils.camelCaseToHumanText(camelCase);
	    };
	    GridApi.prototype.addRangeSelection = function (rangeSelection) {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.addRange(rangeSelection);
	    };
	    GridApi.prototype.clearRangeSelection = function () {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.clearSelection();
	    };
	    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
	    };
	    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRangeToClipboard(includeHeader);
	    };
	    GridApi.prototype.copySelectedRangeDown = function () {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copyRangeDown();
	    };
	    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
	    };
	    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
	    };
	    GridApi.prototype.hidePopupMenu = function () {
	        // hide the context menu if in enterprise
	        if (this.contextMenuFactory) {
	            this.contextMenuFactory.hideActiveMenu();
	        }
	        // and hide the column menu always
	        this.menuFactory.hideActiveMenu();
	    };
	    GridApi.prototype.setPopupParent = function (ePopupParent) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper.GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
	    };
	    GridApi.prototype.tabToNextCell = function () {
	        return this.rowRenderer.tabToNextCell(false);
	    };
	    GridApi.prototype.tabToPreviousCell = function () {
	        return this.rowRenderer.tabToNextCell(true);
	    };
	    GridApi.prototype.getCellRendererInstances = function (params) {
	        if (params === void 0) { params = {}; }
	        return this.rowRenderer.getCellRendererInstances(params);
	    };
	    GridApi.prototype.getCellEditorInstances = function (params) {
	        if (params === void 0) { params = {}; }
	        return this.rowRenderer.getCellEditorInstances(params);
	    };
	    GridApi.prototype.getEditingCells = function () {
	        return this.rowRenderer.getEditingCells();
	    };
	    GridApi.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.rowRenderer.stopEditing(cancel);
	    };
	    GridApi.prototype.startEditingCell = function (params) {
	        var column = this.columnController.getGridColumn(params.colKey);
	        if (!column) {
	            console.warn("ag-Grid: no column found for " + params.colKey);
	            return;
	        }
	        var gridCellDef = {
	            rowIndex: params.rowIndex,
	            floating: params.rowPinned,
	            column: column
	        };
	        var gridCell$$1 = new gridCell.GridCell(gridCellDef);
	        var notPinned = utils.Utils.missing(params.rowPinned);
	        if (notPinned) {
	            this.gridPanel.ensureIndexVisible(params.rowIndex);
	        }
	        this.rowRenderer.startEditingCell(gridCell$$1, params.keyPress, params.charPress);
	    };
	    GridApi.prototype.addAggFunc = function (key, aggFunc) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFunc(key, aggFunc);
	        }
	    };
	    GridApi.prototype.addAggFuncs = function (aggFuncs) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFuncs(aggFuncs);
	        }
	    };
	    GridApi.prototype.clearAggFuncs = function () {
	        if (this.aggFuncService) {
	            this.aggFuncService.clear();
	        }
	    };
	    GridApi.prototype.updateRowData = function (rowDataTransaction) {
	        var res = null;
	        if (this.clientSideRowModel) {
	            res = this.clientSideRowModel.updateRowData(rowDataTransaction);
	        }
	        else if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.updateRowData(rowDataTransaction);
	        }
	        else {
	            console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');
	        }
	        // do change detection for all present cells
	        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            this.rowRenderer.refreshCells();
	        }
	        return res;
	    };
	    GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
	        if (!this.clientSideRowModel) {
	            console.error('ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.');
	            return;
	        }
	        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
	    };
	    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
	    };
	    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');
	        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });
	        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
	    };
	    GridApi.prototype.addItems = function (items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
	    };
	    GridApi.prototype.refreshVirtualPageCache = function () {
	        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfinitePageCache = function () {
	        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.refreshCache();
	        }
	        else {
	            console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    GridApi.prototype.purgeVirtualPageCache = function () {
	        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfinitePageCache();
	    };
	    GridApi.prototype.purgeInfinitePageCache = function () {
	        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfiniteCache();
	    };
	    GridApi.prototype.purgeInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.purgeCache();
	        }
	        else {
	            console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    // DEPRECATED
	    GridApi.prototype.purgeEnterpriseCache = function (route) {
	        console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
	        this.purgeServerSideCache(route);
	    };
	    GridApi.prototype.purgeServerSideCache = function (route) {
	        if (this.serverSideRowModel) {
	            this.serverSideRowModel.purgeCache(route);
	        }
	        else {
	            console.warn("ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.");
	        }
	    };
	    // public removeFromEnterpriseCache(route: string[], items: any[]): void {
	    //     if (this.serverSideRowModel) {
	    //         this.serverSideRowModel.removeFromCache(route, items);
	    //     } else {
	    //         console.warn(`ag-Grid: api.removeFromEnterpriseCache is only available when rowModelType='enterprise'.`);
	    //     }
	    // }
	    //
	    // public addToEnterpriseCache(route: string[], items: any[], index: number): void {
	    //     if (this.serverSideRowModel) {
	    //         this.serverSideRowModel.addToCache(route, items, index);
	    //     } else {
	    //         console.warn(`ag-Grid: api.addToEnterpriseCache is only available when rowModelType='enterprise'.`);
	    //     }
	    // }
	    GridApi.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');
	        return this.getInfiniteRowCount();
	    };
	    GridApi.prototype.getInfiniteRowCount = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getVirtualRowCount();
	        }
	        else {
	            console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.isMaxRowFound = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.isMaxRowFound();
	        }
	        else {
	            console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');
	        this.setInfiniteRowCount(rowCount, maxRowFound);
	    };
	    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);
	        }
	        else {
	            console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.getVirtualPageState = function () {
	        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getInfinitePageState = function () {
	        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getCacheBlockState = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getBlockState();
	        }
	        else if (this.serverSideRowModel) {
	            return this.serverSideRowModel.getBlockState();
	        }
	        else {
	            console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.");
	        }
	    };
	    GridApi.prototype.checkGridSize = function () {
	        this.gridPanel.setBodyAndHeaderHeights();
	    };
	    GridApi.prototype.getFirstRenderedRow = function () {
	        console.log('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');
	        return this.getFirstDisplayedRow();
	    };
	    GridApi.prototype.getFirstDisplayedRow = function () {
	        return this.rowRenderer.getFirstVirtualRenderedRow();
	    };
	    GridApi.prototype.getLastRenderedRow = function () {
	        console.log('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');
	        return this.getLastDisplayedRow();
	    };
	    GridApi.prototype.getLastDisplayedRow = function () {
	        return this.rowRenderer.getLastVirtualRenderedRow();
	    };
	    GridApi.prototype.getDisplayedRowAtIndex = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    GridApi.prototype.getDisplayedRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    GridApi.prototype.paginationIsLastPageFound = function () {
	        return this.paginationProxy.isLastPageFound();
	    };
	    GridApi.prototype.paginationGetPageSize = function () {
	        return this.paginationProxy.getPageSize();
	    };
	    GridApi.prototype.paginationSetPageSize = function (size) {
	        this.gridOptionsWrapper.setProperty('paginationPageSize', size);
	    };
	    GridApi.prototype.paginationGetCurrentPage = function () {
	        return this.paginationProxy.getCurrentPage();
	    };
	    GridApi.prototype.paginationGetTotalPages = function () {
	        return this.paginationProxy.getTotalPages();
	    };
	    GridApi.prototype.paginationGetRowCount = function () {
	        return this.paginationProxy.getTotalRowCount();
	    };
	    GridApi.prototype.paginationGoToNextPage = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    GridApi.prototype.paginationGoToPreviousPage = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    GridApi.prototype.paginationGoToFirstPage = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    GridApi.prototype.paginationGoToLastPage = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    GridApi.prototype.paginationGoToPage = function (page) {
	        this.paginationProxy.goToPage(page);
	    };
	    __decorate([
	        context.Autowired('immutableService'),
	        __metadata("design:type", immutableService.ImmutableService)
	    ], GridApi.prototype, "immutableService", void 0);
	    __decorate([
	        context.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator.CsvCreator)
	    ], GridApi.prototype, "csvCreator", void 0);
	    __decorate([
	        context.Optional('excelCreator'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "excelCreator", void 0);
	    __decorate([
	        context.Autowired('gridCore'),
	        __metadata("design:type", gridCore.GridCore)
	    ], GridApi.prototype, "gridCore", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], GridApi.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], GridApi.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GridApi.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], GridApi.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], GridApi.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], GridApi.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService.AlignedGridsService)
	    ], GridApi.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], GridApi.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel.PinnedRowModel)
	    ], GridApi.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], GridApi.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], GridApi.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], GridApi.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController.FocusedCellController)
	    ], GridApi.prototype, "focusedCellController", void 0);
	    __decorate([
	        context.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rangeController", void 0);
	    __decorate([
	        context.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "clipboardService", void 0);
	    __decorate([
	        context.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "aggFuncService", void 0);
	    __decorate([
	        context.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "menuFactory", void 0);
	    __decorate([
	        context.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory.CellRendererFactory)
	    ], GridApi.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory.CellEditorFactory)
	    ], GridApi.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context.Autowired('valueCache'),
	        __metadata("design:type", valueCache.ValueCache)
	    ], GridApi.prototype, "valueCache", void 0);
	    __decorate([
	        context.Optional('toolPanelComp'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "toolPanelComp", void 0);
	    __decorate([
	        context.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService.AnimationFrameService)
	    ], GridApi.prototype, "animationFrameService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridApi.prototype, "init", null);
	    GridApi = __decorate([
	        context.Bean('gridApi')
	    ], GridApi);
	    return GridApi;
	}());
	exports.GridApi = GridApi;
	});

	unwrapExports(gridApi);
	var gridApi_1 = gridApi.GridApi;

	var colDefUtil = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var ColDefUtil = (function () {
	    function ColDefUtil() {
	    }
	    ColDefUtil.STRING_PROPERTIES = [
	        'headerName',
	        'columnGroupShow',
	        'headerClass',
	        'toolPanelClass',
	        'headerValueGetter',
	        'pivotKeys',
	        'groupId',
	        'colId',
	        'sort',
	        'field',
	        'type',
	        'tooltipField',
	        'headerTooltip',
	        'cellClass',
	        'showRowGroup',
	        'template',
	        'templateUrl',
	        'filter',
	        'aggFunc',
	        'cellRenderer',
	        'cellEditor',
	        'pinned'
	    ];
	    ColDefUtil.OBJECT_PROPERTIES = [
	        'headerGroupComponent',
	        'headerGroupComponentFramework',
	        'headerGroupComponentParams',
	        'cellStyle',
	        'cellRendererParams',
	        'cellEditorFramework',
	        'cellEditorParams',
	        'pinnedRowCellRendererFramework',
	        'pinnedRowCellRendererParams',
	        'filterFramework',
	        'filterParams',
	        'pivotValueColumn',
	        'headerComponent',
	        'headerComponentFramework',
	        'headerComponentParams',
	        'floatingFilterComponent',
	        'floatingFilterComponentParams',
	        'floatingFilterComponentFramework',
	        'refData'
	    ];
	    ColDefUtil.ARRAY_PROPERTIES = [
	        'children',
	        'sortingOrder',
	        'allowedAggFuncs',
	        'menuTabs',
	        'pivotTotalColumnIds',
	        'cellClassRules',
	        'icons'
	    ];
	    ColDefUtil.NUMBER_PROPERTIES = [
	        'sortedAt',
	        'width',
	        'minWidth',
	        'maxWidth',
	        'rowGroupIndex',
	        'pivotIndex'
	    ];
	    ColDefUtil.BOOLEAN_PROPERTIES = [
	        'suppressCellFlash',
	        'suppressToolPanel',
	        'openByDefault',
	        'marryChildren',
	        'hide',
	        'rowGroup',
	        'pivot',
	        'checkboxSelection',
	        'headerCheckboxSelection',
	        'headerCheckboxSelectionFilteredOnly',
	        'suppressMenu',
	        'suppressSorting',
	        'suppressMovable',
	        'suppressFilter',
	        'lockPosition',
	        'lockVisible',
	        'lockPinned',
	        'unSortIcon',
	        'suppressSizeToFit',
	        'suppressResize',
	        'suppressAutoSize',
	        'enableRowGroup',
	        'enablePivot',
	        'enableValue',
	        'editable',
	        'suppressPaste',
	        'suppressNavigable',
	        'enableCellChangeFlash',
	        'rowDrag',
	        'autoHeight'
	    ];
	    ColDefUtil.FUNCTION_PROPERTIES = [
	        'valueGetter',
	        'valueSetter',
	        'filterValueGetter',
	        'keyCreator',
	        'cellRenderer',
	        'cellRendererFramework',
	        'pinnedRowCellRenderer',
	        'valueFormatter',
	        'pinnedRowValueFormatter',
	        'valueParser',
	        'comparator',
	        'equals',
	        'pivotComparator',
	        'suppressKeyboardEvent',
	        'colSpan',
	        'rowSpan',
	        'getQuickFilterText',
	        'newValueHandler',
	        'onCellValueChanged',
	        'onCellClicked',
	        'onCellDoubleClicked',
	        'onCellContextMenu',
	        'tooltip',
	        'cellRendererSelector',
	        'cellEditorSelector'
	    ];
	    ColDefUtil.ALL_PROPERTIES = ColDefUtil.ARRAY_PROPERTIES
	        .concat(ColDefUtil.OBJECT_PROPERTIES)
	        .concat(ColDefUtil.STRING_PROPERTIES)
	        .concat(ColDefUtil.NUMBER_PROPERTIES)
	        .concat(ColDefUtil.FUNCTION_PROPERTIES)
	        .concat(ColDefUtil.BOOLEAN_PROPERTIES);
	    // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
	    // properties to coldefs, gridOptions etc
	    ColDefUtil.FRAMEWORK_PROPERTIES = ['__ob__', '__metadata__', 'mappedColumnProperties', 'hasChildColumns',
	        'toColDef', 'createColDefFromGridColumn'];
	    return ColDefUtil;
	}());
	exports.ColDefUtil = ColDefUtil;
	});

	unwrapExports(colDefUtil);
	var colDefUtil_1 = colDefUtil.ColDefUtil;

	var gridOptionsWrapper = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });













	var DEFAULT_ROW_HEIGHT = 25;
	var DEFAULT_DETAIL_ROW_HEIGHT = 300;
	var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
	var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
	function isTrue(value) {
	    return value === true || value === 'true';
	}
	function zeroOrGreater(value, defaultValue) {
	    if (value >= 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	function oneOrGreater(value, defaultValue) {
	    if (value > 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	var GridOptionsWrapper = (function () {
	    function GridOptionsWrapper() {
	        this.propertyEventService = new eventService.EventService();
	        this.domDataKey = '__AG_' + Math.random().toString();
	        this.layoutElements = [];
	    }
	    GridOptionsWrapper_1 = GridOptionsWrapper;
	    GridOptionsWrapper.prototype.agWire = function (gridApi$$1, columnApi$$1) {
	        this.gridOptions.api = gridApi$$1;
	        this.gridOptions.columnApi = columnApi$$1;
	        this.checkForDeprecated();
	    };
	    GridOptionsWrapper.prototype.destroy = function () {
	        // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
	        // remove the references in case the user keeps the grid options, we want the rest
	        // of the grid to be picked up by the garbage collector
	        this.gridOptions.api = null;
	        this.gridOptions.columnApi = null;
	    };
	    GridOptionsWrapper.prototype.init = function () {
	        if (!(this.gridOptions.suppressPropertyNamesCheck === true)) {
	            this.checkGridOptionsProperties();
	            this.checkColumnDefProperties();
	        }
	        var async = this.useAsyncEvents();
	        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
	        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
	            console.warn('ag-Grid: groupSelectsChildren does not work wth suppressParentsInRowNodes, this selection method needs the part in rowNode to work');
	        }
	        if (this.isGroupSelectsChildren()) {
	            if (!this.isRowSelectionMulti()) {
	                console.warn("ag-Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
	            }
	            if (this.isRowModelServerSide()) {
	                console.warn('ag-Grid: group selects children is NOT support for Server Side Row Model. ' +
	                    'This is because the rows are lazy loaded, so selecting a group is not possible as' +
	                    'the grid has no way of knowing what the children are.');
	            }
	        }
	        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
	            console.warn('ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don\'t ask us how to us these together on our support forum either you will get the same answer!');
	        }
	        this.addEventListener(GridOptionsWrapper_1.PROP_GRID_AUTO_HEIGHT, this.updateLayoutClasses.bind(this));
	    };
	    GridOptionsWrapper.prototype.checkColumnDefProperties = function () {
	        var _this = this;
	        if (this.gridOptions.columnDefs == null)
	            return;
	        this.gridOptions.columnDefs.forEach(function (colDef) {
	            var userProperties = Object.getOwnPropertyNames(colDef);
	            var validProperties = colDefUtil.ColDefUtil.ALL_PROPERTIES.concat(colDefUtil.ColDefUtil.FRAMEWORK_PROPERTIES);
	            _this.checkProperties(userProperties, validProperties, validProperties, 'colDef', 'https://www.ag-grid.com/javascript-grid-column-properties/');
	        });
	    };
	    GridOptionsWrapper.prototype.checkGridOptionsProperties = function () {
	        var userProperties = Object.getOwnPropertyNames(this.gridOptions);
	        var validProperties = propertyKeys.PropertyKeys.ALL_PROPERTIES.concat(propertyKeys.PropertyKeys.FRAMEWORK_PROPERTIES);
	        Object.keys(eventKeys.Events).forEach(function (it) { return validProperties.push(componentUtil.ComponentUtil.getCallbackForEvent(eventKeys.Events[it])); });
	        var validPropertiesAndExceptions = validProperties.concat('api', 'columnApi');
	        this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, 'gridOptions', 'https://www.ag-grid.com/javascript-grid-properties/');
	    };
	    GridOptionsWrapper.prototype.checkProperties = function (userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
	        var invalidProperties = utils.Utils.fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
	        var invalidPropertyKeys = Object.keys(invalidProperties);
	        invalidPropertyKeys.forEach(function (invalidPropertyKey) {
	            var fuzzySuggestions = invalidProperties[invalidPropertyKey];
	            console.warn("ag-grid: invalid " + containerName + " property '" + invalidPropertyKey + "' did you mean any of these: " + fuzzySuggestions.slice(0, 8).join(","));
	        });
	        if (invalidPropertyKeys.length > 0) {
	            console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
	        }
	    };
	    // returns the dom data, or undefined if not found
	    GridOptionsWrapper.prototype.getDomData = function (element, key) {
	        var domData = element[this.domDataKey];
	        if (domData) {
	            return domData[key];
	        }
	        else {
	            return undefined;
	        }
	    };
	    GridOptionsWrapper.prototype.setDomData = function (element, key, value) {
	        var domData = element[this.domDataKey];
	        if (utils.Utils.missing(domData)) {
	            domData = {};
	            element[this.domDataKey] = domData;
	        }
	        domData[key] = value;
	    };
	    GridOptionsWrapper.prototype.isEnterprise = function () { return this.enterprise; };
	    GridOptionsWrapper.prototype.isRowSelection = function () { return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple"; };
	    GridOptionsWrapper.prototype.isRowDeselection = function () { return isTrue(this.gridOptions.rowDeselection); };
	    GridOptionsWrapper.prototype.isRowSelectionMulti = function () { return this.gridOptions.rowSelection === 'multiple'; };
	    GridOptionsWrapper.prototype.isRowMultiSelectWithClick = function () { return isTrue(this.gridOptions.rowMultiSelectWithClick); };
	    GridOptionsWrapper.prototype.getContext = function () { return this.gridOptions.context; };
	    GridOptionsWrapper.prototype.isPivotMode = function () { return isTrue(this.gridOptions.pivotMode); };
	    GridOptionsWrapper.prototype.isPivotTotals = function () { return isTrue(this.gridOptions.pivotTotals); };
	    GridOptionsWrapper.prototype.getPivotColumnGroupTotals = function () { return this.gridOptions.pivotColumnGroupTotals; };
	    GridOptionsWrapper.prototype.getPivotRowTotals = function () { return this.gridOptions.pivotRowTotals; };
	    GridOptionsWrapper.prototype.isRowModelInfinite = function () { return this.gridOptions.rowModelType === constants.Constants.ROW_MODEL_TYPE_INFINITE; };
	    GridOptionsWrapper.prototype.isRowModelViewport = function () { return this.gridOptions.rowModelType === constants.Constants.ROW_MODEL_TYPE_VIEWPORT; };
	    GridOptionsWrapper.prototype.isRowModelServerSide = function () { return this.gridOptions.rowModelType === constants.Constants.ROW_MODEL_TYPE_SERVER_SIDE; };
	    GridOptionsWrapper.prototype.isRowModelDefault = function () {
	        return utils.Utils.missing(this.gridOptions.rowModelType) ||
	            this.gridOptions.rowModelType === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE ||
	            this.gridOptions.rowModelType === constants.Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL;
	    };
	    GridOptionsWrapper.prototype.isFullRowEdit = function () { return this.gridOptions.editType === 'fullRow'; };
	    GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function () { return isTrue(this.gridOptions.suppressFocusAfterRefresh); };
	    GridOptionsWrapper.prototype.isShowToolPanel = function () { return isTrue(this.gridOptions.showToolPanel); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressValues = function () { return isTrue(this.gridOptions.toolPanelSuppressValues); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivots = function () {
	        // we don't allow pivots when doing tree data
	        return isTrue(this.gridOptions.toolPanelSuppressPivots) || this.isTreeData();
	    };
	    GridOptionsWrapper.prototype.isToolPanelSuppressRowGroups = function () {
	        // we don't allow row grouping when doing tree data
	        return isTrue(this.gridOptions.toolPanelSuppressRowGroups) || this.isTreeData();
	    };
	    GridOptionsWrapper.prototype.isToolPanelSuppressSideButtons = function () { return isTrue(this.gridOptions.toolPanelSuppressSideButtons); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivotMode = function () { return isTrue(this.gridOptions.toolPanelSuppressPivotMode) || this.isTreeData(); };
	    GridOptionsWrapper.prototype.isContractColumnSelection = function () { return isTrue(this.gridOptions.contractColumnSelection); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressColumnFilter = function () { return isTrue(this.gridOptions.toolPanelSuppressColumnFilter); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressColumnSelectAll = function () { return isTrue(this.gridOptions.toolPanelSuppressColumnSelectAll); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressColumnExpandAll = function () { return isTrue(this.gridOptions.toolPanelSuppressColumnExpandAll); };
	    GridOptionsWrapper.prototype.isSuppressTouch = function () { return isTrue(this.gridOptions.suppressTouch); };
	    GridOptionsWrapper.prototype.isSuppressRowTransform = function () { return isTrue(this.gridOptions.suppressRowTransform); };
	    GridOptionsWrapper.prototype.useAsyncEvents = function () { return !isTrue(this.gridOptions.suppressAsyncEvents); };
	    GridOptionsWrapper.prototype.isEnableCellChangeFlash = function () { return isTrue(this.gridOptions.enableCellChangeFlash); };
	    GridOptionsWrapper.prototype.isGroupSelectsChildren = function () {
	        var result = isTrue(this.gridOptions.groupSelectsChildren);
	        if (result && this.isTreeData()) {
	            console.warn('ag-Grid: groupSelectsChildren does not work with tree data');
	            return false;
	        }
	        else {
	            return result;
	        }
	    };
	    GridOptionsWrapper.prototype.isSuppressRowHoverHighlight = function () { return isTrue(this.gridOptions.suppressRowHoverHighlight); };
	    GridOptionsWrapper.prototype.isGroupSelectsFiltered = function () { return isTrue(this.gridOptions.groupSelectsFiltered); };
	    GridOptionsWrapper.prototype.isGroupHideOpenParents = function () { return isTrue(this.gridOptions.groupHideOpenParents); };
	    // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work
	    GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function () { return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents); };
	    GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function () { return isTrue(this.gridOptions.groupRemoveSingleChildren); };
	    GridOptionsWrapper.prototype.isGroupRemoveLowestSingleChildren = function () { return isTrue(this.gridOptions.groupRemoveLowestSingleChildren); };
	    GridOptionsWrapper.prototype.isGroupIncludeFooter = function () { return isTrue(this.gridOptions.groupIncludeFooter); };
	    GridOptionsWrapper.prototype.isGroupIncludeTotalFooter = function () { return isTrue(this.gridOptions.groupIncludeTotalFooter); };
	    GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () { return isTrue(this.gridOptions.groupSuppressBlankHeader); };
	    GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () { return isTrue(this.gridOptions.suppressRowClickSelection); };
	    GridOptionsWrapper.prototype.isSuppressCellSelection = function () { return isTrue(this.gridOptions.suppressCellSelection); };
	    GridOptionsWrapper.prototype.isSuppressMultiSort = function () { return isTrue(this.gridOptions.suppressMultiSort); };
	    GridOptionsWrapper.prototype.isMultiSortKeyCtrl = function () { return this.gridOptions.multiSortKey === 'ctrl'; };
	    GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () { return isTrue(this.gridOptions.groupSuppressAutoColumn); };
	    GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function () { return isTrue(this.gridOptions.suppressDragLeaveHidesColumns); };
	    GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function () { return isTrue(this.gridOptions.suppressScrollOnNewData); };
	    GridOptionsWrapper.prototype.isRowDragManaged = function () { return isTrue(this.gridOptions.rowDragManaged); };
	    GridOptionsWrapper.prototype.isSuppressRowDrag = function () { return isTrue(this.gridOptions.suppressRowDrag); };
	    GridOptionsWrapper.prototype.isGridAutoHeight = function () { return isTrue(this.gridOptions.gridAutoHeight); };
	    GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () { return isTrue(this.gridOptions.suppressHorizontalScroll); };
	    GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () { return isTrue(this.gridOptions.suppressLoadingOverlay); };
	    GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () { return isTrue(this.gridOptions.suppressNoRowsOverlay); };
	    GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function () { return isTrue(this.gridOptions.suppressFieldDotNotation); };
	    GridOptionsWrapper.prototype.getPinnedTopRowData = function () { return this.gridOptions.pinnedTopRowData; };
	    GridOptionsWrapper.prototype.getPinnedBottomRowData = function () { return this.gridOptions.pinnedBottomRowData; };
	    GridOptionsWrapper.prototype.isFunctionsPassive = function () { return isTrue(this.gridOptions.functionsPassive); };
	    GridOptionsWrapper.prototype.isSuppressTabbing = function () { return isTrue(this.gridOptions.suppressTabbing); };
	    GridOptionsWrapper.prototype.isSuppressChangeDetection = function () { return isTrue(this.gridOptions.suppressChangeDetection); };
	    GridOptionsWrapper.prototype.isSuppressAnimationFrame = function () { return isTrue(this.gridOptions.suppressAnimationFrame); };
	    GridOptionsWrapper.prototype.getQuickFilterText = function () { return this.gridOptions.quickFilterText; };
	    GridOptionsWrapper.prototype.isCacheQuickFilter = function () { return isTrue(this.gridOptions.cacheQuickFilter); };
	    GridOptionsWrapper.prototype.isUnSortIcon = function () { return isTrue(this.gridOptions.unSortIcon); };
	    GridOptionsWrapper.prototype.isSuppressMenuHide = function () { return isTrue(this.gridOptions.suppressMenuHide); };
	    GridOptionsWrapper.prototype.isEnterMovesDownAfterEdit = function () { return isTrue(this.gridOptions.enterMovesDownAfterEdit); };
	    GridOptionsWrapper.prototype.isEnterMovesDown = function () { return isTrue(this.gridOptions.enterMovesDown); };
	    GridOptionsWrapper.prototype.getRowStyle = function () { return this.gridOptions.rowStyle; };
	    GridOptionsWrapper.prototype.getRowClass = function () { return this.gridOptions.rowClass; };
	    GridOptionsWrapper.prototype.getRowStyleFunc = function () { return this.gridOptions.getRowStyle; };
	    GridOptionsWrapper.prototype.getRowClassFunc = function () { return this.gridOptions.getRowClass; };
	    GridOptionsWrapper.prototype.rowClassRules = function () { return this.gridOptions.rowClassRules; };
	    GridOptionsWrapper.prototype.getPopupParent = function () { return this.gridOptions.popupParent; };
	    GridOptionsWrapper.prototype.getPostProcessPopupFunc = function () { return this.gridOptions.postProcessPopup; };
	    GridOptionsWrapper.prototype.getDoesDataFlowerFunc = function () { return this.gridOptions.doesDataFlower; };
	    GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function () { return this.gridOptions.paginationNumberFormatter; };
	    GridOptionsWrapper.prototype.getChildCountFunc = function () { return this.gridOptions.getChildCount; };
	    GridOptionsWrapper.prototype.getDefaultGroupSortComparator = function () { return this.gridOptions.defaultGroupSortComparator; };
	    GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function () { return this.gridOptions.isFullWidthCell; };
	    GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function () { return this.gridOptions.fullWidthCellRendererParams; };
	    GridOptionsWrapper.prototype.isEmbedFullWidthRows = function () { return isTrue(this.gridOptions.embedFullWidthRows); };
	    GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () { return this.gridOptions.getBusinessKeyForNode; };
	    GridOptionsWrapper.prototype.getApi = function () { return this.gridOptions.api; };
	    GridOptionsWrapper.prototype.getColumnApi = function () { return this.gridOptions.columnApi; };
	    GridOptionsWrapper.prototype.isDeltaRowDataMode = function () { return isTrue(this.gridOptions.deltaRowDataMode); };
	    GridOptionsWrapper.prototype.isEnsureDomOrder = function () { return isTrue(this.gridOptions.ensureDomOrder); };
	    GridOptionsWrapper.prototype.isEnableColResize = function () { return isTrue(this.gridOptions.enableColResize); };
	    GridOptionsWrapper.prototype.getColResizeDefault = function () { return this.gridOptions.colResizeDefault; };
	    GridOptionsWrapper.prototype.isSingleClickEdit = function () { return isTrue(this.gridOptions.singleClickEdit); };
	    GridOptionsWrapper.prototype.isSuppressClickEdit = function () { return isTrue(this.gridOptions.suppressClickEdit); };
	    GridOptionsWrapper.prototype.isStopEditingWhenGridLosesFocus = function () { return isTrue(this.gridOptions.stopEditingWhenGridLosesFocus); };
	    GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () { return this.gridOptions.groupDefaultExpanded; };
	    GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function () { return this.gridOptions.maxConcurrentDatasourceRequests; };
	    GridOptionsWrapper.prototype.getMaxBlocksInCache = function () { return this.gridOptions.maxBlocksInCache; };
	    GridOptionsWrapper.prototype.getCacheOverflowSize = function () { return this.gridOptions.cacheOverflowSize; };
	    GridOptionsWrapper.prototype.getPaginationPageSize = function () { return this.gridOptions.paginationPageSize; };
	    GridOptionsWrapper.prototype.getCacheBlockSize = function () { return this.gridOptions.cacheBlockSize; };
	    GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function () { return this.gridOptions.infiniteInitialRowCount; };
	    GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function () { return isTrue(this.gridOptions.purgeClosedRowNodes); };
	    GridOptionsWrapper.prototype.isSuppressPaginationPanel = function () { return isTrue(this.gridOptions.suppressPaginationPanel); };
	    GridOptionsWrapper.prototype.getRowData = function () { return this.gridOptions.rowData; };
	    GridOptionsWrapper.prototype.isGroupUseEntireRow = function () { return isTrue(this.gridOptions.groupUseEntireRow); };
	    GridOptionsWrapper.prototype.isEnableRtl = function () { return isTrue(this.gridOptions.enableRtl); };
	    GridOptionsWrapper.prototype.getAutoGroupColumnDef = function () { return this.gridOptions.autoGroupColumnDef; };
	    GridOptionsWrapper.prototype.isGroupSuppressRow = function () { return isTrue(this.gridOptions.groupSuppressRow); };
	    GridOptionsWrapper.prototype.getRowGroupPanelShow = function () { return this.gridOptions.rowGroupPanelShow; };
	    GridOptionsWrapper.prototype.getPivotPanelShow = function () { return this.gridOptions.pivotPanelShow; };
	    GridOptionsWrapper.prototype.isAngularCompileRows = function () { return isTrue(this.gridOptions.angularCompileRows); };
	    GridOptionsWrapper.prototype.isAngularCompileFilters = function () { return isTrue(this.gridOptions.angularCompileFilters); };
	    GridOptionsWrapper.prototype.isAngularCompileHeaders = function () { return isTrue(this.gridOptions.angularCompileHeaders); };
	    GridOptionsWrapper.prototype.isDebug = function () { return isTrue(this.gridOptions.debug); };
	    GridOptionsWrapper.prototype.getColumnDefs = function () { return this.gridOptions.columnDefs; };
	    GridOptionsWrapper.prototype.getColumnTypes = function () { return this.gridOptions.columnTypes; };
	    GridOptionsWrapper.prototype.getDatasource = function () { return this.gridOptions.datasource; };
	    GridOptionsWrapper.prototype.getViewportDatasource = function () { return this.gridOptions.viewportDatasource; };
	    GridOptionsWrapper.prototype.getServerSideDatasource = function () { return this.gridOptions.serverSideDatasource; };
	    GridOptionsWrapper.prototype.isEnableSorting = function () { return isTrue(this.gridOptions.enableSorting) || isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isAccentedSort = function () { return isTrue(this.gridOptions.accentedSort); };
	    GridOptionsWrapper.prototype.isEnableCellExpressions = function () { return isTrue(this.gridOptions.enableCellExpressions); };
	    GridOptionsWrapper.prototype.isEnableGroupEdit = function () { return isTrue(this.gridOptions.enableGroupEdit); };
	    GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function () { return isTrue(this.gridOptions.suppressMiddleClickScrolls); };
	    GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function () { return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel); };
	    GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function () { return isTrue(this.gridOptions.suppressColumnVirtualisation); };
	    GridOptionsWrapper.prototype.isSuppressContextMenu = function () { return isTrue(this.gridOptions.suppressContextMenu); };
	    GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function () { return isTrue(this.gridOptions.allowContextMenuWithControlKey); };
	    GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function () { return isTrue(this.gridOptions.suppressCopyRowsToClipboard); };
	    GridOptionsWrapper.prototype.isSuppressClipboardPaste = function () { return isTrue(this.gridOptions.suppressClipboardPaste); };
	    GridOptionsWrapper.prototype.isEnableFilter = function () { return isTrue(this.gridOptions.enableFilter) || isTrue(this.gridOptions.enableServerSideFilter); };
	    GridOptionsWrapper.prototype.isPagination = function () { return isTrue(this.gridOptions.pagination); };
	    GridOptionsWrapper.prototype.isSuppressEnterpriseResetOnNewColumns = function () { return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns); };
	    GridOptionsWrapper.prototype.getProcessDataFromClipboardFunc = function () { return this.gridOptions.processDataFromClipboard; };
	    GridOptionsWrapper.prototype.getBatchUpdateWaitMillis = function () {
	        return utils.Utils.exists(this.gridOptions.batchUpdateWaitMillis) ? this.gridOptions.batchUpdateWaitMillis : constants.Constants.BATCH_WAIT_MILLIS;
	    };
	    // these are deprecated, should remove them when we take out server side pagination
	    GridOptionsWrapper.prototype.isEnableServerSideFilter = function () { return this.gridOptions.enableServerSideFilter; };
	    GridOptionsWrapper.prototype.isEnableServerSideSorting = function () { return isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isSuppressMovableColumns = function () { return isTrue(this.gridOptions.suppressMovableColumns); };
	    GridOptionsWrapper.prototype.isAnimateRows = function () {
	        // never allow animating if enforcing the row order
	        if (this.isEnsureDomOrder()) {
	            return false;
	        }
	        return isTrue(this.gridOptions.animateRows);
	    };
	    GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function () { return isTrue(this.gridOptions.suppressColumnMoveAnimation); };
	    GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function () { return isTrue(this.gridOptions.suppressAggFuncInHeader); };
	    GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function () { return isTrue(this.gridOptions.suppressAggAtRootLevel); };
	    GridOptionsWrapper.prototype.isEnableRangeSelection = function () { return isTrue(this.gridOptions.enableRangeSelection); };
	    GridOptionsWrapper.prototype.isSuppressMultiRangeSelection = function () { return isTrue(this.gridOptions.suppressMultiRangeSelection); };
	    GridOptionsWrapper.prototype.isPaginationAutoPageSize = function () { return isTrue(this.gridOptions.paginationAutoPageSize); };
	    GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function () { return isTrue(this.gridOptions.rememberGroupStateWhenNewData); };
	    GridOptionsWrapper.prototype.getIcons = function () { return this.gridOptions.icons; };
	    GridOptionsWrapper.prototype.getAggFuncs = function () { return this.gridOptions.aggFuncs; };
	    GridOptionsWrapper.prototype.getSortingOrder = function () { return this.gridOptions.sortingOrder; };
	    GridOptionsWrapper.prototype.getAlignedGrids = function () { return this.gridOptions.alignedGrids; };
	    GridOptionsWrapper.prototype.isMasterDetail = function () {
	        var _this = this;
	        var usingMasterDetail = isTrue(this.gridOptions.masterDetail);
	        utils.Utils.doOnce(function () {
	            if (usingMasterDetail && !_this.enterprise) {
	                console.warn('ag-grid: Master Detail is an Enterprise feature of ag-Grid.');
	            }
	        }, 'MasterDetailEnterpriseCheck');
	        return usingMasterDetail && this.enterprise;
	    };
	    GridOptionsWrapper.prototype.getIsRowMasterFunc = function () { return this.gridOptions.isRowMaster; };
	    GridOptionsWrapper.prototype.getIsRowSelectableFunc = function () { return this.gridOptions.isRowSelectable; };
	    GridOptionsWrapper.prototype.getGroupRowRendererParams = function () { return this.gridOptions.groupRowRendererParams; };
	    GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () { return this.gridOptions.overlayLoadingTemplate; };
	    GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () { return this.gridOptions.overlayNoRowsTemplate; };
	    GridOptionsWrapper.prototype.isSuppressAutoSize = function () { return isTrue(this.gridOptions.suppressAutoSize); };
	    GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () { return isTrue(this.gridOptions.suppressParentsInRowNodes); };
	    GridOptionsWrapper.prototype.isEnableStatusBar = function () { return isTrue(this.gridOptions.enableStatusBar); };
	    GridOptionsWrapper.prototype.isAlwaysShowStatusBar = function () { return isTrue(this.gridOptions.alwaysShowStatusBar); };
	    GridOptionsWrapper.prototype.isFunctionsReadOnly = function () { return isTrue(this.gridOptions.functionsReadOnly); };
	    GridOptionsWrapper.prototype.isFloatingFilter = function () { return this.gridOptions.floatingFilter; };
	    GridOptionsWrapper.prototype.isEnableOldSetFilterModel = function () { return isTrue(this.gridOptions.enableOldSetFilterModel); };
	    // public isFloatingFilter(): boolean { return true; }
	    GridOptionsWrapper.prototype.getDefaultColDef = function () { return this.gridOptions.defaultColDef; };
	    GridOptionsWrapper.prototype.getDefaultColGroupDef = function () { return this.gridOptions.defaultColGroupDef; };
	    GridOptionsWrapper.prototype.getDefaultExportParams = function () { return this.gridOptions.defaultExportParams; };
	    GridOptionsWrapper.prototype.isSuppressCsvExport = function () { return isTrue(this.gridOptions.suppressCsvExport); };
	    GridOptionsWrapper.prototype.isSuppressExcelExport = function () { return isTrue(this.gridOptions.suppressExcelExport); };
	    GridOptionsWrapper.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function () { return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup); };
	    GridOptionsWrapper.prototype.getNodeChildDetailsFunc = function () { return this.gridOptions.getNodeChildDetails; };
	    GridOptionsWrapper.prototype.getDataPathFunc = function () { return this.gridOptions.getDataPath; };
	    // public getIsGroupFunc(): ((dataItem: any) => boolean) { return this.gridOptions.isGroup }
	    GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function () { return this.gridOptions.groupRowAggNodes; };
	    GridOptionsWrapper.prototype.getContextMenuItemsFunc = function () { return this.gridOptions.getContextMenuItems; };
	    GridOptionsWrapper.prototype.getMainMenuItemsFunc = function () { return this.gridOptions.getMainMenuItems; };
	    GridOptionsWrapper.prototype.getRowNodeIdFunc = function () { return this.gridOptions.getRowNodeId; };
	    GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function () { return this.gridOptions.navigateToNextCell; };
	    GridOptionsWrapper.prototype.getTabToNextCellFunc = function () { return this.gridOptions.tabToNextCell; };
	    GridOptionsWrapper.prototype.isTreeData = function () { return isTrue(this.gridOptions.treeData); };
	    GridOptionsWrapper.prototype.isValueCache = function () { return isTrue(this.gridOptions.valueCache); };
	    GridOptionsWrapper.prototype.isValueCacheNeverExpires = function () { return isTrue(this.gridOptions.valueCacheNeverExpires); };
	    GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function () { return isTrue(this.gridOptions.aggregateOnlyChangedColumns); };
	    GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function () { return this.gridOptions.processSecondaryColDef; };
	    GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function () { return this.gridOptions.processSecondaryColGroupDef; };
	    GridOptionsWrapper.prototype.getSendToClipboardFunc = function () { return this.gridOptions.sendToClipboard; };
	    GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function () { return this.gridOptions.processRowPostCreate; };
	    GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function () { return this.gridOptions.processCellForClipboard; };
	    GridOptionsWrapper.prototype.getProcessHeaderForClipboardFunc = function () { return this.gridOptions.processHeaderForClipboard; };
	    GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function () { return this.gridOptions.processCellFromClipboard; };
	    GridOptionsWrapper.prototype.getViewportRowModelPageSize = function () { return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE); };
	    GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function () { return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE); };
	    // public getCellRenderers(): {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} { return this.gridOptions.cellRenderers; }
	    // public getCellEditors(): {[key: string]: {new(): ICellEditor}} { return this.gridOptions.cellEditors; }
	    GridOptionsWrapper.prototype.isServerSideSortingAlwaysResets = function () { return isTrue(this.gridOptions.serverSideSortingAlwaysResets); };
	    GridOptionsWrapper.prototype.getPostSortFunc = function () { return this.gridOptions.postSort; };
	    GridOptionsWrapper.prototype.getClipboardDeliminator = function () {
	        return utils.Utils.exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : '\t';
	    };
	    GridOptionsWrapper.prototype.setProperty = function (key, value) {
	        var gridOptionsNoType = this.gridOptions;
	        var previousValue = gridOptionsNoType[key];
	        if (previousValue !== value) {
	            gridOptionsNoType[key] = value;
	            var event_1 = {
	                type: key,
	                currentValue: value,
	                previousValue: previousValue
	            };
	            this.propertyEventService.dispatchEvent(event_1);
	        }
	    };
	    // this logic is repeated in lots of places. any element that had different CSS
	    // dependent on the layout needs to have the layout class added ot it.
	    GridOptionsWrapper.prototype.addLayoutElement = function (element) {
	        this.layoutElements.push(element);
	        this.updateLayoutClasses();
	    };
	    GridOptionsWrapper.prototype.updateLayoutClasses = function () {
	        var autoHeight = this.isGridAutoHeight();
	        this.layoutElements.forEach(function (e) {
	            utils.Utils.addOrRemoveCssClass(e, 'ag-layout-auto-height', autoHeight);
	            utils.Utils.addOrRemoveCssClass(e, 'ag-layout-normal', !autoHeight);
	        });
	    };
	    GridOptionsWrapper.prototype.addEventListener = function (key, listener) {
	        GridOptionsWrapper_1.checkEventDeprecation(key);
	        this.propertyEventService.addEventListener(key, listener);
	    };
	    GridOptionsWrapper.checkEventDeprecation = function (eventName) {
	        if (eventName === 'floatingRowDataChanged') {
	            console.warn('ag-Grid: floatingRowDataChanged is now called pinnedRowDataChanged');
	        }
	    };
	    GridOptionsWrapper.prototype.removeEventListener = function (key, listener) {
	        this.propertyEventService.removeEventListener(key, listener);
	    };
	    GridOptionsWrapper.prototype.getAutoSizePadding = function () {
	        return this.gridOptions.autoSizePadding > 0 ? this.gridOptions.autoSizePadding : 20;
	    };
	    // properties
	    GridOptionsWrapper.prototype.getHeaderHeight = function () {
	        if (typeof this.gridOptions.headerHeight === 'number') {
	            return this.gridOptions.headerHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 'headerHeight');
	        }
	    };
	    GridOptionsWrapper.prototype.getFloatingFiltersHeight = function () {
	        if (typeof this.gridOptions.floatingFiltersHeight === 'number') {
	            return this.gridOptions.floatingFiltersHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 'headerHeight');
	        }
	    };
	    GridOptionsWrapper.prototype.getGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.groupHeaderHeight === 'number') {
	            return this.gridOptions.groupHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotHeaderHeight === 'number') {
	            return this.gridOptions.pivotHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {
	            return this.gridOptions.pivotGroupHeaderHeight;
	        }
	        else {
	            return this.getGroupHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
	        if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
	            return this.gridOptions.isExternalFilterPresent();
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
	        if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
	            return this.gridOptions.doesExternalFilterPass(node);
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.getDocument = function () {
	        // if user is providing document, we use the users one,
	        // otherwise we use the document on the global namespace.
	        var result;
	        if (utils.Utils.exists(this.gridOptions.getDocument)) {
	            result = this.gridOptions.getDocument();
	        }
	        if (utils.Utils.exists(result)) {
	            return result;
	        }
	        else {
	            return document;
	        }
	    };
	    GridOptionsWrapper.prototype.getMinColWidth = function () {
	        if (this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.minColWidth;
	        }
	        else {
	            return GridOptionsWrapper_1.MIN_COL_WIDTH;
	        }
	    };
	    GridOptionsWrapper.prototype.getMaxColWidth = function () {
	        if (this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.maxColWidth;
	        }
	        else {
	            return null;
	        }
	    };
	    GridOptionsWrapper.prototype.getColWidth = function () {
	        if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return 200;
	        }
	        else {
	            return this.gridOptions.colWidth;
	        }
	    };
	    GridOptionsWrapper.prototype.getRowBuffer = function () {
	        if (typeof this.gridOptions.rowBuffer === 'number') {
	            if (this.gridOptions.rowBuffer < 0) {
	                console.warn('ag-Grid: rowBuffer should not be negative');
	            }
	            return this.gridOptions.rowBuffer;
	        }
	        else {
	            return constants.Constants.ROW_BUFFER_SIZE;
	        }
	    };
	    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
	    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
	    // allow the user to provide the scroll width before we work it out.
	    GridOptionsWrapper.prototype.getScrollbarWidth = function () {
	        var scrollbarWidth = this.gridOptions.scrollbarWidth;
	        if (typeof scrollbarWidth !== 'number' || scrollbarWidth < 0) {
	            scrollbarWidth = utils.Utils.getScrollbarWidth();
	        }
	        return scrollbarWidth;
	    };
	    GridOptionsWrapper.prototype.checkForDeprecated = function () {
	        // casting to generic object, so typescript compiles even though
	        // we are looking for attributes that don't exist
	        var options = this.gridOptions;
	        if (options.suppressUnSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortingOrder instead.');
	        }
	        if (options.suppressDescSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortingOrder instead.');
	        }
	        if (options.groupAggFields) {
	            console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');
	        }
	        if (options.groupHidePivotColumns) {
	            console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');
	        }
	        if (options.groupKeys) {
	            console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');
	        }
	        if (typeof options.groupDefaultExpanded === 'boolean') {
	            console.warn('ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups');
	        }
	        if (options.onRowDeselected || options.rowDeselected) {
	            console.warn('ag-grid: since version 3.4 event rowDeselected no longer exists, please check the docs');
	        }
	        if (options.rowsAlreadyGrouped) {
	            console.warn('ag-grid: since version 3.4 rowsAlreadyGrouped no longer exists, please use getNodeChildDetails() instead');
	        }
	        if (options.groupAggFunction) {
	            console.warn('ag-grid: since version 4.3.x groupAggFunction is now called groupRowAggNodes');
	        }
	        if (options.checkboxSelection) {
	            console.warn('ag-grid: since version 8.0.x checkboxSelection is not supported as a grid option. ' +
	                'If you want this on all columns, use defaultColDef instead and set it there');
	        }
	        if (options.paginationInitialRowCount) {
	            console.warn('ag-grid: since version 9.0.x paginationInitialRowCount is now called infiniteInitialRowCount');
	        }
	        if (options.infinitePageSize) {
	            console.warn('ag-grid: since version 9.0.x infinitePageSize is now called cacheBlockSize');
	        }
	        if (options.infiniteBlockSize) {
	            console.warn('ag-grid: since version 10.0.x infiniteBlockSize is now called cacheBlockSize');
	        }
	        if (options.maxPagesInCache) {
	            console.warn('ag-grid: since version 10.0.x maxPagesInCache is now called maxBlocksInCache');
	        }
	        if (options.paginationOverflowSize) {
	            console.warn('ag-grid: since version 10.0.x paginationOverflowSize is now called cacheOverflowSize');
	        }
	        if (options.forPrint) {
	            console.warn('ag-grid: since version 10.1.x, use property domLayout="forPrint" instead of forPrint=true');
	        }
	        if (options.suppressMenuFilterPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','columnsMenuTab'] instead of suppressMenuFilterPanel=true");
	        }
	        if (options.suppressMenuMainPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['filterMenuTab','columnsMenuTab'] instead of suppressMenuMainPanel=true");
	        }
	        if (options.suppressMenuColumnPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','filterMenuTab'] instead of suppressMenuColumnPanel=true");
	        }
	        if (options.suppressUseColIdForGroups) {
	            console.warn("ag-grid: since version 11.0.x, this is not in use anymore. You should be able to remove it from your definition");
	        }
	        if (options.groupColumnDef) {
	            console.warn("ag-grid: since version 11.0.x, groupColumnDef has been renamed, this property is now called autoGroupColumnDef. Please change your configuration accordingly");
	        }
	        if (options.slaveGrids) {
	            console.warn("ag-grid: since version 12.x, slaveGrids has been renamed, this property is now called alignedGrids. Please change your configuration accordingly");
	        }
	        if (options.floatingTopRowData) {
	            console.warn("ag-grid: since version 12.x, floatingTopRowData is now called pinnedTopRowData");
	        }
	        if (options.floatingBottomRowData) {
	            console.warn("ag-grid: since version 12.x, floatingBottomRowData is now called pinnedBottomRowData");
	        }
	        if (options.paginationStartPage) {
	            console.warn("ag-grid: since version 12.x, paginationStartPage is gone, please call api.paginationGoToPage(" + options.paginationStartPage + ") instead.");
	        }
	        if (options.getHeaderCellTemplate) {
	            console.warn("ag-grid: since version 15.x, getHeaderCellTemplate is gone, please check the header documentation on how to set header templates.");
	        }
	        if (options.headerCellTemplate) {
	            console.warn("ag-grid: since version 15.x, headerCellTemplate is gone, please check the header documentation on how to set header templates.");
	        }
	        if (options.headerCellRenderer) {
	            console.warn("ag-grid: since version 15.x, headerCellRenderer is gone, please check the header documentation on how to set header templates.");
	        }
	        if (options.angularCompileHeaders) {
	            console.warn("ag-grid: since version 15.x, angularCompileHeaders is gone, please see the getting started for Angular 1 docs to see how to do headers in Angular 1.x.");
	        }
	        if (options.domLayout === 'forPrint') {
	            console.warn("ag-grid: since version 18.x, forPrint is no longer supported, as same can be achieved using autoHeight (and set the grid width accordingly). please use autoHeight instead.");
	        }
	        if (options.domLayout === 'autoHeight') {
	            console.warn("ag-grid: since version 18.x, domLayout is gone, instead if doing auto-height, set gridAutoHeight=true.");
	            options.gridAutoHeight = true;
	        }
	        if (options.pivotTotals) {
	            console.warn("ag-grid: since version 18.x, pivotTotals has been removed, instead if using pivotTotals, set pivotColumnGroupTotals='before'|'after'.");
	            options.pivotColumnGroupTotals = 'before';
	        }
	        if (options.rowModelType === 'inMemory') {
	            console.warn("ag-grid: since version 18.x, The In Memory Row Model has been renamed to the Client Side Row Model, set rowModelType='clientSide' instead.");
	            options.rowModelType = 'clientSide';
	        }
	        if (options.rowModelType === 'enterprise') {
	            console.warn("ag-grid: since version 18.x, The Enterprise Row Model has been renamed to the Server Side Row Model, set rowModelType='serverSide' instead.");
	            options.rowModelType = 'serverSide';
	        }
	        if (options.layoutInterval) {
	            console.warn("ag-grid: since version 18.x, layoutInterval is no longer a property. This is because the grid now uses CSS Flex for layout.");
	        }
	    };
	    GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
	        if (this.gridOptions.localeTextFunc) {
	            return this.gridOptions.localeTextFunc;
	        }
	        var that = this;
	        return function (key, defaultValue) {
	            var localeText = that.gridOptions.localeText;
	            if (localeText && localeText[key]) {
	                return localeText[key];
	            }
	            else {
	                return defaultValue;
	            }
	        };
	    };
	    // responsible for calling the onXXX functions on gridOptions
	    GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
	        var callbackMethodName = componentUtil.ComponentUtil.getCallbackForEvent(eventName);
	        if (typeof this.gridOptions[callbackMethodName] === 'function') {
	            this.gridOptions[callbackMethodName](event);
	        }
	    };
	    // we don't allow dynamic row height for virtual paging
	    GridOptionsWrapper.prototype.getRowHeightAsNumber = function () {
	        var rowHeight = this.gridOptions.rowHeight;
	        if (utils.Utils.missing(rowHeight)) {
	            return this.getDefaultRowHeight();
	        }
	        else if (this.isNumeric(this.gridOptions.rowHeight)) {
	            return this.gridOptions.rowHeight;
	        }
	        else {
	            console.warn('ag-Grid row height must be a number if not using standard row model');
	            return this.getDefaultRowHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode) {
	        // check the function first, in case use set both function and
	        // number, when using virtual pagination then function can be
	        // used for pinned rows and the number for the body rows.
	        if (typeof this.gridOptions.getRowHeight === 'function') {
	            var params = {
	                node: rowNode,
	                data: rowNode.data,
	                api: this.gridOptions.api,
	                context: this.gridOptions.context
	            };
	            return this.gridOptions.getRowHeight(params);
	        }
	        else if (rowNode.detail && this.isMasterDetail()) {
	            if (this.isNumeric(this.gridOptions.detailRowHeight)) {
	                return this.gridOptions.detailRowHeight;
	            }
	            else {
	                return DEFAULT_DETAIL_ROW_HEIGHT;
	            }
	        }
	        else {
	            var defaultHeight = this.isNumeric(this.gridOptions.rowHeight) ?
	                this.gridOptions.rowHeight : this.getDefaultRowHeight();
	            if (this.columnController.isAutoRowHeightActive()) {
	                var autoHeight = this.autoHeightCalculator.getPreferredHeightForRow(rowNode);
	                // never return less than the default row height - covers when auto height
	                // cells are blank.
	                if (autoHeight > defaultHeight) {
	                    return autoHeight;
	                }
	                else {
	                    return defaultHeight;
	                }
	            }
	            else {
	                return defaultHeight;
	            }
	        }
	    };
	    GridOptionsWrapper.prototype.isDynamicRowHeight = function () {
	        return typeof this.gridOptions.getRowHeight === 'function';
	    };
	    GridOptionsWrapper.prototype.getVirtualItemHeight = function () {
	        return this.specialForNewMaterial(20, 'virtualItemHeight');
	    };
	    GridOptionsWrapper.prototype.isNumeric = function (value) {
	        return !isNaN(value) && typeof value === 'number';
	    };
	    // Material data table has strict guidelines about whitespace, and these values are different than the ones
	    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box
	    GridOptionsWrapper.prototype.specialForNewMaterial = function (defaultValue, sassVariableName) {
	        var theme = this.environment.getTheme();
	        if (theme.indexOf('ag-theme') === 0) {
	            return this.environment.getSassVariable(theme, sassVariableName);
	        }
	        else {
	            return defaultValue;
	        }
	    };
	    GridOptionsWrapper.prototype.getDefaultRowHeight = function () {
	        return this.specialForNewMaterial(DEFAULT_ROW_HEIGHT, 'rowHeight');
	    };
	    GridOptionsWrapper.MIN_COL_WIDTH = 10;
	    GridOptionsWrapper.PROP_HEADER_HEIGHT = 'headerHeight';
	    GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';
	    GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = 'groupRemoveLowestSingleChildren';
	    GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';
	    GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE = 'suppressClipboardPaste';
	    GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';
	    GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';
	    GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';
	    GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG = 'suppressRowDrag';
	    GridOptionsWrapper.PROP_POPUP_PARENT = 'popupParent';
	    GridOptionsWrapper.PROP_GRID_AUTO_HEIGHT = 'gridAutoHeight';
	    __decorate([
	        context.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "gridOptions", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], GridOptionsWrapper.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], GridOptionsWrapper.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], GridOptionsWrapper.prototype, "enterprise", void 0);
	    __decorate([
	        context.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], GridOptionsWrapper.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], GridOptionsWrapper.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('environment'),
	        __metadata("design:type", environment.Environment)
	    ], GridOptionsWrapper.prototype, "environment", void 0);
	    __decorate([
	        context.Autowired('autoHeightCalculator'),
	        __metadata("design:type", autoHeightCalculator.AutoHeightCalculator)
	    ], GridOptionsWrapper.prototype, "autoHeightCalculator", void 0);
	    __decorate([
	        __param(0, context.Qualifier('gridApi')), __param(1, context.Qualifier('columnApi')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridApi.GridApi, columnApi.ColumnApi]),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "agWire", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "destroy", null);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "init", null);
	    GridOptionsWrapper = GridOptionsWrapper_1 = __decorate([
	        context.Bean('gridOptionsWrapper')
	    ], GridOptionsWrapper);
	    return GridOptionsWrapper;
	    var GridOptionsWrapper_1;
	}());
	exports.GridOptionsWrapper = GridOptionsWrapper;
	});

	unwrapExports(gridOptionsWrapper);
	var gridOptionsWrapper_1 = gridOptionsWrapper.GridOptionsWrapper;

	var columnKeyCreator = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns a unique id to use for the column. it checks the existing columns, and if the requested
	// id is already taken, it will start appending numbers until it gets a unique id.
	// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
	// if no field or id provided in the col, it will try the ids of natural numbers

	var ColumnKeyCreator = (function () {
	    function ColumnKeyCreator() {
	        this.existingKeys = [];
	    }
	    ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
	        // in case user passed in number for colId, convert to string
	        colId = utils.Utils.toStringOrNull(colId);
	        var count = 0;
	        while (true) {
	            var idToTry = void 0;
	            if (colId) {
	                idToTry = colId;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else if (colField) {
	                idToTry = colField;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else {
	                idToTry = '' + count;
	            }
	            if (this.existingKeys.indexOf(idToTry) < 0) {
	                this.existingKeys.push(idToTry);
	                return idToTry;
	            }
	            count++;
	        }
	    };
	    return ColumnKeyCreator;
	}());
	exports.ColumnKeyCreator = ColumnKeyCreator;
	});

	unwrapExports(columnKeyCreator);
	var columnKeyCreator_1 = columnKeyCreator.ColumnKeyCreator;

	var defaultColumnTypes = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DefaultColumnTypes = {
	    numericColumn: {
	        headerClass: "ag-numeric-header",
	        cellClass: "ag-numeric-cell"
	    }
	};
	});

	unwrapExports(defaultColumnTypes);
	var defaultColumnTypes_1 = defaultColumnTypes.DefaultColumnTypes;

	var balancedColumnTreeBuilder = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });









	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var BalancedColumnTreeBuilder = (function () {
	    function BalancedColumnTreeBuilder() {
	    }
	    BalancedColumnTreeBuilder.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('BalancedColumnTreeBuilder');
	    };
	    BalancedColumnTreeBuilder.prototype.createForAutoGroups = function (autoGroupCols, gridBalancedTree) {
	        var _this = this;
	        var autoColBalancedTree = [];
	        autoGroupCols.forEach(function (col) {
	            var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);
	            autoColBalancedTree.push(fakeTreeItem);
	        });
	        return autoColBalancedTree;
	    };
	    BalancedColumnTreeBuilder.prototype.createAutoGroupTreeItem = function (balancedColumnTree, column$$1) {
	        var dept = this.findDept(balancedColumnTree);
	        // at the end, this will be the top of the tree item.
	        var nextChild = column$$1;
	        for (var i = dept - 1; i >= 0; i--) {
	            var autoGroup = new originalColumnGroup.OriginalColumnGroup(null, "FAKE_PATH_" + column$$1.getId() + "}_" + i, true, i);
	            this.context.wireBean(autoGroup);
	            autoGroup.setChildren([nextChild]);
	            nextChild = autoGroup;
	        }
	        // at this point, the nextChild is the top most item in the tree
	        return nextChild;
	    };
	    BalancedColumnTreeBuilder.prototype.findDept = function (balancedColumnTree) {
	        var dept = 0;
	        var pointer = balancedColumnTree;
	        while (pointer && pointer[0] && pointer[0] instanceof originalColumnGroup.OriginalColumnGroup) {
	            dept++;
	            pointer = pointer[0].getChildren();
	        }
	        return dept;
	    };
	    BalancedColumnTreeBuilder.prototype.createBalancedColumnGroups = function (abstractColDefs, primaryColumns) {
	        // column key creator dishes out unique column id's in a deterministic way,
	        // so if we have two grids (that cold be master/slave) with same column definitions,
	        // then this ensures the two grids use identical id's.
	        var columnKeyCreator$$1 = new columnKeyCreator.ColumnKeyCreator();
	        // create am unbalanced tree that maps the provided definitions
	        var unbalancedTree = this.recursivelyCreateColumns(abstractColDefs, 0, columnKeyCreator$$1, primaryColumns);
	        var treeDept = this.findMaxDept(unbalancedTree, 0);
	        this.logger.log('Number of levels for grouped columns is ' + treeDept);
	        var balancedTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator$$1);
	        this.columnUtils.depthFirstOriginalTreeSearch(balancedTree, function (child) {
	            if (child instanceof originalColumnGroup.OriginalColumnGroup) {
	                child.setupExpandable();
	            }
	        });
	        return {
	            balancedTree: balancedTree,
	            treeDept: treeDept
	        };
	    };
	    BalancedColumnTreeBuilder.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator$$1) {
	        var _this = this;
	        var result = [];
	        // go through each child, for groups, recurse a level deeper,
	        // for columns we need to pad
	        unbalancedTree.forEach(function (child) {
	            if (child instanceof originalColumnGroup.OriginalColumnGroup) {
	                var originalGroup = child;
	                var newChildren = _this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator$$1);
	                originalGroup.setChildren(newChildren);
	                result.push(originalGroup);
	            }
	            else {
	                var newChild = child;
	                for (var i = columnDept - 1; i >= currentDept; i--) {
	                    var newColId = columnKeyCreator$$1.getUniqueKey(null, null);
	                    var colGroupDefMerged = _this.createMergedColGroupDef(null);
	                    var paddedGroup = new originalColumnGroup.OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);
	                    _this.context.wireBean(paddedGroup);
	                    paddedGroup.setChildren([newChild]);
	                    newChild = paddedGroup;
	                }
	                result.push(newChild);
	            }
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.findMaxDept = function (treeChildren, dept) {
	        var maxDeptThisLevel = dept;
	        for (var i = 0; i < treeChildren.length; i++) {
	            var abstractColumn = treeChildren[i];
	            if (abstractColumn instanceof originalColumnGroup.OriginalColumnGroup) {
	                var originalGroup = abstractColumn;
	                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
	                if (maxDeptThisLevel < newDept) {
	                    maxDeptThisLevel = newDept;
	                }
	            }
	        }
	        return maxDeptThisLevel;
	    };
	    BalancedColumnTreeBuilder.prototype.recursivelyCreateColumns = function (abstractColDefs, level, columnKeyCreator$$1, primaryColumns) {
	        var _this = this;
	        var result = [];
	        if (!abstractColDefs) {
	            return result;
	        }
	        abstractColDefs.forEach(function (abstractColDef) {
	            var newGroupOrColumn;
	            if (_this.isColumnGroup(abstractColDef)) {
	                newGroupOrColumn = _this.createColumnGroup(columnKeyCreator$$1, primaryColumns, abstractColDef, level);
	            }
	            else {
	                newGroupOrColumn = _this.createColumn(columnKeyCreator$$1, primaryColumns, abstractColDef);
	            }
	            result.push(newGroupOrColumn);
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumnGroup = function (columnKeyCreator$$1, primaryColumns, colGroupDef, level) {
	        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
	        var groupId = columnKeyCreator$$1.getUniqueKey(colGroupDefMerged.groupId, null);
	        var originalGroup = new originalColumnGroup.OriginalColumnGroup(colGroupDefMerged, groupId, false, level);
	        this.context.wireBean(originalGroup);
	        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, columnKeyCreator$$1, primaryColumns);
	        originalGroup.setChildren(children);
	        return originalGroup;
	    };
	    BalancedColumnTreeBuilder.prototype.createMergedColGroupDef = function (colGroupDef) {
	        var colGroupDefMerged = {};
	        utils.Utils.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
	        utils.Utils.assign(colGroupDefMerged, colGroupDef);
	        this.checkForDeprecatedItems(colGroupDefMerged);
	        return colGroupDefMerged;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumn = function (columnKeyCreator$$1, primaryColumns, colDef) {
	        var colDefMerged = this.mergeColDefs(colDef);
	        this.checkForDeprecatedItems(colDefMerged);
	        var colId = columnKeyCreator$$1.getUniqueKey(colDefMerged.colId, colDefMerged.field);
	        var column$$1 = new column.Column(colDefMerged, colId, primaryColumns);
	        this.context.wireBean(column$$1);
	        return column$$1;
	    };
	    BalancedColumnTreeBuilder.prototype.mergeColDefs = function (colDef) {
	        // start with empty merged definition
	        var colDefMerged = {};
	        // merge properties from default column definitions
	        utils.Utils.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());
	        // merge properties from column type properties
	        if (colDef.type) {
	            this.assignColumnTypes(colDef, colDefMerged);
	        }
	        // merge properties from column definitions
	        utils.Utils.assign(colDefMerged, colDef);
	        return colDefMerged;
	    };
	    BalancedColumnTreeBuilder.prototype.assignColumnTypes = function (colDef, colDefMerged) {
	        var typeKeys;
	        if (colDef.type instanceof Array) {
	            var invalidArray = colDef.type.some(function (a) { return typeof a !== 'string'; });
	            if (invalidArray) {
	                console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
	            }
	            else {
	                typeKeys = colDef.type;
	            }
	        }
	        else if (typeof colDef.type === 'string') {
	            typeKeys = colDef.type.split(',');
	        }
	        else {
	            console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
	            return;
	        }
	        // merge user defined with default column types
	        var allColumnTypes = utils.Utils.assign({}, this.gridOptionsWrapper.getColumnTypes(), defaultColumnTypes.DefaultColumnTypes);
	        typeKeys.forEach(function (t) {
	            var typeColDef = allColumnTypes[t.trim()];
	            if (typeColDef) {
	                utils.Utils.assign(colDefMerged, typeColDef);
	            }
	            else {
	                console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
	            }
	        });
	    };
	    BalancedColumnTreeBuilder.prototype.checkForDeprecatedItems = function (colDef) {
	        if (colDef) {
	            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
	            if (colDefNoType.group !== undefined) {
	                console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroup !== undefined) {
	                console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroupShow !== undefined) {
	                console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.suppressRowGroup !== undefined) {
	                console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressAggregation !== undefined) {
	                console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
	                console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');
	            }
	            if (colDefNoType.displayName) {
	                console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
	                colDefNoType.headerName = colDefNoType.displayName;
	            }
	        }
	    };
	    // if object has children, we assume it's a group
	    BalancedColumnTreeBuilder.prototype.isColumnGroup = function (abstractColDef) {
	        return abstractColDef.children !== undefined;
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], BalancedColumnTreeBuilder.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils.ColumnUtils)
	    ], BalancedColumnTreeBuilder.prototype, "columnUtils", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], BalancedColumnTreeBuilder.prototype, "context", void 0);
	    __decorate([
	        __param(0, context.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], BalancedColumnTreeBuilder.prototype, "setBeans", null);
	    BalancedColumnTreeBuilder = __decorate([
	        context.Bean('balancedColumnTreeBuilder')
	    ], BalancedColumnTreeBuilder);
	    return BalancedColumnTreeBuilder;
	}());
	exports.BalancedColumnTreeBuilder = BalancedColumnTreeBuilder;
	});

	unwrapExports(balancedColumnTreeBuilder);
	var balancedColumnTreeBuilder_1 = balancedColumnTreeBuilder.BalancedColumnTreeBuilder;

	var standardMenu = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var StandardMenuFactory = (function () {
	    function StandardMenuFactory() {
	    }
	    StandardMenuFactory.prototype.hideActiveMenu = function () {
	        if (this.hidePopup) {
	            this.hidePopup();
	        }
	    };
	    StandardMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderMouseEvent({
	                column: column,
	                type: 'columnMenu',
	                mouseEvent: mouseEvent,
	                ePopup: eMenu
	            });
	        });
	    };
	    StandardMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderComponent({ type: 'columnMenu', eventSource: eventSource,
	                ePopup: eMenu, keepWithinBounds: true, column: column });
	        });
	    };
	    StandardMenuFactory.prototype.showPopup = function (column, positionCallback) {
	        var _this = this;
	        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column);
	        var eMenu = document.createElement('div');
	        utils.Utils.addCssClass(eMenu, 'ag-menu');
	        filterWrapper.guiPromise.promise.then(function (gui) {
	            eMenu.appendChild(gui);
	        });
	        var hidePopup;
	        var bodyScrollListener = function (event) {
	            // if h scroll, popup is no longer over the column
	            if (event.direction === 'horizontal') {
	                hidePopup();
	            }
	        };
	        this.eventService.addEventListener('bodyScroll', bodyScrollListener);
	        var closedCallback = function () {
	            _this.eventService.removeEventListener('bodyScroll', bodyScrollListener);
	            column.setMenuVisible(false, "contextMenu");
	        };
	        // need to show filter before positioning, as only after filter
	        // is visible can we find out what the width of it is
	        hidePopup = this.popupService.addAsModalPopup(eMenu, true, closedCallback);
	        positionCallback(eMenu);
	        filterWrapper.filterPromise.then(function (filter) {
	            if (filter.afterGuiAttached) {
	                var params = {
	                    hidePopup: hidePopup
	                };
	                filter.afterGuiAttached(params);
	            }
	        });
	        this.hidePopup = hidePopup;
	        column.setMenuVisible(true, "contextMenu");
	    };
	    StandardMenuFactory.prototype.isMenuEnabled = function (column) {
	        // for standard, we show menu if filter is enabled, and he menu is not suppressed
	        return this.gridOptionsWrapper.isEnableFilter() && column.isFilterAllowed();
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], StandardMenuFactory.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], StandardMenuFactory.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('popupService'),
	        __metadata("design:type", popupService.PopupService)
	    ], StandardMenuFactory.prototype, "popupService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], StandardMenuFactory.prototype, "gridOptionsWrapper", void 0);
	    StandardMenuFactory = __decorate([
	        context.Bean('menuFactory')
	    ], StandardMenuFactory);
	    return StandardMenuFactory;
	}());
	exports.StandardMenuFactory = StandardMenuFactory;
	});

	unwrapExports(standardMenu);
	var standardMenu_1 = standardMenu.StandardMenuFactory;

	var filterService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var FilterService = (function () {
	    function FilterService() {
	    }
	    FilterService.prototype.postConstruct = function () {
	        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
	    };
	    FilterService.prototype.filterAccordingToColumnState = function (rowNode) {
	        var filterActive = this.filterManager.isAnyFilterPresent();
	        this.filter(rowNode, filterActive);
	    };
	    FilterService.prototype.filter = function (rowNode, filterActive) {
	        var _this = this;
	        // recursively get all children that are groups to also filter
	        if (rowNode.hasChildren()) {
	            rowNode.childrenAfterGroup.forEach(function (node) { return _this.filter(node, filterActive); });
	            // result of filter for this node
	            if (filterActive) {
	                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {
	                    // a group is included in the result if it has any children of it's own.
	                    // by this stage, the child groups are already filtered
	                    var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
	                    // both leaf level nodes and tree data nodes have data. these get added if
	                    // the data passes the filter
	                    var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);
	                    // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass
	                    return passBecauseChildren || passBecauseDataPasses;
	                });
	            }
	            else {
	                // if not filtering, the result is the original list
	                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
	            }
	            this.setAllChildrenCount(rowNode);
	        }
	        else {
	            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
	            rowNode.setAllChildrenCount(null);
	        }
	    };
	    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {
	        // for tree data, we include all children, groups and leafs
	        var allChildrenCount = 0;
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            // include child itself
	            allChildrenCount++;
	            // include children of children
	            allChildrenCount += child.allChildrenCount;
	        });
	        rowNode.setAllChildrenCount(allChildrenCount);
	    };
	    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {
	        // for grid data, we only count the leafs
	        var allChildrenCount = 0;
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.group) {
	                allChildrenCount += child.allChildrenCount;
	            }
	            else {
	                allChildrenCount++;
	            }
	        });
	        rowNode.setAllChildrenCount(allChildrenCount);
	    };
	    FilterService.prototype.setAllChildrenCount = function (rowNode) {
	        if (this.doingTreeData) {
	            this.setAllChildrenCountTreeData(rowNode);
	        }
	        else {
	            this.setAllChildrenCountGridGrouping(rowNode);
	        }
	    };
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], FilterService.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FilterService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterService.prototype, "postConstruct", null);
	    FilterService = __decorate([
	        context.Bean("filterService")
	    ], FilterService);
	    return FilterService;
	}());
	exports.FilterService = FilterService;
	});

	unwrapExports(filterService);
	var filterService_1 = filterService.FilterService;

	var selectableService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var SelectableService = (function () {
	    function SelectableService() {
	    }
	    SelectableService.prototype.init = function () {
	        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
	    };
	    SelectableService.prototype.updateSelectableAfterGrouping = function (rowNode) {
	        if (this.isRowSelectableFunc) {
	            var nextChildrenFunc = function (rowNode) { return rowNode.childrenAfterGroup; };
	            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
	        }
	    };
	    SelectableService.prototype.updateSelectableAfterFiltering = function (rowNode) {
	        if (this.isRowSelectableFunc) {
	            var nextChildrenFunc = function (rowNode) { return rowNode.childrenAfterFilter; };
	            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
	        }
	    };
	    SelectableService.prototype.recurseDown = function (children, nextChildrenFunc) {
	        var _this = this;
	        children.forEach(function (child) {
	            if (!child.group) {
	                return;
	            } // only interested in groups
	            if (child.hasChildren()) {
	                _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
	            }
	            var rowSelectable;
	            if (_this.groupSelectsChildren) {
	                // have this group selectable if at least one direct child is selectable
	                var firstSelectable = utils._.find(nextChildrenFunc(child), 'selectable', true);
	                rowSelectable = utils._.exists(firstSelectable);
	            }
	            else {
	                // directly retrieve selectable value from user callback
	                rowSelectable = _this.isRowSelectableFunc(child);
	            }
	            child.setRowSelectable(rowSelectable);
	        });
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SelectableService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectableService.prototype, "init", null);
	    SelectableService = __decorate([
	        context.Bean('selectableService')
	    ], SelectableService);
	    return SelectableService;
	}());
	exports.SelectableService = SelectableService;
	});

	unwrapExports(selectableService);
	var selectableService_1 = selectableService.SelectableService;

	var filterStage = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var FilterStage = (function () {
	    function FilterStage() {
	    }
	    FilterStage.prototype.execute = function (params) {
	        var rowNode = params.rowNode;
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.filterService.filter(rowNode, false);
	        }
	        else {
	            this.filterService.filterAccordingToColumnState(rowNode);
	        }
	        this.selectableService.updateSelectableAfterFiltering(rowNode);
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FilterStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('selectableService'),
	        __metadata("design:type", selectableService.SelectableService)
	    ], FilterStage.prototype, "selectableService", void 0);
	    __decorate([
	        context.Autowired('filterService'),
	        __metadata("design:type", filterService.FilterService)
	    ], FilterStage.prototype, "filterService", void 0);
	    FilterStage = __decorate([
	        context.Bean('filterStage')
	    ], FilterStage);
	    return FilterStage;
	}());
	exports.FilterStage = FilterStage;
	});

	unwrapExports(filterStage);
	var filterStage_1 = filterStage.FilterStage;

	var sortService = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var SortService = (function () {
	    function SortService() {
	    }
	    SortService.prototype.init = function () {
	        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
	    };
	    SortService.prototype.sortAccordingToColumnsState = function (rowNode) {
	        var sortOptions = this.sortController.getSortForRowController();
	        this.sort(rowNode, sortOptions);
	    };
	    SortService.prototype.sort = function (rowNode, sortOptions) {
	        var _this = this;
	        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
	        // we clear out the 'pull down open parents' first, as the values mix up the sorting
	        this.pullDownDataForHideOpenParents(rowNode, true);
	        var sortActive = utils._.exists(sortOptions) && sortOptions.length > 0;
	        if (sortActive) {
	            // RE https://ag-grid.atlassian.net/browse/AG-444
	            //Javascript sort is non deterministic when all the array items are equals
	            //ie Comparator always returns 0, so if you want to ensure the array keeps its
	            //order, then you need to add an additional sorting condition manually, in this
	            //case we are going to inspect the original array position
	            var sortedRowNodes = rowNode.childrenAfterSort.map(function (it, pos) {
	                return { currentPos: pos, rowNode: it };
	            });
	            sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
	            rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });
	        }
	        this.updateChildIndexes(rowNode);
	        this.pullDownDataForHideOpenParents(rowNode, false);
	        // sort any groups recursively
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.hasChildren()) {
	                _this.sort(child, sortOptions);
	            }
	        });
	        if (this.postSortFunc) {
	            this.postSortFunc(rowNode.childrenAfterSort);
	        }
	    };
	    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {
	        var nodeA = sortedNodeA.rowNode;
	        var nodeB = sortedNodeB.rowNode;
	        // Iterate columns, return the first that doesn't match
	        for (var i = 0, len = sortOptions.length; i < len; i++) {
	            var sortOption = sortOptions[i];
	            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
	            var isInverted = sortOption.inverter === -1;
	            var valueA = this.getValue(nodeA, sortOption.column);
	            var valueB = this.getValue(nodeB, sortOption.column);
	            var comparatorResult = void 0;
	            if (sortOption.column.getColDef().comparator) {
	                //if comparator provided, use it
	                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
	            }
	            else {
	                //otherwise do our own comparison
	                comparatorResult = utils._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
	            }
	            if (comparatorResult !== 0) {
	                return comparatorResult * sortOption.inverter;
	            }
	        }
	        // All matched, we make is so that the original sort order is kept:
	        return sortedNodeA.currentPos - sortedNodeB.currentPos;
	    };
	    SortService.prototype.getValue = function (nodeA, column) {
	        return this.valueService.getValue(column, nodeA);
	    };
	    SortService.prototype.updateChildIndexes = function (rowNode) {
	        if (utils._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (child, index) {
	            var firstChild = index === 0;
	            var lastChild = index === rowNode.childrenAfterSort.length - 1;
	            child.setFirstChild(firstChild);
	            child.setLastChild(lastChild);
	            child.setChildIndex(index);
	        });
	    };
	    SortService.prototype.pullDownDataForHideOpenParents = function (rowNode, clearOperation) {
	        var _this = this;
	        if (utils._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (childRowNode) {
	            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
	            groupDisplayCols.forEach(function (groupDisplayCol) {
	                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
	                if (typeof showRowGroup !== 'string') {
	                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');
	                    return;
	                }
	                var displayingGroupKey = showRowGroup;
	                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
	                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
	                if (thisRowNodeMatches) {
	                    return;
	                }
	                if (clearOperation) {
	                    // if doing a clear operation, we clear down the value for every possible group column
	                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);
	                }
	                else {
	                    // if doing a set operation, we set only where the pull down is to occur
	                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
	                    if (parentToStealFrom) {
	                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
	                    }
	                }
	            });
	        });
	    };
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], SortService.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], SortService.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], SortService.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SortService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SortService.prototype, "init", null);
	    SortService = __decorate([
	        context.Bean('sortService')
	    ], SortService);
	    return SortService;
	}());
	exports.SortService = SortService;
	});

	unwrapExports(sortService);
	var sortService_1 = sortService.SortService;

	var sortStage = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var SortStage = (function () {
	    function SortStage() {
	    }
	    SortStage.prototype.execute = function (params) {
	        // if the sorting is already done by the server, then we should not do it here
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.sortService.sort(params.rowNode, null);
	        }
	        else {
	            this.sortService.sortAccordingToColumnsState(params.rowNode);
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], SortStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('sortService'),
	        __metadata("design:type", sortService.SortService)
	    ], SortStage.prototype, "sortService", void 0);
	    SortStage = __decorate([
	        context.Bean('sortStage')
	    ], SortStage);
	    return SortStage;
	}());
	exports.SortStage = SortStage;
	});

	unwrapExports(sortStage);
	var sortStage_1 = sortStage.SortStage;

	var flattenStage = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var FlattenStage = (function () {
	    function FlattenStage() {
	    }
	    FlattenStage.prototype.execute = function (params) {
	        var rootNode = params.rowNode;
	        // even if not doing grouping, we do the mapping, as the client might
	        // of passed in data that already has a grouping in it somewhere
	        var result = [];
	        // putting value into a wrapper so it's passed by reference
	        var nextRowTop = { value: 0 };
	        var skipLeafNodes = this.columnController.isPivotMode();
	        // if we are reducing, and not grouping, then we want to show the root node, as that
	        // is where the pivot values are
	        var showRootNode = skipLeafNodes && rootNode.leafGroup;
	        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
	        // set all row tops to null, then set row tops on all visible rows. if we don't
	        // do this, then the algorithm below only sets row tops, old row tops from old rows
	        // will still lie around
	        this.resetRowTops(rootNode);
	        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
	        // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)
	        var includeGroupTotalFooter = !showRootNode && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
	        if (includeGroupTotalFooter) {
	            this.ensureFooterNodeExists(rootNode);
	            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
	        }
	        return result;
	    };
	    FlattenStage.prototype.resetRowTops = function (rowNode$$1) {
	        rowNode$$1.clearRowTop();
	        if (rowNode$$1.hasChildren()) {
	            if (rowNode$$1.childrenAfterGroup) {
	                for (var i = 0; i < rowNode$$1.childrenAfterGroup.length; i++) {
	                    this.resetRowTops(rowNode$$1.childrenAfterGroup[i]);
	                }
	            }
	            if (rowNode$$1.sibling) {
	                rowNode$$1.sibling.clearRowTop();
	            }
	        }
	    };
	    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
	        if (utils.Utils.missingOrEmpty(rowsToFlatten)) {
	            return;
	        }
	        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
	        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
	        // these two are mutually exclusive, so if first set, we don't set the second
	        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
	        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
	        for (var i = 0; i < rowsToFlatten.length; i++) {
	            var rowNode$$1 = rowsToFlatten[i];
	            // check all these cases, for working out if this row should be included in the final mapped list
	            var isParent = rowNode$$1.hasChildren();
	            var isGroupSuppressedNode = groupSuppressRow && isParent;
	            var isSkippedLeafNode = skipLeafNodes && !isParent;
	            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode$$1.childrenAfterGroup.length === 1;
	            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode$$1.leafGroup && rowNode$$1.childrenAfterGroup.length === 1;
	            // hide open parents means when group is open, we don't show it. we also need to make sure the
	            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).
	            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')
	            var neverAllowToExpand = skipLeafNodes && rowNode$$1.leafGroup;
	            var isHiddenOpenParent = hideOpenParents && rowNode$$1.expanded && (!neverAllowToExpand);
	            var thisRowShouldBeRendered = !isSkippedLeafNode && !isGroupSuppressedNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
	            if (thisRowShouldBeRendered) {
	                this.addRowNodeToRowsToDisplay(rowNode$$1, result, nextRowTop, uiLevel);
	            }
	            // if we are pivoting, we never map below the leaf group
	            if (skipLeafNodes && rowNode$$1.leafGroup) {
	                continue;
	            }
	            if (isParent) {
	                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
	                // we traverse the group if it is expended, however we always traverse if the parent node
	                // was removed (as the group will never be opened if it is not displayed, we show the children instead)
	                if (rowNode$$1.expanded || excludedParent) {
	                    // if the parent was excluded, then ui level is that of the parent
	                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
	                    this.recursivelyAddToRowsToDisplay(rowNode$$1.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
	                    // put a footer in if user is looking for it
	                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	                        this.ensureFooterNodeExists(rowNode$$1);
	                        this.addRowNodeToRowsToDisplay(rowNode$$1.sibling, result, nextRowTop, uiLevel);
	                    }
	                }
	            }
	            else if (rowNode$$1.master && rowNode$$1.expanded) {
	                var detailNode = this.createDetailNode(rowNode$$1);
	                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
	            }
	        }
	    };
	    // duplicated method, it's also in floatingRowModel
	    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode$$1, result, nextRowTop, uiLevel) {
	        result.push(rowNode$$1);
	        if (utils.Utils.missing(rowNode$$1.rowHeight)) {
	            var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode$$1);
	            rowNode$$1.setRowHeight(rowHeight);
	        }
	        rowNode$$1.setUiLevel(uiLevel);
	        rowNode$$1.setRowTop(nextRowTop.value);
	        rowNode$$1.setRowIndex(result.length - 1);
	        nextRowTop.value += rowNode$$1.rowHeight;
	    };
	    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {
	        // only create footer node once, otherwise we have daemons and
	        // the animate screws up with the daemons hanging around
	        if (utils.Utils.exists(groupNode.sibling)) {
	            return;
	        }
	        var footerNode = new rowNode.RowNode();
	        this.context.wireBean(footerNode);
	        Object.keys(groupNode).forEach(function (key) {
	            footerNode[key] = groupNode[key];
	        });
	        footerNode.footer = true;
	        footerNode.rowTop = null;
	        footerNode.oldRowTop = null;
	        if (utils.Utils.exists(footerNode.id)) {
	            footerNode.id = 'rowGroupFooter_' + footerNode.id;
	        }
	        // get both header and footer to reference each other as siblings. this is never undone,
	        // only overwritten. so if a group is expanded, then contracted, it will have a ghost
	        // sibling - but that's fine, as we can ignore this if the header is contracted.
	        footerNode.sibling = groupNode;
	        groupNode.sibling = footerNode;
	    };
	    FlattenStage.prototype.createDetailNode = function (masterNode) {
	        if (utils.Utils.exists(masterNode.detailNode)) {
	            return masterNode.detailNode;
	        }
	        else {
	            var detailNode = new rowNode.RowNode();
	            this.context.wireBean(detailNode);
	            detailNode.detail = true;
	            // flower was renamed to 'detail', but keeping for backwards compatibility
	            detailNode.flower = detailNode.detail;
	            detailNode.parent = masterNode;
	            if (utils.Utils.exists(masterNode.id)) {
	                detailNode.id = 'detail_' + masterNode.id;
	            }
	            detailNode.data = masterNode.data;
	            detailNode.level = masterNode.level + 1;
	            masterNode.detailNode = detailNode;
	            masterNode.childFlower = masterNode.detailNode; // for backwards compatibility
	            return detailNode;
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], FlattenStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], FlattenStage.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], FlattenStage.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], FlattenStage.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], FlattenStage.prototype, "columnController", void 0);
	    FlattenStage = __decorate([
	        context.Bean('flattenStage')
	    ], FlattenStage);
	    return FlattenStage;
	}());
	exports.FlattenStage = FlattenStage;
	});

	unwrapExports(flattenStage);
	var flattenStage_1 = flattenStage.FlattenStage;

	var rowNodeBlock = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var RowNodeBlock = (function (_super) {
	    __extends(RowNodeBlock, _super);
	    function RowNodeBlock(blockNumber, rowNodeCacheParams) {
	        var _this = _super.call(this) || this;
	        _this.version = 0;
	        _this.state = RowNodeBlock.STATE_DIRTY;
	        _this.rowNodeCacheParams = rowNodeCacheParams;
	        _this.blockNumber = blockNumber;
	        // we don't need to calculate these now, as the inputs don't change,
	        // however it makes the code easier to read if we work them out up front
	        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
	        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
	        return _this;
	    }
	    RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {
	        var result = false;
	        this.forEachNodeCallback(function (rowNode$$1) {
	            if (rowNode$$1.expanded) {
	                result = true;
	            }
	        }, rowCount);
	        return result;
	    };
	    RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {
	        for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {
	            // we check against rowCount as this page may be the last one, and if it is, then
	            // the last rows are not part of the set
	            if (rowIndex < rowCount) {
	                var rowNode$$1 = this.getRowUsingLocalIndex(rowIndex);
	                callback(rowNode$$1, rowIndex);
	            }
	        }
	    };
	    RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {
	        this.forEachNodeCallback(function (rowNode$$1) {
	            callback(rowNode$$1, sequence.next());
	            // this will only every happen for server side row model, as infinite
	            // row model doesn't have groups
	            if (deep && rowNode$$1.childrenCache) {
	                rowNode$$1.childrenCache.forEachNodeDeep(callback, sequence);
	            }
	        }, rowCount);
	    };
	    RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, true);
	    };
	    RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, false);
	    };
	    RowNodeBlock.prototype.getVersion = function () {
	        return this.version;
	    };
	    RowNodeBlock.prototype.getLastAccessed = function () {
	        return this.lastAccessed;
	    };
	    RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex, dontTouchLastAccessed) {
	        if (dontTouchLastAccessed === void 0) { dontTouchLastAccessed = false; }
	        if (!dontTouchLastAccessed) {
	            this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
	        }
	        var localIndex = rowIndex - this.startRow;
	        return this.rowNodes[localIndex];
	    };
	    RowNodeBlock.prototype.init = function (beans) {
	        this.beans = beans;
	        this.createRowNodes();
	    };
	    RowNodeBlock.prototype.getStartRow = function () {
	        return this.startRow;
	    };
	    RowNodeBlock.prototype.getEndRow = function () {
	        return this.endRow;
	    };
	    RowNodeBlock.prototype.getBlockNumber = function () {
	        return this.blockNumber;
	    };
	    RowNodeBlock.prototype.setDirty = function () {
	        // in case any current loads in progress, this will have their results ignored
	        this.version++;
	        this.state = RowNodeBlock.STATE_DIRTY;
	    };
	    RowNodeBlock.prototype.setDirtyAndPurge = function () {
	        this.setDirty();
	        this.rowNodes.forEach(function (rowNode$$1) {
	            rowNode$$1.setData(null);
	        });
	    };
	    RowNodeBlock.prototype.getState = function () {
	        return this.state;
	    };
	    RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode$$1) {
	        var localIndex = rowIndex - this.startRow;
	        this.rowNodes[localIndex] = rowNode$$1;
	    };
	    RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {
	        var localIndex = rowIndex - this.startRow;
	        var newRowNode = this.createBlankRowNode(rowIndex);
	        this.rowNodes[localIndex] = newRowNode;
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {
	        var newRowNode = this.setBlankRowNode(rowIndex);
	        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode$$1 = new rowNode.RowNode();
	        this.beans.context.wireBean(rowNode$$1);
	        rowNode$$1.setRowHeight(this.rowNodeCacheParams.rowHeight);
	        return rowNode$$1;
	    };
	    // creates empty row nodes, data is missing as not loaded yet
	    RowNodeBlock.prototype.createRowNodes = function () {
	        this.rowNodes = [];
	        for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {
	            var rowIndex = this.startRow + i;
	            var rowNode$$1 = this.createBlankRowNode(rowIndex);
	            this.rowNodes.push(rowNode$$1);
	        }
	    };
	    RowNodeBlock.prototype.load = function () {
	        this.state = RowNodeBlock.STATE_LOADING;
	        this.loadFromDatasource();
	    };
	    RowNodeBlock.prototype.pageLoadFailed = function () {
	        this.state = RowNodeBlock.STATE_FAILED;
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: false,
	            page: this,
	            lastRow: null
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.prototype.populateWithRowData = function (rows) {
	        var _this = this;
	        var rowNodesToRefresh = [];
	        this.rowNodes.forEach(function (rowNode$$1, index) {
	            var data = rows[index];
	            if (rowNode$$1.stub) {
	                rowNodesToRefresh.push(rowNode$$1);
	            }
	            _this.setDataAndId(rowNode$$1, data, _this.startRow + index);
	        });
	        if (rowNodesToRefresh.length > 0) {
	            this.beans.rowRenderer.redrawRows(rowNodesToRefresh);
	        }
	    };
	    RowNodeBlock.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.rowNodes.forEach(function (rowNode$$1) {
	            if (rowNode$$1.childrenCache) {
	                rowNode$$1.childrenCache.destroy();
	                rowNode$$1.childrenCache = null;
	            }
	            // this is needed, so row render knows to fade out the row, otherwise it
	            // see's row top is present, and thinks the row should be shown. maybe
	            // rowNode should have a flag on whether it is visible???
	            rowNode$$1.clearRowTop();
	        });
	    };
	    RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {
	        // we need to check the version, in case there was an old request
	        // from the server that was sent before we refreshed the cache,
	        // if the load was done as a result of a cache refresh
	        if (version === this.version) {
	            this.state = RowNodeBlock.STATE_LOADED;
	            this.populateWithRowData(rows);
	        }
	        lastRow = utils.Utils.cleanNumber(lastRow);
	        // check here if lastrow should be set
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: true,
	            page: this,
	            lastRow: lastRow
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';
	    RowNodeBlock.STATE_DIRTY = 'dirty';
	    RowNodeBlock.STATE_LOADING = 'loading';
	    RowNodeBlock.STATE_LOADED = 'loaded';
	    RowNodeBlock.STATE_FAILED = 'failed';
	    return RowNodeBlock;
	}(beanStub.BeanStub));
	exports.RowNodeBlock = RowNodeBlock;
	});

	unwrapExports(rowNodeBlock);
	var rowNodeBlock_1 = rowNodeBlock.RowNodeBlock;

	var infiniteBlock = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });





	var InfiniteBlock = (function (_super) {
	    __extends(InfiniteBlock, _super);
	    function InfiniteBlock(pageNumber, params) {
	        var _this = _super.call(this, pageNumber, params) || this;
	        _this.cacheParams = params;
	        return _this;
	    }
	    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);
	        rowNode.uiLevel = 0;
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	        return rowNode;
	    };
	    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {
	        if (utils.Utils.exists(data)) {
	            // this means if the user is not providing id's we just use the
	            // index for the row. this will allow selection to work (that is based
	            // on index) as long user is not inserting or deleting rows,
	            // or wanting to keep selection between server side sorting or filtering
	            rowNode.setDataAndId(data, index.toString());
	        }
	        else {
	            rowNode.setDataAndId(undefined, undefined);
	        }
	    };
	    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {
	        _super.prototype.setRowNode.call(this, rowIndex, rowNode);
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	    };
	    InfiniteBlock.prototype.init = function () {
	        _super.prototype.init.call(this, {
	            context: this.context,
	            rowRenderer: this.rowRenderer
	        });
	    };
	    InfiniteBlock.prototype.getNodeIdPrefix = function () {
	        return null;
	    };
	    InfiniteBlock.prototype.getRow = function (displayIndex) {
	        return this.getRowUsingLocalIndex(displayIndex);
	    };
	    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {
	        rowNode.setRowIndex(rowIndex);
	        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
	    };
	    InfiniteBlock.prototype.loadFromDatasource = function () {
	        var _this = this;
	        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
	        // is executing before the sort is set up, so server is not getting the sort
	        // model. need to change with regards order - so the server side request is
	        // AFTER thus it gets the right sort model.
	        var params = {
	            startRow: this.getStartRow(),
	            endRow: this.getEndRow(),
	            successCallback: this.pageLoaded.bind(this, this.getVersion()),
	            failCallback: this.pageLoadFailed.bind(this),
	            sortModel: this.cacheParams.sortModel,
	            filterModel: this.cacheParams.filterModel,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        if (utils.Utils.missing(this.cacheParams.datasource.getRows)) {
	            console.warn("ag-Grid: datasource is missing getRows method");
	            return;
	        }
	        // check if old version of datasource used
	        var getRowsParams = utils.Utils.getFunctionParameters(this.cacheParams.datasource.getRows);
	        if (getRowsParams.length > 1) {
	            console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
	            console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
	        }
	        // put in timeout, to force result to be async
	        setTimeout(function () {
	            _this.cacheParams.datasource.getRows(params);
	        }, 0);
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], InfiniteBlock.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], InfiniteBlock.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], InfiniteBlock.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteBlock.prototype, "init", null);
	    return InfiniteBlock;
	}(rowNodeBlock.RowNodeBlock));
	exports.InfiniteBlock = InfiniteBlock;
	});

	unwrapExports(infiniteBlock);
	var infiniteBlock_1 = infiniteBlock.InfiniteBlock;

	var rowNodeCache = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var RowNodeCache = (function (_super) {
	    __extends(RowNodeCache, _super);
	    function RowNodeCache(cacheParams) {
	        var _this = _super.call(this) || this;
	        _this.maxRowFound = false;
	        _this.blocks = {};
	        _this.blockCount = 0;
	        _this.virtualRowCount = cacheParams.initialRowCount;
	        _this.cacheParams = cacheParams;
	        return _this;
	    }
	    RowNodeCache.prototype.destroy = function () {
	        var _this = this;
	        _super.prototype.destroy.call(this);
	        this.forEachBlockInOrder(function (block) { return _this.destroyBlock(block); });
	    };
	    RowNodeCache.prototype.init = function () {
	        var _this = this;
	        this.active = true;
	        this.addDestroyFunc(function () { return _this.active = false; });
	    };
	    RowNodeCache.prototype.isActive = function () {
	        return this.active;
	    };
	    RowNodeCache.prototype.getVirtualRowCount = function () {
	        return this.virtualRowCount;
	    };
	    RowNodeCache.prototype.hack_setVirtualRowCount = function (virtualRowCount) {
	        this.virtualRowCount = virtualRowCount;
	    };
	    RowNodeCache.prototype.isMaxRowFound = function () {
	        return this.maxRowFound;
	    };
	    // listener on EVENT_LOAD_COMPLETE
	    RowNodeCache.prototype.onPageLoaded = function (event) {
	        this.cacheParams.rowNodeBlockLoader.loadComplete();
	        this.checkBlockToLoad();
	        // if we are not active, then we ignore all events, otherwise we could end up getting the
	        // grid to refresh even though we are no longer the active cache
	        if (!this.isActive()) {
	            return;
	        }
	        this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);
	        if (event.success) {
	            this.checkVirtualRowCount(event.page, event.lastRow);
	        }
	    };
	    RowNodeCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
	        var _this = this;
	        // no purge if user didn't give maxBlocksInCache
	        if (utils.Utils.missing(this.cacheParams.maxBlocksInCache)) {
	            return;
	        }
	        // no purge if block count is less than max allowed
	        if (this.blockCount <= this.cacheParams.maxBlocksInCache) {
	            return;
	        }
	        // put all candidate blocks into a list for sorting
	        var blocksForPurging = [];
	        this.forEachBlockInOrder(function (block) {
	            // we exclude checking for the page just created, as this has yet to be accessed and hence
	            // the lastAccessed stamp will not be updated for the first time yet
	            if (block === blockToExclude) {
	                return;
	            }
	            blocksForPurging.push(block);
	        });
	        // note: need to verify that this sorts items in the right order
	        blocksForPurging.sort(function (a, b) { return b.getLastAccessed() - a.getLastAccessed(); });
	        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
	        // in other words, after the splice operation below, we have taken out the blocks
	        // we want to keep, which means we are left with blocks that we can potentially purge
	        var blocksToKeep = this.cacheParams.maxBlocksInCache - 1;
	        blocksForPurging.splice(0, blocksToKeep);
	        // try and purge each block
	        blocksForPurging.forEach(function (block) {
	            // we never purge blocks if they are open, as purging them would mess up with
	            // our indexes, it would be very messy to restore the purged block to it's
	            // previous state if it had open children (and what if open children of open
	            // children, jeeeesus, just thinking about it freaks me out) so best is have a
	            // rule, if block is open, we never purge.
	            if (block.isAnyNodeOpen(_this.virtualRowCount)) {
	                return;
	            }
	            // at this point, block is not needed, and no open nodes, so burn baby burn
	            _this.removeBlockFromCache(block);
	        });
	    };
	    RowNodeCache.prototype.postCreateBlock = function (newBlock) {
	        newBlock.addEventListener(rowNodeBlock.RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
	        this.setBlock(newBlock.getBlockNumber(), newBlock);
	        this.purgeBlocksIfNeeded(newBlock);
	        this.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.removeBlockFromCache = function (blockToRemove) {
	        if (!blockToRemove) {
	            return;
	        }
	        this.destroyBlock(blockToRemove);
	        // we do not want to remove the 'loaded' event listener, as the
	        // concurrent loads count needs to be updated when the load is complete
	        // if the purged page is in loading state
	    };
	    // gets called after: 1) block loaded 2) block created 3) cache refresh
	    RowNodeCache.prototype.checkBlockToLoad = function () {
	        this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.checkVirtualRowCount = function (block, lastRow) {
	        // if client provided a last row, we always use it, as it could change between server calls
	        // if user deleted data and then called refresh on the grid.
	        if (typeof lastRow === 'number' && lastRow >= 0) {
	            this.virtualRowCount = lastRow;
	            this.maxRowFound = true;
	            this.onCacheUpdated();
	        }
	        else if (!this.maxRowFound) {
	            // otherwise, see if we need to add some virtual rows
	            var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
	            var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;
	            if (this.virtualRowCount < lastRowIndexPlusOverflow) {
	                this.virtualRowCount = lastRowIndexPlusOverflow;
	                this.onCacheUpdated();
	            }
	            else if (this.cacheParams.dynamicRowHeight) {
	                // the only other time is if dynamic row height, as loading rows
	                // will change the height of the block, given the height of the rows
	                // is only known after the row is loaded.
	                this.onCacheUpdated();
	            }
	        }
	    };
	    RowNodeCache.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        this.virtualRowCount = rowCount;
	        // if undefined is passed, we do not set this value, if one of {true,false}
	        // is passed, we do set the value.
	        if (utils.Utils.exists(maxRowFound)) {
	            this.maxRowFound = maxRowFound;
	        }
	        // if we are still searching, then the row count must not end at the end
	        // of a particular page, otherwise the searching will not pop into the
	        // next page
	        if (!this.maxRowFound) {
	            if (this.virtualRowCount % this.cacheParams.blockSize === 0) {
	                this.virtualRowCount++;
	            }
	        }
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.forEachNodeDeep = function (callback, sequence) {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) {
	            block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
	        });
	    };
	    RowNodeCache.prototype.forEachBlockInOrder = function (callback) {
	        var ids = this.getBlockIdsSorted();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockInReverseOrder = function (callback) {
	        var ids = this.getBlockIdsSorted().reverse();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockId = function (ids, callback) {
	        var _this = this;
	        ids.forEach(function (id) {
	            var block = _this.blocks[id];
	            callback(block, id);
	        });
	    };
	    RowNodeCache.prototype.getBlockIdsSorted = function () {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var numberComparator = function (a, b) { return a - b; }; // default comparator for array is string comparison
	        var blockIds = Object.keys(this.blocks).map(function (idStr) { return parseInt(idStr); }).sort(numberComparator);
	        return blockIds;
	    };
	    RowNodeCache.prototype.getBlock = function (blockId) {
	        return this.blocks[blockId];
	    };
	    RowNodeCache.prototype.setBlock = function (id, block) {
	        this.blocks[id] = block;
	        this.blockCount++;
	        this.cacheParams.rowNodeBlockLoader.addBlock(block);
	    };
	    RowNodeCache.prototype.destroyBlock = function (block) {
	        delete this.blocks[block.getBlockNumber()];
	        block.destroy();
	        this.blockCount--;
	        this.cacheParams.rowNodeBlockLoader.removeBlock(block);
	    };
	    // gets called 1) row count changed 2) cache purged 3) items inserted
	    RowNodeCache.prototype.onCacheUpdated = function () {
	        if (this.isActive()) {
	            // this results in both row models (infinite and server side) firing ModelUpdated,
	            // however server side row model also updates the row indexes first
	            var event_1 = {
	                type: RowNodeCache.EVENT_CACHE_UPDATED
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    RowNodeCache.prototype.purgeCache = function () {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) { return _this.removeBlockFromCache(block); });
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
	        var _this = this;
	        var result = [];
	        var lastBlockId = -1;
	        var inActiveRange = false;
	        var numberSequence = new utils.NumberSequence();
	        // if only one node passed, we start the selection at the top
	        if (utils.Utils.missing(firstInRange)) {
	            inActiveRange = true;
	        }
	        var foundGapInSelection = false;
	        this.forEachBlockInOrder(function (block, id) {
	            if (foundGapInSelection)
	                return;
	            if (inActiveRange && (lastBlockId + 1 !== id)) {
	                foundGapInSelection = true;
	                return;
	            }
	            lastBlockId = id;
	            block.forEachNodeShallow(function (rowNode) {
	                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
	                if (inActiveRange || hitFirstOrLast) {
	                    result.push(rowNode);
	                }
	                if (hitFirstOrLast) {
	                    inActiveRange = !inActiveRange;
	                }
	            }, numberSequence, _this.virtualRowCount);
	        });
	        // inActiveRange will be still true if we never hit the second rowNode
	        var invalidRange = foundGapInSelection || inActiveRange;
	        return invalidRange ? [] : result;
	    };
	    RowNodeCache.EVENT_CACHE_UPDATED = 'cacheUpdated';
	    return RowNodeCache;
	}(beanStub.BeanStub));
	exports.RowNodeCache = RowNodeCache;
	});

	unwrapExports(rowNodeCache);
	var rowNodeCache_1 = rowNodeCache.RowNodeCache;

	var infiniteCache = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var InfiniteCache = (function (_super) {
	    __extends(InfiniteCache, _super);
	    function InfiniteCache(params) {
	        return _super.call(this, params) || this;
	    }
	    InfiniteCache.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('InfiniteCache');
	    };
	    InfiniteCache.prototype.init = function () {
	        _super.prototype.init.call(this);
	        // start load of data, as the virtualRowCount will remain at 0 otherwise,
	        // so we need this to kick things off, otherwise grid would never call getRow()
	        this.getRow(0);
	    };
	    InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {
	        var startRow = block.getStartRow();
	        var endRow = block.getEndRow();
	        var indexOfLastRowToMove = moveFromIndex + moveCount;
	        // all rows need to be moved down below the insertion index
	        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {
	            // don't move rows at or before the insertion index
	            if (currentRowIndex < indexOfLastRowToMove) {
	                continue;
	            }
	            var indexOfNodeWeWant = currentRowIndex - moveCount;
	            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);
	            if (nodeForThisIndex) {
	                block.setRowNode(currentRowIndex, nodeForThisIndex);
	            }
	            else {
	                block.setBlankRowNode(currentRowIndex);
	                block.setDirty();
	            }
	        }
	    };
	    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {
	        var pageStartRow = block.getStartRow();
	        var pageEndRow = block.getEndRow();
	        var newRowNodes = [];
	        // next stage is insert the rows into this page, if applicable
	        for (var index = 0; index < items.length; index++) {
	            var rowIndex = indexToInsert + index;
	            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;
	            if (currentRowInThisPage) {
	                var dataItem = items[index];
	                var newRowNode = block.setNewData(rowIndex, dataItem);
	                newRowNodes.push(newRowNode);
	            }
	        }
	        return newRowNodes;
	    };
	    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var _this = this;
	        var newNodes = [];
	        this.forEachBlockInReverseOrder(function (block) {
	            var pageEndRow = block.getEndRow();
	            // if the insertion is after this page, then this page is not impacted
	            if (pageEndRow <= indexToInsert) {
	                return;
	            }
	            _this.moveItemsDown(block, indexToInsert, items.length);
	            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);
	            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });
	        });
	        if (this.isMaxRowFound()) {
	            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
	        }
	        this.onCacheUpdated();
	        var event = {
	            type: events$1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
	    // it will want new pages in the cache as it asks for rows. only when we are inserting /
	    // removing rows via the api is dontCreatePage set, where we move rows between the pages.
	    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {
	        if (dontCreatePage === void 0) { dontCreatePage = false; }
	        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
	        var block = this.getBlock(blockId);
	        if (!block) {
	            if (dontCreatePage) {
	                return null;
	            }
	            else {
	                block = this.createBlock(blockId);
	            }
	        }
	        return block.getRow(rowIndex);
	    };
	    InfiniteCache.prototype.createBlock = function (blockNumber) {
	        var newBlock = new infiniteBlock.InfiniteBlock(blockNumber, this.cacheParams);
	        this.context.wireBean(newBlock);
	        this.postCreateBlock(newBlock);
	        return newBlock;
	    };
	    // we have this on infinite row model only, not server side row model,
	    // because for server side, it would leave the children in inconsistent
	    // state - eg if a node had children, but after the refresh it had data
	    // for a different row, then the children would be with the wrong row node.
	    InfiniteCache.prototype.refreshCache = function () {
	        this.forEachBlockInOrder(function (block) { return block.setDirty(); });
	        this.checkBlockToLoad();
	    };
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], InfiniteCache.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], InfiniteCache.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], InfiniteCache.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], InfiniteCache.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "setBeans", null);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "init", null);
	    return InfiniteCache;
	}(rowNodeCache.RowNodeCache));
	exports.InfiniteCache = InfiniteCache;
	});

	unwrapExports(infiniteCache);
	var infiniteCache_1 = infiniteCache.InfiniteCache;

	var rowNodeBlockLoader = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (commonjsGlobal && commonjsGlobal.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var RowNodeBlockLoader = (function () {
	    function RowNodeBlockLoader(maxConcurrentRequests) {
	        this.activeBlockLoadsCount = 0;
	        this.blocks = [];
	        this.active = true;
	        this.maxConcurrentRequests = maxConcurrentRequests;
	    }
	    RowNodeBlockLoader.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('RowNodeBlockLoader');
	    };
	    RowNodeBlockLoader.prototype.addBlock = function (block) {
	        this.blocks.push(block);
	    };
	    RowNodeBlockLoader.prototype.removeBlock = function (block) {
	        utils._.removeFromArray(this.blocks, block);
	    };
	    RowNodeBlockLoader.prototype.destroy = function () {
	        this.active = false;
	    };
	    RowNodeBlockLoader.prototype.loadComplete = function () {
	        this.activeBlockLoadsCount--;
	    };
	    RowNodeBlockLoader.prototype.checkBlockToLoad = function () {
	        if (!this.active) {
	            return;
	        }
	        this.printCacheStatus();
	        if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
	            this.logger.log("checkBlockToLoad: max loads exceeded");
	            return;
	        }
	        var blockToLoad = null;
	        this.blocks.forEach(function (block) {
	            if (block.getState() === rowNodeBlock.RowNodeBlock.STATE_DIRTY) {
	                blockToLoad = block;
	            }
	        });
	        if (blockToLoad) {
	            blockToLoad.load();
	            this.activeBlockLoadsCount++;
	            this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
	            this.printCacheStatus();
	        }
	        else {
	            this.logger.log("checkBlockToLoad: no pages to load");
	        }
	    };
	    RowNodeBlockLoader.prototype.getBlockState = function () {
	        var result = {};
	        this.blocks.forEach(function (block) {
	            var nodeIdPrefix = block.getNodeIdPrefix();
	            var stateItem = {
	                blockNumber: block.getBlockNumber(),
	                startRow: block.getStartRow(),
	                endRow: block.getEndRow(),
	                pageStatus: block.getState()
	            };
	            if (utils._.exists(nodeIdPrefix)) {
	                result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
	            }
	            else {
	                result[block.getBlockNumber()] = stateItem;
	            }
	        });
	        return result;
	    };
	    RowNodeBlockLoader.prototype.printCacheStatus = function () {
	        if (this.logger.isLogging()) {
	            this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + ","
	                + (" blocks = " + JSON.stringify(this.getBlockState())));
	        }
	    };
	    __decorate([
	        __param(0, context.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowNodeBlockLoader.prototype, "setBeans", null);
	    return RowNodeBlockLoader;
	}());
	exports.RowNodeBlockLoader = RowNodeBlockLoader;
	});

	unwrapExports(rowNodeBlockLoader);
	var rowNodeBlockLoader_1 = rowNodeBlockLoader.RowNodeBlockLoader;

	var infiniteRowModel = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });















	var InfiniteRowModel = (function (_super) {
	    __extends(InfiniteRowModel, _super);
	    function InfiniteRowModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    InfiniteRowModel.prototype.getRowBounds = function (index) {
	        return {
	            rowHeight: this.rowHeight,
	            rowTop: this.rowHeight * index
	        };
	    };
	    InfiniteRowModel.prototype.init = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isRowModelInfinite()) {
	            return;
	        }
	        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        this.addEventListeners();
	        this.setDatasource(this.gridOptionsWrapper.getDatasource());
	        this.addDestroyFunc(function () { return _this.destroyCache(); });
	    };
	    InfiniteRowModel.prototype.destroyDatasource = function () {
	        if (this.datasource && this.datasource.destroy) {
	            this.datasource.destroy();
	        }
	        this.datasource = null;
	    };
	    InfiniteRowModel.prototype.isLastRowFound = function () {
	        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;
	    };
	    InfiniteRowModel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));
	    };
	    InfiniteRowModel.prototype.onFilterChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.onSortChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.onColumnEverything = function () {
	        // if the columns get reset, then this means the sort order could be impacted
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    InfiniteRowModel.prototype.getType = function () {
	        return constants.Constants.ROW_MODEL_TYPE_INFINITE;
	    };
	    InfiniteRowModel.prototype.setDatasource = function (datasource) {
	        this.destroyDatasource();
	        this.datasource = datasource;
	        // only reset if we have a valid datasource to working with
	        if (datasource) {
	            this.checkForDeprecated();
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.checkForDeprecated = function () {
	        var ds = this.datasource;
	        // the number of concurrent loads we are allowed to the server
	        if (utils.Utils.exists(ds.maxConcurrentRequests)) {
	            console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');
	        }
	        if (utils.Utils.exists(ds.maxPagesInCache)) {
	            console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');
	        }
	        if (utils.Utils.exists(ds.overflowSize)) {
	            console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');
	        }
	        if (utils.Utils.exists(ds.blockSize)) {
	            console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');
	        }
	    };
	    InfiniteRowModel.prototype.isEmpty = function () {
	        return utils.Utils.missing(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.isRowsToRender = function () {
	        return utils.Utils.exists(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange);
	    };
	    InfiniteRowModel.prototype.reset = function () {
	        // important to return here, as the user could be setting filter or sort before
	        // data-source is set
	        if (utils.Utils.missing(this.datasource)) {
	            return;
	        }
	        // if user is providing id's, then this means we can keep the selection between datsource hits,
	        // as the rows will keep their unique id's even if, for example, server side sorting or filtering
	        // is done.
	        var userGeneratingIds = utils.Utils.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
	        if (!userGeneratingIds) {
	            this.selectionController.reset();
	        }
	        this.resetCache();
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {
	        return {
	            type: events$1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            // not sure if these should all be false - noticed if after implementing,
	            // maybe they should be true?
	            newPage: false,
	            newData: false,
	            keepRenderedRows: false,
	            animate: false
	        };
	    };
	    InfiniteRowModel.prototype.resetCache = function () {
	        // if not first time creating a cache, need to destroy the old one
	        this.destroyCache();
	        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
	        // there is a bi-directional dependency between the loader and the cache,
	        // so we create loader here, and then pass dependencies in setDependencies() method later
	        this.rowNodeBlockLoader = new rowNodeBlockLoader.RowNodeBlockLoader(maxConcurrentRequests);
	        this.context.wireBean(this.rowNodeBlockLoader);
	        var cacheSettings = {
	            // the user provided datasource
	            datasource: this.datasource,
	            // sort and filter model
	            filterModel: this.filterManager.getFilterModel(),
	            sortModel: this.sortController.getSortModel(),
	            rowNodeBlockLoader: this.rowNodeBlockLoader,
	            // properties - this way we take a snapshot of them, so if user changes any, they will be
	            // used next time we create a new cache, which is generally after a filter or sort change,
	            // or a new datasource is set
	            maxConcurrentRequests: maxConcurrentRequests,
	            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),
	            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),
	            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
	            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
	            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
	            // the cache could create this, however it is also used by the pages, so handy to create it
	            // here as the settings are also passed to the pages
	            lastAccessedSequence: new utils.NumberSequence()
	        };
	        // set defaults
	        if (!(cacheSettings.maxConcurrentRequests >= 1)) {
	            cacheSettings.maxConcurrentRequests = 2;
	        }
	        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
	        // server for one page at a time. so the default if not specified is 100.
	        if (!(cacheSettings.blockSize >= 1)) {
	            cacheSettings.blockSize = 100;
	        }
	        // if user doesn't give initial rows to display, we assume zero
	        if (!(cacheSettings.initialRowCount >= 1)) {
	            cacheSettings.initialRowCount = 0;
	        }
	        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
	        // the current page and request first row of next page
	        if (!(cacheSettings.overflowSize >= 1)) {
	            cacheSettings.overflowSize = 1;
	        }
	        this.infiniteCache = new infiniteCache.InfiniteCache(cacheSettings);
	        this.context.wireBean(this.infiniteCache);
	        this.infiniteCache.addEventListener(rowNodeCache.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
	    };
	    InfiniteRowModel.prototype.destroyCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.destroy();
	            this.infiniteCache = null;
	        }
	        if (this.rowNodeBlockLoader) {
	            this.rowNodeBlockLoader.destroy();
	            this.rowNodeBlockLoader = null;
	        }
	    };
	    InfiniteRowModel.prototype.onCacheUpdated = function () {
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.getRow = function (rowIndex) {
	        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
	    };
	    InfiniteRowModel.prototype.getRowNode = function (id) {
	        var result = null;
	        this.forEachNode(function (rowNode) {
	            if (rowNode.id === id) {
	                result = rowNode;
	            }
	        });
	        return result;
	    };
	    InfiniteRowModel.prototype.forEachNode = function (callback) {
	        if (this.infiniteCache) {
	            this.infiniteCache.forEachNodeDeep(callback, new utils.NumberSequence());
	        }
	    };
	    InfiniteRowModel.prototype.getCurrentPageHeight = function () {
	        return this.getRowCount() * this.rowHeight;
	    };
	    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {
	        if (this.rowHeight !== 0) {
	            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
	            if (rowIndexForPixel > this.getPageLastRow()) {
	                return this.getPageLastRow();
	            }
	            else {
	                return rowIndexForPixel;
	            }
	        }
	        else {
	            return 0;
	        }
	    };
	    InfiniteRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    InfiniteRowModel.prototype.getPageLastRow = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() - 1 : 0;
	    };
	    InfiniteRowModel.prototype.getRowCount = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
	    };
	    InfiniteRowModel.prototype.updateRowData = function (transaction) {
	        if (utils.Utils.exists(transaction.remove) || utils.Utils.exists(transaction.update)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');
	            return;
	        }
	        if (utils.Utils.missing(transaction.addIndex)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');
	            return;
	        }
	        if (this.infiniteCache) {
	            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
	        }
	    };
	    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {
	        return false;
	    };
	    InfiniteRowModel.prototype.refreshCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.refreshCache();
	        }
	    };
	    InfiniteRowModel.prototype.purgeCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.purgeCache();
	        }
	    };
	    InfiniteRowModel.prototype.getVirtualRowCount = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.getVirtualRowCount();
	        }
	        else {
	            return null;
	        }
	    };
	    InfiniteRowModel.prototype.isMaxRowFound = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.isMaxRowFound();
	        }
	    };
	    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        if (this.infiniteCache) {
	            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
	        }
	    };
	    InfiniteRowModel.prototype.getBlockState = function () {
	        if (this.rowNodeBlockLoader) {
	            return this.rowNodeBlockLoader.getBlockState();
	        }
	        else {
	            return null;
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], InfiniteRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], InfiniteRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('sortController'),
	        __metadata("design:type", sortController.SortController)
	    ], InfiniteRowModel.prototype, "sortController", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], InfiniteRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], InfiniteRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], InfiniteRowModel.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], InfiniteRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], InfiniteRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "init", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "destroyDatasource", null);
	    __decorate([
	        context.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "destroy", null);
	    InfiniteRowModel = __decorate([
	        context.Bean('rowModel')
	    ], InfiniteRowModel);
	    return InfiniteRowModel;
	}(beanStub.BeanStub));
	exports.InfiniteRowModel = InfiniteRowModel;
	});

	unwrapExports(infiniteRowModel);
	var infiniteRowModel_1 = infiniteRowModel.InfiniteRowModel;

	var clientSideNodeManager = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	var ClientSideNodeManager = (function () {
	    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {
	        this.nextId = 0;
	        // when user is provide the id's, we also keep a map of ids to row nodes for convenience
	        this.allNodesMap = {};
	        this.rootNode = rootNode;
	        this.gridOptionsWrapper = gridOptionsWrapper;
	        this.context = context;
	        this.eventService = eventService;
	        this.columnController = columnController;
	        this.gridApi = gridApi;
	        this.columnApi = columnApi;
	        this.selectionController = selectionController;
	        this.rootNode.group = true;
	        this.rootNode.level = -1;
	        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;
	        this.rootNode.allLeafChildren = [];
	        this.rootNode.childrenAfterGroup = [];
	        this.rootNode.childrenAfterSort = [];
	        this.rootNode.childrenAfterFilter = [];
	        // if we make this class a bean, then can annotate postConstruct
	        this.postConstruct();
	    }
	    // @PostConstruct - this is not a bean, so postConstruct called by constructor
	    ClientSideNodeManager.prototype.postConstruct = function () {
	        // func below doesn't have 'this' pointer, so need to pull out these bits
	        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();
	        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
	        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();
	        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
	        this.doingLegacyTreeData = utils.Utils.exists(this.getNodeChildDetails);
	        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
	    };
	    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {
	        var result = utils.Utils.cloneObject(this.allNodesMap);
	        return result;
	    };
	    ClientSideNodeManager.prototype.getRowNode = function (id) {
	        return this.allNodesMap[id];
	    };
	    ClientSideNodeManager.prototype.setRowData = function (rowData) {
	        this.rootNode.childrenAfterFilter = null;
	        this.rootNode.childrenAfterGroup = null;
	        this.rootNode.childrenAfterSort = null;
	        this.rootNode.childrenMapped = null;
	        this.nextId = 0;
	        this.allNodesMap = {};
	        if (!rowData) {
	            this.rootNode.allLeafChildren = [];
	            this.rootNode.childrenAfterGroup = [];
	            return;
	        }
	        // kick off recursion
	        var result = this.recursiveFunction(rowData, null, ClientSideNodeManager.TOP_LEVEL);
	        if (this.doingLegacyTreeData) {
	            this.rootNode.childrenAfterGroup = result;
	            this.setLeafChildren(this.rootNode);
	        }
	        else {
	            this.rootNode.allLeafChildren = result;
	        }
	    };
	    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
	        var _this = this;
	        if (this.isLegacyTreeData()) {
	            return null;
	        }
	        var add = rowDataTran.add, addIndex = rowDataTran.addIndex, remove = rowDataTran.remove, update = rowDataTran.update;
	        var rowNodeTransaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        if (utils.Utils.exists(add)) {
	            var useIndex = typeof addIndex === 'number' && addIndex >= 0;
	            if (useIndex) {
	                // items get inserted in reverse order for index insertion
	                add.reverse().forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item, addIndex);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	            else {
	                add.forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	        }
	        if (utils.Utils.exists(remove)) {
	            var anyNodesSelected_1 = false;
	            remove.forEach(function (item) {
	                var rowNode$$1 = _this.lookupRowNode(item);
	                if (!rowNode$$1) {
	                    return;
	                }
	                if (rowNode$$1.isSelected()) {
	                    anyNodesSelected_1 = true;
	                }
	                _this.updatedRowNode(rowNode$$1, item, false);
	                rowNodeTransaction.remove.push(rowNode$$1);
	            });
	            if (anyNodesSelected_1) {
	                this.selectionController.updateGroupsFromChildrenSelections();
	                var event_1 = {
	                    type: events$1.Events.EVENT_SELECTION_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	            }
	        }
	        if (utils.Utils.exists(update)) {
	            update.forEach(function (item) {
	                var rowNode$$1 = _this.lookupRowNode(item);
	                if (!rowNode$$1) {
	                    return;
	                }
	                _this.updatedRowNode(rowNode$$1, item, true);
	                rowNodeTransaction.update.push(rowNode$$1);
	            });
	        }
	        if (rowNodeOrder) {
	            utils.Utils.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
	        }
	        return rowNodeTransaction;
	    };
	    ClientSideNodeManager.prototype.addRowNode = function (data, index) {
	        var newNode = this.createNode(data, null, ClientSideNodeManager.TOP_LEVEL);
	        if (utils.Utils.exists(index)) {
	            utils.Utils.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
	        }
	        else {
	            this.rootNode.allLeafChildren.push(newNode);
	        }
	        return newNode;
	    };
	    ClientSideNodeManager.prototype.lookupRowNode = function (data) {
	        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        var rowNode$$1;
	        if (utils.Utils.exists(rowNodeIdFunc)) {
	            // find rowNode using id
	            var id = rowNodeIdFunc(data);
	            rowNode$$1 = this.allNodesMap[id];
	            if (!rowNode$$1) {
	                console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
	                return null;
	            }
	        }
	        else {
	            // find rowNode using object references
	            rowNode$$1 = utils.Utils.find(this.rootNode.allLeafChildren, function (rowNode$$1) { return rowNode$$1.data === data; });
	            if (!rowNode$$1) {
	                console.error("ag-Grid: could not find data item as object was not found", data);
	                return null;
	            }
	        }
	        return rowNode$$1;
	    };
	    ClientSideNodeManager.prototype.updatedRowNode = function (rowNode$$1, data, update) {
	        if (update) {
	            // do update
	            rowNode$$1.updateData(data);
	        }
	        else {
	            // do delete - setting 'tailingNodeInSequence = true' to ensure EVENT_SELECTION_CHANGED is not raised for
	            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.
	            rowNode$$1.setSelected(false, false, true);
	            // so row renderer knows to fade row out (and not reposition it)
	            rowNode$$1.clearRowTop();
	            utils.Utils.removeFromArray(this.rootNode.allLeafChildren, rowNode$$1);
	            this.allNodesMap[rowNode$$1.id] = undefined;
	        }
	    };
	    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {
	        var _this = this;
	        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum
	        if (typeof rowData === 'string') {
	            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');
	            return;
	        }
	        var rowNodes = [];
	        rowData.forEach(function (dataItem) {
	            var node = _this.createNode(dataItem, parent, level);
	            rowNodes.push(node);
	        });
	        return rowNodes;
	    };
	    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {
	        var node = new rowNode.RowNode();
	        this.context.wireBean(node);
	        var doingTreeData = this.gridOptionsWrapper.isTreeData();
	        var doingLegacyTreeData = !doingTreeData && utils.Utils.exists(this.getNodeChildDetails);
	        var nodeChildDetails = doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;
	        if (nodeChildDetails && nodeChildDetails.group) {
	            node.group = true;
	            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);
	            node.expanded = nodeChildDetails.expanded === true;
	            node.field = nodeChildDetails.field;
	            node.key = nodeChildDetails.key;
	            node.canFlower = node.master; // deprecated, is now 'master'
	            // pull out all the leaf children and add to our node
	            this.setLeafChildren(node);
	        }
	        else {
	            node.group = false;
	            if (doingTreeData) {
	                node.master = false;
	                node.expanded = false;
	            }
	            else {
	                // this is the default, for when doing grid data
	                if (this.doesDataFlower) {
	                    node.master = this.doesDataFlower(dataItem);
	                }
	                else if (this.doingMasterDetail) {
	                    // if we are doing master detail, then the
	                    // default is that everything can flower.
	                    if (this.isRowMasterFunc) {
	                        node.master = this.isRowMasterFunc(dataItem);
	                    }
	                    else {
	                        node.master = true;
	                    }
	                }
	                else {
	                    node.master = false;
	                }
	                var rowGroupColumns = this.columnController.getRowGroupColumns();
	                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
	                // need to take row group into account when determining level
	                var masterRowLevel = level + numRowGroupColumns;
	                node.expanded = node.master ? this.isExpanded(masterRowLevel) : false;
	            }
	        }
	        // support for backwards compatibility, canFlow is now called 'master'
	        node.canFlower = node.master;
	        if (parent && !this.suppressParentsInRowNodes) {
	            node.parent = parent;
	        }
	        node.level = level;
	        node.setDataAndId(dataItem, this.nextId.toString());
	        this.allNodesMap[node.id] = node;
	        this.nextId++;
	        return node;
	    };
	    ClientSideNodeManager.prototype.isExpanded = function (level) {
	        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
	        if (expandByDefault === -1) {
	            return true;
	        }
	        else {
	            return level < expandByDefault;
	        }
	    };
	    // this is only used for doing legacy tree data
	    ClientSideNodeManager.prototype.setLeafChildren = function (node) {
	        node.allLeafChildren = [];
	        if (node.childrenAfterGroup) {
	            node.childrenAfterGroup.forEach(function (childAfterGroup) {
	                if (childAfterGroup.group) {
	                    if (childAfterGroup.allLeafChildren) {
	                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });
	                    }
	                }
	                else {
	                    node.allLeafChildren.push(childAfterGroup);
	                }
	            });
	        }
	    };
	    ClientSideNodeManager.prototype.insertItemsAtIndex = function (index, rowData) {
	        if (this.isLegacyTreeData()) {
	            return null;
	        }
	        var nodeList = this.rootNode.allLeafChildren;
	        if (index > nodeList.length) {
	            console.warn("ag-Grid: invalid index " + index + ", max index is " + nodeList.length);
	            return;
	        }
	        var newNodes = [];
	        // go through the items backwards, otherwise they get added in reverse order
	        for (var i = rowData.length - 1; i >= 0; i--) {
	            var data = rowData[i];
	            var newNode = this.createNode(data, null, ClientSideNodeManager.TOP_LEVEL);
	            utils.Utils.insertIntoArray(nodeList, newNode, index);
	            newNodes.push(newNode);
	        }
	        return newNodes.length > 0 ? newNodes : null;
	    };
	    ClientSideNodeManager.prototype.addItems = function (items) {
	        var nodeList = this.rootNode.allLeafChildren;
	        return this.insertItemsAtIndex(nodeList.length, items);
	    };
	    ClientSideNodeManager.prototype.isLegacyTreeData = function () {
	        var rowsAlreadyGrouped = utils.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' +
	                'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    ClientSideNodeManager.TOP_LEVEL = 0;
	    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';
	    return ClientSideNodeManager;
	}());
	exports.ClientSideNodeManager = ClientSideNodeManager;
	});

	unwrapExports(clientSideNodeManager);
	var clientSideNodeManager_1 = clientSideNodeManager.ClientSideNodeManager;

	var changedPath = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var ChangedPath = (function () {
	    function ChangedPath(keepingColumns) {
	        this.active = true;
	        this.nodeIdsToBoolean = {};
	        this.nodeIdsToColumns = {};
	        this.keepingColumns = keepingColumns;
	    }
	    ChangedPath.prototype.setInactive = function () {
	        this.active = false;
	    };
	    ChangedPath.prototype.isActive = function () {
	        return this.active;
	    };
	    ChangedPath.prototype.addParentNode = function (rowNode, columns) {
	        var _this = this;
	        this.validateActive();
	        var pointer = rowNode;
	        while (pointer) {
	            // add this item to the path, all the way to parent
	            this.nodeIdsToBoolean[pointer.id] = true;
	            // if columns, add the columns in all the way to parent, merging
	            // in any other columns that might be there already
	            if (this.keepingColumns && columns) {
	                if (!this.nodeIdsToColumns[pointer.id]) {
	                    this.nodeIdsToColumns[pointer.id] = {};
	                }
	                columns.forEach(function (col) { return _this.nodeIdsToColumns[pointer.id][col.getId()] = true; });
	            }
	            pointer = pointer.parent;
	        }
	    };
	    ChangedPath.prototype.isInPath = function (rowNode) {
	        this.validateActive();
	        return this.nodeIdsToBoolean[rowNode.id];
	    };
	    ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {
	        this.validateActive();
	        if (!this.keepingColumns) {
	            return valueColumns;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return colsForThisNode[col.getId()]; });
	        return result;
	    };
	    ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {
	        this.validateActive();
	        if (!this.keepingColumns) {
	            return null;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return !colsForThisNode[col.getId()]; });
	        return result;
	    };
	    // this is to check for a bug in our code. each part that uses ChangePath should check
	    // if it is valid first, and not use it if it is not valid
	    ChangedPath.prototype.validateActive = function () {
	        if (!this.active) {
	            throw "ag-Grid: tried to work on an invalid changed path";
	        }
	    };
	    return ChangedPath;
	}());
	exports.ChangedPath = ChangedPath;
	});

	unwrapExports(changedPath);
	var changedPath_1 = changedPath.ChangedPath;

	var clientSideRowModel = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
















	var RecursionType;
	(function (RecursionType) {
	    RecursionType[RecursionType["Normal"] = 0] = "Normal";
	    RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
	    RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
	    RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
	})(RecursionType || (RecursionType = {}));
	var ClientSideRowModel = (function () {
	    function ClientSideRowModel() {
	    }
	    ClientSideRowModel.prototype.init = function () {
	        var refreshEverythingFunc = this.refreshModel.bind(this, { step: constants.Constants.STEP_EVERYTHING });
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingFunc);
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: constants.Constants.STEP_PIVOT }));
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events$1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
	        var refreshMapFunc = this.refreshModel.bind(this, { step: constants.Constants.STEP_MAP, keepRenderedRows: true, animate: true });
	        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);
	        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);
	        this.rootNode = new rowNode.RowNode();
	        this.nodeManager = new clientSideNodeManager.ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
	        this.context.wireBean(this.rootNode);
	    };
	    // returns false if row was moved, otherwise true
	    ClientSideRowModel.prototype.ensureRowAtPixel = function (rowNode$$1, pixel) {
	        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
	        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
	        if (rowNodeAtPixelNow === rowNode$$1) {
	            return false;
	        }
	        utils.Utils.removeFromArray(this.rootNode.allLeafChildren, rowNode$$1);
	        utils.Utils.insertIntoArray(this.rootNode.allLeafChildren, rowNode$$1, indexAtPixelNow);
	        this.refreshModel({ step: constants.Constants.STEP_EVERYTHING, keepRenderedRows: true, animate: true, keepEditingRows: true });
	        return true;
	    };
	    ClientSideRowModel.prototype.isLastRowFound = function () {
	        return true;
	    };
	    ClientSideRowModel.prototype.getRowCount = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length;
	        }
	        else {
	            return 0;
	        }
	    };
	    ClientSideRowModel.prototype.getRowBounds = function (index) {
	        if (utils.Utils.missing(this.rowsToDisplay)) {
	            return null;
	        }
	        var rowNode$$1 = this.rowsToDisplay[index];
	        if (rowNode$$1) {
	            return {
	                rowTop: rowNode$$1.rowTop,
	                rowHeight: rowNode$$1.rowHeight
	            };
	        }
	        else {
	            return null;
	        }
	    };
	    ClientSideRowModel.prototype.onRowGroupOpened = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants.Constants.STEP_MAP, keepRenderedRows: true, animate: animate });
	    };
	    ClientSideRowModel.prototype.onFilterChanged = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants.Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });
	    };
	    ClientSideRowModel.prototype.onSortChanged = function () {
	        // we only act on the sort event here if the user is doing in grid sorting.
	        // we ignore it if the sorting is happening on the server side.
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            return;
	        }
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants.Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });
	    };
	    ClientSideRowModel.prototype.getType = function () {
	        return constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
	    };
	    ClientSideRowModel.prototype.onValueChanged = function () {
	        if (this.columnController.isPivotActive()) {
	            this.refreshModel({ step: constants.Constants.STEP_PIVOT });
	        }
	        else {
	            this.refreshModel({ step: constants.Constants.STEP_AGGREGATE });
	        }
	    };
	    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {
	        // for updates, if the row is updated at all, then we re-calc all the values
	        // in that row. we could compare each value to each old value, however if we
	        // did this, we would be calling the valueService twice, once on the old value
	        // and once on the new value. so it's less valueGetter calls if we just assume
	        // each column is different. that way the changedPath is used so that only
	        // the impacted parent rows are recalculated, parents who's children have
	        // not changed are not impacted.
	        var valueColumns = this.columnController.getValueColumns();
	        var noValueColumns = utils.Utils.missingOrEmpty(valueColumns);
	        var noTransactions = utils.Utils.missingOrEmpty(rowNodeTransactions);
	        var changedPath$$1 = new changedPath.ChangedPath(false);
	        if (noValueColumns || noTransactions) {
	            changedPath$$1.setInactive();
	        }
	        return changedPath$$1;
	    };
	    ClientSideRowModel.prototype.refreshModel = function (params) {
	        // this goes through the pipeline of stages. what's in my head is similar
	        // to the diagram on this page:
	        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
	        // however we want to keep the results of each stage, hence we manually call
	        // each step rather than have them chain each other.
	        var _this = this;
	        // fallthrough in below switch is on purpose,
	        // eg if STEP_FILTER, then all steps below this
	        // step get done
	        // let start: number;
	        // console.log('======= start =======');
	        var changedPath$$1 = this.createChangePath(params.rowNodeTransactions);
	        switch (params.step) {
	            case constants.Constants.STEP_EVERYTHING:
	                // start = new Date().getTime();
	                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath$$1);
	            // console.log('rowGrouping = ' + (new Date().getTime() - start));
	            case constants.Constants.STEP_FILTER:
	                // start = new Date().getTime();
	                this.doFilter();
	            // console.log('filter = ' + (new Date().getTime() - start));
	            case constants.Constants.STEP_PIVOT:
	                this.doPivot(changedPath$$1);
	            case constants.Constants.STEP_AGGREGATE:// depends on agg fields
	                // start = new Date().getTime();
	                this.doAggregate(changedPath$$1);
	            // console.log('aggregation = ' + (new Date().getTime() - start));
	            case constants.Constants.STEP_SORT:
	                // start = new Date().getTime();
	                this.doSort();
	            // console.log('sort = ' + (new Date().getTime() - start));
	            case constants.Constants.STEP_MAP:
	                // start = new Date().getTime();
	                this.doRowsToDisplay();
	        }
	        var event = {
	            type: events$1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            animate: params.animate,
	            keepRenderedRows: params.keepRenderedRows,
	            newData: params.newData,
	            newPage: false
	        };
	        this.eventService.dispatchEvent(event);
	        if (this.$scope) {
	            setTimeout(function () {
	                _this.$scope.$apply();
	            }, 0);
	        }
	    };
	    ClientSideRowModel.prototype.isEmpty = function () {
	        var rowsMissing;
	        var doingLegacyTreeData = utils.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (doingLegacyTreeData) {
	            rowsMissing = utils.Utils.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;
	        }
	        else {
	            rowsMissing = utils.Utils.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
	        }
	        var empty = utils.Utils.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
	        return empty;
	    };
	    ClientSideRowModel.prototype.isRowsToRender = function () {
	        return utils.Utils.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
	    };
	    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        // if lastSelectedNode is missing, we start at the first row
	        var firstRowHit = !lastInRange;
	        var lastRowHit = false;
	        var lastRow;
	        var result = [];
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.forEachNodeAfterFilterAndSort(function (rowNode$$1) {
	            var lookingForLastRow = firstRowHit && !lastRowHit;
	            // check if we need to flip the select switch
	            if (!firstRowHit) {
	                if (rowNode$$1 === lastInRange || rowNode$$1 === firstInRange) {
	                    firstRowHit = true;
	                }
	            }
	            var skipThisGroupNode = rowNode$$1.group && groupsSelectChildren;
	            if (!skipThisGroupNode) {
	                var inRange = firstRowHit && !lastRowHit;
	                var childOfLastRow = rowNode$$1.isParentOfNode(lastRow);
	                if (inRange || childOfLastRow) {
	                    result.push(rowNode$$1);
	                }
	            }
	            if (lookingForLastRow) {
	                if (rowNode$$1 === lastInRange || rowNode$$1 === firstInRange) {
	                    lastRowHit = true;
	                    if (rowNode$$1 === lastInRange) {
	                        lastRow = lastInRange;
	                    }
	                    else {
	                        lastRow = firstInRange;
	                    }
	                }
	            }
	        });
	        return result;
	    };
	    ClientSideRowModel.prototype.setDatasource = function (datasource) {
	        console.error('ag-Grid: should never call setDatasource on clientSideRowController');
	    };
	    ClientSideRowModel.prototype.getTopLevelNodes = function () {
	        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
	    };
	    ClientSideRowModel.prototype.getRootNode = function () {
	        return this.rootNode;
	    };
	    ClientSideRowModel.prototype.getRow = function (index) {
	        return this.rowsToDisplay[index];
	    };
	    ClientSideRowModel.prototype.isRowPresent = function (rowNode$$1) {
	        return this.rowsToDisplay.indexOf(rowNode$$1) >= 0;
	    };
	    ClientSideRowModel.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: rowModel.getVirtualRowCount() is not longer a function, use rowModel.getRowCount() instead');
	        return this.getPageLastRow();
	    };
	    ClientSideRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    ClientSideRowModel.prototype.getPageLastRow = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length - 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {
	        if (this.isEmpty()) {
	            return -1;
	        }
	        // do binary search of tree
	        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	        var bottomPointer = 0;
	        var topPointer = this.rowsToDisplay.length - 1;
	        // quick check, if the pixel is out of bounds, then return last row
	        if (pixelToMatch <= 0) {
	            // if pixel is less than or equal zero, it's always the first row
	            return 0;
	        }
	        var lastNode = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	        if (lastNode.rowTop <= pixelToMatch) {
	            return this.rowsToDisplay.length - 1;
	        }
	        while (true) {
	            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
	            var currentRowNode = this.rowsToDisplay[midPointer];
	            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
	                return midPointer;
	            }
	            else if (currentRowNode.rowTop < pixelToMatch) {
	                bottomPointer = midPointer + 1;
	            }
	            else if (currentRowNode.rowTop > pixelToMatch) {
	                topPointer = midPointer - 1;
	            }
	        }
	    };
	    ClientSideRowModel.prototype.isRowInPixel = function (rowNode$$1, pixelToMatch) {
	        var topPixel = rowNode$$1.rowTop;
	        var bottomPixel = rowNode$$1.rowTop + rowNode$$1.rowHeight;
	        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
	        return pixelInRow;
	    };
	    ClientSideRowModel.prototype.getCurrentPageHeight = function () {
	        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
	            var lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	            var lastPixel = lastRow.rowTop + lastRow.rowHeight;
	            return lastPixel;
	        }
	        else {
	            return 0;
	        }
	    };
	    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {
	        if (this.rootNode.allLeafChildren) {
	            this.rootNode.allLeafChildren.forEach(function (rowNode$$1, index) { return callback(rowNode$$1, index); });
	        }
	    };
	    ClientSideRowModel.prototype.forEachNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
	    };
	    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
	    };
	    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
	    };
	    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
	    };
	    // iterates through each item in memory, and calls the callback function
	    // nodes - the rowNodes to traverse
	    // callback - the user provided callback
	    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
	    // index - works similar to the index in forEach in javascripts array function
	    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                callback(node, index++);
	                // go to the next level if it is a group
	                if (node.hasChildren()) {
	                    // depending on the recursion type, we pick a difference set of children
	                    var nodeChildren = void 0;
	                    switch (recursionType) {
	                        case RecursionType.Normal:
	                            nodeChildren = node.childrenAfterGroup;
	                            break;
	                        case RecursionType.AfterFilter:
	                            nodeChildren = node.childrenAfterFilter;
	                            break;
	                        case RecursionType.AfterFilterAndSort:
	                            nodeChildren = node.childrenAfterSort;
	                            break;
	                        case RecursionType.PivotNodes:
	                            // for pivot, we don't go below leafGroup levels
	                            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
	                            break;
	                    }
	                    if (nodeChildren) {
	                        index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
	                    }
	                }
	            }
	        }
	        return index;
	    };
	    // it's possible to recompute the aggregate without doing the other parts
	    // + gridApi.recomputeAggregates()
	    ClientSideRowModel.prototype.doAggregate = function (changedPath$$1) {
	        if (this.aggregationStage) {
	            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath$$1 });
	        }
	    };
	    // + gridApi.expandAll()
	    // + gridApi.collapseAll()
	    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {
	        var usingTreeData = this.gridOptionsWrapper.isTreeData();
	        if (this.rootNode) {
	            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
	        }
	        function recursiveExpandOrCollapse(rowNodes) {
	            if (!rowNodes) {
	                return;
	            }
	            rowNodes.forEach(function (rowNode$$1) {
	                var shouldExpandOrCollapse = usingTreeData ? utils.Utils.exists(rowNode$$1.childrenAfterGroup) : rowNode$$1.group;
	                if (shouldExpandOrCollapse) {
	                    rowNode$$1.expanded = expand;
	                    recursiveExpandOrCollapse(rowNode$$1.childrenAfterGroup);
	                }
	            });
	        }
	        this.refreshModel({ step: constants.Constants.STEP_MAP });
	    };
	    ClientSideRowModel.prototype.doSort = function () {
	        this.sortStage.execute({ rowNode: this.rootNode });
	    };
	    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath$$1) {
	        var _this = this;
	        // grouping is enterprise only, so if service missing, skip the step
	        var doingLegacyTreeData = utils.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (doingLegacyTreeData) {
	            return;
	        }
	        if (this.groupStage) {
	            if (utils.Utils.exists(rowNodeTransactions)) {
	                rowNodeTransactions.forEach(function (tran) {
	                    _this.groupStage.execute({ rowNode: _this.rootNode,
	                        rowNodeTransaction: tran,
	                        rowNodeOrder: rowNodeOrder,
	                        changedPath: changedPath$$1 });
	                });
	            }
	            else {
	                // groups are about to get disposed, so need to deselect any that are selected
	                this.selectionController.removeGroupsFromSelection();
	                this.groupStage.execute({ rowNode: this.rootNode, changedPath: changedPath$$1 });
	                // set open/closed state on groups
	                this.restoreGroupState(groupState);
	            }
	            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
	                this.selectionController.updateGroupsFromChildrenSelections();
	            }
	        }
	        else {
	            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
	        }
	    };
	    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {
	        if (!groupState) {
	            return;
	        }
	        utils.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
	            // if the group was open last time, then open it this time. however
	            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
	            // setting will take effect.
	            if (typeof groupState[key] === 'boolean') {
	                node.expanded = groupState[key];
	            }
	        });
	    };
	    ClientSideRowModel.prototype.doFilter = function () {
	        this.filterStage.execute({ rowNode: this.rootNode });
	    };
	    ClientSideRowModel.prototype.doPivot = function (changedPath$$1) {
	        if (this.pivotStage) {
	            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath$$1 });
	        }
	    };
	    ClientSideRowModel.prototype.getGroupState = function () {
	        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
	            return null;
	        }
	        var result = {};
	        utils.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });
	        return result;
	    };
	    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {
	        return this.nodeManager.getCopyOfNodesMap();
	    };
	    ClientSideRowModel.prototype.getRowNode = function (id) {
	        return this.nodeManager.getRowNode(id);
	    };
	    // rows: the rows to put into the model
	    ClientSideRowModel.prototype.setRowData = function (rowData) {
	        // no need to invalidate cache, as the cache is stored on the rowNode,
	        // so new rowNodes means the cache is wiped anyway.
	        // remember group state, so we can expand groups that should be expanded
	        var groupState = this.getGroupState();
	        this.nodeManager.setRowData(rowData);
	        // this event kicks off:
	        // - clears selection
	        // - updates filters
	        // - shows 'no rows' overlay if needed
	        var rowDataChangedEvent = {
	            type: events$1.Events.EVENT_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(rowDataChangedEvent);
	        this.refreshModel({
	            step: constants.Constants.STEP_EVERYTHING,
	            groupState: groupState,
	            newData: true
	        });
	    };
	    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
	        var _this = this;
	        if (!this.rowDataTransactionBatch) {
	            this.rowDataTransactionBatch = [];
	            var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();
	            setTimeout(function () {
	                _this.executeBatchUpdateRowData();
	                _this.rowDataTransactionBatch = null;
	            }, waitMillis);
	        }
	        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });
	    };
	    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {
	        var _this = this;
	        this.valueCache.onDataChanged();
	        var callbackFuncsBound = [];
	        var rowNodeTrans = [];
	        this.rowDataTransactionBatch.forEach(function (tranItem) {
	            var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);
	            rowNodeTrans.push(rowNodeTran);
	            if (tranItem.callback) {
	                callbackFuncsBound.push(tranItem.callback.bind(rowNodeTran));
	            }
	        });
	        this.commonUpdateRowData(rowNodeTrans);
	        // do callbacks in next VM turn so it's async
	        if (callbackFuncsBound.length > 0) {
	            setTimeout(function () {
	                callbackFuncsBound.forEach(function (func) { return func(); });
	            }, 0);
	        }
	    };
	    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
	        this.valueCache.onDataChanged();
	        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
	        this.commonUpdateRowData([rowNodeTran], rowNodeOrder);
	        return rowNodeTran;
	    };
	    // common to updateRowData and batchUpdateRowData
	    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {
	        this.refreshModel({
	            step: constants.Constants.STEP_EVERYTHING,
	            rowNodeTransactions: rowNodeTrans,
	            rowNodeOrder: rowNodeOrder,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        });
	        var event = {
	            type: events$1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ClientSideRowModel.prototype.doRowsToDisplay = function () {
	        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
	    };
	    ClientSideRowModel.prototype.onRowHeightChanged = function () {
	        this.refreshModel({ step: constants.Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });
	    };
	    ClientSideRowModel.prototype.resetRowHeights = function () {
	        this.forEachNode(function (rowNode$$1) { return rowNode$$1.setRowHeight(null); });
	        this.onRowHeightChanged();
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ClientSideRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('columnController'),
	        __metadata("design:type", columnController.ColumnController)
	    ], ClientSideRowModel.prototype, "columnController", void 0);
	    __decorate([
	        context.Autowired('filterManager'),
	        __metadata("design:type", filterManager.FilterManager)
	    ], ClientSideRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "$scope", void 0);
	    __decorate([
	        context.Autowired('selectionController'),
	        __metadata("design:type", selectionController.SelectionController)
	    ], ClientSideRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ClientSideRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('context'),
	        __metadata("design:type", context.Context)
	    ], ClientSideRowModel.prototype, "context", void 0);
	    __decorate([
	        context.Autowired('valueService'),
	        __metadata("design:type", valueService.ValueService)
	    ], ClientSideRowModel.prototype, "valueService", void 0);
	    __decorate([
	        context.Autowired('valueCache'),
	        __metadata("design:type", valueCache.ValueCache)
	    ], ClientSideRowModel.prototype, "valueCache", void 0);
	    __decorate([
	        context.Autowired('columnApi'),
	        __metadata("design:type", columnApi.ColumnApi)
	    ], ClientSideRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context.Autowired('gridApi'),
	        __metadata("design:type", gridApi.GridApi)
	    ], ClientSideRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context.Autowired('filterStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "filterStage", void 0);
	    __decorate([
	        context.Autowired('sortStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "sortStage", void 0);
	    __decorate([
	        context.Autowired('flattenStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "flattenStage", void 0);
	    __decorate([
	        context.Optional('groupStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "groupStage", void 0);
	    __decorate([
	        context.Optional('aggregationStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "aggregationStage", void 0);
	    __decorate([
	        context.Optional('pivotStage'),
	        __metadata("design:type", Object)
	    ], ClientSideRowModel.prototype, "pivotStage", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ClientSideRowModel.prototype, "init", null);
	    ClientSideRowModel = __decorate([
	        context.Bean('rowModel')
	    ], ClientSideRowModel);
	    return ClientSideRowModel;
	}());
	exports.ClientSideRowModel = ClientSideRowModel;
	});

	unwrapExports(clientSideRowModel);
	var clientSideRowModel_1 = clientSideRowModel.ClientSideRowModel;

	var baseFrameworkFactory = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */
	var BaseFrameworkFactory = (function () {
	    function BaseFrameworkFactory() {
	    }
	    BaseFrameworkFactory.prototype.dateComponent = function (gridOptions) {
	        return gridOptions.dateComponent;
	    };
	    BaseFrameworkFactory.prototype.colDefFloatingCellRenderer = function (colDef) {
	        return colDef.pinnedRowCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellRenderer = function (colDef) {
	        return colDef.cellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellEditor = function (colDef) {
	        return colDef.cellEditor;
	    };
	    BaseFrameworkFactory.prototype.colDefFilter = function (colDef) {
	        return colDef.filter;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsFullWidthCellRenderer = function (gridOptions) {
	        return gridOptions.fullWidthCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowRenderer = function (gridOptions) {
	        return gridOptions.groupRowRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowInnerRenderer = function (gridOptions) {
	        return gridOptions.groupRowInnerRenderer;
	    };
	    BaseFrameworkFactory.prototype.setTimeout = function (action, timeout) {
	        setTimeout(action, timeout);
	    };
	    return BaseFrameworkFactory;
	}());
	exports.BaseFrameworkFactory = BaseFrameworkFactory;
	});

	unwrapExports(baseFrameworkFactory);
	var baseFrameworkFactory_1 = baseFrameworkFactory.BaseFrameworkFactory;

	var xmlFactory = createCommonjsModule(function (module, exports) {
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var LINE_SEPARATOR = '\r\n';
	var XmlFactory = (function () {
	    function XmlFactory() {
	    }
	    XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {
	        var _this = this;
	        var props = "";
	        if (xmlElement.properties) {
	            if (xmlElement.properties.prefixedAttributes) {
	                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
	                    Object.keys(prefixedSet.map).forEach(function (key) {
	                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
	                    });
	                });
	            }
	            if (xmlElement.properties.rawMap) {
	                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
	                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
	                });
	            }
	        }
	        var result = "<" + xmlElement.name + props;
	        if (!xmlElement.children && xmlElement.textNode == null) {
	            return result + "/>" + LINE_SEPARATOR;
	        }
	        if (xmlElement.textNode != null) {
	            return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	        }
	        result += ">" + LINE_SEPARATOR;
	        xmlElement.children.forEach(function (it) {
	            result += _this.createXml(it, booleanTransformer);
	        });
	        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	    };
	    XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
	        if (!value) {
	            return "";
	        }
	        var xmlValue = value;
	        if ((typeof (value) === 'boolean')) {
	            if (booleanTransformer) {
	                xmlValue = booleanTransformer(value);
	            }
	        }
	        xmlValue = '"' + xmlValue + '"';
	        return " " + key + "=" + xmlValue;
	    };
	    XmlFactory = __decorate([
	        context.Bean('xmlFactory')
	    ], XmlFactory);
	    return XmlFactory;
	}());
	exports.XmlFactory = XmlFactory;
	});

	unwrapExports(xmlFactory);
	var xmlFactory_1 = xmlFactory.XmlFactory;

	var changeDetectionService = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });








	var ChangeDetectionService = (function (_super) {
	    __extends(ChangeDetectionService, _super);
	    function ChangeDetectionService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ChangeDetectionService.prototype.init = function () {
	        if (this.rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            this.clientSideRowModel = this.rowModel;
	        }
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
	    };
	    ChangeDetectionService.prototype.onCellValueChanged = function (event) {
	        this.doChangeDetection(event.node, event.column);
	    };
	    ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {
	        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            return;
	        }
	        // step 1 of change detection is to update the aggregated values
	        if (this.clientSideRowModel && !rowNode.isRowPinned()) {
	            var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
	            var changedPath$$1 = new changedPath.ChangedPath(onlyChangedColumns);
	            changedPath$$1.addParentNode(rowNode.parent, [column]);
	            this.clientSideRowModel.doAggregate(changedPath$$1);
	        }
	        // step 2 of change detection is to refresh the cells
	        this.rowRenderer.refreshCells();
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], ChangeDetectionService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ChangeDetectionService.prototype, "rowModel", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], ChangeDetectionService.prototype, "rowRenderer", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], ChangeDetectionService.prototype, "eventService", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ChangeDetectionService.prototype, "init", null);
	    ChangeDetectionService = __decorate([
	        context.Bean('changeDetectionService')
	    ], ChangeDetectionService);
	    return ChangeDetectionService;
	}(beanStub.BeanStub));
	exports.ChangeDetectionService = ChangeDetectionService;
	});

	unwrapExports(changeDetectionService);
	var changeDetectionService_1 = changeDetectionService.ChangeDetectionService;

	var paginationComp = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });









	var PaginationComp = (function (_super) {
	    __extends(PaginationComp, _super);
	    function PaginationComp() {
	        return _super.call(this) || this;
	    }
	    PaginationComp.prototype.postConstruct = function () {
	        this.setTemplate(this.getTemplate());
	        var isPaging = this.gridOptionsWrapper.isPagination();
	        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
	        if (!paginationPanelEnabled) {
	            this.setVisible(false);
	            return;
	        }
	        this.addDestroyableEventListener(this.eventService, events$1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(this.btFirst, 'click', this.onBtFirst.bind(this));
	        this.addDestroyableEventListener(this.btLast, 'click', this.onBtLast.bind(this));
	        this.addDestroyableEventListener(this.btNext, 'click', this.onBtNext.bind(this));
	        this.addDestroyableEventListener(this.btPrevious, 'click', this.onBtPrevious.bind(this));
	        this.onPaginationChanged();
	    };
	    PaginationComp.prototype.onPaginationChanged = function () {
	        this.enableOrDisableButtons();
	        this.updateRowLabels();
	        this.setCurrentPageLabel();
	        this.setTotalLabels();
	    };
	    PaginationComp.prototype.setCurrentPageLabel = function () {
	        var pagesExist = this.paginationProxy.getTotalPages() > 0;
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var toDisplay = pagesExist ? currentPage + 1 : 0;
	        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
	    };
	    PaginationComp.prototype.formatNumber = function (value) {
	        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
	        if (userFunc) {
	            return userFunc({ value: value });
	        }
	        else {
	            return utils._.formatNumberCommas(value);
	        }
	    };
	    PaginationComp.prototype.getTemplate = function () {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var strPage = localeTextFunc('page', 'Page');
	        var strTo = localeTextFunc('to', 'to');
	        var strOf = localeTextFunc('of', 'of');
	        var strFirst = localeTextFunc('first', 'First');
	        var strPrevious = localeTextFunc('previous', 'Previous');
	        var strNext = localeTextFunc('next', 'Next');
	        var strLast = localeTextFunc('last', 'Last');
	        return "<div class=\"ag-paging-panel ag-font-style\">\n                <span ref=\"eSummaryPanel\" class=\"ag-paging-row-summary-panel\">\n                    <span ref=\"lbFirstRowOnPage\"></span> " + strTo + " <span ref=\"lbLastRowOnPage\"></span> " + strOf + " <span ref=\"lbRecordCount\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\">\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btFirst\">" + strFirst + "</button>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btPrevious\">" + strPrevious + "</button>\n                    " + strPage + " <span ref=\"lbCurrent\"></span> " + strOf + " <span ref=\"lbTotal\"></span>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btNext\">" + strNext + "</button>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btLast\">" + strLast + "</button>\n                </span>\n            </div>";
	    };
	    PaginationComp.prototype.onBtNext = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    PaginationComp.prototype.onBtPrevious = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    PaginationComp.prototype.onBtFirst = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    PaginationComp.prototype.onBtLast = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    PaginationComp.prototype.enableOrDisableButtons = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var disablePreviousAndFirst = currentPage === 0;
	        this.btPrevious.disabled = disablePreviousAndFirst;
	        this.btFirst.disabled = disablePreviousAndFirst;
	        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
	        var onLastPage = maxRowFound && currentPage === (totalPages - 1);
	        var disableNext = onLastPage || zeroPagesToDisplay;
	        this.btNext.disabled = disableNext;
	        var disableLast = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);
	        this.btLast.disabled = disableLast;
	    };
	    PaginationComp.prototype.updateRowLabels = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var pageSize = this.paginationProxy.getPageSize();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        var startRow;
	        var endRow;
	        if (this.isZeroPagesToDisplay()) {
	            startRow = 0;
	            endRow = 0;
	        }
	        else {
	            startRow = (pageSize * currentPage) + 1;
	            endRow = startRow + pageSize - 1;
	            if (maxRowFound && endRow > rowCount) {
	                endRow = rowCount;
	            }
	        }
	        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
	        this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
	    };
	    PaginationComp.prototype.isZeroPagesToDisplay = function () {
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        return maxRowFound && totalPages === 0;
	    };
	    PaginationComp.prototype.setTotalLabels = function () {
	        var lastPageFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        if (lastPageFound) {
	            this.lbTotal.innerHTML = this.formatNumber(totalPages);
	            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
	        }
	        else {
	            var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
	            this.lbTotal.innerHTML = moreText;
	            this.lbRecordCount.innerHTML = moreText;
	        }
	    };
	    __decorate([
	        context.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper.GridOptionsWrapper)
	    ], PaginationComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context.Autowired('eventService'),
	        __metadata("design:type", eventService.EventService)
	    ], PaginationComp.prototype, "eventService", void 0);
	    __decorate([
	        context.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy.PaginationProxy)
	    ], PaginationComp.prototype, "paginationProxy", void 0);
	    __decorate([
	        context.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer.RowRenderer)
	    ], PaginationComp.prototype, "rowRenderer", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('btFirst'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btFirst", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('btPrevious'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btPrevious", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('btNext'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btNext", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('btLast'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btLast", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('lbRecordCount'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbRecordCount", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('lbFirstRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbFirstRowOnPage", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('lbLastRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbLastRowOnPage", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('eSummaryPanel'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "eSummaryPanel", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('lbCurrent'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbCurrent", void 0);
	    __decorate([
	        componentAnnotations.RefSelector('lbTotal'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbTotal", void 0);
	    __decorate([
	        context.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationComp.prototype, "postConstruct", null);
	    return PaginationComp;
	}(component.Component));
	exports.PaginationComp = PaginationComp;
	});

	unwrapExports(paginationComp);
	var paginationComp_1 = paginationComp.PaginationComp;

	var grid = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









































































	var Grid = (function () {
	    function Grid(eGridDiv, gridOptions, params) {
	        if (!eGridDiv) {
	            console.error('ag-Grid: no div element provided to the grid');
	        }
	        if (!gridOptions) {
	            console.error('ag-Grid: no gridOptions provided to the grid');
	        }
	        var rowModelClass = this.getRowModelClass(gridOptions);
	        var enterprise = utils.Utils.exists(Grid.enterpriseBeans);
	        var frameworkFactory = params ? params.frameworkFactory : null;
	        if (utils.Utils.missing(frameworkFactory)) {
	            frameworkFactory = new baseFrameworkFactory.BaseFrameworkFactory();
	        }
	        var overrideBeans = [];
	        if (Grid.enterpriseBeans) {
	            overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);
	        }
	        if (Grid.frameworkBeans) {
	            overrideBeans = overrideBeans.concat(Grid.frameworkBeans);
	        }
	        var seed = {
	            enterprise: enterprise,
	            gridOptions: gridOptions,
	            eGridDiv: eGridDiv,
	            $scope: params ? params.$scope : null,
	            $compile: params ? params.$compile : null,
	            quickFilterOnScope: params ? params.quickFilterOnScope : null,
	            globalEventListener: params ? params.globalEventListener : null,
	            frameworkFactory: frameworkFactory
	        };
	        if (params && params.seedBeanInstances) {
	            utils.Utils.assign(seed, params.seedBeanInstances);
	        }
	        var components = [
	            { componentName: 'AgCheckbox', theClass: agCheckbox.AgCheckbox },
	            { componentName: 'AgGridComp', theClass: gridPanel.GridPanel },
	            { componentName: 'AgHeaderRoot', theClass: headerRootComp.HeaderRootComp },
	            { componentName: 'AgPagination', theClass: paginationComp.PaginationComp },
	        ];
	        if (Grid.enterpriseComponents) {
	            components = components.concat(Grid.enterpriseComponents);
	        }
	        var contextParams = {
	            overrideBeans: overrideBeans,
	            seed: seed,
	            //Careful with the order of the beans here, there are dependencies between them that need to be kept
	            beans: [rowModelClass, beans.Beans, paginationProxy.PaginationAutoPageSizeService, gridApi.GridApi, componentProvider.ComponentProvider, agComponentUtils.AgComponentUtils, componentMetadataProvider.ComponentMetadataProvider,
	                componentProvider.ComponentProvider, componentResolver.ComponentResolver, componentRecipes.ComponentRecipes, heightScaler.HeightScaler, autoHeightCalculator.AutoHeightCalculator,
	                cellRendererFactory.CellRendererFactory, horizontalResizeService.HorizontalResizeService, pinnedRowModel.PinnedRowModel, dragService.DragService,
	                displayedGroupCreator.DisplayedGroupCreator, eventService.EventService, gridOptionsWrapper.GridOptionsWrapper, selectionController.SelectionController,
	                filterManager.FilterManager, columnController.ColumnController, paginationProxy.PaginationProxy, rowRenderer.RowRenderer, expressionService.ExpressionService,
	                balancedColumnTreeBuilder.BalancedColumnTreeBuilder, csvCreator.CsvCreator, downloader.Downloader, xmlFactory.XmlFactory, gridSerializer.GridSerializer, templateService.TemplateService,
	                navigationService.NavigationService, popupService.PopupService, valueCache.ValueCache, valueService.ValueService, alignedGridsService.AlignedGridsService,
	                logger.LoggerFactory, columnUtils.ColumnUtils, autoWidthCalculator.AutoWidthCalculator, popupService.PopupService, gridCore.GridCore, standardMenu.StandardMenuFactory,
	                dragAndDropService.DragAndDropService, columnApi.ColumnApi, focusedCellController.FocusedCellController, mouseEventService.MouseEventService,
	                cellNavigationService.CellNavigationService, filterStage.FilterStage, sortStage.SortStage, flattenStage.FlattenStage, filterService.FilterService,
	                cellEditorFactory.CellEditorFactory, cellRendererService.CellRendererService, valueFormatterService.ValueFormatterService, stylingService.StylingService, scrollVisibleService.ScrollVisibleService,
	                columnHoverService.ColumnHoverService, columnAnimationService.ColumnAnimationService, sortService.SortService, selectableService.SelectableService, autoGroupColService.AutoGroupColService,
	                immutableService.ImmutableService, changeDetectionService.ChangeDetectionService, environment.Environment, animationFrameService.AnimationFrameService, sortController.SortController],
	            components: components,
	            debug: !!gridOptions.debug
	        };
	        var isLoggingFunc = function () { return contextParams.debug; };
	        this.context = new context.Context(contextParams, new logger.Logger('Context', isLoggingFunc));
	        this.setColumnsAndData();
	        this.dispatchGridReadyEvent(gridOptions);
	        if (gridOptions.debug) {
	            console.log('ag-Grid -> initialised successfully, enterprise = ' + enterprise);
	        }
	    }
	    Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {
	        this.enterpriseBeans = enterpriseBeans;
	        // the enterprise can inject additional row models. this is how it injects the viewportRowModel
	        utils.Utils.iterateObject(rowModelClasses, function (key, value) { return Grid.RowModelClasses[key] = value; });
	    };
	    Grid.setEnterpriseComponents = function (components) {
	        this.enterpriseComponents = components;
	    };
	    Grid.setFrameworkBeans = function (frameworkBeans) {
	        this.frameworkBeans = frameworkBeans;
	    };
	    Grid.prototype.setColumnsAndData = function () {
	        var gridOptionsWrapper$$1 = this.context.getBean('gridOptionsWrapper');
	        var columnController$$1 = this.context.getBean('columnController');
	        var rowModel = this.context.getBean('rowModel');
	        var columnDefs = gridOptionsWrapper$$1.getColumnDefs();
	        var rowData = gridOptionsWrapper$$1.getRowData();
	        var nothingToSet = utils.Utils.missing(columnDefs) && utils.Utils.missing(rowData);
	        if (nothingToSet) {
	            return;
	        }
	        if (utils.Utils.exists(columnDefs)) {
	            columnController$$1.setColumnDefs(columnDefs, "gridInitializing");
	        }
	        if (utils.Utils.exists(rowData) && rowModel.getType() === constants.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
	            var clientSideRowModel$$1 = rowModel;
	            clientSideRowModel$$1.setRowData(rowData);
	        }
	    };
	    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {
	        var eventService$$1 = this.context.getBean('eventService');
	        var readyEvent = {
	            type: events$1.Events.EVENT_GRID_READY,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        eventService$$1.dispatchEvent(readyEvent);
	    };
	    Grid.prototype.getRowModelClass = function (gridOptions) {
	        var rowModelType = gridOptions.rowModelType;
	        //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)
	        rowModelType = rowModelType === 'enterprise' ? constants.Constants.ROW_MODEL_TYPE_SERVER_SIDE : rowModelType;
	        if (utils.Utils.exists(rowModelType)) {
	            var rowModelClass = Grid.RowModelClasses[rowModelType];
	            if (utils.Utils.exists(rowModelClass)) {
	                return rowModelClass;
	            }
	            else {
	                if (rowModelType === 'normal') {
	                    console.warn("ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.");
	                    return clientSideRowModel.ClientSideRowModel;
	                }
	                console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);
	                if (rowModelType === constants.Constants.ROW_MODEL_TYPE_VIEWPORT) {
	                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
	                }
	                if (rowModelType === constants.Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
	                    console.error('ag-Grid: rowModelType server side is only available in ag-Grid Enterprise');
	                }
	            }
	        }
	        return clientSideRowModel.ClientSideRowModel;
	    };
	    Grid.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    // the default is ClientSideRowModel, which is also used for pagination.
	    // the enterprise adds viewport to this list.
	    Grid.RowModelClasses = {
	        infinite: infiniteRowModel.InfiniteRowModel,
	        clientSide: clientSideRowModel.ClientSideRowModel
	    };
	    return Grid;
	}());
	exports.Grid = Grid;
	});

	unwrapExports(grid);
	var grid_1 = grid.Grid;

	var agGridNg1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	function initialiseAgGridWithAngular1(angular) {
	    var angularModule = angular.module("agGrid", []);
	    angularModule.directive("agGrid", function () {
	        return {
	            restrict: "A",
	            controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
	            scope: true
	        };
	    });
	}
	exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
	function AngularDirectiveController($element, $scope, $compile, $attrs) {
	    var gridOptions;
	    var quickFilterOnScope;
	    var keyOfGridInScope = $attrs.agGrid;
	    quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
	    gridOptions = $scope.$eval(keyOfGridInScope);
	    if (!gridOptions) {
	        console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
	        return;
	    }
	    var eGridDiv = $element[0];
	    var gridParams = {
	        $scope: $scope,
	        $compile: $compile,
	        quickFilterOnScope: quickFilterOnScope
	    };
	    var grid$$1 = new grid.Grid(eGridDiv, gridOptions, gridParams);
	    $scope.$on("$destroy", function () {
	        grid$$1.destroy();
	        grid$$1 = null;
	    });
	}
	});

	unwrapExports(agGridNg1);
	var agGridNg1_1 = agGridNg1.initialiseAgGridWithAngular1;

	var agGridWebComponent = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	var registered = false;
	function initialiseAgGridWithWebComponents() {
	    console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');
	    // only register to WebComponents once
	    if (registered) {
	        return;
	    }
	    registered = true;
	    if (typeof document === 'undefined' || !document.registerElement) {
	        console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');
	    }
	    // i don't think this type of extension is possible in TypeScript, so back to
	    // plain Javascript to create this object
	    var AgileGridProto = Object.create(HTMLElement.prototype);
	    // wrap each property with a get and set method, so we can track when changes are done
	    componentUtil.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
	        Object.defineProperty(AgileGridProto, key, {
	            set: function (v) {
	                this.__agGridSetProperty(key, v);
	            },
	            get: function () {
	                return this.__agGridGetProperty(key);
	            },
	            enumerable: true,
	            configurable: true
	        });
	    });
	    var agGridProtoNoType = AgileGridProto;
	    agGridProtoNoType.__agGridSetProperty = function (key, value) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        this.__attributes[key] = value;
	        // keeping this consistent with the ng2 onChange, so I can reuse the handling code
	        var changeObject = {};
	        changeObject[key] = { currentValue: value };
	        this.onChange(changeObject);
	    };
	    agGridProtoNoType.onChange = function (changes) {
	        if (this._initialised) {
	            componentUtil.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
	        }
	    };
	    agGridProtoNoType.__agGridGetProperty = function (key) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        return this.__attributes[key];
	    };
	    agGridProtoNoType.setGridOptions = function (options) {
	        var globalEventListener = this.globalEventListener.bind(this);
	        this._gridOptions = componentUtil.ComponentUtil.copyAttributesToGridOptions(options, this);
	        var gridParams = {
	            globalEventListener: globalEventListener
	        };
	        this._agGrid = new grid.Grid(this, this._gridOptions, gridParams);
	        this.api = options.api;
	        this.columnApi = options.columnApi;
	        this._initialised = true;
	    };
	    // copies all the attributes into this object
	    agGridProtoNoType.createdCallback = function () {
	        for (var i = 0; i < this.attributes.length; i++) {
	            var attribute = this.attributes[i];
	            this.setPropertyFromAttribute(attribute);
	        }
	    };
	    agGridProtoNoType.setPropertyFromAttribute = function (attribute) {
	        var name = toCamelCase(attribute.nodeName);
	        var value = attribute.nodeValue;
	        if (componentUtil.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
	            this[name] = value;
	        }
	    };
	    agGridProtoNoType.attachedCallback = function (params) { };
	    agGridProtoNoType.detachedCallback = function (params) { };
	    agGridProtoNoType.attributeChangedCallback = function (attributeName) {
	        var attribute = this.attributes[attributeName];
	        this.setPropertyFromAttribute(attribute);
	    };
	    agGridProtoNoType.globalEventListener = function (eventType, event) {
	        var eventLowerCase = eventType.toLowerCase();
	        var browserEvent = new Event(eventLowerCase);
	        var browserEventNoType = browserEvent;
	        browserEventNoType.agGridDetails = event;
	        this.dispatchEvent(browserEvent);
	        var callbackMethod = 'on' + eventLowerCase;
	        if (typeof this[callbackMethod] === 'function') {
	            this[callbackMethod](browserEvent);
	        }
	    };
	    // finally, register
	    document.registerElement('ag-grid', { prototype: AgileGridProto });
	}
	exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
	function toCamelCase(myString) {
	    if (typeof myString === 'string') {
	        var result = myString.replace(/-([a-z])/g, function (g) {
	            return g[1].toUpperCase();
	        });
	        return result;
	    }
	    else {
	        return myString;
	    }
	}
	});

	unwrapExports(agGridWebComponent);
	var agGridWebComponent_1 = agGridWebComponent.initialiseAgGridWithWebComponents;

	var tabbedLayout = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var TabbedLayout = (function () {
	    function TabbedLayout(params) {
	        var _this = this;
	        this.items = [];
	        this.params = params;
	        this.eGui = document.createElement('div');
	        this.eGui.innerHTML = TabbedLayout.TEMPLATE;
	        this.eHeader = this.eGui.querySelector('[ref="tabHeader"]');
	        this.eBody = this.eGui.querySelector('[ref="tabBody"]');
	        utils.Utils.addCssClass(this.eGui, params.cssClass);
	        if (params.items) {
	            params.items.forEach(function (item) { return _this.addItem(item); });
	        }
	    }
	    TabbedLayout.prototype.setAfterAttachedParams = function (params) {
	        this.afterAttachedParams = params;
	    };
	    TabbedLayout.prototype.getMinWidth = function () {
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        this.eGui.appendChild(eDummyContainer);
	        var minWidth = 0;
	        this.items.forEach(function (itemWrapper) {
	            utils.Utils.removeAllChildren(eDummyContainer);
	            var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function (body) { return body.cloneNode(true); });
	            if (eClone == null) {
	                return;
	            }
	            eDummyContainer.appendChild(eClone);
	            if (minWidth < eDummyContainer.offsetWidth) {
	                minWidth = eDummyContainer.offsetWidth;
	            }
	        });
	        // finally check the parent tabs are no wider, as if they
	        // are, then these are the min width and not the child tabs
	        if (minWidth < this.eGui.offsetWidth) {
	            minWidth = this.eGui.offsetWidth;
	        }
	        this.eGui.removeChild(eDummyContainer);
	        return minWidth;
	    };
	    TabbedLayout.prototype.showFirstItem = function () {
	        if (this.items.length > 0) {
	            this.showItemWrapper(this.items[0]);
	        }
	    };
	    TabbedLayout.prototype.addItem = function (item) {
	        var eHeaderButton = document.createElement('span');
	        eHeaderButton.appendChild(item.title);
	        utils.Utils.addCssClass(eHeaderButton, 'ag-tab');
	        this.eHeader.appendChild(eHeaderButton);
	        var wrapper = {
	            tabbedItem: item,
	            eHeaderButton: eHeaderButton
	        };
	        this.items.push(wrapper);
	        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));
	    };
	    TabbedLayout.prototype.showItem = function (tabbedItem) {
	        var itemWrapper = utils.Utils.find(this.items, function (itemWrapper) {
	            return itemWrapper.tabbedItem === tabbedItem;
	        });
	        if (itemWrapper) {
	            this.showItemWrapper(itemWrapper);
	        }
	    };
	    TabbedLayout.prototype.showItemWrapper = function (wrapper) {
	        var _this = this;
	        if (this.params.onItemClicked) {
	            this.params.onItemClicked({ item: wrapper.tabbedItem });
	        }
	        if (this.activeItem === wrapper) {
	            utils.Utils.callIfPresent(this.params.onActiveItemClicked);
	            return;
	        }
	        utils.Utils.removeAllChildren(this.eBody);
	        wrapper.tabbedItem.bodyPromise.then(function (body) {
	            _this.eBody.appendChild(body);
	        });
	        if (this.activeItem) {
	            utils.Utils.removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');
	        }
	        utils.Utils.addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');
	        this.activeItem = wrapper;
	        if (wrapper.tabbedItem.afterAttachedCallback) {
	            wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
	        }
	    };
	    TabbedLayout.prototype.getGui = function () {
	        return this.eGui;
	    };
	    TabbedLayout.TEMPLATE = '<div>' +
	        '<div ref="tabHeader" class="ag-tab-header"></div>' +
	        '<div ref="tabBody" class="ag-tab-body"></div>' +
	        '</div>';
	    return TabbedLayout;
	}());
	exports.TabbedLayout = TabbedLayout;
	});

	unwrapExports(tabbedLayout);
	var tabbedLayout_1 = tabbedLayout.TabbedLayout;

	var verticalStack = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var VerticalStack = (function () {
	    function VerticalStack() {
	        this.isLayoutPanel = true;
	        this.childPanels = [];
	        this.eGui = document.createElement('div');
	        this.eGui.style.height = '100%';
	    }
	    VerticalStack.prototype.addPanel = function (panel, height) {
	        var component;
	        if (panel.isLayoutPanel) {
	            this.childPanels.push(panel);
	            component = panel.getGui();
	        }
	        else {
	            component = panel;
	        }
	        if (height) {
	            component.style.height = height;
	        }
	        this.eGui.appendChild(component);
	    };
	    VerticalStack.prototype.getGui = function () {
	        return this.eGui;
	    };
	    VerticalStack.prototype.doLayout = function () {
	        for (var i = 0; i < this.childPanels.length; i++) {
	            this.childPanels[i].doLayout();
	        }
	    };
	    return VerticalStack;
	}());
	exports.VerticalStack = VerticalStack;
	});

	unwrapExports(verticalStack);
	var verticalStack_1 = verticalStack.VerticalStack;

	var simpleHttpRequest_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	function simpleHttpRequest(params) {
	    return new utils.Promise(function (resolve) {
	        var httpRequest = new XMLHttpRequest();
	        httpRequest.open('GET', params.url);
	        httpRequest.send();
	        httpRequest.onreadystatechange = function () {
	            if (httpRequest.readyState == 4 && httpRequest.status == 200) {
	                var httpResponse = JSON.parse(httpRequest.responseText);
	                resolve(httpResponse);
	            }
	        };
	    });
	}
	exports.simpleHttpRequest = simpleHttpRequest;
	});

	unwrapExports(simpleHttpRequest_1);
	var simpleHttpRequest_2 = simpleHttpRequest_1.simpleHttpRequest;

	var functions = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
	    if (accentedCompare === void 0) { accentedCompare = false; }
	    console.warn('ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');
	    var nodeAIsGroup = utils.Utils.exists(nodeA) && nodeA.group;
	    var nodeBIsGroup = utils.Utils.exists(nodeB) && nodeB.group;
	    var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
	    var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
	    if (bothAreGroups) {
	        return utils.Utils.defaultComparator(nodeA.key, nodeB.key, accentedCompare);
	    }
	    else if (bothAreNormal) {
	        return utils.Utils.defaultComparator(valueA, valueB, accentedCompare);
	    }
	    else if (nodeAIsGroup) {
	        return 1;
	    }
	    else {
	        return -1;
	    }
	}
	exports.defaultGroupComparator = defaultGroupComparator;
	});

	unwrapExports(functions);
	var functions_1 = functions.defaultGroupComparator;

	var frameworkComponentWrapper = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var BaseComponentWrapper = (function () {
	    function BaseComponentWrapper() {
	    }
	    BaseComponentWrapper.prototype.wrap = function (OriginalConstructor, mandatoryMethodList, optionalMethodList, componentName) {
	        var _this = this;
	        var wrapper = this.createWrapper(OriginalConstructor, componentName);
	        mandatoryMethodList.forEach((function (methodName) {
	            _this.createMethod(wrapper, methodName, true);
	        }));
	        if (optionalMethodList) {
	            optionalMethodList.forEach((function (methodName) {
	                _this.createMethod(wrapper, methodName, false);
	            }));
	        }
	        return wrapper;
	    };
	    BaseComponentWrapper.prototype.createMethod = function (wrapper, methodName, mandatory) {
	        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
	    };
	    BaseComponentWrapper.prototype.createMethodProxy = function (wrapper, methodName, mandatory) {
	        return function () {
	            if (wrapper.hasMethod(methodName)) {
	                return wrapper.callMethod(methodName, arguments);
	            }
	            if (mandatory) {
	                console.warn('ag-Grid: Framework component is missing the method ' + methodName + '()');
	            }
	            return null;
	        };
	    };
	    return BaseComponentWrapper;
	}());
	exports.BaseComponentWrapper = BaseComponentWrapper;
	});

	unwrapExports(frameworkComponentWrapper);
	var frameworkComponentWrapper_1 = frameworkComponentWrapper.BaseComponentWrapper;

	var main = createCommonjsModule(function (module, exports) {
	// to satisfy server side compilation
	Object.defineProperty(exports, "__esModule", { value: true });
	var globalObj = typeof commonjsGlobal === 'undefined' ? {} : commonjsGlobal;
	globalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;
	globalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;
	globalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;
	globalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;
	globalObj.Node = typeof Node === 'undefined' ? {} : Node;
	globalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;
	// columnController

	exports.BalancedColumnTreeBuilder = balancedColumnTreeBuilder.BalancedColumnTreeBuilder;

	exports.ColumnController = columnController.ColumnController;

	exports.ColumnKeyCreator = columnKeyCreator.ColumnKeyCreator;

	exports.ColumnUtils = columnUtils.ColumnUtils;

	exports.DisplayedGroupCreator = displayedGroupCreator.DisplayedGroupCreator;

	exports.GroupInstanceIdCreator = groupInstanceIdCreator.GroupInstanceIdCreator;
	// components

	exports.ComponentUtil = componentUtil.ComponentUtil;

	exports.ColDefUtil = colDefUtil.ColDefUtil;

	exports.ComponentProvider = componentProvider.ComponentProvider;

	exports.initialiseAgGridWithAngular1 = agGridNg1.initialiseAgGridWithAngular1;

	exports.initialiseAgGridWithWebComponents = agGridWebComponent.initialiseAgGridWithWebComponents;
	// context

	exports.BeanStub = beanStub.BeanStub;

	exports.Context = context.Context;
	exports.Autowired = context.Autowired;
	exports.PostConstruct = context.PostConstruct;
	exports.PreConstruct = context.PreConstruct;
	exports.Optional = context.Optional;
	exports.Bean = context.Bean;
	exports.Qualifier = context.Qualifier;
	exports.PreDestroy = context.PreDestroy;

	exports.QuerySelector = componentAnnotations.QuerySelector;
	exports.Listener = componentAnnotations.Listener;
	exports.RefSelector = componentAnnotations.RefSelector;
	// dragAndDrop

	exports.DragAndDropService = dragAndDropService.DragAndDropService;
	exports.DragSourceType = dragAndDropService.DragSourceType;
	exports.HDirection = dragAndDropService.HDirection;
	exports.VDirection = dragAndDropService.VDirection;

	exports.DragService = dragService.DragService;
	// entities

	exports.Column = column.Column;

	exports.ColumnGroup = columnGroup.ColumnGroup;

	exports.GridCell = gridCell.GridCell;

	exports.GridRow = gridRow.GridRow;

	exports.OriginalColumnGroup = originalColumnGroup.OriginalColumnGroup;

	exports.RowNode = rowNode.RowNode;
	// filter

	exports.BaseFilter = baseFilter.BaseFilter;

	exports.DateFilter = dateFilter.DateFilter;

	exports.FilterManager = filterManager.FilterManager;

	exports.NumberFilter = numberFilter.NumberFilter;

	exports.TextFilter = textFilter.TextFilter;
	// gridPanel

	exports.GridPanel = gridPanel.GridPanel;

	exports.ScrollVisibleService = scrollVisibleService.ScrollVisibleService;

	exports.MouseEventService = mouseEventService.MouseEventService;
	// headerRendering

	exports.BodyDropPivotTarget = bodyDropPivotTarget.BodyDropPivotTarget;

	exports.BodyDropTarget = bodyDropTarget.BodyDropTarget;

	exports.CssClassApplier = cssClassApplier.CssClassApplier;

	exports.HeaderContainer = headerContainer.HeaderContainer;

	exports.HeaderRootComp = headerRootComp.HeaderRootComp;

	exports.HeaderRowComp = headerRowComp.HeaderRowComp;

	exports.HorizontalResizeService = horizontalResizeService.HorizontalResizeService;

	exports.MoveColumnController = moveColumnController.MoveColumnController;

	exports.StandardMenuFactory = standardMenu.StandardMenuFactory;
	// layout

	exports.TabbedLayout = tabbedLayout.TabbedLayout;

	exports.VerticalStack = verticalStack.VerticalStack;
	// misc

	exports.simpleHttpRequest = simpleHttpRequest_1.simpleHttpRequest;

	exports.LargeTextCellEditor = largeTextCellEditor.LargeTextCellEditor;

	exports.PopupEditorWrapper = popupEditorWrapper.PopupEditorWrapper;

	exports.PopupSelectCellEditor = popupSelectCellEditor.PopupSelectCellEditor;

	exports.PopupTextCellEditor = popupTextCellEditor.PopupTextCellEditor;

	exports.SelectCellEditor = selectCellEditor.SelectCellEditor;

	exports.TextCellEditor = textCellEditor.TextCellEditor;

	exports.AnimateShowChangeCellRenderer = animateShowChangeCellRenderer.AnimateShowChangeCellRenderer;

	exports.AnimateSlideCellRenderer = animateSlideCellRenderer.AnimateSlideCellRenderer;

	exports.GroupCellRenderer = groupCellRenderer.GroupCellRenderer;
	// features

	exports.SetLeftFeature = setLeftFeature.SetLeftFeature;
	// rendering

	exports.AutoWidthCalculator = autoWidthCalculator.AutoWidthCalculator;

	exports.CellEditorFactory = cellEditorFactory.CellEditorFactory;

	exports.CellRendererFactory = cellRendererFactory.CellRendererFactory;

	exports.CellRendererService = cellRendererService.CellRendererService;

	exports.CheckboxSelectionComponent = checkboxSelectionComponent.CheckboxSelectionComponent;

	exports.CellComp = cellComp.CellComp;

	exports.RowComp = rowComp.RowComp;

	exports.RowRenderer = rowRenderer.RowRenderer;

	exports.ValueFormatterService = valueFormatterService.ValueFormatterService;
	// rowControllers/inMemory

	exports.FilterStage = filterStage.FilterStage;

	exports.FlattenStage = flattenStage.FlattenStage;

	exports.SortStage = sortStage.SortStage;
	// row models

	exports.PinnedRowModel = pinnedRowModel.PinnedRowModel;

	exports.ClientSideRowModel = clientSideRowModel.ClientSideRowModel;

	exports.ChangedPath = changedPath.ChangedPath;

	exports.ClientSideNodeManager = clientSideNodeManager.ClientSideNodeManager;

	exports.InfiniteRowModel = infiniteRowModel.InfiniteRowModel;

	exports.RowNodeBlock = rowNodeBlock.RowNodeBlock;

	exports.RowNodeBlockLoader = rowNodeBlockLoader.RowNodeBlockLoader;

	exports.RowNodeCache = rowNodeCache.RowNodeCache;
	//styling

	exports.StylingService = stylingService.StylingService;
	// widgets

	exports.AgCheckbox = agCheckbox.AgCheckbox;

	exports.Component = component.Component;

	exports.PopupService = popupService.PopupService;

	exports.TouchListener = touchListener.TouchListener;
	// root

	exports.BaseFrameworkFactory = baseFrameworkFactory.BaseFrameworkFactory;

	exports.CellNavigationService = cellNavigationService.CellNavigationService;

	exports.AlignedGridsService = alignedGridsService.AlignedGridsService;

	exports.Constants = constants.Constants;

	exports.CsvCreator = csvCreator.CsvCreator;
	exports.BaseCreator = csvCreator.BaseCreator;

	exports.Downloader = downloader.Downloader;

	exports.Grid = grid.Grid;

	exports.GridApi = gridApi.GridApi;

	exports.Events = eventKeys.Events;

	exports.FocusedCellController = focusedCellController.FocusedCellController;

	exports.defaultGroupComparator = functions.defaultGroupComparator;

	exports.GridOptionsWrapper = gridOptionsWrapper.GridOptionsWrapper;

	exports.EventService = eventService.EventService;

	exports.SelectableService = selectableService.SelectableService;

	exports.GridCore = gridCore.GridCore;

	exports.Logger = logger.Logger;

	exports.SelectionController = selectionController.SelectionController;

	exports.SortController = sortController.SortController;

	exports.TemplateService = templateService.TemplateService;

	exports.Utils = utils.Utils;
	exports.NumberSequence = utils.NumberSequence;
	exports._ = utils._;
	exports.Promise = utils.Promise;

	exports.ValueService = valueService.ValueService;

	exports.ExpressionService = expressionService.ExpressionService;

	exports.XmlFactory = xmlFactory.XmlFactory;

	exports.GridSerializer = gridSerializer.GridSerializer;
	exports.BaseGridSerializingSession = gridSerializer.BaseGridSerializingSession;
	exports.RowType = gridSerializer.RowType;
	var logger_2 = logger;
	exports.LoggerFactory = logger_2.LoggerFactory;

	exports.ColumnApi = columnApi.ColumnApi;

	exports.BaseComponentWrapper = frameworkComponentWrapper.BaseComponentWrapper;

	exports.Environment = environment.Environment;
	});

	unwrapExports(main);
	var main_1 = main.BalancedColumnTreeBuilder;
	var main_2 = main.ColumnController;
	var main_3 = main.ColumnKeyCreator;
	var main_4 = main.ColumnUtils;
	var main_5 = main.DisplayedGroupCreator;
	var main_6 = main.GroupInstanceIdCreator;
	var main_7 = main.ComponentUtil;
	var main_8 = main.ColDefUtil;
	var main_9 = main.ComponentProvider;
	var main_10 = main.initialiseAgGridWithAngular1;
	var main_11 = main.initialiseAgGridWithWebComponents;
	var main_12 = main.BeanStub;
	var main_13 = main.Context;
	var main_14 = main.Autowired;
	var main_15 = main.PostConstruct;
	var main_16 = main.PreConstruct;
	var main_17 = main.Optional;
	var main_18 = main.Bean;
	var main_19 = main.Qualifier;
	var main_20 = main.PreDestroy;
	var main_21 = main.QuerySelector;
	var main_22 = main.Listener;
	var main_23 = main.RefSelector;
	var main_24 = main.DragAndDropService;
	var main_25 = main.DragSourceType;
	var main_26 = main.HDirection;
	var main_27 = main.VDirection;
	var main_28 = main.DragService;
	var main_29 = main.Column;
	var main_30 = main.ColumnGroup;
	var main_31 = main.GridCell;
	var main_32 = main.GridRow;
	var main_33 = main.OriginalColumnGroup;
	var main_34 = main.RowNode;
	var main_35 = main.BaseFilter;
	var main_36 = main.DateFilter;
	var main_37 = main.FilterManager;
	var main_38 = main.NumberFilter;
	var main_39 = main.TextFilter;
	var main_40 = main.GridPanel;
	var main_41 = main.ScrollVisibleService;
	var main_42 = main.MouseEventService;
	var main_43 = main.BodyDropPivotTarget;
	var main_44 = main.BodyDropTarget;
	var main_45 = main.CssClassApplier;
	var main_46 = main.HeaderContainer;
	var main_47 = main.HeaderRootComp;
	var main_48 = main.HeaderRowComp;
	var main_49 = main.HorizontalResizeService;
	var main_50 = main.MoveColumnController;
	var main_51 = main.StandardMenuFactory;
	var main_52 = main.TabbedLayout;
	var main_53 = main.VerticalStack;
	var main_54 = main.simpleHttpRequest;
	var main_55 = main.LargeTextCellEditor;
	var main_56 = main.PopupEditorWrapper;
	var main_57 = main.PopupSelectCellEditor;
	var main_58 = main.PopupTextCellEditor;
	var main_59 = main.SelectCellEditor;
	var main_60 = main.TextCellEditor;
	var main_61 = main.AnimateShowChangeCellRenderer;
	var main_62 = main.AnimateSlideCellRenderer;
	var main_63 = main.GroupCellRenderer;
	var main_64 = main.SetLeftFeature;
	var main_65 = main.AutoWidthCalculator;
	var main_66 = main.CellEditorFactory;
	var main_67 = main.CellRendererFactory;
	var main_68 = main.CellRendererService;
	var main_69 = main.CheckboxSelectionComponent;
	var main_70 = main.CellComp;
	var main_71 = main.RowComp;
	var main_72 = main.RowRenderer;
	var main_73 = main.ValueFormatterService;
	var main_74 = main.FilterStage;
	var main_75 = main.FlattenStage;
	var main_76 = main.SortStage;
	var main_77 = main.PinnedRowModel;
	var main_78 = main.ClientSideRowModel;
	var main_79 = main.ChangedPath;
	var main_80 = main.ClientSideNodeManager;
	var main_81 = main.InfiniteRowModel;
	var main_82 = main.RowNodeBlock;
	var main_83 = main.RowNodeBlockLoader;
	var main_84 = main.RowNodeCache;
	var main_85 = main.StylingService;
	var main_86 = main.AgCheckbox;
	var main_87 = main.Component;
	var main_88 = main.PopupService;
	var main_89 = main.TouchListener;
	var main_90 = main.BaseFrameworkFactory;
	var main_91 = main.CellNavigationService;
	var main_92 = main.AlignedGridsService;
	var main_93 = main.Constants;
	var main_94 = main.CsvCreator;
	var main_95 = main.BaseCreator;
	var main_96 = main.Downloader;
	var main_97 = main.Grid;
	var main_98 = main.GridApi;
	var main_99 = main.Events;
	var main_100 = main.FocusedCellController;
	var main_101 = main.defaultGroupComparator;
	var main_102 = main.GridOptionsWrapper;
	var main_103 = main.EventService;
	var main_104 = main.SelectableService;
	var main_105 = main.GridCore;
	var main_106 = main.Logger;
	var main_107 = main.SelectionController;
	var main_108 = main.SortController;
	var main_109 = main.TemplateService;
	var main_110 = main.Utils;
	var main_111 = main.NumberSequence;
	var main_112 = main._;
	var main_113 = main.Promise;
	var main_114 = main.ValueService;
	var main_115 = main.ExpressionService;
	var main_116 = main.XmlFactory;
	var main_117 = main.GridSerializer;
	var main_118 = main.BaseGridSerializingSession;
	var main_119 = main.RowType;
	var main_120 = main.LoggerFactory;
	var main_121 = main.ColumnApi;
	var main_122 = main.BaseComponentWrapper;
	var main_123 = main.Environment;

	var baseComponentFactory = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var BaseComponentFactory = (function () {
	    function BaseComponentFactory() {
	    }
	    BaseComponentFactory.prototype.createFilterFromComponent = function (componentType, viewContainerRef) {
	        console.log("Use AgGridModule.withComponents() if you wish to use dynamic components");
	        throw Error("Method not implemented");
	    };
	    return BaseComponentFactory;
	}());
	BaseComponentFactory.decorators = [
	    { type: core.Injectable },
	];
	/** @nocollapse */
	BaseComponentFactory.ctorParameters = function () { return []; };
	exports.BaseComponentFactory = BaseComponentFactory;

	});

	unwrapExports(baseComponentFactory);
	var baseComponentFactory_1 = baseComponentFactory.BaseComponentFactory;

	var ng2FrameworkFactory = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	var Ng2FrameworkFactory = (function () {
	    function Ng2FrameworkFactory(_componentFactory, _ngZone) {
	        this._componentFactory = _componentFactory;
	        this._ngZone = _ngZone;
	        this._baseFrameworkFactory = new main.BaseFrameworkFactory(); // todo - inject this
	    }
	    Ng2FrameworkFactory.prototype.setViewContainerRef = function (viewContainerRef) {
	        this._viewContainerRef = viewContainerRef;
	    };
	    return Ng2FrameworkFactory;
	}());
	Ng2FrameworkFactory.decorators = [
	    { type: core.Injectable },
	];
	/** @nocollapse */
	Ng2FrameworkFactory.ctorParameters = function () { return [
	    { type: baseComponentFactory.BaseComponentFactory, },
	    { type: core.NgZone, },
	]; };
	exports.Ng2FrameworkFactory = Ng2FrameworkFactory;

	});

	unwrapExports(ng2FrameworkFactory);
	var ng2FrameworkFactory_1 = ng2FrameworkFactory.Ng2FrameworkFactory;

	var agGridColumn = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var AgGridColumn = (function () {
	    function AgGridColumn() {
	    }
	    AgGridColumn.prototype.hasChildColumns = function () {
	        if (this.childColumns && this.childColumns.length > 0) {
	            // necessary because of https://github.com/angular/angular/issues/10098
	            return !(this.childColumns.length === 1 && this.childColumns.first === this);
	        }
	        return false;
	    };
	    AgGridColumn.prototype.toColDef = function () {
	        var colDef = this.createColDefFromGridColumn(this);
	        if (this.hasChildColumns()) {
	            colDef["children"] = this.getChildColDefs(this.childColumns);
	        }
	        return colDef;
	    };
	    AgGridColumn.prototype.getChildColDefs = function (childColumns) {
	        return childColumns
	            .filter(function (column) { return !column.hasChildColumns(); })
	            .map(function (column) {
	            return column.toColDef();
	        });
	    };
	    AgGridColumn.prototype.createColDefFromGridColumn = function (from) {
	        var colDef = {};
	        Object.assign(colDef, from);
	        delete colDef.childColumns;
	        return colDef;
	    };
	    return AgGridColumn;
	}());
	// @END@
	AgGridColumn.decorators = [
	    { type: core.Component, args: [{
	                selector: 'ag-grid-column',
	                template: ''
	            },] },
	];
	/** @nocollapse */
	AgGridColumn.ctorParameters = function () { return []; };
	AgGridColumn.propDecorators = {
	    'childColumns': [{ type: core.ContentChildren, args: [AgGridColumn,] },],
	    'children': [{ type: core.Input },],
	    'sortingOrder': [{ type: core.Input },],
	    'allowedAggFuncs': [{ type: core.Input },],
	    'menuTabs': [{ type: core.Input },],
	    'cellClassRules': [{ type: core.Input },],
	    'icons': [{ type: core.Input },],
	    'headerGroupComponent': [{ type: core.Input },],
	    'headerGroupComponentFramework': [{ type: core.Input },],
	    'headerGroupComponentParams': [{ type: core.Input },],
	    'cellStyle': [{ type: core.Input },],
	    'cellRendererParams': [{ type: core.Input },],
	    'cellEditorFramework': [{ type: core.Input },],
	    'cellEditorParams': [{ type: core.Input },],
	    'pinnedRowCellRendererFramework': [{ type: core.Input },],
	    'pinnedRowCellRendererParams': [{ type: core.Input },],
	    'filterFramework': [{ type: core.Input },],
	    'filterParams': [{ type: core.Input },],
	    'headerComponent': [{ type: core.Input },],
	    'headerComponentFramework': [{ type: core.Input },],
	    'headerComponentParams': [{ type: core.Input },],
	    'floatingFilterComponent': [{ type: core.Input },],
	    'floatingFilterComponentParams': [{ type: core.Input },],
	    'floatingFilterComponentFramework': [{ type: core.Input },],
	    'refData': [{ type: core.Input },],
	    'headerName': [{ type: core.Input },],
	    'columnGroupShow': [{ type: core.Input },],
	    'headerClass': [{ type: core.Input },],
	    'toolPanelClass': [{ type: core.Input },],
	    'headerValueGetter': [{ type: core.Input },],
	    'groupId': [{ type: core.Input },],
	    'colId': [{ type: core.Input },],
	    'sort': [{ type: core.Input },],
	    'field': [{ type: core.Input },],
	    'type': [{ type: core.Input },],
	    'tooltipField': [{ type: core.Input },],
	    'headerTooltip': [{ type: core.Input },],
	    'cellClass': [{ type: core.Input },],
	    'showRowGroup': [{ type: core.Input },],
	    'filter': [{ type: core.Input },],
	    'aggFunc': [{ type: core.Input },],
	    'cellRenderer': [{ type: core.Input },],
	    'cellEditor': [{ type: core.Input },],
	    'pinned': [{ type: core.Input },],
	    'sortedAt': [{ type: core.Input },],
	    'width': [{ type: core.Input },],
	    'minWidth': [{ type: core.Input },],
	    'maxWidth': [{ type: core.Input },],
	    'rowGroupIndex': [{ type: core.Input },],
	    'pivotIndex': [{ type: core.Input },],
	    'valueGetter': [{ type: core.Input },],
	    'valueSetter': [{ type: core.Input },],
	    'filterValueGetter': [{ type: core.Input },],
	    'keyCreator': [{ type: core.Input },],
	    'cellRendererFramework': [{ type: core.Input },],
	    'pinnedRowCellRenderer': [{ type: core.Input },],
	    'valueFormatter': [{ type: core.Input },],
	    'pinnedRowValueFormatter': [{ type: core.Input },],
	    'valueParser': [{ type: core.Input },],
	    'comparator': [{ type: core.Input },],
	    'equals': [{ type: core.Input },],
	    'pivotComparator': [{ type: core.Input },],
	    'suppressKeyboardEvent': [{ type: core.Input },],
	    'colSpan': [{ type: core.Input },],
	    'getQuickFilterText': [{ type: core.Input },],
	    'newValueHandler': [{ type: core.Input },],
	    'onCellValueChanged': [{ type: core.Input },],
	    'onCellClicked': [{ type: core.Input },],
	    'onCellDoubleClicked': [{ type: core.Input },],
	    'onCellContextMenu': [{ type: core.Input },],
	    'tooltip': [{ type: core.Input },],
	    'cellRendererSelector': [{ type: core.Input },],
	    'cellEditorSelector': [{ type: core.Input },],
	    'suppressCellFlash': [{ type: core.Input },],
	    'suppressToolPanel': [{ type: core.Input },],
	    'openByDefault': [{ type: core.Input },],
	    'marryChildren': [{ type: core.Input },],
	    'hide': [{ type: core.Input },],
	    'rowGroup': [{ type: core.Input },],
	    'pivot': [{ type: core.Input },],
	    'checkboxSelection': [{ type: core.Input },],
	    'headerCheckboxSelection': [{ type: core.Input },],
	    'headerCheckboxSelectionFilteredOnly': [{ type: core.Input },],
	    'suppressMenu': [{ type: core.Input },],
	    'suppressSorting': [{ type: core.Input },],
	    'suppressMovable': [{ type: core.Input },],
	    'suppressFilter': [{ type: core.Input },],
	    'lockPosition': [{ type: core.Input },],
	    'lockVisible': [{ type: core.Input },],
	    'lockPinned': [{ type: core.Input },],
	    'unSortIcon': [{ type: core.Input },],
	    'suppressSizeToFit': [{ type: core.Input },],
	    'suppressResize': [{ type: core.Input },],
	    'suppressAutoSize': [{ type: core.Input },],
	    'enableRowGroup': [{ type: core.Input },],
	    'enablePivot': [{ type: core.Input },],
	    'enableValue': [{ type: core.Input },],
	    'editable': [{ type: core.Input },],
	    'suppressPaste': [{ type: core.Input },],
	    'suppressNavigable': [{ type: core.Input },],
	    'enableCellChangeFlash': [{ type: core.Input },],
	    'rowDrag': [{ type: core.Input },],
	    'autoHeight': [{ type: core.Input },],
	    'rowSpan': [{ type: core.Input },],
	};
	exports.AgGridColumn = AgGridColumn;

	});

	unwrapExports(agGridColumn);
	var agGridColumn_1 = agGridColumn.AgGridColumn;

	var ng2FrameworkComponentWrapper = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var Ng2FrameworkComponentWrapper = (function (_super) {
	    __extends(Ng2FrameworkComponentWrapper, _super);
	    function Ng2FrameworkComponentWrapper() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Ng2FrameworkComponentWrapper.prototype.setViewContainerRef = function (viewContainerRef) {
	        this.viewContainerRef = viewContainerRef;
	    };
	    Ng2FrameworkComponentWrapper.prototype.setComponentFactoryResolver = function (componentFactoryResolver) {
	        this.componentFactoryResolver = componentFactoryResolver;
	    };
	    Ng2FrameworkComponentWrapper.prototype.createWrapper = function (OriginalConstructor) {
	        var that = this;
	        var DynamicAgNg2Component = (function (_super) {
	            __extends(DynamicAgNg2Component, _super);
	            function DynamicAgNg2Component() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            DynamicAgNg2Component.prototype.init = function (params) {
	                _super.prototype.init.call(this, params);
	                this._componentRef.changeDetectorRef.detectChanges();
	            };
	            DynamicAgNg2Component.prototype.createComponent = function () {
	                return that.createComponent(OriginalConstructor);
	            };
	            DynamicAgNg2Component.prototype.hasMethod = function (name) {
	                return wrapper.getFrameworkComponentInstance()[name] != null;
	            };
	            DynamicAgNg2Component.prototype.callMethod = function (name, args) {
	                var componentRef = this.getFrameworkComponentInstance();
	                return wrapper.getFrameworkComponentInstance()[name].apply(componentRef, args);
	            };
	            DynamicAgNg2Component.prototype.addMethod = function (name, callback) {
	                wrapper[name] = callback;
	            };
	            return DynamicAgNg2Component;
	        }(BaseGuiComponent));
	        var wrapper = new DynamicAgNg2Component();
	        return wrapper;
	    };
	    Ng2FrameworkComponentWrapper.prototype.createComponent = function (componentType) {
	        // used to cache the factory, but this a) caused issues when used with either webpack/angularcli with --prod
	        // but more significantly, the underlying implementation of resolveComponentFactory uses a map too, so us
	        // caching the factory here yields no performance benefits
	        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
	        return this.viewContainerRef.createComponent(factory);
	    };
	    return Ng2FrameworkComponentWrapper;
	}(main.BaseComponentWrapper));
	Ng2FrameworkComponentWrapper.decorators = [
	    { type: core.Injectable },
	];
	/** @nocollapse */
	Ng2FrameworkComponentWrapper.ctorParameters = function () { return []; };
	Ng2FrameworkComponentWrapper = __decorate([
	    main.Bean("frameworkComponentWrapper")
	], Ng2FrameworkComponentWrapper);
	exports.Ng2FrameworkComponentWrapper = Ng2FrameworkComponentWrapper;
	var BaseGuiComponent = (function () {
	    function BaseGuiComponent() {
	    }
	    BaseGuiComponent.prototype.init = function (params) {
	        this._params = params;
	        this._componentRef = this.createComponent();
	        this._agAwareComponent = this._componentRef.instance;
	        this._frameworkComponentInstance = this._componentRef.instance;
	        this._eGui = this._componentRef.location.nativeElement;
	        this._agAwareComponent.agInit(this._params);
	    };
	    BaseGuiComponent.prototype.getGui = function () {
	        return this._eGui;
	    };
	    BaseGuiComponent.prototype.destroy = function () {
	        if (this._componentRef) {
	            this._componentRef.destroy();
	        }
	    };
	    BaseGuiComponent.prototype.getFrameworkComponentInstance = function () {
	        return this._frameworkComponentInstance;
	    };
	    return BaseGuiComponent;
	}());

	});

	unwrapExports(ng2FrameworkComponentWrapper);
	var ng2FrameworkComponentWrapper_1 = ng2FrameworkComponentWrapper.Ng2FrameworkComponentWrapper;

	var agGridNg2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	var ag_grid_2 = main;



	var AgGridNg2 = (function () {
	    function AgGridNg2(elementDef, viewContainerRef, ng2FrameworkFactory$$1, frameworkComponentWrapper, _componentFactoryResolver) {
	        this.viewContainerRef = viewContainerRef;
	        this.ng2FrameworkFactory = ng2FrameworkFactory$$1;
	        this.frameworkComponentWrapper = frameworkComponentWrapper;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._initialised = false;
	        this._destroyed = false;
	        // in order to ensure firing of gridReady is deterministic
	        this._fullyReady = new main.Promise(function (resolve) {
	            resolve(true);
	        });
	        // @START@
	        this.colResizeDefault = undefined;
	        this.slaveGrids = undefined;
	        this.alignedGrids = undefined;
	        this.rowData = undefined;
	        this.columnDefs = undefined;
	        this.excelStyles = undefined;
	        this.pinnedTopRowData = undefined;
	        this.pinnedBottomRowData = undefined;
	        this.components = undefined;
	        this.frameworkComponents = undefined;
	        this.rowStyle = undefined;
	        this.context = undefined;
	        this.autoGroupColumnDef = undefined;
	        this.groupColumnDef = undefined;
	        this.localeText = undefined;
	        this.icons = undefined;
	        this.datasource = undefined;
	        this.serverSideDatasource = undefined;
	        this.viewportDatasource = undefined;
	        this.groupRowRendererParams = undefined;
	        this.aggFuncs = undefined;
	        this.fullWidthCellRendererParams = undefined;
	        this.defaultColGroupDef = undefined;
	        this.defaultColDef = undefined;
	        this.defaultExportParams = undefined;
	        this.columnTypes = undefined;
	        this.rowClassRules = undefined;
	        this.detailGridOptions = undefined;
	        this.detailCellRendererParams = undefined;
	        this.loadingOverlayComponentParams = undefined;
	        this.noRowsOverlayComponentParams = undefined;
	        this.popupParent = undefined;
	        this.sortingOrder = undefined;
	        this.rowClass = undefined;
	        this.rowSelection = undefined;
	        this.overlayLoadingTemplate = undefined;
	        this.overlayNoRowsTemplate = undefined;
	        this.quickFilterText = undefined;
	        this.rowModelType = undefined;
	        this.editType = undefined;
	        this.domLayout = undefined;
	        this.clipboardDeliminator = undefined;
	        this.rowGroupPanelShow = undefined;
	        this.multiSortKey = undefined;
	        this.rowHeight = undefined;
	        this.detailRowHeight = undefined;
	        this.rowBuffer = undefined;
	        this.colWidth = undefined;
	        this.headerHeight = undefined;
	        this.groupHeaderHeight = undefined;
	        this.floatingFiltersHeight = undefined;
	        this.pivotHeaderHeight = undefined;
	        this.pivotGroupHeaderHeight = undefined;
	        this.groupDefaultExpanded = undefined;
	        this.minColWidth = undefined;
	        this.maxColWidth = undefined;
	        this.viewportRowModelPageSize = undefined;
	        this.viewportRowModelBufferSize = undefined;
	        this.autoSizePadding = undefined;
	        this.maxBlocksInCache = undefined;
	        this.maxConcurrentDatasourceRequests = undefined;
	        this.cacheOverflowSize = undefined;
	        this.paginationPageSize = undefined;
	        this.cacheBlockSize = undefined;
	        this.infiniteInitialRowCount = undefined;
	        this.scrollbarWidth = undefined;
	        this.paginationStartPage = undefined;
	        this.infiniteBlockSize = undefined;
	        this.batchUpdateWaitMillis = undefined;
	        this.localeTextFunc = undefined;
	        this.groupRowInnerRenderer = undefined;
	        this.groupRowInnerRendererFramework = undefined;
	        this.dateComponent = undefined;
	        this.dateComponentFramework = undefined;
	        this.groupRowRenderer = undefined;
	        this.groupRowRendererFramework = undefined;
	        this.isExternalFilterPresent = undefined;
	        this.getRowHeight = undefined;
	        this.doesExternalFilterPass = undefined;
	        this.getRowClass = undefined;
	        this.getRowStyle = undefined;
	        this.getRowClassRules = undefined;
	        this.traverseNode = undefined;
	        this.getContextMenuItems = undefined;
	        this.getMainMenuItems = undefined;
	        this.processRowPostCreate = undefined;
	        this.processCellForClipboard = undefined;
	        this.getNodeChildDetails = undefined;
	        this.groupRowAggNodes = undefined;
	        this.getRowNodeId = undefined;
	        this.isFullWidthCell = undefined;
	        this.fullWidthCellRenderer = undefined;
	        this.fullWidthCellRendererFramework = undefined;
	        this.doesDataFlower = undefined;
	        this.processSecondaryColDef = undefined;
	        this.processSecondaryColGroupDef = undefined;
	        this.getBusinessKeyForNode = undefined;
	        this.sendToClipboard = undefined;
	        this.navigateToNextCell = undefined;
	        this.processDataFromClipboard = undefined;
	        this.tabToNextCell = undefined;
	        this.getDetailRowData = undefined;
	        this.processCellFromClipboard = undefined;
	        this.getDocument = undefined;
	        this.postProcessPopup = undefined;
	        this.getChildCount = undefined;
	        this.getDataPath = undefined;
	        this.loadingOverlayComponent = undefined;
	        this.loadingOverlayComponentFramework = undefined;
	        this.noRowsOverlayComponent = undefined;
	        this.noRowsOverlayComponentFramework = undefined;
	        this.detailCellRenderer = undefined;
	        this.detailCellRendererFramework = undefined;
	        this.onGridReady = undefined;
	        this.defaultGroupSortComparator = undefined;
	        this.isRowMaster = undefined;
	        this.isRowSelectable = undefined;
	        this.postSort = undefined;
	        this.processHeaderForClipboard = undefined;
	        this.paginationNumberFormatter = undefined;
	        this.toolPanelSuppressRowGroups = undefined;
	        this.toolPanelSuppressValues = undefined;
	        this.toolPanelSuppressPivots = undefined;
	        this.toolPanelSuppressPivotMode = undefined;
	        this.toolPanelSuppressSideButtons = undefined;
	        this.toolPanelSuppressColumnFilter = undefined;
	        this.toolPanelSuppressColumnSelectAll = undefined;
	        this.toolPanelSuppressColumnExpandAll = undefined;
	        this.suppressMakeColumnVisibleAfterUnGroup = undefined;
	        this.suppressRowClickSelection = undefined;
	        this.suppressCellSelection = undefined;
	        this.suppressHorizontalScroll = undefined;
	        this.debug = undefined;
	        this.enableColResize = undefined;
	        this.enableCellExpressions = undefined;
	        this.enableSorting = undefined;
	        this.enableServerSideSorting = undefined;
	        this.enableFilter = undefined;
	        this.enableServerSideFilter = undefined;
	        this.angularCompileRows = undefined;
	        this.angularCompileFilters = undefined;
	        this.angularCompileHeaders = undefined;
	        this.groupSuppressAutoColumn = undefined;
	        this.groupSelectsChildren = undefined;
	        this.groupIncludeFooter = undefined;
	        this.groupIncludeTotalFooter = undefined;
	        this.groupUseEntireRow = undefined;
	        this.groupSuppressRow = undefined;
	        this.groupSuppressBlankHeader = undefined;
	        this.forPrint = undefined;
	        this.suppressMenuHide = undefined;
	        this.rowDeselection = undefined;
	        this.unSortIcon = undefined;
	        this.suppressMultiSort = undefined;
	        this.singleClickEdit = undefined;
	        this.suppressLoadingOverlay = undefined;
	        this.suppressNoRowsOverlay = undefined;
	        this.suppressAutoSize = undefined;
	        this.suppressParentsInRowNodes = undefined;
	        this.showToolPanel = undefined;
	        this.suppressColumnMoveAnimation = undefined;
	        this.suppressMovableColumns = undefined;
	        this.suppressFieldDotNotation = undefined;
	        this.enableRangeSelection = undefined;
	        this.pivotPanelShow = undefined;
	        this.suppressTouch = undefined;
	        this.suppressAsyncEvents = undefined;
	        this.allowContextMenuWithControlKey = undefined;
	        this.suppressContextMenu = undefined;
	        this.suppressMenuFilterPanel = undefined;
	        this.suppressMenuMainPanel = undefined;
	        this.suppressMenuColumnPanel = undefined;
	        this.enableStatusBar = undefined;
	        this.alwaysShowStatusBar = undefined;
	        this.rememberGroupStateWhenNewData = undefined;
	        this.enableCellChangeFlash = undefined;
	        this.suppressDragLeaveHidesColumns = undefined;
	        this.suppressMiddleClickScrolls = undefined;
	        this.suppressPreventDefaultOnMouseWheel = undefined;
	        this.suppressUseColIdForGroups = undefined;
	        this.suppressCopyRowsToClipboard = undefined;
	        this.pivotMode = undefined;
	        this.suppressAggFuncInHeader = undefined;
	        this.suppressClipboardPaste = undefined;
	        this.suppressColumnVirtualisation = undefined;
	        this.suppressAggAtRootLevel = undefined;
	        this.suppressFocusAfterRefresh = undefined;
	        this.functionsPassive = undefined;
	        this.functionsReadOnly = undefined;
	        this.animateRows = undefined;
	        this.groupSelectsFiltered = undefined;
	        this.groupRemoveSingleChildren = undefined;
	        this.groupRemoveLowestSingleChildren = undefined;
	        this.enableRtl = undefined;
	        this.suppressClickEdit = undefined;
	        this.rowDragManaged = undefined;
	        this.suppressRowDrag = undefined;
	        this.enableGroupEdit = undefined;
	        this.embedFullWidthRows = undefined;
	        this.suppressTabbing = undefined;
	        this.suppressPaginationPanel = undefined;
	        this.floatingFilter = undefined;
	        this.groupHideOpenParents = undefined;
	        this.groupMultiAutoColumn = undefined;
	        this.pagination = undefined;
	        this.stopEditingWhenGridLosesFocus = undefined;
	        this.paginationAutoPageSize = undefined;
	        this.suppressScrollOnNewData = undefined;
	        this.purgeClosedRowNodes = undefined;
	        this.cacheQuickFilter = undefined;
	        this.deltaRowDataMode = undefined;
	        this.ensureDomOrder = undefined;
	        this.accentedSort = undefined;
	        this.pivotTotals = undefined;
	        this.pivotColumnGroupTotals = undefined;
	        this.pivotRowTotals = undefined;
	        this.suppressChangeDetection = undefined;
	        this.suppressRowTransform = undefined;
	        this.valueCache = undefined;
	        this.valueCacheNeverExpires = undefined;
	        this.aggregateOnlyChangedColumns = undefined;
	        this.suppressAnimationFrame = undefined;
	        this.suppressExcelExport = undefined;
	        this.suppressCsvExport = undefined;
	        this.treeData = undefined;
	        this.masterDetail = undefined;
	        this.suppressMultiRangeSelection = undefined;
	        this.enterMovesDownAfterEdit = undefined;
	        this.enterMovesDown = undefined;
	        this.suppressPropertyNamesCheck = undefined;
	        this.rowMultiSelectWithClick = undefined;
	        this.contractColumnSelection = undefined;
	        this.suppressEnterpriseResetOnNewColumns = undefined;
	        this.enableOldSetFilterModel = undefined;
	        this.suppressRowHoverHighlight = undefined;
	        this.gridAutoHeight = undefined;
	        this.serverSideSortingAlwaysResets = undefined;
	        this.columnEverythingChanged = new core.EventEmitter();
	        this.newColumnsLoaded = new core.EventEmitter();
	        this.columnPivotModeChanged = new core.EventEmitter();
	        this.columnRowGroupChanged = new core.EventEmitter();
	        this.columnPivotChanged = new core.EventEmitter();
	        this.gridColumnsChanged = new core.EventEmitter();
	        this.columnValueChanged = new core.EventEmitter();
	        this.columnMoved = new core.EventEmitter();
	        this.columnVisible = new core.EventEmitter();
	        this.columnPinned = new core.EventEmitter();
	        this.columnGroupOpened = new core.EventEmitter();
	        this.columnResized = new core.EventEmitter();
	        this.displayedColumnsChanged = new core.EventEmitter();
	        this.virtualColumnsChanged = new core.EventEmitter();
	        this.rowGroupOpened = new core.EventEmitter();
	        this.rowDataChanged = new core.EventEmitter();
	        this.rowDataUpdated = new core.EventEmitter();
	        this.pinnedRowDataChanged = new core.EventEmitter();
	        this.rangeSelectionChanged = new core.EventEmitter();
	        this.toolPanelVisibleChanged = new core.EventEmitter();
	        this.modelUpdated = new core.EventEmitter();
	        this.cellClicked = new core.EventEmitter();
	        this.cellDoubleClicked = new core.EventEmitter();
	        this.cellMouseDown = new core.EventEmitter();
	        this.cellContextMenu = new core.EventEmitter();
	        this.cellValueChanged = new core.EventEmitter();
	        this.rowValueChanged = new core.EventEmitter();
	        this.cellFocused = new core.EventEmitter();
	        this.rowSelected = new core.EventEmitter();
	        this.selectionChanged = new core.EventEmitter();
	        this.cellMouseOver = new core.EventEmitter();
	        this.cellMouseOut = new core.EventEmitter();
	        this.filterChanged = new core.EventEmitter();
	        this.filterModified = new core.EventEmitter();
	        this.sortChanged = new core.EventEmitter();
	        this.virtualRowRemoved = new core.EventEmitter();
	        this.rowClicked = new core.EventEmitter();
	        this.rowDoubleClicked = new core.EventEmitter();
	        this.gridReady = new core.EventEmitter();
	        this.gridSizeChanged = new core.EventEmitter();
	        this.viewportChanged = new core.EventEmitter();
	        this.dragStarted = new core.EventEmitter();
	        this.dragStopped = new core.EventEmitter();
	        this.rowEditingStarted = new core.EventEmitter();
	        this.rowEditingStopped = new core.EventEmitter();
	        this.cellEditingStarted = new core.EventEmitter();
	        this.cellEditingStopped = new core.EventEmitter();
	        this.bodyScroll = new core.EventEmitter();
	        this.animationQueueEmpty = new core.EventEmitter();
	        this.heightScaleChanged = new core.EventEmitter();
	        this.paginationChanged = new core.EventEmitter();
	        this.componentStateChanged = new core.EventEmitter();
	        this.bodyHeightChanged = new core.EventEmitter();
	        this.displayedColumnsWidthChanged = new core.EventEmitter();
	        this.scrollVisibilityChanged = new core.EventEmitter();
	        this.columnHoverChanged = new core.EventEmitter();
	        this.flashCells = new core.EventEmitter();
	        this.viewportImpacted = new core.EventEmitter();
	        this.rowDragEnter = new core.EventEmitter();
	        this.rowDragMove = new core.EventEmitter();
	        this.rowDragLeave = new core.EventEmitter();
	        this.rowDragEnd = new core.EventEmitter();
	        this.pasteStart = new core.EventEmitter();
	        this.pasteEnd = new core.EventEmitter();
	        this.columnRowGroupChangeRequest = new core.EventEmitter();
	        this.columnPivotChangeRequest = new core.EventEmitter();
	        this.columnValueChangeRequest = new core.EventEmitter();
	        this.columnAggFuncChangeRequest = new core.EventEmitter();
	        this._nativeElement = elementDef.nativeElement;
	        this.ng2FrameworkFactory.setViewContainerRef(this.viewContainerRef);
	        this.frameworkComponentWrapper.setViewContainerRef(this.viewContainerRef);
	        this.frameworkComponentWrapper.setComponentFactoryResolver(this._componentFactoryResolver);
	    }
	    AgGridNg2.prototype.ngAfterViewInit = function () {
	        this.checkForDeprecatedEvents();
	        this.gridOptions = main.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this, true);
	        this.gridParams = {
	            globalEventListener: this.globalEventListener.bind(this),
	            frameworkFactory: this.ng2FrameworkFactory,
	            seedBeanInstances: {
	                frameworkComponentWrapper: this.frameworkComponentWrapper
	            }
	        };
	        if (this.columns && this.columns.length > 0) {
	            this.gridOptions.columnDefs = this.columns
	                .map(function (column) {
	                return column.toColDef();
	            });
	        }
	        new main.Grid(this._nativeElement, this.gridOptions, this.gridParams);
	        if (this.gridOptions.api) {
	            this.api = this.gridOptions.api;
	        }
	        if (this.gridOptions.columnApi) {
	            this.columnApi = this.gridOptions.columnApi;
	        }
	        this._initialised = true;
	        // sometimes, especially in large client apps gridReady can fire before ngAfterViewInit
	        // this ties these together so that gridReady will always fire after AgGridNg2's ngAfterViewInit
	        // the actual containing component's ngAfterViewInit will fire just after AgGridNg2's
	        this._fullyReady.resolveNow(null, function (resolve) { return resolve; });
	    };
	    AgGridNg2.prototype.ngOnChanges = function (changes) {
	        if (this._initialised) {
	            main.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
	        }
	    };
	    AgGridNg2.prototype.ngOnDestroy = function () {
	        if (this._initialised) {
	            // need to do this before the destroy, so we know not to emit any events
	            // while tearing down the grid.
	            this._destroyed = true;
	            if (this.api) {
	                this.api.destroy();
	            }
	        }
	    };
	    AgGridNg2.prototype.checkForDeprecatedEvents = function () {
	        var _this = this;
	        ag_grid_2.Utils.iterateObject(main.Events, function (key, eventName) {
	            if (_this[eventName] && _this[eventName].observers.length > 0) {
	                main.GridOptionsWrapper.checkEventDeprecation(eventName);
	            }
	        });
	    };
	    AgGridNg2.prototype.globalEventListener = function (eventType, event) {
	        // if we are tearing down, don't emit angular events, as this causes
	        // problems with the angular router
	        if (this._destroyed) {
	            return;
	        }
	        // generically look up the eventType
	        var emitter = this[eventType];
	        if (emitter) {
	            if (eventType === 'gridReady') {
	                // if the user is listening for gridReady, wait for ngAfterViewInit to fire first, then emit the
	                // gridReady event
	                this._fullyReady.then((function (result) {
	                    emitter.emit(event);
	                }));
	            }
	            else {
	                emitter.emit(event);
	            }
	        }
	        else {
	            console.log('ag-Grid-ng2: could not find EventEmitter: ' + eventType);
	        }
	    };
	    return AgGridNg2;
	}());
	// @END@
	AgGridNg2.decorators = [
	    { type: core.Component, args: [{
	                selector: 'ag-grid-angular',
	                template: '',
	                providers: [
	                    ng2FrameworkFactory.Ng2FrameworkFactory,
	                    ng2FrameworkComponentWrapper.Ng2FrameworkComponentWrapper
	                ],
	                // tell angular we don't want view encapsulation, we don't want a shadow root
	                encapsulation: core.ViewEncapsulation.None
	            },] },
	];
	/** @nocollapse */
	AgGridNg2.ctorParameters = function () { return [
	    { type: core.ElementRef, },
	    { type: core.ViewContainerRef, },
	    { type: ng2FrameworkFactory.Ng2FrameworkFactory, },
	    { type: ng2FrameworkComponentWrapper.Ng2FrameworkComponentWrapper, },
	    { type: core.ComponentFactoryResolver, },
	]; };
	AgGridNg2.propDecorators = {
	    'columns': [{ type: core.ContentChildren, args: [agGridColumn.AgGridColumn,] },],
	    'gridOptions': [{ type: core.Input },],
	    'colResizeDefault': [{ type: core.Input },],
	    'slaveGrids': [{ type: core.Input },],
	    'alignedGrids': [{ type: core.Input },],
	    'rowData': [{ type: core.Input },],
	    'columnDefs': [{ type: core.Input },],
	    'excelStyles': [{ type: core.Input },],
	    'pinnedTopRowData': [{ type: core.Input },],
	    'pinnedBottomRowData': [{ type: core.Input },],
	    'components': [{ type: core.Input },],
	    'frameworkComponents': [{ type: core.Input },],
	    'rowStyle': [{ type: core.Input },],
	    'context': [{ type: core.Input },],
	    'autoGroupColumnDef': [{ type: core.Input },],
	    'groupColumnDef': [{ type: core.Input },],
	    'localeText': [{ type: core.Input },],
	    'icons': [{ type: core.Input },],
	    'datasource': [{ type: core.Input },],
	    'serverSideDatasource': [{ type: core.Input },],
	    'viewportDatasource': [{ type: core.Input },],
	    'groupRowRendererParams': [{ type: core.Input },],
	    'aggFuncs': [{ type: core.Input },],
	    'fullWidthCellRendererParams': [{ type: core.Input },],
	    'defaultColGroupDef': [{ type: core.Input },],
	    'defaultColDef': [{ type: core.Input },],
	    'defaultExportParams': [{ type: core.Input },],
	    'columnTypes': [{ type: core.Input },],
	    'rowClassRules': [{ type: core.Input },],
	    'detailGridOptions': [{ type: core.Input },],
	    'detailCellRendererParams': [{ type: core.Input },],
	    'loadingOverlayComponentParams': [{ type: core.Input },],
	    'noRowsOverlayComponentParams': [{ type: core.Input },],
	    'popupParent': [{ type: core.Input },],
	    'sortingOrder': [{ type: core.Input },],
	    'rowClass': [{ type: core.Input },],
	    'rowSelection': [{ type: core.Input },],
	    'overlayLoadingTemplate': [{ type: core.Input },],
	    'overlayNoRowsTemplate': [{ type: core.Input },],
	    'quickFilterText': [{ type: core.Input },],
	    'rowModelType': [{ type: core.Input },],
	    'editType': [{ type: core.Input },],
	    'domLayout': [{ type: core.Input },],
	    'clipboardDeliminator': [{ type: core.Input },],
	    'rowGroupPanelShow': [{ type: core.Input },],
	    'multiSortKey': [{ type: core.Input },],
	    'rowHeight': [{ type: core.Input },],
	    'detailRowHeight': [{ type: core.Input },],
	    'rowBuffer': [{ type: core.Input },],
	    'colWidth': [{ type: core.Input },],
	    'headerHeight': [{ type: core.Input },],
	    'groupHeaderHeight': [{ type: core.Input },],
	    'floatingFiltersHeight': [{ type: core.Input },],
	    'pivotHeaderHeight': [{ type: core.Input },],
	    'pivotGroupHeaderHeight': [{ type: core.Input },],
	    'groupDefaultExpanded': [{ type: core.Input },],
	    'minColWidth': [{ type: core.Input },],
	    'maxColWidth': [{ type: core.Input },],
	    'viewportRowModelPageSize': [{ type: core.Input },],
	    'viewportRowModelBufferSize': [{ type: core.Input },],
	    'autoSizePadding': [{ type: core.Input },],
	    'maxBlocksInCache': [{ type: core.Input },],
	    'maxConcurrentDatasourceRequests': [{ type: core.Input },],
	    'cacheOverflowSize': [{ type: core.Input },],
	    'paginationPageSize': [{ type: core.Input },],
	    'cacheBlockSize': [{ type: core.Input },],
	    'infiniteInitialRowCount': [{ type: core.Input },],
	    'scrollbarWidth': [{ type: core.Input },],
	    'paginationStartPage': [{ type: core.Input },],
	    'infiniteBlockSize': [{ type: core.Input },],
	    'batchUpdateWaitMillis': [{ type: core.Input },],
	    'localeTextFunc': [{ type: core.Input },],
	    'groupRowInnerRenderer': [{ type: core.Input },],
	    'groupRowInnerRendererFramework': [{ type: core.Input },],
	    'dateComponent': [{ type: core.Input },],
	    'dateComponentFramework': [{ type: core.Input },],
	    'groupRowRenderer': [{ type: core.Input },],
	    'groupRowRendererFramework': [{ type: core.Input },],
	    'isExternalFilterPresent': [{ type: core.Input },],
	    'getRowHeight': [{ type: core.Input },],
	    'doesExternalFilterPass': [{ type: core.Input },],
	    'getRowClass': [{ type: core.Input },],
	    'getRowStyle': [{ type: core.Input },],
	    'getRowClassRules': [{ type: core.Input },],
	    'traverseNode': [{ type: core.Input },],
	    'getContextMenuItems': [{ type: core.Input },],
	    'getMainMenuItems': [{ type: core.Input },],
	    'processRowPostCreate': [{ type: core.Input },],
	    'processCellForClipboard': [{ type: core.Input },],
	    'getNodeChildDetails': [{ type: core.Input },],
	    'groupRowAggNodes': [{ type: core.Input },],
	    'getRowNodeId': [{ type: core.Input },],
	    'isFullWidthCell': [{ type: core.Input },],
	    'fullWidthCellRenderer': [{ type: core.Input },],
	    'fullWidthCellRendererFramework': [{ type: core.Input },],
	    'doesDataFlower': [{ type: core.Input },],
	    'processSecondaryColDef': [{ type: core.Input },],
	    'processSecondaryColGroupDef': [{ type: core.Input },],
	    'getBusinessKeyForNode': [{ type: core.Input },],
	    'sendToClipboard': [{ type: core.Input },],
	    'navigateToNextCell': [{ type: core.Input },],
	    'processDataFromClipboard': [{ type: core.Input },],
	    'tabToNextCell': [{ type: core.Input },],
	    'getDetailRowData': [{ type: core.Input },],
	    'processCellFromClipboard': [{ type: core.Input },],
	    'getDocument': [{ type: core.Input },],
	    'postProcessPopup': [{ type: core.Input },],
	    'getChildCount': [{ type: core.Input },],
	    'getDataPath': [{ type: core.Input },],
	    'loadingOverlayComponent': [{ type: core.Input },],
	    'loadingOverlayComponentFramework': [{ type: core.Input },],
	    'noRowsOverlayComponent': [{ type: core.Input },],
	    'noRowsOverlayComponentFramework': [{ type: core.Input },],
	    'detailCellRenderer': [{ type: core.Input },],
	    'detailCellRendererFramework': [{ type: core.Input },],
	    'onGridReady': [{ type: core.Input },],
	    'defaultGroupSortComparator': [{ type: core.Input },],
	    'isRowMaster': [{ type: core.Input },],
	    'isRowSelectable': [{ type: core.Input },],
	    'postSort': [{ type: core.Input },],
	    'processHeaderForClipboard': [{ type: core.Input },],
	    'paginationNumberFormatter': [{ type: core.Input },],
	    'toolPanelSuppressRowGroups': [{ type: core.Input },],
	    'toolPanelSuppressValues': [{ type: core.Input },],
	    'toolPanelSuppressPivots': [{ type: core.Input },],
	    'toolPanelSuppressPivotMode': [{ type: core.Input },],
	    'toolPanelSuppressSideButtons': [{ type: core.Input },],
	    'toolPanelSuppressColumnFilter': [{ type: core.Input },],
	    'toolPanelSuppressColumnSelectAll': [{ type: core.Input },],
	    'toolPanelSuppressColumnExpandAll': [{ type: core.Input },],
	    'suppressMakeColumnVisibleAfterUnGroup': [{ type: core.Input },],
	    'suppressRowClickSelection': [{ type: core.Input },],
	    'suppressCellSelection': [{ type: core.Input },],
	    'suppressHorizontalScroll': [{ type: core.Input },],
	    'debug': [{ type: core.Input },],
	    'enableColResize': [{ type: core.Input },],
	    'enableCellExpressions': [{ type: core.Input },],
	    'enableSorting': [{ type: core.Input },],
	    'enableServerSideSorting': [{ type: core.Input },],
	    'enableFilter': [{ type: core.Input },],
	    'enableServerSideFilter': [{ type: core.Input },],
	    'angularCompileRows': [{ type: core.Input },],
	    'angularCompileFilters': [{ type: core.Input },],
	    'angularCompileHeaders': [{ type: core.Input },],
	    'groupSuppressAutoColumn': [{ type: core.Input },],
	    'groupSelectsChildren': [{ type: core.Input },],
	    'groupIncludeFooter': [{ type: core.Input },],
	    'groupIncludeTotalFooter': [{ type: core.Input },],
	    'groupUseEntireRow': [{ type: core.Input },],
	    'groupSuppressRow': [{ type: core.Input },],
	    'groupSuppressBlankHeader': [{ type: core.Input },],
	    'forPrint': [{ type: core.Input },],
	    'suppressMenuHide': [{ type: core.Input },],
	    'rowDeselection': [{ type: core.Input },],
	    'unSortIcon': [{ type: core.Input },],
	    'suppressMultiSort': [{ type: core.Input },],
	    'singleClickEdit': [{ type: core.Input },],
	    'suppressLoadingOverlay': [{ type: core.Input },],
	    'suppressNoRowsOverlay': [{ type: core.Input },],
	    'suppressAutoSize': [{ type: core.Input },],
	    'suppressParentsInRowNodes': [{ type: core.Input },],
	    'showToolPanel': [{ type: core.Input },],
	    'suppressColumnMoveAnimation': [{ type: core.Input },],
	    'suppressMovableColumns': [{ type: core.Input },],
	    'suppressFieldDotNotation': [{ type: core.Input },],
	    'enableRangeSelection': [{ type: core.Input },],
	    'pivotPanelShow': [{ type: core.Input },],
	    'suppressTouch': [{ type: core.Input },],
	    'suppressAsyncEvents': [{ type: core.Input },],
	    'allowContextMenuWithControlKey': [{ type: core.Input },],
	    'suppressContextMenu': [{ type: core.Input },],
	    'suppressMenuFilterPanel': [{ type: core.Input },],
	    'suppressMenuMainPanel': [{ type: core.Input },],
	    'suppressMenuColumnPanel': [{ type: core.Input },],
	    'enableStatusBar': [{ type: core.Input },],
	    'alwaysShowStatusBar': [{ type: core.Input },],
	    'rememberGroupStateWhenNewData': [{ type: core.Input },],
	    'enableCellChangeFlash': [{ type: core.Input },],
	    'suppressDragLeaveHidesColumns': [{ type: core.Input },],
	    'suppressMiddleClickScrolls': [{ type: core.Input },],
	    'suppressPreventDefaultOnMouseWheel': [{ type: core.Input },],
	    'suppressUseColIdForGroups': [{ type: core.Input },],
	    'suppressCopyRowsToClipboard': [{ type: core.Input },],
	    'pivotMode': [{ type: core.Input },],
	    'suppressAggFuncInHeader': [{ type: core.Input },],
	    'suppressClipboardPaste': [{ type: core.Input },],
	    'suppressColumnVirtualisation': [{ type: core.Input },],
	    'suppressAggAtRootLevel': [{ type: core.Input },],
	    'suppressFocusAfterRefresh': [{ type: core.Input },],
	    'functionsPassive': [{ type: core.Input },],
	    'functionsReadOnly': [{ type: core.Input },],
	    'animateRows': [{ type: core.Input },],
	    'groupSelectsFiltered': [{ type: core.Input },],
	    'groupRemoveSingleChildren': [{ type: core.Input },],
	    'groupRemoveLowestSingleChildren': [{ type: core.Input },],
	    'enableRtl': [{ type: core.Input },],
	    'suppressClickEdit': [{ type: core.Input },],
	    'rowDragManaged': [{ type: core.Input },],
	    'suppressRowDrag': [{ type: core.Input },],
	    'enableGroupEdit': [{ type: core.Input },],
	    'embedFullWidthRows': [{ type: core.Input },],
	    'suppressTabbing': [{ type: core.Input },],
	    'suppressPaginationPanel': [{ type: core.Input },],
	    'floatingFilter': [{ type: core.Input },],
	    'groupHideOpenParents': [{ type: core.Input },],
	    'groupMultiAutoColumn': [{ type: core.Input },],
	    'pagination': [{ type: core.Input },],
	    'stopEditingWhenGridLosesFocus': [{ type: core.Input },],
	    'paginationAutoPageSize': [{ type: core.Input },],
	    'suppressScrollOnNewData': [{ type: core.Input },],
	    'purgeClosedRowNodes': [{ type: core.Input },],
	    'cacheQuickFilter': [{ type: core.Input },],
	    'deltaRowDataMode': [{ type: core.Input },],
	    'ensureDomOrder': [{ type: core.Input },],
	    'accentedSort': [{ type: core.Input },],
	    'pivotTotals': [{ type: core.Input },],
	    'pivotColumnGroupTotals': [{ type: core.Input },],
	    'pivotRowTotals': [{ type: core.Input },],
	    'suppressChangeDetection': [{ type: core.Input },],
	    'suppressRowTransform': [{ type: core.Input },],
	    'valueCache': [{ type: core.Input },],
	    'valueCacheNeverExpires': [{ type: core.Input },],
	    'aggregateOnlyChangedColumns': [{ type: core.Input },],
	    'suppressAnimationFrame': [{ type: core.Input },],
	    'suppressExcelExport': [{ type: core.Input },],
	    'suppressCsvExport': [{ type: core.Input },],
	    'treeData': [{ type: core.Input },],
	    'masterDetail': [{ type: core.Input },],
	    'suppressMultiRangeSelection': [{ type: core.Input },],
	    'enterMovesDownAfterEdit': [{ type: core.Input },],
	    'enterMovesDown': [{ type: core.Input },],
	    'suppressPropertyNamesCheck': [{ type: core.Input },],
	    'rowMultiSelectWithClick': [{ type: core.Input },],
	    'contractColumnSelection': [{ type: core.Input },],
	    'suppressEnterpriseResetOnNewColumns': [{ type: core.Input },],
	    'enableOldSetFilterModel': [{ type: core.Input },],
	    'suppressRowHoverHighlight': [{ type: core.Input },],
	    'gridAutoHeight': [{ type: core.Input },],
	    'serverSideSortingAlwaysResets': [{ type: core.Input },],
	    'columnEverythingChanged': [{ type: core.Output },],
	    'newColumnsLoaded': [{ type: core.Output },],
	    'columnPivotModeChanged': [{ type: core.Output },],
	    'columnRowGroupChanged': [{ type: core.Output },],
	    'columnPivotChanged': [{ type: core.Output },],
	    'gridColumnsChanged': [{ type: core.Output },],
	    'columnValueChanged': [{ type: core.Output },],
	    'columnMoved': [{ type: core.Output },],
	    'columnVisible': [{ type: core.Output },],
	    'columnPinned': [{ type: core.Output },],
	    'columnGroupOpened': [{ type: core.Output },],
	    'columnResized': [{ type: core.Output },],
	    'displayedColumnsChanged': [{ type: core.Output },],
	    'virtualColumnsChanged': [{ type: core.Output },],
	    'rowGroupOpened': [{ type: core.Output },],
	    'rowDataChanged': [{ type: core.Output },],
	    'rowDataUpdated': [{ type: core.Output },],
	    'pinnedRowDataChanged': [{ type: core.Output },],
	    'rangeSelectionChanged': [{ type: core.Output },],
	    'toolPanelVisibleChanged': [{ type: core.Output },],
	    'modelUpdated': [{ type: core.Output },],
	    'cellClicked': [{ type: core.Output },],
	    'cellDoubleClicked': [{ type: core.Output },],
	    'cellMouseDown': [{ type: core.Output },],
	    'cellContextMenu': [{ type: core.Output },],
	    'cellValueChanged': [{ type: core.Output },],
	    'rowValueChanged': [{ type: core.Output },],
	    'cellFocused': [{ type: core.Output },],
	    'rowSelected': [{ type: core.Output },],
	    'selectionChanged': [{ type: core.Output },],
	    'cellMouseOver': [{ type: core.Output },],
	    'cellMouseOut': [{ type: core.Output },],
	    'filterChanged': [{ type: core.Output },],
	    'filterModified': [{ type: core.Output },],
	    'sortChanged': [{ type: core.Output },],
	    'virtualRowRemoved': [{ type: core.Output },],
	    'rowClicked': [{ type: core.Output },],
	    'rowDoubleClicked': [{ type: core.Output },],
	    'gridReady': [{ type: core.Output },],
	    'gridSizeChanged': [{ type: core.Output },],
	    'viewportChanged': [{ type: core.Output },],
	    'dragStarted': [{ type: core.Output },],
	    'dragStopped': [{ type: core.Output },],
	    'rowEditingStarted': [{ type: core.Output },],
	    'rowEditingStopped': [{ type: core.Output },],
	    'cellEditingStarted': [{ type: core.Output },],
	    'cellEditingStopped': [{ type: core.Output },],
	    'bodyScroll': [{ type: core.Output },],
	    'animationQueueEmpty': [{ type: core.Output },],
	    'heightScaleChanged': [{ type: core.Output },],
	    'paginationChanged': [{ type: core.Output },],
	    'componentStateChanged': [{ type: core.Output },],
	    'bodyHeightChanged': [{ type: core.Output },],
	    'displayedColumnsWidthChanged': [{ type: core.Output },],
	    'scrollVisibilityChanged': [{ type: core.Output },],
	    'columnHoverChanged': [{ type: core.Output },],
	    'flashCells': [{ type: core.Output },],
	    'viewportImpacted': [{ type: core.Output },],
	    'rowDragEnter': [{ type: core.Output },],
	    'rowDragMove': [{ type: core.Output },],
	    'rowDragLeave': [{ type: core.Output },],
	    'rowDragEnd': [{ type: core.Output },],
	    'pasteStart': [{ type: core.Output },],
	    'pasteEnd': [{ type: core.Output },],
	    'columnRowGroupChangeRequest': [{ type: core.Output },],
	    'columnPivotChangeRequest': [{ type: core.Output },],
	    'columnValueChangeRequest': [{ type: core.Output },],
	    'columnAggFuncChangeRequest': [{ type: core.Output },],
	};
	exports.AgGridNg2 = AgGridNg2;

	});

	unwrapExports(agGridNg2);
	var agGridNg2_1 = agGridNg2.AgGridNg2;

	var ng2ComponentFactory = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var Ng2ComponentFactory = (function (_super) {
	    __extends(Ng2ComponentFactory, _super);
	    function Ng2ComponentFactory(_componentFactoryResolver) {
	        var _this = _super.call(this) || this;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        return _this;
	    }
	    Ng2ComponentFactory.prototype.createFilterFromComponent = function (componentType, viewContainerRef) {
	        return this.adaptComponentToFilter(componentType, viewContainerRef);
	    };
	    Ng2ComponentFactory.prototype.adaptComponentToFilter = function (componentType, viewContainerRef) {
	        var that = this;
	        var Filter = (function (_super) {
	            __extends(Filter, _super);
	            function Filter() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            Filter.prototype.init = function (params) {
	                _super.prototype.init.call(this, params);
	                this._componentRef.changeDetectorRef.detectChanges();
	            };
	            Filter.prototype.isFilterActive = function () {
	                return this._agAwareComponent.isFilterActive();
	            };
	            Filter.prototype.doesFilterPass = function (params) {
	                return this._agAwareComponent.doesFilterPass(params);
	            };
	            Filter.prototype.getModel = function () {
	                return this._agAwareComponent.getModel();
	            };
	            Filter.prototype.setModel = function (model) {
	                this._agAwareComponent.setModel(model);
	            };
	            Filter.prototype.afterGuiAttached = function (params) {
	                if (this._agAwareComponent.afterGuiAttached) {
	                    this._agAwareComponent.afterGuiAttached(params);
	                }
	            };
	            Filter.prototype.onNewRowsLoaded = function () {
	                if (this._agAwareComponent.onNewRowsLoaded) {
	                    this._agAwareComponent.onNewRowsLoaded();
	                }
	            };
	            Filter.prototype.getModelAsString = function (model) {
	                var agAwareComponent = this._agAwareComponent;
	                if (agAwareComponent.getModelAsString) {
	                    return agAwareComponent.getModelAsString(model);
	                }
	                return null;
	            };
	            Filter.prototype.getFrameworkComponentInstance = function () {
	                return this._frameworkComponentInstance;
	            };
	            Filter.prototype.createComponent = function () {
	                return that.createComponent(componentType, viewContainerRef);
	            };
	            return Filter;
	        }(BaseGuiComponent));
	        return Filter;
	    };
	    Ng2ComponentFactory.prototype.createComponent = function (componentType, viewContainerRef) {
	        // used to cache the factory, but this a) caused issues when used with either webpack/angularcli with --prod
	        // but more significantly, the underlying implementation of resolveComponentFactory uses a map too, so us
	        // caching the factory here yields no performance benefits
	        var factory = this._componentFactoryResolver.resolveComponentFactory(componentType);
	        return viewContainerRef.createComponent(factory);
	    };
	    return Ng2ComponentFactory;
	}(baseComponentFactory.BaseComponentFactory));
	Ng2ComponentFactory.decorators = [
	    { type: core.Injectable },
	];
	/** @nocollapse */
	Ng2ComponentFactory.ctorParameters = function () { return [
	    { type: core.ComponentFactoryResolver, },
	]; };
	exports.Ng2ComponentFactory = Ng2ComponentFactory;
	var BaseGuiComponent = (function () {
	    function BaseGuiComponent() {
	    }
	    BaseGuiComponent.prototype.init = function (params) {
	        this._params = params;
	        this._componentRef = this.createComponent();
	        this._agAwareComponent = this._componentRef.instance;
	        this._frameworkComponentInstance = this._componentRef.instance;
	        this._eGui = this._componentRef.location.nativeElement;
	        this._agAwareComponent.agInit(this._params);
	    };
	    BaseGuiComponent.prototype.getGui = function () {
	        return this._eGui;
	    };
	    BaseGuiComponent.prototype.destroy = function () {
	        if (this._componentRef) {
	            this._componentRef.destroy();
	        }
	    };
	    BaseGuiComponent.prototype.getFrameworkComponentInstance = function () {
	        return this._frameworkComponentInstance;
	    };
	    return BaseGuiComponent;
	}());

	});

	unwrapExports(ng2ComponentFactory);
	var ng2ComponentFactory_1 = ng2ComponentFactory.Ng2ComponentFactory;

	var aggrid_module = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var core_2 = core;




	var AgGridModule = (function () {
	    function AgGridModule() {
	    }
	    AgGridModule.withComponents = function (components) {
	        return {
	            ngModule: AgGridModule,
	            providers: [
	                ng2ComponentFactory.Ng2ComponentFactory,
	                { provide: baseComponentFactory.BaseComponentFactory, useExisting: ng2ComponentFactory.Ng2ComponentFactory },
	                { provide: core_2.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
	            ],
	        };
	    };
	    AgGridModule.forRoot = function () {
	        console.warn("AgGridModule.forRoot() is deprecated - please use AgGridModule.withComponents([...optional components...]) instead.");
	        return {
	            ngModule: AgGridModule,
	            providers: [
	                ng2ComponentFactory.Ng2ComponentFactory,
	                { provide: baseComponentFactory.BaseComponentFactory, useExisting: ng2ComponentFactory.Ng2ComponentFactory }
	            ],
	        };
	    };
	    return AgGridModule;
	}());
	AgGridModule.decorators = [
	    { type: core.NgModule, args: [{
	                imports: [],
	                declarations: [
	                    agGridNg2.AgGridNg2,
	                    agGridColumn.AgGridColumn
	                ],
	                exports: [
	                    agGridNg2.AgGridNg2,
	                    agGridColumn.AgGridColumn
	                ]
	            },] },
	];
	/** @nocollapse */
	AgGridModule.ctorParameters = function () { return []; };
	exports.AgGridModule = AgGridModule;

	});

	unwrapExports(aggrid_module);
	var aggrid_module_1 = aggrid_module.AgGridModule;

	var main$2 = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(aggrid_module);
	__export(agGridColumn);
	__export(agGridNg2);
	__export(baseComponentFactory);
	__export(ng2ComponentFactory);
	__export(ng2FrameworkFactory);
	__export(ng2FrameworkComponentWrapper);

	});

	unwrapExports(main$2);
	var main_1$1 = main$2.AgGridModule;

	console.log('imported ag grid', main_1$1);

	console.log("Hello World");

})));
